jobs:
- job: linux_64
  condition: not(eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: ubuntu-16.04
  strategy:
    maxParallel: 8
    matrix:
      linux:
        CONFIG: linux64
        IMAGE_NAME: quay.io/condaforge/linux-anvil-comp7
        AZURE: True
  timeoutInMinutes: 360
  steps:
  - script: |
      # sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies

  - script: |
      set -e

      # make sure there is a package directory so that artifact publishing works
      mkdir -p build_artifacts/linux-64/

      export CI=azure
      .scripts/run_docker_build.sh

    displayName: Run docker build
    name: linux_64_build
  - publish: build_artifacts/linux-64/
    artifact: conda_pkgs_linux

- job: linux_64_cuda_92
  dependsOn: linux_64
  condition: and(not(eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(dependencies.linux_64.outputs['linux_64_build.NEED_CUDA'], '1'))
  pool:
    vmImage: ubuntu-16.04
  strategy:
    maxParallel: 8
    matrix:
      linux:
        CONFIG: linux64
        IMAGE_NAME: quay.io/condaforge/linux-anvil-cuda:9.2
        AZURE: True
        CF_CUDA_VERSION: "9.2"
  timeoutInMinutes: 360
  steps:
  - script: |
      # sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies

  - script: |
      set -e

      # make sure there is a package directory so that artifact publishing works
      mkdir -p build_artifacts/linux-64/

      export CI=azure
      .scripts/run_docker_build.sh

    displayName: Run docker build for CUDA 9.2
  - publish: build_artifacts/linux-64/
    artifact: conda_pkgs_linux

- job: linux_64_cuda_100
  dependsOn: linux_64
  condition: and(not(eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(dependencies.linux_64.outputs['linux_64_build.NEED_CUDA'], '1'))
  pool:
    vmImage: ubuntu-16.04
  strategy:
    maxParallel: 8
    matrix:
      linux:
        CONFIG: linux64
        IMAGE_NAME: quay.io/condaforge/linux-anvil-cuda:10.0
        AZURE: True
        CF_CUDA_VERSION: "10.0"
  timeoutInMinutes: 360
  steps:
  - script: |
      # sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies

  - script: |
      set -e

      # make sure there is a package directory so that artifact publishing works
      mkdir -p build_artifacts/linux-64/

      export CI=azure
      .scripts/run_docker_build.sh

    displayName: Run docker build for CUDA 10.0
  - publish: build_artifacts/linux-64/
    artifact: conda_pkgs_linux

- job: linux_64_cuda_101
  dependsOn: linux_64
  condition: and(not(eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(dependencies.linux_64.outputs['linux_64_build.NEED_CUDA'], '1'))
  pool:
    vmImage: ubuntu-16.04
  strategy:
    maxParallel: 8
    matrix:
      linux:
        CONFIG: linux64
        IMAGE_NAME: quay.io/condaforge/linux-anvil-cuda:10.1
        AZURE: True
        CF_CUDA_VERSION: "10.1"
  timeoutInMinutes: 360
  steps:
  - script: |
      # sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies

  - script: |
      set -e

      # make sure there is a package directory so that artifact publishing works
      mkdir -p build_artifacts/linux-64/

      export CI=azure
      .scripts/run_docker_build.sh

    displayName: Run docker build for CUDA 10.1
  - publish: build_artifacts/linux-64/
    artifact: conda_pkgs_linux

- job: linux_64_cuda_102
  dependsOn: linux_64
  condition: and(not(eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(dependencies.linux_64.outputs['linux_64_build.NEED_CUDA'], '1'))
  pool:
    vmImage: ubuntu-16.04
  strategy:
    maxParallel: 8
    matrix:
      linux:
        CONFIG: linux64
        IMAGE_NAME: quay.io/condaforge/linux-anvil-cuda:10.2
        AZURE: True
        CF_CUDA_VERSION: "10.2"
  timeoutInMinutes: 360
  steps:
  - script: |
      # sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies

  - script: |
      set -e

      # make sure there is a package directory so that artifact publishing works
      mkdir -p build_artifacts/linux-64/

      export CI=azure
      .scripts/run_docker_build.sh

    displayName: Run docker build for CUDA 10.2
  - publish: build_artifacts/linux-64/
    artifact: conda_pkgs_linux

