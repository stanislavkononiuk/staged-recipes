{% set version = "2.1.1" %}

package:
  name: podman
  version: {{ version }}

source:
  url: https://github.com/containers/podman/archive/v{{ version }}.tar.gz
  sha256: 5ebaa6e0dbd7fd1863f70d2bc71dc8a94e195c3339c17e3cac4560c9ec5747f8
  folder: src
  patches:
    # NOTE: This adds the memfd_create syscall which is not available on CentOS 6's kernels.
    - 0001-Add-missing-defines-for-CentOS-6.patch
    - 0002-Use-CPP-CC-and-flags-in-dep-check-scripts.patch
    # NOTE: If the patch for relative paths stops working, see the buildah
    #       feedstock for an alternative with an hardcoded prefix path.
    - 0003-Allow-relative-paths-for-system-config-files.patch

build:
  number: 0
  skip: True  # [not linux]

requirements:
  build:
    - {{ compiler('cgo') }}
    - {{ compiler('c') }}
    - go-licenses
    - go-md2man
    - pkg-config
    - make
    - {{ cdt('libselinux') }}
  host:
    - btrfs-progs
    - containers-common
    # NOTE: The conda-forge-pinning is at version 2.58 (as of 2020-11-04).
    #       Only `>2.66.1` (and a few older builds) has the the libglib split.
    #       TODO: Remove version constraint once pinning is updated.
    - glib >=2.0
    # Header+pkgconfig files for libglib are in the glib package.
    # Explicitly depend on libglib to avoid glib run_exports from older builds.
    - libglib >=2.0
    - gpgme
    - libassuan
    - libgpg-error
    - libseccomp
  run:
    - conmon
    - containers-common
    - cni-plugins
    - runc
    - slirp4netns

test:
  requires:
    # NOTE: Some binaries from util-linux, like `nsenter`, are needed. To avoid
    #       clashes with users' system-provided base utils, let's not add
    #       util-linux to requirements/run for now.
    - util-linux
  commands:
    - podman --help
    - podman --version
    # We cannot really test podman's functionality here because we'd need to
    # run it as root and/or in a build container with more capabilities.
    # Instead let's at least see if it read the config from containers-common.
    # NOTE: This does not test if registries.conf is used because the program
    #       terminates before reading the file (if built rootless in container).
    - |
      # We use mktemp instead of a path in the test work directory to avoid
      # "Error: the specified runroot is longer than 50 characters".
      tmp="$( mktemp -d )"
      trap 'rm -r "${tmp}" ; trap - EXIT ; exit' EXIT INT HUP
      conf="$(
        {
          podman --log-level=debug --storage-driver=vfs \
          --root="${tmp}/root" --runroot="${tmp}/runroot" \
          info 2>&1 \
          || true
        } | grep 'Merged system config' | tr ' ' '\n'
      )"
      printf %s "${conf}" | grep -qF "${PREFIX}/share/containers/containers.conf"
      printf %s "${conf}" | grep -qF "SeccompProfile:${PREFIX}/share/containers/seccomp.json"
      printf %s "${conf}" | grep -qF "HooksDir:[${PREFIX}/share/containers/oci/hooks.d]"
      printf %s "${conf}" | grep -qF "SignaturePolicyPath:${PREFIX}/etc/containers/policy.json"

about:
  home: https://podman.io/
  dev_url: https://github.com/containers/podman
  doc_url: https://docs.podman.io/en/latest/
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - thirdparty-licenses.txt
  summary: 'Podman: A tool for managing OCI containers and pods.'
  description: >
    Podman (the POD MANager) is a tool for managing containers and images, volumes mounted into those containers, and pods made from groups of containers. Podman is based on libpod, a library for container lifecycle management that is also contained in this repository. The libpod library provides APIs for managing containers, pods, container images, and volumes.

extra:
  recipe-maintainers:
    - mbargull
