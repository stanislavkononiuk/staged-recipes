{% set name = "pyjks" %}
{% set version = "18.0.0" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "72e478c59c3fd19c869b5c6f2822be5756c38771f148c315bb71b76cf93482ed" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv "
  noarch: python

requirements:
  host:
    - python
    - pip
    - pyasn1
    - pyasn1-modules
    - javaobj-py3
    - pycryptodome
    - twofish
  run:
    - python
    - pyasn1
    - pyasn1-modules
    - javaobj-py3
    - pycryptodome
    - twofish

test:
  imports:
    - jks

about:
  home: http://github.com/kurtbrose/pyjks
  license: MIT
  license_family: MIT
  summary: Pure-Python Java Keystore (JKS) library
  description: "PyJKS enables Python projects to load and manipulate Java KeyStore\n(JKS) data without a JVM dependency. PyJKS supports JKS, JCEKS, BKS\nand UBER (BouncyCastle) keystores. Simply::\n\n \
    \ pip install pyjks\n\nOr::\n\n  easy_install pyjks\n\nThen::\n\n  import jks\n\n  keystore = jks.KeyStore.load('keystore.jks', 'passphrase')\n\n  print(ks.private_keys)\n  print(ks.certs)\n  print(ks.secret_keys)\n\
    \nAnd that's barely scratching the surface. Check out `the usage examples on\nGitHub <https://github.com/kurtbrose/pyjks#usage-examples>`_ for\nmore!\n\n"

extra:
  recipe-maintainers:
    - msarahan
