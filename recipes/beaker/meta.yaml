# -*- coding: utf-8 -*-
{% set name = "Beaker" %}
{% set version = "1.8.1" %}
{% set sha256 = "6735aa2fff7ea0915fc7f97a11830abcad19e4d1b02433caf4238a2b54ae1ec0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python
    - setuptools

  run:
    - python
    - funcsigs

test:
  # Python imports
  imports:
    - beaker
    - beaker.crypto
    - beaker.ext

  requires:
    - coverage
    - mock
    - nose
    - pycrypto
    - sqlalchemy
    - webtest

about:
  home: https://beaker.readthedocs.io/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: 'A Session and Caching library with WSGI Middleware'
  description: |
    Beaker is a web session and general caching library that includes WSGI
    middleware for use in web applications.

    As a general caching library, Beaker can handle storing for various times
    any Python object that can be pickled with optional back-ends on a
    fine-grained basis.

    Beaker was built largely on the code from MyghtyUtils, then refactored and
    extended with database support.

    Beaker includes Cache and Session WSGI middleware to ease integration with
    WSGI capable frameworks, and is automatically used by Pylons and
    TurboGears.

    Features:

      * Fast, robust performance

      * Multiple reader/single writer lock system to avoid duplicate
        simultaneous cache creation

      * Cache back-ends include dbm, file, memory, memcached, and database
        (Using SQLAlchemy for multiple-db vendor support)

      * Signed cookie´s to prevent session hijacking/spoofing

      * Cookie-only sessions to remove the need for a db or file backend (ideal
        for clustered systems)

      * Extensible Container object to support new back-ends

      * Cache´s can be divided into namespaces (to represent templates,
        objects, etc.) then keyed for different copies

      * Create functions for automatic call-backs to create new cache copies
        after expiration

      * Fine-grained toggling of back-ends, keys, and expiration per Cache
        object

  doc_url: http://beaker.groovie.org/
  dev_url: https://github.com/bbangert/beaker

extra:
  recipe-maintainers:
    - stuertz
