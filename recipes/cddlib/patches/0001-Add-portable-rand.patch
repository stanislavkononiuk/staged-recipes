From 76987be60746b649164c25929c861a98989a9fd6 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Thu, 9 Feb 2017 22:24:21 +0530
Subject: [PATCH 1/2] Add portable rand

Patches from https://github.com/sagemath/sage
---
 lib-src-gmp/Makefile.in |   8 ++-
 lib-src-gmp/random.c    |   1 +
 lib-src-gmp/random.h    |   1 +
 lib-src/Makefile.in     |   6 +-
 lib-src/cddcore.c       |   9 +--
 lib-src/cddlp.c         |   7 ++-
 lib-src/random.c        | 144 ++++++++++++++++++++++++++++++++++++++++++++++++
 lib-src/random.h        |  37 +++++++++++++
 8 files changed, 200 insertions(+), 13 deletions(-)
 create mode 100644 lib-src-gmp/random.c
 create mode 100644 lib-src-gmp/random.h
 create mode 100644 lib-src/random.c
 create mode 100644 lib-src/random.h

diff --git a/lib-src-gmp/Makefile.in b/lib-src-gmp/Makefile.in
index 4ab9342..807cac1 100644
--- a/lib-src-gmp/Makefile.in
+++ b/lib-src-gmp/Makefile.in
@@ -54,7 +54,7 @@ LTLIBRARIES = $(lib_LTLIBRARIES)
 libcddgmp_la_LIBADD =
 am_libcddgmp_la_OBJECTS = cddcore.lo cddlp.lo cddmp.lo cddio.lo \
 	cddlib.lo cddproj.lo cddcore_f.lo cddlp_f.lo cddmp_f.lo \
-	cddio_f.lo cddlib_f.lo cddproj_f.lo setoper.lo
+	cddio_f.lo cddlib_f.lo cddproj_f.lo setoper.lo random.lo
 libcddgmp_la_OBJECTS = $(am_libcddgmp_la_OBJECTS)
 DEFAULT_INCLUDES = -I.@am__isrc@
 depcomp = $(SHELL) $(top_srcdir)/depcomp
@@ -199,7 +199,8 @@ cddmp_f.c \
 cddio_f.c \
 cddlib_f.c \
 cddproj_f.c \
-setoper.c
+setoper.c \
+random.c
 
 include_HEADERS = \
 cdd.h \
@@ -210,7 +211,7 @@ cddmp_f.h \
 cddtypes_f.h \
 setoper.h
 
-AM_CPPFLAGS = -I$(gmpincludedir) -DGMPRATIONAL
+AM_CPPFLAGS = -DGMPRATIONAL
 AM_LDFLAGS = -version-info 0:0:0
 all: all-am
 
@@ -293,6 +294,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cddmp_f.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cddproj.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cddproj_f.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/random.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/setoper.Plo@am__quote@
 
 .c.o:
diff --git a/lib-src-gmp/random.c b/lib-src-gmp/random.c
new file mode 100644
index 0000000..6aafac5
--- /dev/null
+++ b/lib-src-gmp/random.c
@@ -0,0 +1 @@
+#include "../lib-src/random.c"
diff --git a/lib-src-gmp/random.h b/lib-src-gmp/random.h
new file mode 100644
index 0000000..ca32fa4
--- /dev/null
+++ b/lib-src-gmp/random.h
@@ -0,0 +1 @@
+#include "../lib-src/random.h"
diff --git a/lib-src/Makefile.in b/lib-src/Makefile.in
index bd3c2b5..ccf4a6c 100644
--- a/lib-src/Makefile.in
+++ b/lib-src/Makefile.in
@@ -53,7 +53,7 @@ libLTLIBRARIES_INSTALL = $(INSTALL)
 LTLIBRARIES = $(lib_LTLIBRARIES)
 libcdd_la_LIBADD =
 am_libcdd_la_OBJECTS = cddcore.lo cddlp.lo cddmp.lo cddio.lo cddlib.lo \
-	cddproj.lo setoper.lo
+	cddproj.lo setoper.lo random.lo
 libcdd_la_OBJECTS = $(am_libcdd_la_OBJECTS)
 DEFAULT_INCLUDES = -I.@am__isrc@
 depcomp = $(SHELL) $(top_srcdir)/depcomp
@@ -192,7 +192,8 @@ cddmp.c \
 cddio.c \
 cddlib.c \
 cddproj.c \
-setoper.c
+setoper.c \
+random.c
 
 include_HEADERS = \
 cdd.h \
@@ -277,6 +278,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cddlp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cddmp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cddproj.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/random.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/setoper.Plo@am__quote@
 
 .c.o:
diff --git a/lib-src/cddcore.c b/lib-src/cddcore.c
index de6f21f..7fb7912 100644
--- a/lib-src/cddcore.c
+++ b/lib-src/cddcore.c
@@ -17,6 +17,7 @@
 #include <time.h>
 #include <math.h>
 #include <string.h>
+#include "random.h"   /* include last - overrides RAND_MAX */
 
 void dd_CheckAdjacency(dd_ConePtr cone,
     dd_RayPtr *RP1, dd_RayPtr *RP2, dd_boolean *adjacent)
@@ -1849,19 +1850,15 @@ void dd_QuickSort(dd_rowindex OV, long p, long r, dd_Amatrix A, long dmax)
 }
 
 
-#ifndef RAND_MAX 
-#define RAND_MAX 32767 
-#endif
-
 void dd_RandomPermutation(dd_rowindex OV, long t, unsigned int seed)
 {
   long k,j,ovj;
   double u,xk,r,rand_max=(double) RAND_MAX;
   dd_boolean localdebug=dd_FALSE;
 
-  srand(seed);
+  portable_srand(seed);
   for (j=t; j>1 ; j--) {
-    r=rand();
+    r=portable_rand();
     u=r/rand_max;
     xk=(double)(j*u +1);
     k=(long)xk;
diff --git a/lib-src/cddlp.c b/lib-src/cddlp.c
index 46f98b5..5e1e8d7 100644
--- a/lib-src/cddlp.c
+++ b/lib-src/cddlp.c
@@ -13,6 +13,7 @@
 
 #include "setoper.h"  /* set operation library header (Ver. May 18, 2000 or later) */
 #include "cdd.h"
+#include "random.h"
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
@@ -23,6 +24,8 @@
 #include "cdd_f.h"
 #endif
 
+#include "random.h"   /* include last - overrides RAND_MAX */
+
 #define dd_CDDLPVERSION  "Version 0.94b (August 25, 2005)"
 
 #define dd_FALSE 0
@@ -1755,9 +1758,9 @@ void dd_RandomPermutation2(dd_rowindex OV,long t,unsigned int seed)
   double u,xk,r,rand_max=(double) RAND_MAX;
   int localdebug=dd_FALSE;
 
-  srand(seed);
+  portable_srand(seed);
   for (j=t; j>1 ; j--) {
-    r=rand();
+    r=portable_rand();
     u=r/rand_max;
     xk=(double)(j*u +1);
     k=(long)xk;
diff --git a/lib-src/random.c b/lib-src/random.c
new file mode 100644
index 0000000..c3806c5
--- /dev/null
+++ b/lib-src/random.c
@@ -0,0 +1,144 @@
+/* Copyright (C) 1991, 1996 Free Software Foundation, Inc.
+
+   ----------------------------------------------------------
+   Random numbers that return the same sequence on all platforms.
+   Implementation taken from the GNU C Library. The same copyright
+   applies.
+   ----------------------------------------------------------
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+
+#include <stdint.h>
+#include "random.h"
+
+
+/* x**31 + x**3 + 1.  */
+#define	TYPE_3		3
+#define	BREAK_3		128
+#define	DEG_3		31
+#define	SEP_3		3
+
+
+static int32_t randtbl[DEG_3 + 1] =
+  {
+    TYPE_3,
+    
+    -1726662223, 379960547, 1735697613, 1040273694, 1313901226,
+    1627687941, -179304937, -2073333483, 1780058412, -1989503057,
+    -615974602, 344556628, 939512070, -1249116260, 1507946756,
+    -812545463, 154635395, 1388815473, -1926676823, 525320961,
+    -1009028674, 968117788, -123449607, 1284210865, 435012392,
+    -2017506339, -911064859, -370259173, 1132637927, 1398500161,
+    -205601318,
+  };
+
+
+struct random_data
+  {
+    int32_t *fptr;              /* Front pointer.  */
+    int32_t *rptr;              /* Rear pointer.  */
+    int32_t *state;             /* Array of state values.  */
+    int rand_type;              /* Type of random number generator.  */
+    int rand_deg;               /* Degree of random number generator.  */
+    int rand_sep;               /* Distance between front and rear.  */
+    int32_t *end_ptr;           /* Pointer behind state table.  */
+  };
+
+static struct random_data rng_state =
+  {
+    .fptr = &randtbl[SEP_3 + 1],
+    .rptr = &randtbl[1],
+    .state = &randtbl[1],
+    .rand_type = TYPE_3,
+    .rand_deg = DEG_3,
+    .rand_sep = SEP_3,
+    .end_ptr = &randtbl[sizeof (randtbl) / sizeof (randtbl[0])]
+};
+
+
+void portable_srand(unsigned int seed)
+{
+  int type;
+  int32_t *state;
+  long int i;
+  int32_t word;
+  int32_t *dst;
+  int kc;
+
+  /* printf("portable_srand: seed = %u\n", seed); */
+
+  type = rng_state.rand_type;
+
+  state = rng_state.state;
+  /* We must make sure the seed is not 0.  Take arbitrarily 1 in this case.  */
+  if (seed == 0)
+    seed = 1;
+  state[0] = seed;
+
+  dst = state;
+  word = seed;
+  kc = rng_state.rand_deg;
+  for (i = 1; i < kc; ++i)
+    {
+      /* This does:
+	   state[i] = (16807 * state[i - 1]) % 2147483647;
+	 but avoids overflowing 31 bits.  */
+      long int hi = word / 127773;
+      long int lo = word % 127773;
+      word = 16807 * lo - 2836 * hi;
+      if (word < 0)
+	word += 2147483647;
+      *++dst = word;
+    }
+
+  rng_state.fptr = &state[rng_state.rand_sep];
+  rng_state.rptr = &state[0];
+  kc *= 10;
+  while (--kc >= 0)
+    portable_rand();
+}
+
+
+int portable_rand(void)
+{
+  int32_t *fptr = rng_state.fptr;
+  int32_t *rptr = rng_state.rptr;
+  int32_t *end_ptr = rng_state.end_ptr;
+  int32_t result;
+
+  result = *fptr += *rptr;
+  /* Chucking least random bit.  */
+  result = (result >> 1) & 0x7fffffff;
+  ++fptr;
+  if (fptr >= end_ptr)
+    {
+      fptr = rng_state.state;
+      ++rptr;
+    }
+  else
+    {
+      ++rptr;
+      if (rptr >= end_ptr)
+	rptr = rng_state.state;
+    }
+  rng_state.fptr = fptr;
+  rng_state.rptr = rptr;
+
+  /* printf("portable_rand: output = %d\n", result); */
+
+  return result;
+}
diff --git a/lib-src/random.h b/lib-src/random.h
new file mode 100644
index 0000000..d7fcdaf
--- /dev/null
+++ b/lib-src/random.h
@@ -0,0 +1,37 @@
+#ifndef RANDOM__H
+#define RANDOM__H
+
+/* Copyright (C) 1991, 1996 Free Software Foundation, Inc.
+
+   ----------------------------------------------------------
+   Random numbers that return the same sequence on all platforms.
+   Implementation taken from the GNU C Library. The same copyright
+   applies.
+   ----------------------------------------------------------
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+void portable_srand(unsigned int seed);
+int portable_rand(void);
+
+#endif /* RANDOM__H */
+
+
+/* The largest number rand will return (same as INT_MAX).  */
+#define RAND_MAX        2147483647
+/* intentionally outside the #ifdef RANDOM__H block        */
+/* You must overwrite the system RAND_MAX!                 */
+
-- 
2.7.4

