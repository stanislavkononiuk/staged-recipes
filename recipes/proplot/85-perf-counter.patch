From 73156046f1624502de382e12bed1fa8a4c10fa31 Mon Sep 17 00:00:00 2001
From: Mark Harfouche <mark.harfouche@gmail.com>
Date: Sun, 15 Dec 2019 09:48:20 -0500
Subject: [PATCH] time.clock - > time.perf_counter

---
 proplot/utils.py | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/proplot/utils.py b/proplot/utils.py
index e4b74f4f..fbc0f28d 100644
--- a/proplot/utils.py
+++ b/proplot/utils.py
@@ -24,11 +24,11 @@ def __init__(self, message):
         self.message = message
 
     def __enter__(self):
-        self.time = time.clock()
+        self.time = time.perf_counter()
 
     def __exit__(self, *args):
         if BENCHMARK:
-            print(f'{self.message}: {time.clock() - self.time}s')
+            print(f'{self.message}: {time.perf_counter() - self.time}s')
 
 
 class _setstate(object):
@@ -59,10 +59,10 @@ def _counter(func):
     @functools.wraps(func)
     def decorator(*args, **kwargs):
         if BENCHMARK:
-            t = time.clock()
+            t = time.perf_counter()
         res = func(*args, **kwargs)
         if BENCHMARK:
-            decorator.time += (time.clock() - t)
+            decorator.time += (time.perf_counter() - t)
             decorator.count += 1
             print(f'{func.__name__}() cumulative time: {decorator.time}s '
                   f'({decorator.count} calls)')
@@ -78,10 +78,10 @@ def _timer(func):
     @functools.wraps(func)
     def decorator(*args, **kwargs):
         if BENCHMARK:
-            t = time.clock()
+            t = time.perf_counter()
         res = func(*args, **kwargs)
         if BENCHMARK:
-            print(f'{func.__name__}() time: {time.clock()-t}s')
+            print(f'{func.__name__}() time: {time.perf_counter()-t}s')
         return res
     return decorator
 
