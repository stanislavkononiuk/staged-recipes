{% set name = "jcc" %}
{% set version = "3.0" %}
{% set sha256 = "52dc7ae13a8e81d78afbc0f13e88ecbdf969673923425a4d65021ae241d99b91" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.python.org/packages/c1/79/de30ac0a450a66be9c679a80a05b943b40c27ea962d79770698cf1c737b7/JCC-3.0.tar.gz
  sha256: {{ sha256 }}

  patches:
    - setup_lpython.patch  # [linux]
    - PRIxMAX.patch  # [linux]


build:
  skip: true  # [win32 or linux32]

  number: 0

  rpaths: # only valid for linux
    - lib
    - jre/lib/amd64/
    - jre/lib/amd64/server/

  has_prefix_files:
    - {{SP_DIR}}/jcc/config.py  # [linux or osx]

  # The JCC for windows package does not have the right compile parameters for wrapping and needs these to be set
  # explicitly


requirements:
  build:
    - python
    - setuptools
    - toolchain
    - openjdk == 8.0.121  # [win]
    - openjdk  # [not win]

  run:
    - python
    - openjdk == 8.0.121  # [win]
    - openjdk  # [not win]

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - jcc

  files:
    - test/myrun_test.py

about:
  home: http://lucene.apache.org/pylucene/jcc/index.html

  license: Apache-2.0
  license_file: LICENSE

  summary: 'a C++ code generator for calling Java from C++/Python'
  description: |
    JCC is a C++ code generator for producing the code necessary to call into Java classes from CPython via Javaâ€™s Native Invocation Interface (JNI).

  doc_url: http://lucene.apache.org/pylucene/jcc/index.html

extra:
  recipe-maintainers:
    - petrushy
