{% set name = "trio-asyncio" %}
{% set version = "0.10.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/trio_asyncio/trio_asyncio-{{ version }}.tar.gz
  sha256: 1d6ae1d240a8cd89dc0986c23f117bf24851e7e7b47a3d5904360e4c39e98c28

build:
  number: 0
  script: "{{ PYTHON }} -m pip install . -vv"
  skip: true  # [py<35]

requirements:
  host:
    - python
    - pip
    - trio >=0.10.0
    - async_generator >=1.6
    - outcome
    - contextvars >=2.1  # [py<37]
    - pytest-runner
  run:
    - python
    - trio >=0.10.0
    - async_generator >=1.6
    - outcome
    - contextvars >=2.1  # [py<37]

test:
  imports:
    - trio_asyncio

about:
  home: https://github.com/python-trio/trio-asyncio
  license: MIT
  license_family: MIT
  license_file: LICENSE.MIT
  summary: 'A re-implementation of the asyncio mainloop on top of Trio'
  description: |
    Trio has native concepts of tasks and task cancellation. Asyncio is based on
    callbacks and chaining Futures, albeit with nicer syntax, which make handling
    of failures and timeouts fundamentally less reliable, esp. in larger programs.
    Thus, you really want to base your async project on Trio. On the other hand,
    there are quite a few asyncio-enhanced libraries. You really don't want to
    re-invent any wheels in your project. Thus, being able to use asyncio
    libraries from Trio is useful. Trio-Asyncio enables you to do that, and more.
  doc_url: http://trio-asyncio.readthedocs.io/
  dev_url: https://github.com/python-trio/trio-asyncio

extra:
  recipe-maintainers:
    - scopatz
