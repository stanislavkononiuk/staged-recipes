From 130adcbb393befa29d70036d93905f7bd94aa110 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonathan=20M=C3=BCller?= <git@foonathan.net>
Date: Thu, 13 Jun 2019 09:18:49 +0200
Subject: [PATCH] Remove DEBUG_ASSERT_PURE_FUNCTION

Fixes #17.
---
 README.md        |  2 --
 debug_assert.hpp | 15 +++------------
 2 files changed, 3 insertions(+), 14 deletions(-)

diff --git a/README.md b/README.md
index b6af99e..e99fe19 100644
--- a/README.md
+++ b/README.md
@@ -54,8 +54,6 @@ The options are named like the macros.
 
 <pre><code class="language-cpp">#define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_MARK_UNREACHABLE</a>
 
-#define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_PURE_FUNCTION</a>
-
 #define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_FORCE_INLINE</a>
 
 #define <a href='doc_debug_assert.md#DEBUG_ASSERT_CUR_SOURCE_LOCATION'>DEBUG_ASSERT_CUR_SOURCE_LOCATION</a>
diff --git a/debug_assert.hpp b/debug_assert.hpp
index 647b57b..ede7207 100644
--- a/debug_assert.hpp
+++ b/debug_assert.hpp
@@ -44,15 +44,6 @@
 #    endif
 #endif
 
-#ifndef DEBUG_ASSERT_PURE_FUNCTION
-#    ifdef __GNUC__
-#        define DEBUG_ASSERT_PURE_FUNCTION __attribute__((pure))
-#    else
-/// Hint to the compiler that a function is pure.
-#        define DEBUG_ASSERT_PURE_FUNCTION
-#    endif
-#endif
-
 #ifndef DEBUG_ASSERT_FORCE_INLINE
 #    ifdef __GNUC__
 #        define DEBUG_ASSERT_FORCE_INLINE [[gnu::always_inline]] inline
@@ -289,7 +280,7 @@ namespace detail
         return regular_void();
     }
 
-    DEBUG_ASSERT_PURE_FUNCTION constexpr bool always_false() noexcept
+    constexpr bool always_false() noexcept
     {
         return false;
     }
@@ -327,8 +318,8 @@ namespace detail
 /// completely.
 #    define DEBUG_ASSERT(Expr, ...)                                                                \
         static_cast<void>(debug_assert::detail::do_assert(                                         \
-            [&]() DEBUG_ASSERT_PURE_FUNCTION noexcept { return Expr; },                            \
-            DEBUG_ASSERT_CUR_SOURCE_LOCATION, #Expr, __VA_ARGS__))
+            [&]() noexcept { return Expr; }, DEBUG_ASSERT_CUR_SOURCE_LOCATION, #Expr,              \
+            __VA_ARGS__))
 
 /// Marks a branch as unreachable.
 ///
-- 
2.36.1

