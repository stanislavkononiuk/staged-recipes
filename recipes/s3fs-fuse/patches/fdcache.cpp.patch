diff --git a/src/fdcache.cpp b/src/fdcache.cpp
index 6416b01..d2776b3 100644
--- a/src/fdcache.cpp
+++ b/src/fdcache.cpp
@@ -55,6 +55,19 @@ using namespace std;
 static const int MAX_MULTIPART_CNT         = 10 * 1000; // S3 multipart max count
 static const int CHECK_CACHEFILE_PART_SIZE = 1024 * 16;	// Buffer size in PageList::CheckZeroAreaInFile()
 
+//
+// [NOTE]
+// If the following symbols in lseek whence are undefined, define them.
+// If it is not supported by lseek, s3fs judges by the processing result of lseek.
+//
+#ifndef SEEK_DATA
+#define SEEK_DATA               3
+#endif
+#ifndef SEEK_HOLE
+#define SEEK_HOLE               4
+#endif
+#define TMPFILE_FOR_CHECK_HOLE  "/tmp/.s3fs_hole_check.tmp"
+
 //
 // For cache directory top path
 //
@@ -1127,9 +1140,9 @@ bool PageList::Serialize(CacheFileStat& file, bool is_output, ino_t inode)
         is_modified = (1 == cvt_strtoofft(part.c_str(), /* base= */10) ? true : false);
       }
       // add new area
-      PageList::page_status pstatus = 
-        ( is_loaded && is_modified  ? PageList::PAGE_LOAD_MODIFIED : 
-          !is_loaded && is_modified ? PageList::PAGE_MODIFIED      : 
+      PageList::page_status pstatus =
+        ( is_loaded && is_modified  ? PageList::PAGE_LOAD_MODIFIED :
+          !is_loaded && is_modified ? PageList::PAGE_MODIFIED      :
           is_loaded && !is_modified ? PageList::PAGE_LOADED        : PageList::PAGE_NOT_LOAD_MODIFIED );
 
       SetPageLoadedStatus(offset, size, pstatus);
@@ -1162,16 +1175,16 @@ void PageList::Dump() const
   S3FS_PRN_DBG("}");
 }
 
-// 
+//
 // Compare the fdpage_list_t pages of the object with the state of the file.
-// 
+//
 // The loaded=true or modified=true area of pages must be a DATA block
 // (not a HOLE block) in the file.
 // The other area is a HOLE block in the file or is a DATA block(but the
 // data of the target area in that block should be ZERO).
 // If it is a bad area in the previous case, it will be reported as an error.
 // If the latter case does not match, it will be reported as a warning.
-// 
+//
 bool PageList::CompareSparseFile(int fd, size_t file_size, fdpage_list_t& err_area_list, fdpage_list_t& warn_area_list)
 {
   err_area_list.clear();
@@ -1795,7 +1808,7 @@ bool FdEntity::GetStats(struct stat& st, bool lock_already_held)
     return false;
   }
 
-  memset(&st, 0, sizeof(struct stat)); 
+  memset(&st, 0, sizeof(struct stat));
   if(-1 == fstat(fd, &st)){
     S3FS_PRN_ERR("fstat failed. errno(%d)", errno);
     return false;
@@ -2279,16 +2292,16 @@ int FdEntity::RowFlush(const char* tpath, bool force_sync)
     // normal uploading
     /*
      * Make decision to do multi upload (or not) based upon file size
-     * 
+     *
      * According to the AWS spec:
      *  - 1 to 10,000 parts are allowed
      *  - minimum size of parts is 5MB (expect for the last part)
-     * 
+     *
      * For our application, we will define minimum part size to be 10MB (10 * 2^20 Bytes)
-     * minimum file size will be 64 GB - 2 ** 36 
-     * 
+     * minimum file size will be 64 GB - 2 ** 36
+     *
      * Initially uploads will be done serially
-     * 
+     *
      * If file is > 20MB, then multipart will kick in
      */
     if(pagelist.Size() > MAX_MULTIPART_CNT * S3fsCurl::GetMultipartSize()){
@@ -2607,6 +2620,8 @@ string          FdManager::cache_dir;
 bool            FdManager::check_cache_dir_exist(false);
 off_t           FdManager::free_disk_space = 0;
 std::string     FdManager::check_cache_output;
+bool            FdManager::checked_lseek(false);
+bool            FdManager::have_lseek_hole(false);
 
 //------------------------------------------------
 // FdManager class methods
@@ -2816,6 +2831,43 @@ bool FdManager::IsSafeDiskSpace(const char* path, off_t size)
   return size + FdManager::GetEnsureFreeDiskSpace() <= fsize;
 }
 
+bool FdManager::HaveLseekHole(void)
+{
+  if(FdManager::checked_lseek){
+    return FdManager::have_lseek_hole;
+  }
+
+  // create tempolary file
+  int fd;
+  if(-1 == (fd = open(TMPFILE_FOR_CHECK_HOLE, O_CREAT|O_RDWR, 0600))){
+    S3FS_PRN_ERR("failed to open tempolary file(%s) - errno(%d)", TMPFILE_FOR_CHECK_HOLE, errno);
+    FdManager::checked_lseek   = true;
+    FdManager::have_lseek_hole = false;
+    return FdManager::have_lseek_hole;
+  }
+
+  // check SEEK_DATA/SEEK_HOLE options
+  bool result = true;
+  if(-1 == lseek(fd, 0, SEEK_DATA)){
+    if(EINVAL == errno){
+      S3FS_PRN_ERR("lseek does not support SEEK_DATA");
+      result = false;
+    }
+  }
+  if(result && -1 == lseek(fd, 0, SEEK_HOLE)){
+    if(EINVAL == errno){
+      S3FS_PRN_ERR("lseek does not support SEEK_HOLE");
+      result = false;
+    }
+  }
+  close(fd);
+  unlink(TMPFILE_FOR_CHECK_HOLE);
+
+  FdManager::checked_lseek   = true;
+  FdManager::have_lseek_hole = result;
+  return FdManager::have_lseek_hole;
+}
+
 //------------------------------------------------
 // FdManager methods
 //------------------------------------------------
@@ -3187,7 +3239,7 @@ void FdManager::FreeReservedDiskSpace(off_t size)
 
 //
 // Inspect all files for stats file for cache file
-// 
+//
 // [NOTE]
 // The minimum sub_path parameter is "/".
 // The sub_path is a directory path starting from "/" and ending with "/".
@@ -3373,6 +3425,11 @@ bool FdManager::RawCheckAllCache(FILE* fp, const char* cache_stat_top_dir, const
 
 bool FdManager::CheckAllCache()
 {
+  if(!FdManager::HaveLseekHole()){
+    S3FS_PRN_ERR("lseek does not support SEEK_DATA/SEEK_HOLE, then could not check cache.");
+    return false;
+  }
+
   FILE* fp;
   if(FdManager::check_cache_output.empty()){
     fp = stdout;
