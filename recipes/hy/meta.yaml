package:
  name: hy
  version: "0.12.1"

source:
  fn: hy-0.12.1.tar.gz
  url: https://pypi.python.org/packages/46/00/b0a6855a11510b7d1f503ca723cfc2a411b940b9f9744c9b3f469533c92d/hy-0.12.1.tar.gz
  md5: 552e80e5ed1d32fd34f62ef53f78dbbc
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - hy = hy:main
    #
    # Would create an entry point called hy that calls hy.main()

    - hy = hy.cmdline:hy_main
    - hy2 = hy.cmdline:hy_main
    - hyc = hy.cmdline:hyc_main
    - hyc2 = hy.cmdline:hyc_main
    - hy2py = hy.cmdline:hy2py_main
    - hy2py2 = hy.cmdline:hy2py_main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - rply >=0.7.0
    - astor >=0.5
    - clint >=0.4

  run:
    - python
    - rply >=0.7.0
    - astor >=0.5
    - clint >=0.4

test:
  # Python imports
  imports:
    - hy
    - hy.contrib
    - hy.core
    - hy.extra
    - hy.lex
    - hy.models

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - hy --help
    - hy2 --help
    - hyc --help
    - hyc2 --help
    - hy2py --help
    - hy2py2 --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://hylang.org/
  license: MIT
  summary: 'Lisp and Python love each other.'
  license_family: MIT

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
