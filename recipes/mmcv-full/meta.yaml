{% set version = "1.5.3" %}
{% set number = 0 %}

{% if cuda_compiler_version != "None" %}
{% set number = number + 200 %}
{% endif %}

package:
  name: mmcv-recipe
  version: {{ version }}

source:
  url: https://github.com/open-mmlab/mmcv/archive/refs/tags/v{{ version }}.tar.gz
build:
  number: {{ number }}
  skip: true  # [win]

outputs:
  - name: mmcv-full
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: false
      run_exports:
        - {{ pin_subpackage('mmcv-full', max_pin='x.x') }}
    script: build_mmcv.sh  # [not win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cffi                                   # [build_platform != target_platform]
        - sysroot_linux-64  2.17  # [linux64]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}    # [cuda_compiler_version != "None"]
        # Dec 2020: it seems that git is broken on windows, so we use m2-git
        - patch     # [not win]
        - git       # [not win]
        - libgomp   # [linux]
        - llvm-openmp    # [osx]
        # 2022/04/12 hmaarrfk
        # Issues with recent version of CMake
        # https://github.com/pytorch/pytorch/issues/74985
        # Should be fixed in other versions
        # https://gitlab.kitware.com/cmake/cmake/-/issues/23368
        - cmake  !=3.23.0
        - git       # [not win]
        - ninja
        - protobuf {{ libprotobuf }}
        - make      # [linux]
        - pytorch
      host:
        # GPU requirements
        - cudnn                           # [cuda_compiler_version != "None"]
        - nccl                            # [cuda_compiler_version != "None"]
        - magma                           # [cuda_compiler_version != "None"]
        # other requirements
        - python
        - numpy
        # dataclasses is a backport of python 3.7 module
        - dataclasses   # [py==36]
        - pip
        # hmaarrfk 2021/12/28
        # it seems that pytorch uses some aspects of setuptools
        # that were removed in version 59.6
        # I'm not really inclined to patch this out since
        # this is a pretty easy build time dependency
        # https://github.com/pytorch/pytorch/issues/69894
        - setuptools <59.6
        - pyyaml
        - requests
        - future
        - six
        - cffi
        - mkl-devel {{ mkl }}   # [x86]
        - mkl {{ mkl }}         # [x86]
        - libblas * *_mkl       # [x86]
        - libblas               # [not x86]
        - libblas               # [not x86]
        - liblapack             # [not x86]
        - openblas              # [not x86]
        - libprotobuf
        - sleef
        - typing
        - libuv
        - pkg-config  # [unix]
        - typing_extensions
      run:
        - mkl {{ mkl }}     # [x86]
        - libblas * *_mkl   # [x86]
        - libblas   # [not x86]
        - libcblas   # [not x86]
        - liblapack   # [not x86]
        - llvm-openmp    # [osx]
        #- _pytorch_select ==0.1             # [cuda_compiler_version == "None"]
        #- _pytorch_select ==0.2             # [cuda_compiler_version != "None"]
        # GPU requirements without run_exports
        - {{ pin_compatible('cudnn') }}                       # [cuda_compiler_version != "None"]
        - {{ pin_compatible('magma', max_pin='x.x.x') }}      # [cuda_compiler_version != "None"]
        # other requirements
        - python
        - {{ pin_compatible('numpy') }}
        - setuptools
        - cffi
        - typing_extensions
        # Need ninja to load C++ extensions
        - ninja
        # Conda exposes the maximum CUDA version supported by the installed Nvidia drivers through a virtual package named __cuda. By default, conda will install the highest version available for the packages involved. To override this behaviour, you can define a CONDA_OVERRIDE_CUDA environment variable.
        # avoid that people without GPUs needlessly download ~0.5-1GB
        - __cuda  # [cuda_compiler_version != "None"]
about:
  home: https://github.com/open-mmlab/mmcv
  summary: 'Simple, fast, extensible JSON encoder/decoder for Python'
  description: |
    simplejson is a simple, fast, complete, correct and extensible
    JSON <https://json.org> encoder and decoder for Python 2.5+ and
    Python 3.3+. It is pure Python code with no dependencies, but includes
    an optional C extension for a serious speed boost.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: MIT
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  # The doc_url and dev_url are optional.
  dev_url: https://github.com/open-mmlab/mmcv

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - apatsekin
