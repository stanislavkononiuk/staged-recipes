{% set name = "PySnooper" %}
{% set version = "0.0.34" %}

package:
  name: "{{ name|lower }}"
  version: "{{ version }}"

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: c93c9e69c9866cc9af78cd42cc740b9b1ae4a41c110cf02b462186598314b41b

build:
  number: 0
  noarch: python
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv "

requirements:
  host:
    - pip
    - python
  run:
    - python

test:
  imports:
    - pysnooper
    - pysnooper.third_party

about:
  home: https://github.com/cool-RR/PySnooper
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: A poor man's debugger for Python.
  description: |
    PySnooper is a poor man's debugger.

    You're trying to figure out why your Python code isn't doing what you think it should be doing. 
    You'd love to use a full-fledged debugger with breakpoints and watches, but you can't be bothered 
    to set one up right now.

    You want to know which lines are running and which aren't, and what the values of the local variables are.
    Most people would use print lines, in strategic locations, some of them showing the values of variables.

    PySnooper lets you do the same, except instead of carefully crafting the right print lines, 
    you just add one decorator line to the function you're interested in. You'll get a play-by-play 
    log of your function, including which lines ran and when, and exactly when local variables were changed.

    What makes PySnooper stand out from all other code intelligence tools? You can use it in your shitty, 
    sprawling enterprise codebase without having to do any setup. Just slap the decorator on, as shown below, 
    and redirect the output to a dedicated log file by specifying its path as the first argument.
  doc_url: https://github.com/cool-RR/PySnooper
  dev_url: https://github.com/cool-RR/PySnooper

extra:
  recipe-maintainers:
    - volpatto
