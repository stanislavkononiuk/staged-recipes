diff --git a/gfanlib_polyhedralfan.h b/gfanlib_polyhedralfan.h
index 14d80d4..2317e86 100644
--- a/gfanlib_polyhedralfan.h
+++ b/gfanlib_polyhedralfan.h
@@ -31,6 +31,9 @@ typedef std::map<int,IntVectorList> IncidenceList;
  * in the mathematical object.
  * The intersection of cones in the fan must be a face of both.
  * In particular all cones in a PolyhedralFan have the same lineality space.*/
+class PolyhedralFan;
+PolyhedralFan refinement(const PolyhedralFan &a, const PolyhedralFan &b, int cutOffDimension=-1, bool allowASingleConeOfCutOffDimension=false);
+
 class PolyhedralFan
 {
   int n;
@@ -52,7 +55,7 @@ class PolyhedralFan
   int getAmbientDimension()const;
   int getMaxDimension()const;
   int getMinDimension()const;
-  friend PolyhedralFan refinement(const PolyhedralFan &a, const PolyhedralFan &b, int cutOffDimension=-1, bool allowASingleConeOfCutOffDimension=false);
+  friend PolyhedralFan refinement(const PolyhedralFan &a, const PolyhedralFan &b, int cutOffDimension, bool allowASingleConeOfCutOffDimension);
   ZMatrix getRays(int dim=1);//This can be called for other dimensions than 1. The term "Rays" still makes sense modulo the common linearity space
   ZMatrix getRelativeInteriorPoints();
   void insert(ZCone const &c);
diff --git a/halfopencone.h b/halfopencone.h
index a1f1657..95c250d 100644
--- a/halfopencone.h
+++ b/halfopencone.h
@@ -6,6 +6,9 @@
 
 #include "polyhedralfan.h"
 
+class HalfOpenCone;
+HalfOpenCone intersection(const HalfOpenCone &a, const HalfOpenCone &b, bool findFacets=false);
+
 class HalfOpenCone{
   static void appendList(IntegerVectorList &to, IntegerVectorList const &from, int appendValue);
   int liftedDimension;//ambient
@@ -18,7 +21,7 @@ class HalfOpenCone{
   HalfOpenCone(int dimension_, IntegerVectorList const &equations, IntegerVectorList const &nonstrict, IntegerVectorList const &strict, bool findFacets=false, bool canonicalize=false);
   HalfOpenCone(int ambientDimension);//full space
   bool isEmpty();
-  friend HalfOpenCone intersection(const HalfOpenCone &a, const HalfOpenCone &b, bool findFacets=false);
+  friend HalfOpenCone intersection(const HalfOpenCone &a, const HalfOpenCone &b, bool findFacets);
   friend bool haveEmptyIntersection(const HalfOpenCone &a, const HalfOpenCone &b);
   PolyhedralCone closure();
   void splitIntoRelativelyOpenCones(list<HalfOpenCone> &l);
diff --git a/polyhedralfan.h b/polyhedralfan.h
index e312fd5..000f43b 100644
--- a/polyhedralfan.h
+++ b/polyhedralfan.h
@@ -37,6 +37,9 @@ enum FanPrintingFlags{
  * in the mathematical object.
  * The intersection of cones in the fan must be a face of both.
  * In particular all cones in a PolyhedralFan have the same lineality space.*/
+class PolyhedralFan;
+PolyhedralFan refinement(const PolyhedralFan &a, const PolyhedralFan &b, int cutOffDimension=-1, bool allowASingleConeOfCutOffDimension=false);
+
 class PolyhedralFan
 {
   int n;
@@ -74,7 +77,7 @@ class PolyhedralFan
   int getAmbientDimension()const;
   int getMaxDimension()const;
   int getMinDimension()const;
-  friend PolyhedralFan refinement(const PolyhedralFan &a, const PolyhedralFan &b, int cutOffDimension=-1, bool allowASingleConeOfCutOffDimension=false);
+  friend PolyhedralFan refinement(const PolyhedralFan &a, const PolyhedralFan &b, int cutOffDimension, bool allowASingleConeOfCutOffDimension);
   friend PolyhedralFan product(const PolyhedralFan &a, const PolyhedralFan &b);
   IntegerVectorList getRays(int dim=1);//This can be called for other dimensions than 1. The term "Rays" still makes sense modulo the common linearity space
   IntegerVectorList getRelativeInteriorPoints();
