{% set name = "pyterate" %}
{% set version = "2.1.3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/FabriceSalvaire/Pyterate/archive/v{{ version }}.tar.gz
  # run openssl sha256 <file name>
  sha256: d0c62ae3697e47bf2f34a2d7b3dd8e3f503d88d0538098988b4813e7afcebfbd
  # git_url: https://github.com/FabriceSalvaire/Pyterate
  # git_rev: a394beaf44ffed0df5a845b7817b16965915cf84 # "v{{ version }}"
  # git_depth: 1 # (Defaults to -1/not shallow)

build:
  noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [py<34]
  script: "{{ PYTHON }} -m pip install . -vv"
  entry_points:
    - pyterate = Pyterate.Scripts.pyterate:main
    - pyterate-rst-api = Pyterate.Scripts.pyterate_rst_api:main
  has_prefix_files:
  always_include_files:

requirements:
  build:
  host:
    - python
    - pip
  run:
    - python
    - jinja2 >=2.11
    - jupyter >=1.0
    - nbformat >=5.0
    - pypandoc >=1.4
    - pyyaml >=5.3
    - sphinx >=3.0
    # - sphinxcontrib-getthecode >=1.2.1
# build:
#   - wheel

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:

about:
  home: https://fabricesalvaire.github.io/Pyterate
  # https://www.gnu.org/licenses/gpl-3.0.en.html
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: LICENSE.txt
  summary: 'Pyterate is Sphinx add-ons to generate documentation for Python projects '
  description: |
    Pyterate is open source Sphinx add-ons which provide two tools for Python projects. The first
    one generates automatically the RST files for an API documentation based on the autogen
    extension. The second one provides a document generator based on the concept of literate
    programming which can be used to make an example's based documentation.
  doc_url: https://fabricesalvaire.github.io/Pyterate
  dev_url: https://github.com/FabriceSalvaire/Pyterate

extra:
  maintainers:
    - FabriceSalvaire
  recipe-maintainers:
    - FabriceSalvaire
