{% set version = '0.2.14' %}
{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rinside
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/RInside_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/RInside/RInside_{{ version }}.tar.gz
  sha256: 8de5340993fe879ca00fa559c5b1b27b408ba78bfc5f67d36d6f0b8d8e8649cf

build:
  merge_build_host: True  # [win]
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}        # [not win]
    - {{ compiler('cxx') }}      # [not win]
    - {{native}}toolchain        # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]
  host:
    - r-base
    - r-rcpp >=0.11.0
  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.11.0

test:
  commands:
    - $R -e "library('RInside')"           # [not win]
    - "\"%R%\" -e \"library('RInside')\""  # [win]

about:
  home: http://dirk.eddelbuettel.com/code/rinside.html
  license: GPL (>= 2)
  summary: 'C++ classes to embed R in C++ applications The ''RInside'' packages makes it easier
    to have "R inside" your C++ application by providing a C++ wrapper class providing
    the R interpreter. . As R itself is embedded into your application, a shared library
    build of R is required. This works on Linux, OS X and even on Windows provided you
    use the same tools used to build R itself.   . Numerous examples are provided in
    the eight subdirectories of the examples/ directory of the installed package: standard,
    mpi (for parallel computing) qt (showing how to embed ''RInside'' inside a Qt GUI
    application), wt (showing how to build a "web-application" using the Wt toolkit),
    armadillo (for ''RInside'' use with ''RcppArmadillo'') and eigen (for ''RInside''
    use with ''RcppEigen''). The example use GNUmakefile(s) with GNU extensions, so
    a GNU make is required (and will use the GNUmakefile automatically). . Doxygen-generated
    documentation of the C++ classes is available at the ''RInside'' website as well.'
  license_family: GPL3
  license_file: '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - conda-forge/r
    - SylvainCorlay

# Package: RInside
# Title: C++ Classes to Embed R in C++ Applications
# Version: 0.2.14
# Date: 2017-04-28
# Author: Dirk Eddelbuettel and Romain Francois
# Maintainer: Dirk Eddelbuettel <edd@debian.org>
# Description: C++ classes to embed R in C++ applications The 'RInside' packages makes it easier to have "R inside" your C++ application by providing a C++ wrapper class providing the R interpreter. . As R itself is embedded into your application, a shared library build of R is required. This works on Linux, OS X and even on Windows provided you use the same tools used to build R itself.   . Numerous examples are provided in the eight subdirectories of the examples/ directory of the installed package: standard, mpi (for parallel computing) qt (showing how to embed 'RInside' inside a Qt GUI application), wt (showing how to build a "web-application" using the Wt toolkit), armadillo (for 'RInside' use with 'RcppArmadillo') and eigen (for 'RInside' use with 'RcppEigen'). The example use GNUmakefile(s) with GNU extensions, so a GNU make is required (and will use the GNUmakefile automatically). . Doxygen-generated documentation of the C++ classes is available at the 'RInside' website as well.
# Depends: R (>= 2.10.0)
# Imports: Rcpp (>= 0.11.0)
# LinkingTo: Rcpp
# URL: http://dirk.eddelbuettel.com/code/rinside.html
# License: GPL (>= 2)
# BugReports: https://github.com/eddelbuettel/rinside/issues
# MailingList: Please send questions and comments regarding RInside to rcpp-devel@lists.r-forge.r-project.org
# NeedsCompilation: yes
# Packaged: 2017-04-28 11:46:12.919864 UTC; edd
# Repository: CRAN
# Date/Publication: 2017-05-05 03:19:32 UTC
