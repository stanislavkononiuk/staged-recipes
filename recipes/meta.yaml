# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 13 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "ripser" %}
{% set version = "0.3.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: ff9f50fba911f0e9212077b78014f83e30c97526194dd6bd1df3d81896e6cb58
  # sha256 is the prefered checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # Note: --no-deps is currently required due to https://github.com/conda/conda-build/issues/3254
  # Once resolved, it should be removed.
  script: "{{ PYTHON }} -m pip install . --no-deps -vv"

requirements:
  build:
    # if your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
  host:
    - python
    - pip
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - simplejson
    - simplejson.tests

about:
  home: http://github.com/scikit-tda/ripser.py
  license: MIT
  license_family: MIT
  license_file: LICENSE.txt
  summary: 'A Lean Persistent Homology Library for Python'

  description: |
    Ripser.py is a lean persistent homology package for Python. Building on the blazing 
    fast C++ Ripser package as the core computational engine, Ripser.py provides an 
    intuitive interface for computing persistence cohomology of sparse and dense data sets, 
    visualizing persistence diagrams, computing lowerstar filtrations on images, and computing 
    representative cochains.
  doc_url: http://ripser.scikit-tda.org/
  dev_url: https://github.com/scikit-tda/ripser.py

extra:
  recipe-maintainers:
    - sauln
    - ctralie
