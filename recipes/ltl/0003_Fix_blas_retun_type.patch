diff --git a/ltl/marray/blas.h b/ltl/marray/blas.h
index 9cc5cdb..b8dd227 100644
--- a/ltl/marray/blas.h
+++ b/ltl/marray/blas.h
@@ -47,7 +47,7 @@ extern "C"
     *  We provide our own BLAS prototypes, since finding the right header file
     *  on all supported systems and BLAS versions is a major pain in the ass.
     */
-   double sdot_(const int *n, const float *x, const int *incx, const float *y,
+   float sdot_(const int *n, const float *x, const int *incx, const float *y,
                 const int *incy);
 
    double ddot_(const int *n, const double *x, const int *incx, const double *y,
@@ -183,7 +183,7 @@ template <> struct blas_dot_dispatch<double>
 // FLOAT
 template <> struct blas_dot_dispatch<float>
 {
-   typedef double value_type;
+   typedef float value_type;
    static inline float call(const int *n, const float *x, const int *incx,
                             const float *y, const int *incy)
    {
diff --git a/test/testmablas.cpp b/test/testmablas.cpp
index fbffc15..b233df6 100644
--- a/test/testmablas.cpp
+++ b/test/testmablas.cpp
@@ -158,8 +158,8 @@ void test_blas4( void )
    for (int i=1; i<=npar; ++i)
       for (int j=1; j<=npar; ++j)
       {
-         double tmp1 = blas_dot (G(i,Range::all()), G(Range::all(),j));
-         double tmp2 = sum(G(i,Range::all()) * G(Range::all(),j) );
+         float tmp1 = blas_dot (G(i,Range::all()), G(Range::all(),j));
+         float tmp2 = sum(G(i,Range::all()) * G(Range::all(),j) );
          cout << i << "," << j << " : " << tmp1 << "  " << tmp2 << endl;
          LTL_ASSERT_( fabs(tmp1-tmp2)<1e-6, "BLAS ddot() on subarrays failed." );
       }
