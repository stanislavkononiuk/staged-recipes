{% set name = "dtw-python" %}
{% set version = "1.1.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 0b2448b66c32f61d3d78d0f03d5c37c6a2fb09e1e917c4cd662aff507059af83

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"
  skip: True  # [py<36]

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - numpy
  host:
    - python
    - pip
  run:
    - python
    - numpy
    - scipy

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - dtw

about:
  home: https://dynamictimewarping.github.io/
  license: GPL-3
  license_family: GPL
  license_file: LICENSE
  summary: 'A comprehensive implementation of dynamic time warping (DTW) algorithms.'

  # The remaining entries in this section are optional, but recommended.
  description: |
    A comprehensive implementation of dynamic time warping (DTW)
    algorithms. DTW computes the optimal (least cumulative distance)
    alignment between points of two time series. Common DTW variants
    covered include local (slope) and global (window) constraints,
    subsequence matches, arbitrary distance definitions,
    normalizations, minimum variance matching, and so on. Provides
    cumulative distances, alignments, specialized plot styles, etc.
  doc_url: https://dynamictimewarping.github.io/python/
  dev_url: https://github.com/DynamicTimeWarping/dtw-python

extra:
  recipe-maintainers:
    - tonigi
