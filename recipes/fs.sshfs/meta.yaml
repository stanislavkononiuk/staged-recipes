{% set name = "fs.sshfs" %}
{% set version = "0.6.1" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 5e9f218a382c8a82c9f639d1c0e3a622ed005fed03923966621bafbfe0da12f4

build:
  noarch: python
  number: 0
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - skip: true  # [win]
    - python
    - setuptools

  run:
    - python
    - setuptools
    - fs
    - six
    - paramiko
    - configparser

test:
  imports:
    - fs.sshfs

about:
  home: https://github.com/althonos/fs.sshfs
  license: LGPL v2.1
  license_file: '{{ environ["RECIPE_DIR"] }}/COPYING'
  summary: 'Pyfilesystem2 over SSH using paramiko'
  description: >
    Usage
    -----

    Opener
    ''''''

    Use ``fs.open_fs`` to open a filesystem with an SSH
    `FS URL <https://pyfilesystem2.readthedocs.io/en/latest/openers.html>`_:

    .. code:: python

       import fs
       my_fs = fs.open_fs("ssh://[user[:password]@]host[:port]/[directory]")

    Constructor
    '''''''''''

    For a more granular way of connecting to an SSH server, use the
    ``fs.sshfs.SSHFS`` constructor, which signature is:

    .. code:: python

        from fs.sshfs import SSHFS
        my_fs = SSHFS(
          host, user=None, paswd=None, pkey=None, timeout=10, port=22,
          keepalive=10, compress=False, config_path='~/.ssh/config'
        )

    with each argument explained below:

    ``host``
      the name or IP address of the SSH server
    ``user``
      the username to connect with, defaults to the current user.
    ``passwd``
      an optional password, used to connect directly to the server or to
      decrypt the public key, if any given.
    ``pkey``
      a `paramiko.PKey <http://docs.paramiko.org/en/2.2/api/keys.html#module-paramiko.pkey>`_
      object, a path, or a list of paths to an SSH key.
    ``timeout``
      the timeout, in seconds, for networking operations.
    ``port``
      the port the SSH server is listening on.
    ``keepalive``
      the interval of time between keepalive packets, in seconds. Set to 0 to disable.
    ``compress``
      set to ``True`` to compress the communications with the server
    ``config_path``
      the path to an OpenSSH configuration file.

    Once created, the ``SSHFS`` filesystem behaves like any other filesystem
    (see the `Pyfilesystem2 documentation <https://pyfilesystem2.readthedocs.io>`_).

    ``SSHFS`` are aware of `SSH config files <http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/>`_
    and as such, one of the hosts in the configuration file can be provided as the
    ``host`` argument for the filesystem to connect to the server with the proper
    configuration values.


    Feedback
    --------

    Found a bug ? Have an enhancement request ? Head over to the
    `GitHub issue tracker <https://github.com/althonos/fs.sshfs/issues>`_ of the
    project if you need to report or ask something. If you are filling in on a bug,
    please include as much information as you can about the issue, and try to
    recreate the same bug in a simple, easily reproductible situation.


    See also
    --------

    * `fs <https://github.com/Pyfilesystem/pyfilesystem2>`_, the core pyfilesystem2 library
    * `fs.archive <https://github.com/althonos/fs.archive>`_, enhanced archive filesystems
      for pyfilesystem2
    * `fs.proxy <https://github.com/althonos/fs.proxy>`_, miscellaneous proxy filesystems
      for pyfilesystem2
    * `fs.smbfs <https://github.com/althonos/fs.smbfs>`_, Pyfilesystem2 over SMB
      using pysmb

extra:
  recipe-maintainers:
    - ReimarBauer
