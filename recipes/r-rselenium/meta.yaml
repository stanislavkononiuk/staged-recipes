{% set version = '1.7.7' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rselenium
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/RSelenium_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/RSelenium/RSelenium_{{ version }}.tar.gz
  sha256: 39ba3ab91cdf64a7146ae412bb50b3759d13de109a26e68a0bebe0fa5773c5f6

build:
  merge_build_host: True  # [win]
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - r-xml
    - r-binman
    - r-catools
    - r-httr
    - r-openssl
    - r-wdman >=0.2.2
  run:
    - r-base
    - r-xml
    - r-binman
    - r-catools
    - r-httr
    - r-openssl
    - r-wdman >=0.2.2

test:
  commands:
    - $R -e "library('RSelenium')"           # [not win]
    - "\"%R%\" -e \"library('RSelenium')\""  # [win]

about:
  home: http://docs.ropensci.org/RSelenium
  license: AGPL-3.0-or-later
  summary: Provides a set of R bindings for the 'Selenium 2.0 WebDriver' (see <https://selenium.dev/documentation/en/>
    for more information) using the 'JsonWireProtocol' (see <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol>
    for more information). 'Selenium 2.0 WebDriver' allows driving a web browser natively
    as a user would either locally or on a remote machine using the Selenium server
    it marks a leap forward in terms of web browser automation. Selenium automates web
    browsers (commonly referred to as browsers). Using RSelenium you can automate browsers
    locally or remotely.
  license_family: AGPL
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/AGPL-3'

extra:
  recipe-maintainers:
    - ocefpaf
