# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 13 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "epysurv" %}
{% set version = "0.0.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  path: ..
#  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
#  sha256: d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f
  # sha256 is the prefered checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # Note: --no-deps is currently required due to https://github.com/conda/conda-build/issues/3254
  # Once resolved, it should be removed.
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv"
  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    # if your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
  host:
    - python=3.7
    - pip
    - r-base=3.5
    - rpy2
    - numpy=1.16
    - r-essentials
  run:
    - python=3.7
    - libgfortran=3
    - r-essentials
    - rpy2
    - numpy
    - matplotlib
    - pandas
    - scipy
    - seaborn
    - plotnine

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - epysurv
    - epysurv.models
    - epysurv.data
    - epysurv.visualization
    - epysurv.simulation
    - epysurv.metrics

about:
  home: http://github.com/JarnoRFB/epysurv

  license: MIT
  license_family: MIT
  license_file: 
  summary: 'epysurv is a Pythonic wrapper around the R surveillance package that strives to implement a scikit-learn like API for epidemiological surveillance in Python'

extra:
  recipe-maintainers:
    - JustinShenk
    - JarnoRFB

  # The remaining entries in this section are optional, but recommended
  description: |
    epysurv provides access to epidemiological surveillance in Python by
    wrapping the R surveillance package.
#  doc_url: http://simplejson.readthedocs.io/
  dev_url: https://github.com/JarnoRFB/epysurv

extra:
  recipe-maintainers:
    - JarnoRFB
