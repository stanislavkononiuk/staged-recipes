{% set version = '0.3.0' %}
{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-multiclasspairs
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/multiclassPairs_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/multiclassPairs/multiclassPairs_{{ version }}.tar.gz
  sha256: b4a08fe95f2e798fe17a4b23e41e081e0c7c2eec060ca3dc6ca32d881abf622d

build:
  merge_build_host: True  # [win]
  number: 0
  noarch: generic
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - r-boruta
    - r-caret
    - r-dunn.test
    - r-e1071
    - r-ranger
  run:
    - r-base
    - r-boruta
    - r-caret
    - r-dunn.test
    - r-e1071
    - r-ranger

test:
  commands:
    - $R -e "library('multiclassPairs')"           # [not win]
    - "\"%R%\" -e \"library('multiclassPairs')\""  # [win]

about:
  home: https://github.com/NourMarzouka/multiclassPairs
  license: GPL-2.0-or-later
  summary: 'A toolbox to train a single sample classifier that uses in-sample feature relationships.
    The relationships are represented as feature1 < feature2 (e.g. gene1 < gene2). We
    provide two options to go with. First is based on ''switchBox'' package which uses
    Top-score pairs algorithm. Second is a novel implementation based on random forest
    algorithm. For simple problems we recommend to use one-vs-rest using TSP option
    due to its simplicity and for being easy to interpret.  For complex problems RF
    performs better.  Both lines filter the features first then combine the filtered
    features to make the list of all the possible rules (i.e. rule1: feature1 < feature2,
    rule2: feature1 < feature3, etc...).  Then the list of rules will be filtered and
    the most important and informative rules will be kept. The informative rules will
    be assembled in an one-vs-rest model or in an RF model.  We provide a detailed description
    with each function in this package to explain the filtration and training methodology
    in each line.'
  license_family: GPL2
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2

extra:
  recipe-maintainers:
    - conda-forge/r

# Package: multiclassPairs
# Type: Package
# Title: Build MultiClass Pair-Based Classifiers using TSPs or RF
# Version: 0.3.0
# Author: Nour-al-dain Marzouka
# Maintainer: Nour-al-dain Marzouka <Nour-al-dain.Marzouka@med.lu.se>
# Description: A toolbox to train a single sample classifier that uses in-sample feature relationships. The relationships are represented as feature1 < feature2 (e.g. gene1 < gene2). We provide two options to go with. First is based on 'switchBox' package which uses Top-score pairs algorithm. Second is a novel implementation based on random forest algorithm. For simple problems we recommend to use one-vs-rest using TSP option due to its simplicity and for being easy to interpret.  For complex problems RF performs better.  Both lines filter the features first then combine the filtered features to make the list of all the possible rules (i.e. rule1: feature1 < feature2, rule2: feature1 < feature3, etc...).  Then the list of rules will be filtered and the most important and informative rules will be kept. The informative rules will be assembled in an one-vs-rest model or in an RF model.  We provide a detailed description with each function in this package to explain the filtration and training methodology in each line.
# URL: https://github.com/NourMarzouka/multiclassPairs
# License: GPL (>= 2)
# Encoding: UTF-8
# Depends: R (>= 4.0.0)
# Imports: methods, utils, stats, graphics, grDevices, ranger, Boruta, dunn.test, caret, e1071
# Suggests: BiocManager, Biobase, switchBox, knitr, rmarkdown, BiocStyle, leukemiasEset, qpdf
# LazyData: true
# RoxygenNote: 7.1.1
# VignetteBuilder: knitr
# NeedsCompilation: no
# Packaged: 2020-11-07 15:34:17 UTC; no5462ma
# Repository: CRAN
# Date/Publication: 2020-11-10 13:00:02 UTC
