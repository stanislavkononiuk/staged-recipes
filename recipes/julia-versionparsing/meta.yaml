{% set name = "julia-versionparsing" %}
{% set version = "1.3.0" %}
{% set sha256 = "f90fe419e1a40ef0eccfaaed1d1b7792d9115a059a82d0c23e3c04c944d0f8ca" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # url: https://github.com/JuliaInterop/VersionParsing.jl/archive/refs/tags/v{{ version }}.tar.gz 
  # sha256: {{ sha256 }}
  # Clone the git repository rather than the tarball so Julia can use the git information
  git_url: https://github.com/JuliaInterop/VersionParsing.jl.git
  git_rev: v{{ version }}
  git_depth: 1
  folder: VersionParsing.jl

build:
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  skip: true  # [win]
  number: 0

outputs:
  - name: julia-versionparsing
    script: build_base.sh
    build:
      noarch: generic
    requirements:
      build:
        - julia
      host:
        - julia
      run:
        - julia
    test:
      requires:
        - julia
      commands:
        - julia -e "using VersionParsing, Pkg; Pkg.test(\"VersionParsing\")"

  - name: versionparsing.jl
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage('julia-versionparsing', max_pin="x.x.x") }}
    test:
      requires:
        - julia
        - julia-versionparsing
      commands:
        - julia -e "using VersionParsing, Pkg; Pkg.test(\"VersionParsing\")"

about:
  home: https://github.com/JuliaInterop/VersionParsing.jl
  summary: Flexible VersionNumber parsing in Julia
  description: |
    The VersionParsing package implements flexible parsing of version-number
    strings into Julia's built-in VersionNumber type, via the vparse(string) function.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: MIT
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: VersionParsing.jl/LICENSE.md
  # The doc_url and dev_url are optional.
  doc_url: https://github.com/JuliaInterop/VersionParsing.jl/blob/master/README.md
  dev_url: https://github.com/JuliaInterop/VersionParsing.jl

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - mkitti
    - ngam
