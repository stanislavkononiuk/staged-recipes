# pyvips supports cffi ABI and API mode
#
# During setup.py, it will attempt to compile a generated wrapper against the
# libvips headers -- this is why it needs pkgconfig and libvips in build.
#
# At runtime, it will first try to load the compiled wrapper, and if that
# fails, will fall back to ABI mode, ie. directly opening the libvips shared
# library and calling into it with cffi.
#
# import logging and set the level to debug to see some diagnostics about 
# this process.
#
#       import logging
#       logging.basicConfig(level = logging.DEBUG)

# Skip win since libvips is not packaged for conda there. It is blocked on 
# at least gdk-pixbuf.

{% set name = "pyvips" %}
{% set version = "2.1.8" %}

package:
  name: "{{ name|lower }}"
  version: "{{ version }}"

source:
  # url: https://github.com/libvips/{{ name }}/archive/v{{ version }}.tar.gz
  url: http://www.rollthepotato.net/~john/pyvips-2.1.8.tar.gz
  sha256: 8b13eed1346aade94fda9879742bc6ffb4b1fb83a8000c1a95f61db510003a29

build:
  number: 0
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv "
  skip: true  # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - libvips
    - pkgconfig         # [not win]
  host:
    - cffi >=1.0
    - libvips
    - pip
    - pytest
    - pytest-runner
    - python
  run:
    - cffi >=1.0
    - libvips
    - python

test:
  imports:
    - pyvips

about:
  home: https://github.com/libvips/pyvips
  license: MIT
  license_family: MIT
  license_file: LICENSE.txt
  summary: Binding for libvips
  doc_url: https://libvips.github.io/pyvips/

extra:
  recipe-maintainers:
    - jcupitt
