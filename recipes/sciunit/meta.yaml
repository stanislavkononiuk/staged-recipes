# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set version = "0.2.2.4" %}

package:
  name: sciunit
  version: {{ version }}

source:
  url: https://github.com/scidash/sciunit/archive/{{ version }}.tar.gz
  sha256: e372371ee6686cf9110d2142e1388336d91297a9140c9ac2e3323f89187ea374
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  host:
    - setuptools
    - python
    - pip
  run:
    - git
    - quantities
    - pandas
    - ipython
    - matplotlib
    - bs4
    - lxml
    - nbconvert
    - ipykernel
    - nbformat
    - gitpython
    - cerberus
    - python

test:
  imports:
    - sciunit
    - sciunit.unit_test

about:
  home: http://sciunit.io/
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: 'A test-driven framework for formally validating scientific models against data.'
  description: |
    SciUnit is a discipline-agnostic framework for model validation, 
    handling all of the testing workflow by using a implementation-independent 
    interface to models. SciUnit also contains code for visualization 
    of model results, and command line tools for incorporating 
    testing into continuous integration workflows.
  doc_url: https://sciunit.readthedocs.io/
  dev_url: https://github.com/scidash/sciunit

extra:
  recipe-maintainers:
    - rgerkin
