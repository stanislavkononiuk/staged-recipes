{% set version = "2021.03.1" %}
{% set lib_major_version = "0" %}

package:
  name: hackrf-split
  version: {{ version }}

source:
  url: https://github.com/greatscottgadgets/hackrf/releases/download/v{{ version }}/hackrf-{{ version }}.tar.xz
  sha256: a43e5080c11efdfe69ddebcc35a02b018e30e820de0e0ebdc7948cf7b0cd93a3
  patches:
    - 0001-Rename-hackrf.dll-to-hackrf-0.dll-on-Windows.patch

build:
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - cmake
    # libudev is on its own in CentOS 6, packaged with systemd in CentOS 7
    - {{ cdt('libudev-devel') }}  # [linux and cdt_name=='cos6']
    - ninja
  host:
    - fftw
    - libusb
    # restrict to cos6-compatible libusb (and libudev)
    - libusb-cos6  # [linux and cdt_name=='cos6']
    - pthreads-win32  # [win]

outputs:
  - name: libhackrf{{ lib_major_version }}
    script: install.sh  # [unix]
    script: install.bat  # [not unix]
    requirements:
      build:
        - {{ compiler('c') }}
        - cmake
        - ninja
      host:
        - libusb
        # restrict to cos6-compatible libusb (and libudev)
        - libusb-cos6  # [linux and cdt_name=='cos6']
        - pthreads-win32  # [win]
      run:
        - pthreads-win32  # [win]
    test:
      commands:
        # verify that libraries get installed
        - test -f $PREFIX/lib/libhackrf${SHLIB_EXT}.{{ lib_major_version }}  # [linux]
        - test -f $PREFIX/lib/libhackrf.{{ lib_major_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\hackrf-{{ lib_major_version }}.dll exit 1  # [win]
  - name: libhackrf
    script: install.sh  # [unix]
    script: install.bat  # [not unix]
    build:
      run_exports:
        - {{ pin_subpackage('libhackrf' + lib_major_version, max_pin=False) }}
    requirements:
      build:
        - {{ compiler('c') }}
        - cmake
        - ninja
      host:
        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}
      run:
        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}
        - pkg-config
    test:
      commands:
        # verify that headers get installed
        - test -f $PREFIX/include/libhackrf/hackrf.h  # [not win]
        - if not exist %PREFIX%\\Library\\include\\libhackrf\\hackrf.h exit 1  # [win]

        # verify that libraries get installed
        - test -f $PREFIX/lib/libhackrf${SHLIB_EXT}.{{ lib_major_version }}  # [linux]
        - test -f $PREFIX/lib/libhackrf.{{ lib_major_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\hackrf-{{ lib_major_version }}.dll exit 1  # [win]

        # verify that pkgconfig files get installed
        - test -f $PREFIX/lib/pkgconfig/libhackrf.pc  # [unix]
        - if not exist %PREFIX%\\Library\\lib\\pkgconfig\\libhackrf.pc exit 1  # [win]

        # verify that libs can be located through pkg-config
        - test -f `pkg-config --variable=libdir --dont-define-prefix libhackrf`/libhackrf${SHLIB_EXT}  # [unix]
        - for /f "usebackq tokens=*" %%a in (`pkg-config --variable=libdir --dont-define-prefix libhackrf`) do if not exist "%%a/hackrf.lib" exit 1  # [win]
  - name: hackrf
    script: install.sh  # [unix]
    script: install.bat  # [not unix]
    requirements:
      build:
        - {{ compiler('c') }}
        - cmake
        - ninja
      host:
        - fftw
        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}
      run:
        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}
    test:
      commands:
        # make it possible to check !ERRORLEVEL! after || on Windows
        - setlocal EnableDelayedExpansion  # [win]

        # verify that executables get installed
        {% set cmds = ["clock", "cpldjtag", "debug", "operacake", "spiflash"] %}
        {% set cmds = cmds + ["sweep", "transfer"] %}
        {% for cmd in cmds %}
        - hackrf_{{ cmd }} -h
        {% endfor %}
        # hackrf_info does not have help flag, exits 1 when device not found
        - hackrf_info || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi  # [not win]
        - hackrf_info || if !ERRORLEVEL! LEQ 1 cmd /c "exit /b 0"  # [win]

        # verify that udev rule gets installed
        - test -f $PREFIX/lib/udev/rules.d/53-hackrf.rules  # [linux]

about:
  home: https://greatscottgadgets.com/hackrf
  license: GPL-2.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: 'Host software for HackRF, a low cost, open source software radio platform.'
  # The remaining entries in this section are optional, but recommended.
  description: >
    HackRF One from Great Scott Gadgets is a Software Defined Radio peripheral
    capable of transmission or reception of radio signals from 1 MHz to 6 GHz.
    Designed to enable test and development of modern and next generation radio
    technologies, HackRF One is an open source hardware platform that can be
    used as a USB peripheral or programmed for stand-alone operation.

    The `libhackrf{{ lib_major_version }}` package contains the library for
    HackRF devices, the `libhackrf` contains the development files for
    compiling against the HackRF library, and the `hackrf` package contains
    command line tools for using the devices.

    For Linux users of `hackrf`, you will likely want to link the provided udev
    rule into your system installation in order for the hardware to have the
    correct permissions:

        sudo ln -s $CONDA_PREFIX/lib/udev/rules.d/53-hackrf.rules /etc/udev/rules.d/
        sudo udevadm control --reload
        sudo udevadm trigger

    Then, make sure your user account belongs to the plugdev group in order to
    be able to access your device:

        sudo usermod -a -G plugdev <user>

    You may have to restart for this change to take effect.
  doc_url: https://hackrf.readthedocs.io/en/latest/
  dev_url: https://github.com/greatscottgadgets/hackrf

extra:
  feedstock-name: hackrf
  recipe-maintainers:
    - ryanvolz
