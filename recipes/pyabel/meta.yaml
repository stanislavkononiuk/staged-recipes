# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "pyabel" %}
{% set version = "0.7.4" %}
{% set md5 = "1f9be2ecdc1ea8424000d62e2d6a4b10" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  md5: {{ md5 }}

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for Python 2.7, 3.4, and above, for all major OSs.
  # Add the line "skip: True  # [py<34]" (for example) to limit to Python 3.4 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
	- toolchain
    - numpy >=1.6
    - setuptools >=16.0
    - scipy >=0.14
    - six >=1.10.0
  run:
    - python
    - numpy >=1.6
    - setuptools >=16.0
    - scipy >=0.14
    - six >=1.10.0

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - abel
    - abel.lib
    - abel.tests
    - abel.tools

about:
  home: https://github.com/PyAbel/PyAbel
  license: MIT
  license_family: MIT
  license_file: LICENSE.txt
  summary: 'A Python package for forward and inverse Abel transforms'
  description: |
    PyAbel is a Python package that provides functions for the forward and inverse Abel transforms. 
	The forward Abel transform takes a slice of a cylindrically symmetric 3D object and provides the 
	2D projection of that object. The inverse abel transform takes a 2D projection and reconstructs 
	a slice of the cylindrically symmetric 3D distribution.
  doc_url: http://pyabel.readthedocs.io/en/latest/readme_link.html
  dev_url: https://github.com/PyAbel/PyAbel

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - DanHickstein
    - rth
	- stggh
	- DhrubajyotiDas
