# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "sisl" %}
{% set version = "0.9.2" %}
{% set sha256 = "29f995077180dc43d30b6c55a2e933182912661d8ed8cfaf3f4c4ac40306fe91" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://github.com/zerothi/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: True  # [win]
  skip: True  # [not (py27 or py>34)]

requirements:
  build:
    # We need the toolchain for gfortran compiler as well as libgfortran/gcc
    - toolchain
    - libgfortran  # [linux]
    - gcc
    - python
    - six  # [py27]
    - numpy 1.12.*
    - netcdf4
    - scipy
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
  run:
    - libgfortran  # [linux]
    - python
    - six  # [py27]
    - numpy >=1.12
    - netcdf4
    - scipy

test:
  requires:
    - pytest

about:
  home: http://github.com/zerothi/sisl
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  license: LGPL-3.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: LGPL
  license_file: LICENSE
  summary: 'Tight-binding toolbox with interoperability with DFT codes for large-scale transmission calculations'

  # The remaining entries in this section are optional, but recommended
  description: |
    sisl is a simple, easy to use toolbox for creating tight-binding
    Hamiltonians and/or post-process DFT output.
  doc_url: http://sisl.readthedocs.io/
  dev_url: https://github.com/zerothi/sisl

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    - zerothi
