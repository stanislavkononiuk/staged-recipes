# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "xclim" %}
{% set version = "v0.9b0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed.
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: 62db7cc3e567ced70cc13132ef4fdfddc470350d0dafc392aec19583af11863d
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  noarch: python
  skip: True # [py<35]
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    - python
    - pip
  run:
    - python
    - scipy 1.2.*
    - numpy 1.15.*
    - pandas 0.23.*
    - cftime 1.0.3
    - netCDF4 1.4.*
    - dask[complete] 1.2.*
    - bottleneck 1.2.*
    - xarray 0.12.*
    - pyproj 1.9.5.*
    - pint 0.8.*
    - boltons 18.*
    - inspect2
    - unittest2
    - six
    - pytest

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - xclim

about:
  home: http://github.com/Ouranosinc/xclim
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: Apache-2.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: Apache
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Library of derived climate variables, ie climate indicators, based on xarray'

  # The remaining entries in this section are optional, but recommended.
  description: |
    xclim is a library of functions computing climate indices. It is based on xarray 
    and can benefit from the parallelization provided by dask. It's objective is to 
    make it as simple as possible for users to compute indices from large climate 
    datasets, and for scientists to write new indices with very little boilerplate.
  doc_url: https://xclim.readthedocs.io
  dev_url: https://github.com/Ouranosinc/xclim

extra:
  recipe-maintainers:
    - Zeitsperre
    - huard
