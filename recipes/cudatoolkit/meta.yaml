# Originally forked from https://github.com/AnacondaRecipes/cudatoolkit-feedstock
# Distributed under the BSD-2-Clause license
# Copyright (c) 2017, Continuum Analytics, Inc. All rights reserved.
{% set version = "11.0.3" %}
{% set version_patch = "450.51.06" %}  # [linux64]
{% set version_patch = "450.51.06" %}  # [linux-ppc64le]
{% set version_patch = "451.82" %}  # [win]
{% set major_minor = ".".join(version.split(".")[:2]) %}

package:
   name: cudatoolkit
   # match the package version to the libcudart.so version
   version: {{ version }}

source:
  - path: ./build.py
  - url: https://developer.download.nvidia.com/compute/cuda/{{ version }}/docs/sidebar/md5sum.txt
    sha256: 07e636b0e6525457052ecc2b43e36ab0352451edabb116eaea777756fbc39408
  - url: https://developer.download.nvidia.com/compute/cuda/{{ version }}/local_installers/cuda_{{ version }}_{{ version_patch }}_linux.run  # [linux64]
    md5: 70af4cebe30549b9995fb9c57d538214  # [linux64]
  - url: https://developer.download.nvidia.com/compute/cuda/{{ version }}/local_installers/cuda_{{ version }}_{{ version_patch }}_win10.exe  # [win]
    md5: 80ae0fdbe04759123f3cab81f2aadabd  # [win]

build:
  number: 0
  script_env:
    - NVTOOLSEXT_INSTALL_PATH
    - DEBUG_INSTALLER_PATH
  missing_dso_whitelist:
    - "$RPATH/libdl.so.2"
    - "$RPATH/libpthread.so.0"
    - "$RPATH/libc.so.6"
    - "$RPATH/librt.so.1"
    - "$RPATH/ld-linux-x86-64.so.2"
    - "$RPATH/libm.so.6"
  skip: true  # [osx]
  script: |
    python build.py --version {{ version }} --version-patch {{ version_patch }}
    if errorlevel 1 exit 1                                                 # [win]

    :: copy nvvm and libdevice into the DLLs folder so numba can use them  # [win]
    mkdir "%PREFIX%\DLLs"                                                  # [win]
    xcopy /s /y "%PREFIX%\Library\bin\nvvm*" "%PREFIX%\DLLs\"              # [win]
    if errorlevel 1 exit 1                                                 # [win]
    xcopy /s /y "%PREFIX%\Library\bin\libdevice*" "%PREFIX%\DLLs\"         # [win]
    if errorlevel 1 exit 1                                                 # [win]


requirements:
  build:
    - 7za  # [win]
    - python >=3.7
    # for run_exports
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - sysroot_linux-64 2.17  # [linux64]
  run_constrained:
    - __cuda >={{ major_minor }}

test:
  requires:
    - numba
    - python >=3.7
    - setuptools  # for pkg_resources

about:
  home: https://developer.nvidia.com/cuda-toolkit
  # A LicenceRef cannot be used in this case, see:
  # https://github.com/conda-forge/staged-recipes/pull/12882#discussion_r504086944
  license: NVIDIA End User License Agreement
  # EULA available at https://docs.nvidia.com/cuda/eula/index.html
  license_file: NVIDIA_EULA
  description: |
    CUDA is a parallel computing platform and programming model developed by NVIDIA for general computing on graphical processing units (GPUs). With CUDA, developers can dramatically speed up computing applications by harnessing the power of GPUs.

    The CUDA Toolkit from NVIDIA provides everything you need to develop GPU-accelerated applications. This CUDA Toolkit includes GPU-accelerated libraries, and the CUDA runtime for the Conda ecosystem. For the full CUDA Toolkit with a compiler and development tools visit https://developer.nvidia.com/cuda-downloads

    License Agreements
    The packages are governed by the CUDA Toolkit End User License Agreement (EULA). By downloading and using the packages, you accept the terms and conditions of the CUDA EULA - https://docs.nvidia.com/cuda/eula/index.html
  summary: 'CUDA Toolkit - Including CUDA runtime and headers'
  doc_url: https://docs.nvidia.com/cuda/
  dev_url: https://developer.nvidia.com/cuda-downloads

extra:
  recipe-maintainers:
    - scopatz
    - mike-wendt
    - jakirkham
    - raydouglass
    - kkraus14
    - leofang
