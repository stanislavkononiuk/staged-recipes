From: Jari Aalto <jari.aalto@cante.net>
Subject: Fix hyphes in manpage

--- a/agrep/agrep.1
+++ b/agrep/agrep.1
@@ -7,7 +7,7 @@ agrep \- search a file for a string or r
 .B \-#cdehiklnpstvwxBDGIS
 ]
 .I pattern 
-[ -f
+[ \-f
 .I patternfile 
 ]
 [
@@ -20,7 +20,7 @@ searches the input
 for records containing strings which either 
 \fIexactly\fP or \fIapproximately\fP match a pattern.  
 A record is by default a line, but it can be defined differently using
-the -d option (see below).
+the \-d option (see below).
 Normally, each record found is copied to the standard output.
 Approximate matching allows finding records that contain the pattern 
 with several errors including substitutions, insertions, and
@@ -28,7 +28,7 @@ deletions.
 For example, Massechusets matches Massachusetts with two errors
 (one substitution and one insertion).  Running 
 .B agrep
--2 Massechusets foo outputs all lines in foo containing any string with
+\-2 Massechusets foo outputs all lines in foo containing any string with
 at most 2 errors from Massechusets.
 .LP
 .B agrep 
@@ -89,7 +89,7 @@ specifying the maximum number of errors
 permitted in finding the approximate matches (defaults to zero).
 Generally, each insertion, deletion, or substitution counts as one error.
 It is possible to adjust the relative cost of insertions,
-deletions and substitutions (see -I -D and -S options).
+deletions and substitutions (see \-I \-D and \-S options).
 .TP
 .B \-c
 Display only the count of matching records.
@@ -103,7 +103,7 @@ a line.
 a regular expression.
 Text between two \fIdelim\fP's, before the first \fIdelim\fP,
 and after the last \fIdelim\fP is considered as one record.
-For example, -d '$$' defines paragraphs as records and -d '^From\ '
+For example, \-d '$$' defines paragraphs as records and \-d '^From\ '
 defines mail messages as records.
 .B agrep
 matches each record separately.
@@ -135,14 +135,14 @@ Case-insensitive search \(em e.g., "A" a
 .TP
 .B \-k
 No symbol in the pattern is treated as a meta character. 
-For example, agrep -k 'a(b|c)*d' foo will find  
+For example, agrep \-k 'a(b|c)*d' foo will find  
 the occurrences of a(b|c)*d in foo whereas agrep 'a(b|c)*d' foo
 will find substrings in foo that match the regular expression 'a(b|c)*d'.
 .TP
 .B \-l
 List only the files that contain a match.
 This option is useful for looking for files containing a certain pattern.
-For example, " agrep -l 'wonderful'  * " will list the names of those
+For example, " agrep \-l 'wonderful'  * " will list the names of those
 files in current directory that contain the word 'wonderful'.
 .TP
 .B \-n
@@ -179,7 +179,7 @@ characters.  The non-alphanumeric
 surround the match;  they cannot be counted as errors.
 For example, 
 .B agrep
--w -1 car will match cars, but not characters.
+\-w \-1 car will match cars, but not characters.
 .TP
 .B \-x
 The pattern must match the whole line.
@@ -289,37 +289,37 @@ or '|' is 4.
 .SH EXAMPLES
 .LP
 .TP
-agrep -2 -c ABCDEFG foo 
+agrep \-2 \-c ABCDEFG foo 
 gives the number of lines in file foo that contain ABCDEFG
 within two errors.
 .TP
-agrep -1 -D2 -S2 'ABCD#YZ' foo
+agrep \-1 \-D2 \-S2 'ABCD#YZ' foo
 outputs the lines containing ABCD followed, within arbitrary
 distance, by YZ, with up to one additional insertion
-(-D2 and -S2 make deletions and substitutions too "expensive").
+(\-D2 and \-S2 make deletions and substitutions too "expensive").
 .TP
-agrep -5 -p abcdefghij /usr/dict/words
+agrep \-5 \-p abcdefghij /usr/dict/words
 outputs the list of all words containing at least 5 of the first 10
 letters of the alphabet \fIin order\fR.  (Try it:  any list starting
 with academia and ending with sacrilegious must mean something!)
 .TP 
-agrep -1 'abc[0-9](de|fg)*[x-z]' foo
+agrep \-1 'abc[0-9](de|fg)*[x-z]' foo
 outputs the lines containing, within up to one error, the string
 that starts with abc followed by one digit, followed by zero or more
 repetitions of either de or fg, followed by either x, y, or z.
 .TP
-agrep -d '^From\ ' 'breakdown;internet' mbox
+agrep \-d '^From\ ' 'breakdown;internet' mbox
 outputs all mail messages (the pattern '^From\ ' separates mail messages
 in a mail file) that contain keywords 'breakdown' and 'internet'.
 .TP
-agrep -d '$$' -1 '<word1> <word2>' foo
+agrep \-d '$$' \-1 '<word1> <word2>' foo
 finds all paragraphs that contain word1 followed by word2 with one
 error in place of the blank.  
 In particular, if word1 is the last word in a line and word2
 is the first word in the next line, then the space will be
 substituted by a newline symbol and it will match.
 Thus, this is a way to overcome separation by a newline.
-Note that -d '$$' (or another delim which spans more than one line)
+Note that \-d '$$' (or another delim which spans more than one line)
 is necessary, because otherwise agrep searches
 only one line at a time.
 .TP
