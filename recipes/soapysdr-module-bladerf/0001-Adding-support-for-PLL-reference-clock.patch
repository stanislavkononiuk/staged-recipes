From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jean-S=C3=A9bastien=20Dominique?= <jd@jdradio.dev>
Date: Thu, 1 Oct 2020 11:50:45 -0400
Subject: [PATCH] Adding support for PLL reference clock

Renamed PLL clock to "ref_in" and removed strange ranges for master clock
---
 bladeRF_Settings.cpp | 89 ++++++++++++++++++++++++++++++++++++++++++++
 bladeRF_SoapySDR.hpp | 16 ++++++++
 2 files changed, 105 insertions(+)

diff --git a/bladeRF_Settings.cpp b/bladeRF_Settings.cpp
index 431448d..9066808 100644
--- a/bladeRF_Settings.cpp
+++ b/bladeRF_Settings.cpp
@@ -629,6 +629,95 @@ std::vector<double> bladeRF_SoapySDR::listBandwidths(const int direction, const
     return options;
 }
 
+/*******************************************************************
+ * Clocking API
+ ******************************************************************/
+
+void bladeRF_SoapySDR::setMasterClockRate(const double rate)
+{
+    if (! _isBladeRF2) return;
+
+    int ret = bladerf_set_pll_refclk(_dev, uint64_t(rate));
+
+    if (ret != 0)
+    {
+        SoapySDR::logf(SOAPY_SDR_ERROR, "bladerf_set_pll_refclk() returned %s", _err2str(ret).c_str());
+        throw std::runtime_error("setMasterClockRate() " + _err2str(ret));
+    }
+}
+
+double bladeRF_SoapySDR::getMasterClockRate(void) const
+{
+    if (! _isBladeRF2) return 0;
+
+    uint64_t rate(0);
+    int ret = bladerf_get_pll_refclk(_dev, &rate);
+
+    if (ret != 0)
+    {
+        SoapySDR::logf(SOAPY_SDR_ERROR, "bladerf_get_pll_refclk() returned %s", _err2str(ret).c_str());
+        throw std::runtime_error("getMasterClockRate() " + _err2str(ret));
+    }
+
+    return double(rate);
+}
+
+SoapySDR::RangeList bladeRF_SoapySDR::getMasterClockRates(void) const
+{
+    if (! _isBladeRF2) return SoapySDR::RangeList();
+
+    const bladerf_range* range(nullptr);
+    int ret = bladerf_get_pll_refclk_range(_dev, &range);
+
+    if (ret != 0)
+    {
+        SoapySDR::logf(SOAPY_SDR_ERROR, "bladerf_get_pll_refclk_range() returned %s", _err2str(ret).c_str());
+        throw std::runtime_error("getMasterClockRates() " + _err2str(ret));
+    }
+
+    return {toRange(range)};
+}
+
+std::vector<std::string> bladeRF_SoapySDR::listClockSources(void) const
+{
+    std::vector<std::string> clocks;
+    clocks.push_back("internal");
+    if (_isBladeRF2) clocks.push_back("ref_in");
+    return clocks;
+}
+
+void bladeRF_SoapySDR::setClockSource(const std::string &source)
+{
+    if (! _isBladeRF2) return;
+
+    bool enable = (source == "ref_in");
+    int ret = bladerf_set_pll_enable(_dev, enable);
+
+    if (ret != 0)
+    {
+        SoapySDR::logf(SOAPY_SDR_ERROR, "bladerf_set_pll_enable() returned %s", _err2str(ret).c_str());
+        throw std::runtime_error("setClockSource() " + _err2str(ret));
+    }
+}
+
+std::string bladeRF_SoapySDR::getClockSource(void) const
+{
+    if (! _isBladeRF2) return "internal";
+
+    bool enabled(false);
+    int ret = bladerf_get_pll_enable(_dev, &enabled);
+
+    if (ret != 0)
+    {
+        SoapySDR::logf(SOAPY_SDR_ERROR, "bladerf_get_pll_enable() returned %s", _err2str(ret).c_str());
+        throw std::runtime_error("getClockSource() " + _err2str(ret));
+    }
+
+    if (enabled) return "ref_in";
+    else return "internal";
+}
+
+
 /*******************************************************************
  * Time API
  ******************************************************************/
diff --git a/bladeRF_SoapySDR.hpp b/bladeRF_SoapySDR.hpp
index 7bd9177..9a80043 100644
--- a/bladeRF_SoapySDR.hpp
+++ b/bladeRF_SoapySDR.hpp
@@ -218,6 +218,22 @@ public:
 
     std::vector<double> listBandwidths(const int direction, const size_t channel) const; //!deprecated
 
+    /*******************************************************************
+     * Clocking API
+     ******************************************************************/
+
+    void setMasterClockRate(const double rate);
+
+    double getMasterClockRate(void) const;
+
+    SoapySDR::RangeList getMasterClockRates(void) const;
+
+    std::vector<std::string> listClockSources(void) const;
+
+    void setClockSource(const std::string &source);
+
+    std::string getClockSource(void) const;
+
     /*******************************************************************
      * Time API
      ******************************************************************/
-- 
2.35.0

