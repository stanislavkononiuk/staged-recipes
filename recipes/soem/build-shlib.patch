--- CMakeLists.txt
+++ CMakeLists.txt
@@ -65,16 +65,24 @@
 include_directories(osal/${OS})
 include_directories(oshw/${OS})
 
-add_library(soem STATIC
+add_library(soem
   ${SOEM_SOURCES}
   ${OSAL_SOURCES}
   ${OSHW_SOURCES}
   ${OSHW_EXTRA_SOURCES})
 target_link_libraries(soem ${OS_LIBS})
 
+# Causes the visibility macros to use dllexport rather than dllimport,
+# which is appropriate when building the dll but not consuming it.
+target_compile_definitions(soem
+  PRIVATE "ETHERCATMAIN_BUILDING_LIBRARY")
+
 message("LIB_DIR: ${SOEM_LIB_INSTALL_DIR}")
 
-install(TARGETS soem DESTINATION ${SOEM_LIB_INSTALL_DIR})
+install(TARGETS soem
+  ARCHIVE DESTINATION ${SOEM_LIB_INSTALL_DIR}
+  LIBRARY DESTINATION ${SOEM_LIB_INSTALL_DIR}
+  RUNTIME DESTINATION bin)
 install(FILES
   ${SOEM_HEADERS}
   ${OSAL_HEADERS}

--- soem/ethercatmain.h
+++ soem/ethercatmain.h
@@ -17,6 +17,37 @@
 {
 #endif
 
+// This logic was borrowed (then namespaced) from the examples on the gcc wiki:
+//     https://gcc.gnu.org/wiki/Visibility
+
+#if defined _WIN32 || defined __CYGWIN__
+  #ifdef __GNUC__
+    #define ETHERCATMAIN_EXPORT __attribute__ ((dllexport))
+    #define ETHERCATMAIN_IMPORT __attribute__ ((dllimport))
+  #else
+    #define ETHERCATMAIN_EXPORT __declspec(dllexport)
+    #define ETHERCATMAIN_IMPORT __declspec(dllimport)
+  #endif
+  #ifdef ETHERCATMAIN_BUILDING_LIBRARY
+    #define ETHERCATMAIN_PUBLIC ETHERCATMAIN_EXPORT
+  #else
+    #define ETHERCATMAIN_PUBLIC ETHERCATMAIN_IMPORT
+  #endif
+  #define ETHERCATMAIN_PUBLIC_TYPE ETHERCATMAIN_PUBLIC
+  #define ETHERCATMAIN_LOCAL
+#else
+  #define ETHERCATMAIN_EXPORT __attribute__ ((visibility("default")))
+  #define ETHERCATMAIN_IMPORT
+  #if __GNUC__ >= 4
+    #define ETHERCATMAIN_PUBLIC __attribute__ ((visibility("default")))
+    #define ETHERCATMAIN_LOCAL  __attribute__ ((visibility("hidden")))
+  #else
+    #define ETHERCATMAIN_PUBLIC
+    #define ETHERCATMAIN_LOCAL
+  #endif
+  #define ETHERCATMAIN_PUBLIC_TYPE
+#endif
+
 /** max. entries in EtherCAT error list */
 #define EC_MAXELIST       64
 /** max. length of readable name in slavelist and Object Description List */
@@ -433,15 +464,15 @@
 
 #ifdef EC_VER1
 /** global struct to hold default master context */
-extern ecx_contextt  ecx_context;
+extern ETHERCATMAIN_PUBLIC ecx_contextt  ecx_context;
 /** main slave data structure array */
-extern ec_slavet   ec_slave[EC_MAXSLAVE];
+extern ETHERCATMAIN_PUBLIC ec_slavet   ec_slave[EC_MAXSLAVE];
 /** number of slaves found by configuration function */
-extern int         ec_slavecount;
+extern ETHERCATMAIN_PUBLIC int         ec_slavecount;
 /** slave group structure */
-extern ec_groupt   ec_group[EC_MAXGROUP];
-extern boolean     EcatError;
-extern int64       ec_DCtime;
+extern ETHERCATMAIN_PUBLIC ec_groupt   ec_group[EC_MAXGROUP];
+extern ETHERCATMAIN_PUBLIC boolean     EcatError;
+extern ETHERCATMAIN_PUBLIC int64       ec_DCtime;
 
 void ec_pusherror(const ec_errort *Ec);
 boolean ec_poperror(ec_errort *Ec);
