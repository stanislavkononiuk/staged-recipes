{% set version = '0.17.4' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-juliacall
  version: {{ version }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/JuliaCall_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/JuliaCall/JuliaCall_{{ version }}.tar.gz
  sha256: 41d88228c004bbf7288200f391381a232f34f1dc8aa5cff7c43f10e751d5427b

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, rmarkdown, rappdirs
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.7
    - r-knitr >=1.28

  run:
    - julia                        # [not win]
    - r-base
    - r-rcpp >=0.12.7
    - r-knitr >=1.28

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('JuliaCall')"           # [not win]
    - "\"%R%\" -e \"library('JuliaCall')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/Non-Contradiction/JuliaCall
  license: MIT
  summary: Provides an R interface to 'Julia', which is a high-level, high-performance dynamic
    programming language for numerical computing, see <https://julialang.org/> for more
    information. It provides a high-level interface as well as a low-level interface.
    Using the high level interface, you could call any 'Julia' function just like any
    R function with automatic type conversion. Using the low level interface, you could
    deal with C-level SEXP directly while enjoying the convenience of using a high-level
    programming language like 'Julia'.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - conda-forge/r
    - l2dy

# The original CRAN metadata for this package was:

# Package: JuliaCall
# Type: Package
# Title: Seamless Integration Between R and 'Julia'
# Version: 0.17.4
# Date: 2021-05-14
# Authors@R: c( person("Changcheng", "Li", , "cxl508@psu.edu", c("aut", "cre")), person("Randy", "Lai", role = "ctb"), person("Dmitri", "Grominski", role = "ctb"), person("Nagi", "Teramo", role = "ctb") )
# Description: Provides an R interface to 'Julia', which is a high-level, high-performance dynamic programming language for numerical computing, see <https://julialang.org/> for more information. It provides a high-level interface as well as a low-level interface. Using the high level interface, you could call any 'Julia' function just like any R function with automatic type conversion. Using the low level interface, you could deal with C-level SEXP directly while enjoying the convenience of using a high-level programming language like 'Julia'.
# Depends: R (>= 3.4.0)
# License: MIT + file LICENSE
# URL: https://github.com/Non-Contradiction/JuliaCall
# BugReports: https://github.com/Non-Contradiction/JuliaCall/issues
# Encoding: UTF-8
# Imports: utils, Rcpp (>= 0.12.7), knitr (>= 1.28)
# RoxygenNote: 7.1.1
# LinkingTo: Rcpp
# NeedsCompilation: yes
# ByteCompile: yes
# SystemRequirements: Julia >= 0.6.0, RCall.jl
# Suggests: testthat, rmarkdown, rappdirs
# VignetteBuilder: knitr
# Packaged: 2021-05-15 04:45:07 UTC; lch34
# Author: Changcheng Li [aut, cre], Randy Lai [ctb], Dmitri Grominski [ctb], Nagi Teramo [ctb]
# Maintainer: Changcheng Li <cxl508@psu.edu>
# Repository: CRAN
# Date/Publication: 2021-05-16 14:10:16 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
