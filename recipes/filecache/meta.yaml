{% set name = "filecache" %}
{% set version = "0.81" %}

package:
  name: {{ name|lower }}
  version: {{ version }}
source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: be071ad64937b51f38b03ecd82b9b68c08d0f570cdddb30aa8f90150fe54b30a
build:
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  build:
  host:
    - python >=3.6
    - pip
  run:
    - python >=3.6
test:
  imports:
    - filecache
  source_files:
    - filecache/test
  commands:
    - python filecache/test/test_filecache.py
about:
  home: https://github.com/ubershmekel/filecache
  summary: 'Persistent caching decorator'
  description: |
    filecache
    filecache is a decorator which saves the return value of functions even
    after the interpreter dies. For example this is useful on functions that download
    and parse webpages. All you need to do is specify how long
    the return values should be cached (use seconds, like time.sleep).
    USAGE:
        from filecache import filecache

        @filecache(24 * 60 * 60)
        def time_consuming_function(args):


        @filecache(filecache.YEAR)
        def another_function(args):

    NOTE: All arguments of the decorated function and the return value need to be
        picklable for this to work.
    NOTE: The cache isn't automatically cleaned, it is only overwritten. If your
        function can receive many different arguments that rarely repeat, your
        cache may forever grow. One day I might add a feature that once in every
        100 calls scans the db for outdated stuff and erases.
    NOTE: This is less useful on methods of a class because the instance (self)
        is cached, and if the instance isn't the same, the cache isn't used. This
        makes sense because class methods are affected by changes in whatever
        is attached to self.
    Tested on python 2.7 and 3.1
    License: BSD, do what you wish with this. Could be awesome to hear if you found
    it useful and/or you have suggestions. ubershmekel at gmail.
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
extra:
  recipe-maintainers:
    - theAeon
