{% set name = "or-tools" %}
{% set version = "9.0" %}
{% set home = "https://developers.google.com/optimization" %}
{% set license = "Apache-2.0" %}
{% set license_family = "Apache" %}
{% set license_file = "LICENSE-2.0.txt" %}
{% set dev_url = "https://github.com/google/or-tools" %}


package:
  name: {{ name|lower }}-package
  version: {{ version }}

source:
  url: https://github.com/google/or-tools/archive/v{{ version }}.tar.gz
  sha256: fa7700b614ea2a5b2b6e37b76874bd2c3f04a80f03cbbf7871a2d2d5cd3a6091

build:
  number: 0

outputs
  - name: {{ name|lower }}
    script: build-cpp.sh
    skip: True  # [not x86_64]

    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake >=3.18
        - git
        - pkg-config
      host:
        - abseil-cpp =20210324.1
        - libprotobuf =3.15.8
        - zlib =1.2.11
        # coin or deps
        - coin-or-utils =2.11
        - coin-or-osi =0.108
        - coin-or-clp =1.17.4
        - coin-or-cgl =0.60
        - coin-or-cbc =2.10
      run_constrained:
        - scip =7.0.1
    
    test:
      commands:
        - test -f $PREFIX/lib/libortools${SHLIB_EXT}
        - test -f $PREFIX/lib/cmake/ortools/ortoolsTargets.cmake
        - test -f $PREFIX/lib/cmake/ortools/ortoolsConfig.cmake
        - test -f $PREFIX/include/ortools_export.h
        - test -f $PREFIX/include/ortools/algorithms/dense_doubly_linked_list.h
        - test -f $PREFIX/bin/costas_array_sat
        - costas_array_sat

    about:
      home: {{ home }}
      license: {{ license }}
      license_family: {{ license_family }}
      license_file: {{ license_file }}
      summary: 'Google Operations Research Tools (or-tools)'
      description: |
        OR-Tools is an open source software suite for optimization, tuned for tackling
        the world's toughest problems in vehicle routing, flows, integer and linear
        programming, and constraint programming.

        After modeling your problem in the programming language of your choice, you
        can use any of a half dozen solvers to solve it: commercial solvers such as
        Gurobi or CPLEX, or open-source solvers such as SCIP, GLPK, or Google's GLOP
        and award-winning CP-SAT.
      dev_url: {{ dev_url }}

extra:
  recipe-maintainers:
    - wolfv
    - BastianZim
