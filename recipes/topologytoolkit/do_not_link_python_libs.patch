On OSX, we must not link against libpython, otherwise importing the module will
result in a segfault or another error. 

This is achieved by not linking against $VTK_PYTHON_LIBRARIES and also removing
libpython from $VTK_LIBRARIES. All libraries that thus would have missing
symbols need the additional linker flag -undefined dynamic_lookup.

See https://discourse.vtk.org/t/segfault-for-python-importing-vtk-but-not-for-vtkpython/126

diff --git a/core/vtk/CMakeLists.txt b/core/vtk/CMakeLists.txt
index a4d4d661..15aa96f5 100644
--- a/core/vtk/CMakeLists.txt
+++ b/core/vtk/CMakeLists.txt
@@ -22,6 +22,7 @@ if(DEFINED VTK_USE_FILE)
     include(${VTK_USE_FILE})
 endif()
 
+list(FILTER VTK_LIBRARIES EXCLUDE REGEX ".*libpython.*")
 include_directories(${VTK_INCLUDE_DIRS})
 
 set(VTKWRAPPER_LIB_LIST "")
@@ -136,6 +137,7 @@ if (TTK_BUILD_VTK_PYTHON_MODULE)
   add_library(${module}Python MODULE ${module}PythonInit.cxx)
   set_target_properties(${module}Python PROPERTIES PREFIX "")
   target_include_directories(${module}Python PUBLIC ${include_dirs})
+  set_target_properties(${module}Python PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
 
   include(vtkWrapPython)
   vtk_wrap_python3(${module}Python ${module}Python_SOURCES "${headers}")
@@ -146,8 +148,8 @@ if (TTK_BUILD_VTK_PYTHON_MODULE)
   target_link_libraries(${module}PythonD ${VTKWRAPPER_LIB_LIST})
   target_link_libraries(${module}PythonD
     ${VTK_LIBRARIES}
-    vtkWrappingPythonCore
-    ${VTK_PYTHON_LIBRARIES})
+    vtkWrappingPythonCore)
+  set_target_properties(${module}PythonD PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
 
   # link against VTK PythonD modules
   set(_pythond_libs)
diff --git a/core/vtk/functions.cmake b/core/vtk/functions.cmake
index 2905b8b9..d21f5a31 100644
--- a/core/vtk/functions.cmake
+++ b/core/vtk/functions.cmake
@@ -23,6 +23,7 @@ function(ttk_add_vtk_library library)
 
   # Build the VTK Wrapper
   add_library(${library} SHARED ${ARG_SOURCES})
+  set_target_properties(${library} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
   target_link_libraries(${library} PUBLIC ${VTK_LIBRARIES} ${ARG_LINK})
   # add HEADERS paramter to target properties
   set_target_properties(${library} PROPERTIES TTK_HEADERS "${ARG_HEADERS}")
