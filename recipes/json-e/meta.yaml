{% set name = "json-e" %}
{% set version = "3.0.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/taskcluster/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: a107ae5428caa2117fbb0819f5336b042d48288a294a97f373a6368d8a5201b7

build:
  noarch: python
  number: 0
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  host:
    - python
    - pip
  run:
    - python

test:
  source_files:
    - test
    - specification.yml
  requires:
    - freezegun
    - hypothesis
    - nose
    - pyyaml
    - python-dateutil
    - pep8
  imports:
    - jsone
  commands:
    - cd test && nosetests

about:
  home: https://taskcluster.github.io/json-e
  license: MPL-2.0
  license_family: OTHER
  license_file: LICENSE
  summary: 'A data-structure parameterization system written for embedding context in JSON objects'
  doc_url: http://simplejson.readthedocs.io/
  dev_url: https://github.com/taskcluster/json-e
  description: >
    The central idea is to treat a data structure as a "template" and transform
    it, using another data structure as context, to produce an output data
    structure.

    There are countless libraries to do this with strings, such as mustache.
    What makes JSON-e unique is that it operates on data structures, not on
    their textual representation. This allows input to be written in a number
    of formats (JSON, YAML, etc.) or even generated dynamically. It also means
    that the output cannot be "invalid", even when including large chunks of
    contextual data.

    JSON-e is also designed to be safe for use on untrusted data. It never uses
    eval or any other function that might result in arbitrary code execution.
    It also disallows unbounded iteration, so any JSON-e rendering operation
    will finish in finite time.

extra:
  recipe-maintainers:
    - bollwyvl
