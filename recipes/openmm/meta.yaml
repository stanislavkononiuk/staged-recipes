{% set name = "openmm" %}
{% set version = "7.3.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/pandegroup/{{ name }}/archive/{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed.
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: db0c1fddc3068f689931385bc4009529261300a19effc2a9d3d47e43ab752875
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [not linux]
  #script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - clangdev
    - nvcc
    # on windows, need to install cmake manually
    - cmake  # [not win]
    - jom  # [win]

  host:
    - python  {{ python }}
    # Pin fftw3f to 3.3.3 to work around OSX py34 issues
    - fftw3f ==3.3.3  # [osx]
    - fftw3f ==3.3.4  # [win or linux]
    # swig is pinned to use omnia swig 3.0.8
    - swig ==3.0.8
    # on osx, need to install doxygen manually
    - doxygen  # [not osx]
    # for building docs
    #- sphinx ==1.8.5
    #- sphinxcontrib-serializinghtml
    #- sphinxcontrib-bibtex ==0.3.2
    #- sphinxcontrib-lunrsearch >=0.3
    #- sphinxcontrib-autodoc_doxygen
    - lxml
    - numpy
    # Required for sphinx
    - latexmk  # [not win]
    - cython

  run:
    - python {{ python }}
    - fftw3f
    - numpy
    - cython

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - simtk.openmm

about:
  home: http://openmm.org
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: docs-source/licenses/Licenses.txt
  summary: 'A high performance toolkit for molecular simulation.'

  # The remaining entries in this section are optional, but recommended.
  description: |
    OpenMM is a toolkit for molecular simulation. It can be used either as a
    stand-alone application for running simulations, or as a library you call
    from your own code. It provides a combination of extreme flexibility
    (through custom forces and integrators), openness, and high performance
    (especially on recent GPUs) that make it truly unique among simulation
    codes.
  doc_url: http://docs.openmm.org
  dev_url: https://github.com/pandegroup/openmm

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - jchodera
