{% set name = "sqloxide" %}
{% set version = "0.1.15" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/wseaton/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 5e46a472305d5a5ad1645ff930dc7d8da92563ea5804622c16d11db85f54d4f9

build:
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  build:
    - {{ compiler('rust') }}
    - {{ compiler('c') }}
  host:
    - python
    - pip
    - poetry-core >=1.0.0
    - setuptools >=41.0.0
    - wheel
    - setuptools-rust >=0.10.2
  run:
    - python
    - libgcc-ng  # [linux]
    - compilers

test:
  imports:
    - sqloxide
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://github.com/wseaton/{{ name }}
  summary: 'Python bindings for sqlparser-rs'
  description: |
    The original goal of this project was to have a very fast, efficient, and accurate 
    SQL parser I could use for building data lineage graphs across large code bases 
    (think hundreds of auto-generated .sql files). Most existing sql parsing approaches 
    for python are either very slow or not accurate (especially in regards to deeply 
    nested queries, sub-selects and/or table aliases). Looking to the rust community 
    for support, I found the excellent sqlparser-rs crate which is quite easy to wrap 
    in python code.
  license: MIT
  license_family: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - xmnlab
