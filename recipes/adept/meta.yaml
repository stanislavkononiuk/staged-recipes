{% set name = "Adept" %}
{% set version = "2.0.5e1a1e" %}
{% set build_number = "0" %}
{% set sha256 = "5981aa87566ba06e5faeb443087b58e2ecad15cc5760aa7221c20479df593fb6" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://github.com/rjhogan/Adept-2/archive/5e1a1e913249b2bb8ed4d725121011b2a94be9a7.tar.gz
  sha256: {{ sha256 }}

build:
  number: {{ build_number }}
  skip: True  # [not unix]

requirements:
  build:
    - toolchain
    - autoconf
    - automake
    - libtool
    - gcc
    - gfortran
test:
  commands:
    - test -L $PREFIX/lib/libadept.so  # [linux]
    - test -L $PREFIX/lib/libadept.dylib  # [osx]
    - test -f $PREFIX/lib/libadept.so.0.0.0  # [linux]
    - test -f $PREFIX/lib/libadept.a  # [linux or osx]
    - test -f $PREFIX/lib/libadept.la  # [linux or osx]
    - test -f $PREFIX/lib/libadept.0.dylib  # [osx]
    - test -f $PREFIX/include/adept.h  # [linux or osx]

about:
  home: http://www.met.reading.ac.uk/clouds/adept/
  license: Apache-2.0
  license_family: Apache
  license_file: COPYING
  summary: 'Fast automatic differentiation library in C++'
  description: |
    Adept (Automatic Differentiation using Expression Templates) is a free C++
    software library that enables algorithms to be automatically differentiated,
    very useful for a wide range of applications that involve mathematical
    optimization. It uses an operator overloading approach, so very little code
    modification is required. Moreover, the way that expression templates have been
    used and several other important optimizations mean that reverse-mode
    differentiation is significantly faster than other C++ libraries that provide
    equivalent functionality.

    The fundamental object of most mathematical software is the array, and it is
    therefore natural to want to differentiate array expressions. There are numerous
    mature C++ array libraries that support a wide variety of array operations, but
    because they also use expression templates to optimize array expressions, they
    do not work efficiently with Adept. The solution provided in version 2 of
    Adept is to use a single expression-template framework that incorporates both
    array and automatic-differentiation capabilities at a low level, thus enabling
    efficient differentiation of array expressions. Arrays of up to 7 dimensions are
    supported along with matrix multiplication and basic linear algebra operations.
    Of course, the library also works well with passive arrays (those that do not
    need to be differentiated).

  doc_url: http://www.met.reading.ac.uk/clouds/adept/documentation.html
  dev_url: https://github.com/rjhogan/Adept

extra:
  recipe-maintainers:
    - arghdos
