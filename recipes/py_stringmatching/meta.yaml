# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "py_stringmatching" %}
{% set version = "0.4.0" %}
{% set sha256 = "64794c179cefece8f337c9f458dfdce937b08efabad220e2dcdad81be3e95a66" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  #script: python -m pip install --no-deps --ignore-installed .
  script: python setup.py install -q --single-version-externally-managed --record=record.txt
  skip: True  # [not x86_64]
  features:
    - vc9   # [win and py27]
    - vc14  # [win and py>=35]

requirements:
  build:
    - python
    - pip
    - toolchain  # [unix]
    - msinttypes  # [win and py27]
    - setuptools
    - cython
    - numpy 1.8.*   # [not (win and (py35 or py36))]
    - numpy 1.9.*   # [win and py35]
    - numpy 1.11.*  # [win and py36]
    - gcc        # [linux]
    - six
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
  run:
    - python
    - libgcc     # [linux]
    - numpy >=1.7
    - numpy >=1.8   # [not (win and (py35 or py36))]
    - numpy >=1.9   # [win and py35]
    - numpy >=1.11  # [win and py36] 
    - six

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - py_stringmatching
    - py_stringmatching.similarity_measure
    - py_stringmatching.tests
    - py_stringmatching.tokenizer

about:
  home: https://sites.google.com/site/anhaidgroup/projects/py_stringmatching
  license: BSD
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  # license_family: "BSD-3-Clause"
  #license_file: LICENSE.txt
  summary: 'Python library for string matching.'

  # The remaining entries in this section are optional, but recommended
  description: |
    This project seeks to build a Python software package that 
    consists of a comprehensive and scalable set of string tokenizers 
    (such as alphabetical tokenizers, whitespace tokenizers) and 
  doc_url: http://anhaidgroup.github.io/py_stringmatching/v0.4.x/index.html
  dev_url: https://github.com/anhaidgroup/py_stringmatching

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - pjmartinkus
