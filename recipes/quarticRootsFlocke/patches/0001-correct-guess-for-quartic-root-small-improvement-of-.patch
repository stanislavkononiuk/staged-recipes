From 470fa4ffc81ec20258c6bc7d3db682d12f4a609f Mon Sep 17 00:00:00 2001
From: Enrico Bertolazzi <enrico.bertolazzi@unitn.it>
Date: Sun, 25 Apr 2021 00:25:34 +0200
Subject: [PATCH 01/13] correct guess for quartic root, small improvement of
 accuracy for cubic and quartic roots

---
 README.rst                       | 14 ++++-----
 src/PolynomialRoots-2-Cubic.cc   | 18 +++++++----
 src/PolynomialRoots-3-Quartic.cc | 52 +++++++++++++++++++++++---------
 src_tests/check_3_quartic.cc     | 45 ++++++++++++++++++---------
 4 files changed, 86 insertions(+), 43 deletions(-)

diff --git a/README.rst b/README.rst
index 59130ad..2f210f2 100644
--- a/README.rst
+++ b/README.rst
@@ -13,7 +13,7 @@ but is experimental for the moment.
 Usage
 -----
 
-.. code:: cpp
+.. code-block:: cpp
 
      #include "PolynomialRoots.hh"
 
@@ -32,7 +32,7 @@ Usage
 
 To solve quadratic, cubic or quartic use specialized classes
 
-.. code:: cpp
+.. code-block:: cpp
 
      Quadratic qsolve(a,b,c);
      qsolve.info(cout);
@@ -68,12 +68,10 @@ References
 Author
 ------
 
-::
-
-   Enrico Bertolazzi
-   Dipartimento di Ingegneria Industriale
-   Universita` degli Studi di Trento
-   email: enrico.bertolazzi@unitn.it
+  | Enrico Bertolazzi
+  | Dipartimento di Ingegneria Industriale
+  | Universita` degli Studi di Trento
+  | email: enrico.bertolazzi@unitn.it
 
 .. |Build Status| image:: https://travis-ci.org/ebertolazzi/quarticRootsFlocke.svg?branch=master
    :target: https://travis-ci.org/ebertolazzi/quarticRootsFlocke
diff --git a/src/PolynomialRoots-2-Cubic.cc b/src/PolynomialRoots-2-Cubic.cc
index 3034cf9..b6f6c07 100644
--- a/src/PolynomialRoots-2-Cubic.cc
+++ b/src/PolynomialRoots-2-Cubic.cc
@@ -23,6 +23,8 @@
 #include <algorithm>
 #include <limits>
 
+#define MAX_ITER_SAFETY 50
+
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
 namespace PolynomialRoots {
@@ -250,12 +252,13 @@ namespace PolynomialRoots {
     valueType t = p; // save p(x) for sign comparison
     x -= p/dp; // 1st improved root
 
-    indexType iter      = 1;
-    indexType oscillate = 0;
-    bool      bisection = false;
-    bool      converged = false;
+    indexType iter       = 1;
+    indexType oscillate  = 0;
+    indexType nconverged = 0;
+    bool      bisection  = false;
+    bool      converged  = false;
     valueType s(0), u(0); // to mute warning
-    while ( ! (converged||bisection) ) {
+    while ( ! ( nconverged > 1 || bisection ) && iter < MAX_ITER_SAFETY ) {
       ++iter;
       evalMonicCubic( x, a, b, c, p, dp );
       if ( p*t < 0 ) { // does Newton start oscillating ?
@@ -271,10 +274,11 @@ namespace PolynomialRoots {
       x -= dp;   // new Newton root
       bisection = oscillate > 2; // activate bisection
       converged = std::abs(dp) <= (1+std::abs(x)) * machepsi; // Newton convergence indicator
+      if ( converged ) ++nconverged; else nconverged = 0;
     }
     if ( bisection ) {
       t = u - s; // initial bisection interval
-      while ( std::abs(t) > (1+std::abs(x)) * machepsi ) { // bisection iterates
+      while ( std::abs(t) > (1+std::abs(x)) * machepsi && iter < MAX_ITER_SAFETY ) { // bisection iterates
         ++iter;
         p = evalMonicCubic( x, a, b, c );
         if ( p < 0 ) s = x;
@@ -318,6 +322,7 @@ namespace PolynomialRoots {
       if ( !cplx ) { // reorder
         if ( r2 < r1 ) std::swap( r1, r2 );
         if ( r1 < r0 ) std::swap( r0, r1 );
+        if ( r2 < r1 ) std::swap( r1, r2 );
       }
       return;
     }
@@ -462,6 +467,7 @@ namespace PolynomialRoots {
     if ( !cplx ) { // if real roots sort it!
       if ( r1 > r2 ) std::swap(r1,r2);
       if ( r0 > r1 ) std::swap(r0,r1);
+      if ( r1 > r2 ) std::swap(r1,r2);
     }
 
   }
diff --git a/src/PolynomialRoots-3-Quartic.cc b/src/PolynomialRoots-3-Quartic.cc
index 0355b2a..0d369b4 100644
--- a/src/PolynomialRoots-3-Quartic.cc
+++ b/src/PolynomialRoots-3-Quartic.cc
@@ -23,6 +23,8 @@
 #include <algorithm>
 #include <limits>
 
+#define MAX_ITER_SAFETY 50
+
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
 namespace PolynomialRoots {
@@ -266,12 +268,13 @@ namespace PolynomialRoots {
     valueType t = p; // save p(x) for sign comparison
     x -= p/dp; // 1st improved root
 
-    indexType iter      = 1;
-    indexType oscillate = 0;
-    bool      bisection = false;
-    bool      converged = false;
+    indexType iter       = 1;
+    indexType oscillate  = 0;
+    indexType nconverged = 0;
+    bool      bisection  = false;
+    bool      converged  = false;
     valueType s(0), u(0); // to mute warning
-    while ( ! (converged||bisection) && iter < 50 ) {
+    while ( ! ( nconverged > 1 || bisection ) && iter < MAX_ITER_SAFETY ) {
       ++iter;
       valueType ddp;
       evalMonicQuartic( x, a, b, c, d, p, dp, ddp );
@@ -290,10 +293,11 @@ namespace PolynomialRoots {
       x -= dp; // new Newton root
       bisection = oscillate > 2; // activate bisection
       converged = std::abs(dp) <= (1+std::abs(x)) * machepsi; // Newton convergence indicator
+      if ( converged ) ++nconverged; else nconverged = 0;
     }
     if ( bisection || !converged ) {
       t = u - s; // initial bisection interval
-      while ( std::abs(t) > (1+std::abs(x)) * machepsi ) { // bisection iterates
+      while ( std::abs(t) > (1+std::abs(x)) * machepsi && iter < MAX_ITER_SAFETY ) { // bisection iterates
         ++iter;
         p = evalMonicQuartic( x, a, b, c, d );
         if ( p < 0 ) s = x;
@@ -521,17 +525,32 @@ namespace PolynomialRoots {
     if ( !qsolve.complexRoots() ) {
       valueType Qs = evalMonicQuartic( s, q3, q2, q1, q0 );
       valueType Qu = evalMonicQuartic( u, q3, q2, q1, q0 );
-      valueType tmp = q0 >= 0 ? 0 : 2; // segno di A0??
+      bool q0pos = q0 > 0;
       nreal = 1;
       if ( Qs < 0 && Qu < 0 ) {
-        if ( Qs < Qu ) r3 = s < 0 ?  tmp :  2;
-        else           r3 = u > 0 ? -tmp : -2;
+        if ( Qs < Qu ) {
+          r3 = 2;
+          if ( q0pos && s < 0 ) r3 = 0;
+        } else {
+          r3 = -2;
+          if ( q0pos && u > 0 ) r3 = 0;
+        }
       } else if ( Qs < 0 ) {
-        r3 = s < 0 ? tmp : 2;
-        if ( 4*s < -q3 ) r3 = -r3;
+        if ( 4*s < -q3 ) {
+          r3 = -2;
+          if ( q0pos && s > 0 ) r3 = 0;
+        } else {
+          r3 = 2;
+          if ( q0pos && s < 0 ) r3 = 0;
+        }
       } else if ( Qu < 0 ) {
-        r3 = u < 0 ? tmp : 2;
-        if ( 4*u < -q3 ) r3 = -r3;
+        if ( 4*u < -q3 ) {
+          r3 = -2;
+          if ( q0pos && u > 0 ) r3 = 0;
+        } else {
+          r3 = 2;
+          if ( q0pos && u < 0 ) r3 = 0;
+        }
       } else {
         // check for astrological combination when s or u are root of the quartic
         /*
@@ -718,8 +737,11 @@ namespace PolynomialRoots {
     valueType const & D = ABCDE[3];
     valueType const & E = ABCDE[4];
     bool ok = true;
-    valueType epsi = 10 * ( std::abs(A) +
-                            std::abs(B)+std::abs(C)+std::abs(D)+std::abs(E))*machepsi;
+    valueType epsi = 1000 * ( ( std::abs(A) +
+                                std::abs(B) +
+                                std::abs(C) +
+                                std::abs(D) +
+                                std::abs(E) )*machepsi) ;
     if ( ncplx > 0 ) {
       valueType z0 = std::abs(eval( root0() ));
       valueType z1 = std::abs(eval( root1() ));
diff --git a/src_tests/check_3_quartic.cc b/src_tests/check_3_quartic.cc
index 5840634..83e9b1a 100644
--- a/src_tests/check_3_quartic.cc
+++ b/src_tests/check_3_quartic.cc
@@ -41,12 +41,12 @@ static double rootQuarticReal6[] = { 1.0e+7, -1.0e+6, 1, 1 };
 static double rootQuarticImag6[] = { 0, 0, 1, -1 };
 static double quartic6[]         = { 1,-9.000002e+6,-0.9999981999998e+13,+1.9999982e+13,-2.e+13 };
 
-static double rootQuarticReal7[] = { -4.0, -7.0, -1.0e+6, -1.0e+6 };
-static double rootQuarticImag7[] = { 0, 0, 1.0e+5, -1.0e+5 };
+static double rootQuarticReal7[] = { -1.0e+6, -1.0e+6, -7, -4 };
+static double rootQuarticImag7[] = { 1.0e+5, -1.0e+5, 0, 0 };
 static double quartic7[]         = { 1,+2.000011e+6,+1.010022000028e+12,+1.1110056e+13,+2.828e+13 };
 
-static double rootQuarticReal8[] = { 1.0e+3, 1.0e+3, 11.0, 1.0e+8 };
-static double rootQuarticImag8[] = {      1,     -1,    0,    0   };
+static double rootQuarticReal8[] = { 1000, 1000, 11.0, 1.0e+8 };
+static double rootQuarticImag8[] = {    1,   -1,    0,      0 };
 static double quartic8[]         = { 1, -1.00002011e8, +2.01101022001e11, -1.02200111000011e14, 1.1000011e15 };
 // 1,-1.00002011e+8,+2.01101022001e+11,-1.02200111000011e+14,+1.1000011e+15};
 
@@ -91,8 +91,12 @@ static double rootQuarticImag16[] = { 0, 0, 0, 0 };
 static double quartic16[]         = { 1, 3*r, 6, 2*r, 0 };
 //double quartic16[]         = { 0, 1, 3*r, 6, 2*r };
 
-static double rootQuarticReal17[] = { 19.01804207, 3.926187087, 0.5001001646e-3, 3.336516286 };
-static double rootQuarticImag17[] = { 0, 0, 0, 0 };
+static double rootQuarticReal17[] = { 19.02897754136850147151903,
+                                      19.02897754136850147151903,
+                                      0.5103896497990552414378477e-1,
+                                      3.264106471395880584257508 };
+static double rootQuarticImag17[] = { 3.948839665289545498594455,
+                                     -3.948839665289545498594455, 0, 0 };
 static double quartic17[]         = { 0.000158925, -0.00657522, 0.0801029, -0.2, 0.01 };
 
 static double rootQuarticReal18[] = { -8.767990511, -8.767990511, 0.7679905093, 0.7679905118 };
@@ -126,10 +130,22 @@ static double quartic20[] = {
   1.0 * ( -8.9469482641160880e+00 )
 };
 
+static double rootQuarticReal21[] = { 50.29261772409999764477107,  50.29261772409999764477107, -109.5695612171199968543078, -32.79238302114399772335673 };
+static double rootQuarticImag21[] = { 3.050397502900299873118684, -3.050397502900299873118684, 0, 0 };
+static double quartic21[] = {
+  -1.27321767367025728318135329174e-09,
+  -5.31908439792814016019367533931e-08,
+  1.04248648319060507416809052694e-05,
+  0,
+  -0.0116136513934813456055961111701
+};
+
 #define DO_TEST( N ) \
   cout << "\n\nText N." << N << '\n'; \
   do_test( quartic##N, rootQuarticReal##N, rootQuarticImag##N )
 
+static Quartic qsolve;
+
 static
 void
 do_test(
@@ -137,7 +153,7 @@ do_test(
   double const re[4],
   double const im[4]
 ) {
-  Quartic qsolve( p[0], p[1], p[2], p[3], p[4] );
+  qsolve.setup( p[0], p[1], p[2], p[3], p[4] );
   qsolve.info( cout );
   if ( !qsolve.check( cout ) ) {
     cout << "\n\nFailed!\n\nExpected\n"
@@ -153,30 +169,31 @@ do_test(
 
 int
 main() {
-  cout.precision(14);
+  cout.precision(25);
   #if 1
   DO_TEST(0);
   DO_TEST(1);
   DO_TEST(2);
-  DO_TEST(3);
+  DO_TEST(3); // fail
   DO_TEST(4);
   DO_TEST(5);
   DO_TEST(6);
-  DO_TEST(7);
-  DO_TEST(8);
+  DO_TEST(7);  // quasi-fail
+  DO_TEST(8);  // ok-fail
   DO_TEST(9);
-  DO_TEST(10);
+  DO_TEST(10); // ????
   DO_TEST(11);
   DO_TEST(12);
-  DO_TEST(13);
+  DO_TEST(13); // ?????
   DO_TEST(14);
   DO_TEST(15);
   DO_TEST(16);
   DO_TEST(17);
   DO_TEST(18);
   DO_TEST(19);
-  #endif
   DO_TEST(20);
+  #endif
+  DO_TEST(21);
   cout << "\n\nALL DONE!\n";
   return 0;
 }
-- 
2.34.1

