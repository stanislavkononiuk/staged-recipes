From 5b1d3a7ed0cf996d3888c7728e2dde91d74d6727 Mon Sep 17 00:00:00 2001
From: Enrico Bertolazzi <enrico.bertolazzi@unitn.it>
Date: Fri, 15 Oct 2021 21:51:40 +0200
Subject: [PATCH 08/13] updated CMakeLists.txt, get tag from git, use
 INSTALL_HERE with rake

---
 CMakeLists-cflags.txt | 20 ++++++++--------
 CMakeLists.txt        | 56 +++++++++++++++++++++++++++++--------------
 Rakefile              |  9 ++++---
 3 files changed, 54 insertions(+), 31 deletions(-)

diff --git a/CMakeLists-cflags.txt b/CMakeLists-cflags.txt
index 9ed5880..056d5f9 100644
--- a/CMakeLists-cflags.txt
+++ b/CMakeLists-cflags.txt
@@ -7,22 +7,22 @@ SET( CMAKE_VERBOSE_MAKEFILE            TRUE )
 # /Gv Uses the __vectorcall calling convention. (x86 and x64 only)
 # /Gz Uses the __stdcall calling convention (x86 only).
 
-SET( CXX_WARN   "-Wall -Wno-float-equal -Wno-padded ")
+SET( CXX_WARN   "-Wall -Wno-float-equal -Wno-padded -Wno-comment ")
 SET( CLANG_WARN "-Weverything -Wno-alloca -Wno-cast-align -Wno-cast-qual -Wno-conversion -Wno-c++2a-compat -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-format-nonliteral -Wno-implicit-fallthrough -Wno-documentation -Wno-float-equal -Wno-padded -Wno-reserved-id-macro -Wno-unreachable-code-break -Wno-unused-macros -Wno-switch-enum -Wno-sign-conversion -Wno-signed-enum-bitfield -Wno-weak-vtables ")
 SET( VS_WARN    "")
 
 IF( CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
-  SET( CMAKE_CXX_FLAGS         "-std=c++11 " )
-  SET( CMAKE_CXX_FLAGS_RELEASE "-fPIC -fopenmp -O2 -g -floop-interchange -floop-block -funroll-loops  ${CXX_WARN}" )
-  SET( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -fopenmp -O0 -ggdb -DMECHATRONIX_DEBUG -DDEBUG  ${CXX_WARN}" )
+  SET( CMAKE_CXX_FLAGS         "-std=c++11   ${CXX_WARN}" )
+  SET( CMAKE_CXX_FLAGS_RELEASE "-fPIC -fopenmp -O2 -g -floop-interchange -floop-block -funroll-loops " )
+  SET( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -fopenmp -O0 -ggdb -DMECHATRONIX_DEBUG -DDEBUG " )
 ELSEIF( CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
-  SET( CMAKE_CXX_FLAGS         "-std=c++11 -stdlib=libc++ " )
-  SET( CMAKE_CXX_FLAGS_RELEASE "-fPIC -Os -g -finline-functions -finline-hint-functions -funroll-loops -fcolor-diagnostics  ${CLANG_WARN}" )
-  SET( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -O0 -gfull -fcolor-diagnostics -DMECHATRONIX_DEBUG -DDEBUG  ${CLANG_WARN}" )
+  SET( CMAKE_CXX_FLAGS         "-std=c++11 -stdlib=libc++  ${CLANG_WARN}" )
+  SET( CMAKE_CXX_FLAGS_RELEASE "-fPIC -Os -g -finline-functions -finline-hint-functions -funroll-loops -fcolor-diagnostics " )
+  SET( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -O0 -gfull -fcolor-diagnostics -DMECHATRONIX_DEBUG -DDEBUG " )
 ELSEIF( CMAKE_CXX_COMPILER_ID MATCHES "MSVC" )
-  SET( CMAKE_CXX_FLAGS         "" )
-  SET( CMAKE_CXX_FLAGS_RELEASE "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /O2 /MD  ${VS_WARN}" )
-  SET( CMAKE_CXX_FLAGS_DEBUG   "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /Od /Ob0 /MDd /RTC1 /guard:cf /Zi /D_DEBUG /DMECHATRONIX_DEBUG  ${VS_WARN}" )
+  SET( CMAKE_CXX_FLAGS         " ${VS_WARN}" )
+  SET( CMAKE_CXX_FLAGS_RELEASE "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /O2 /MD " )
+  SET( CMAKE_CXX_FLAGS_DEBUG   "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /Od /Ob0 /MDd /RTC1 /guard:cf /Zi /D_DEBUG /DMECHATRONIX_DEBUG " )
 ELSE()
   MESSAGE( FATAL_ERROR "Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")
 ENDIF()
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 76b6cc4..33c38ff 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,9 +18,15 @@ if(ENABLE_CTEST)
   enable_testing()
 endif()
 
-project(Quartic
-  VERSION 1.0.0
-  HOMEPAGE_URL "https://ebertolazzi.github.io/quarticRootsFlocke/")
+# get version from the git tag
+execute_process(COMMAND git describe --tags --abbrev=0 OUTPUT_VARIABLE VERSION)
+string(REGEX REPLACE "\n$" "" VERSION "${VERSION}")
+
+project(
+  Quartic
+  VERSION ${VERSION}
+  HOMEPAGE_URL "https://ebertolazzi.github.io/quarticRootsFlocke/"
+)
 
 # NOTE: Predictable target name
 set(STATIC_PROJECT "${PROJECT_NAME}Static")
@@ -53,39 +59,51 @@ set(SOURCES
 file(GLOB HEADERS "${SOURCES_DIR}/*.hh")
 
 add_library(${STATIC_PROJECT} STATIC ${SOURCES})
-target_include_directories(${STATIC_PROJECT} PUBLIC 
+target_include_directories(
+  ${STATIC_PROJECT} PUBLIC 
   "$<BUILD_INTERFACE:${SOURCES_DIR}>"
-  "$<INSTALL_INTERFACE:include/${PROJECT_NAME}>")
-set_target_properties(${STATIC_PROJECT} PROPERTIES 
+  "$<INSTALL_INTERFACE:include/${PROJECT_NAME}>"
+)
+set_target_properties(
+  ${STATIC_PROJECT} PROPERTIES 
   OUTPUT_NAME "${PROJECT_NAME}${ARTIFACTS_STATIC_SUFFIX}"
   PUBLIC_HEADER "${HEADERS}"
-  POSITION_INDEPENDENT_CODE ON)
+  POSITION_INDEPENDENT_CODE ON
+)
 
 if(BUILD_SHARED)
   add_library(${DYNAMIC_PROJECT} SHARED ${SOURCES})
   target_include_directories(${DYNAMIC_PROJECT} PUBLIC "${SOURCES_DIR}")
-  set_target_properties(${DYNAMIC_PROJECT} PROPERTIES 
+  set_target_properties(
+    ${DYNAMIC_PROJECT} PROPERTIES 
     OUTPUT_NAME "${PROJECT_NAME}${ARTIFACTS_STATIC_SUFFIX}"
     PUBLIC_HEADER "${HEADERS}"
-    POSITION_INDEPENDENT_CODE ON)
+    POSITION_INDEPENDENT_CODE ON
+  )
   if(WIN32)
-    set_target_properties(${DYNAMIC_PROJECT} PROPERTIES 
-      WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
+    set_target_properties(
+      ${DYNAMIC_PROJECT} PROPERTIES 
+      WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+    )
   endif()
 endif()
 
-if(BUILD_EXECUTABLE)
+if(BUILD_EXECUTABLE OR ENABLE_CTEST)
   set(TEST_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin")
   file(MAKE_DIRECTORY "${TEST_OUTPUT_PATH}")
   set(EXECUTABLES check_1_quadratic  check_2_cubic check_3_quartic)
   foreach(EXE ${EXECUTABLES})
     add_executable(${EXE} "${CMAKE_CURRENT_SOURCE_DIR}/src_tests/${EXE}.cc")
     target_link_libraries(${EXE} PRIVATE ${STATIC_PROJECT})
-    set_target_properties(${EXE} PROPERTIES
-      RUNTIME_OUTPUT_DIRECTORY "${TEST_OUTPUT_PATH}")
-    add_test(NAME ${EXE}
+    set_target_properties(
+      ${EXE} PROPERTIES
+      RUNTIME_OUTPUT_DIRECTORY "${TEST_OUTPUT_PATH}"
+    )
+    add_test(
+      NAME ${EXE}
       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
-      COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/bin/${EXE}")
+      COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/bin/${EXE}"
+    )
   endforeach()
 endif()
 
@@ -104,11 +122,13 @@ set(INSTALL_TARGETS ${STATIC_PROJECT})
 if(BUILD_SHARED)
   set(INSTALL_TARGETS ${INSTALL_TARGETS} ${DYNAMIC_PROJECT})
 endif()
-install(TARGETS ${INSTALL_TARGETS}
+install(
+  TARGETS ${INSTALL_TARGETS}
   RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
   ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/lib"
   LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/dll"
-  PUBLIC_HEADER DESTINATION "${PROJECT_PUBLIC_HEADER_DESTINATION}")
+  PUBLIC_HEADER DESTINATION "${PROJECT_PUBLIC_HEADER_DESTINATION}"
+)
 
 message(STATUS "Using ${SSE_FLAGS} extensions")
 message(STATUS "C compiler                  = ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER}")
diff --git a/Rakefile b/Rakefile
index 97e35fc..9ef2cb9 100755
--- a/Rakefile
+++ b/Rakefile
@@ -70,7 +70,8 @@ task :build_win, [:year, :bits] do |t, args|
   else
     cmd_cmake += ' -DBUILD_EXECUTABLE:VAR=false '
   end
-  cmd_cmake += " -DCMAKE_INSTALL_PREFIX=\"#{file_base}\" "
+  cmd_cmake += " -DINSTALL_HERE:VAR=true "
+  #cmd_cmake += " -DCMAKE_INSTALL_PREFIX=\"#{file_base}\" "
 
   FileUtils.mkdir_p "../lib/lib"
   FileUtils.mkdir_p "../lib/bin"
@@ -105,7 +106,8 @@ task :build_osx do |t, args|
   else
     cmd_cmake += 'false '
   end
-  cmd_cmake += " -DCMAKE_INSTALL_PREFIX=\"#{file_base}\" "
+  cmd_cmake += " -DINSTALL_HERE:VAR=true "
+  #cmd_cmake += " -DCMAKE_INSTALL_PREFIX=\"#{file_base}\" "
 
   if COMPILE_DEBUG then
     sh cmd_cmake + '-DCMAKE_BUILD_TYPE:VAR=Debug --loglevel=WARNING ..'
@@ -133,7 +135,8 @@ task :build_linux do |t, args|
   else
     cmd_cmake += 'false '
   end
-  cmd_cmake += " -DCMAKE_INSTALL_PREFIX=\"#{file_base}\" "
+  cmd_cmake += " -DINSTALL_HERE:VAR=true "
+  #cmd_cmake += " -DCMAKE_INSTALL_PREFIX=\"#{file_base}\" "
 
   if COMPILE_DEBUG then
     sh cmd_cmake + '-DCMAKE_BUILD_TYPE:VAR=Debug --loglevel=WARNING ..'
-- 
2.34.1

