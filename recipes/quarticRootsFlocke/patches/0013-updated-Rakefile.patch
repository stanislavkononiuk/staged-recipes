From cb2ca1a1eb69f2147c01d1f40e9daa5ac85e867d Mon Sep 17 00:00:00 2001
From: Enrico Bertolazzi <enrico.bertolazzi@unitn.it>
Date: Sun, 31 Oct 2021 14:17:50 +0100
Subject: [PATCH 13/13] updated Rakefile

---
 CMakeLists-cflags.txt |  61 +++++++++++----------
 Makefile              | 121 ------------------------------------------
 Rakefile              |  68 ++++++++++++++----------
 Rakefile_common.rb    |  17 ++----
 Rakefile_conf.rb      |   2 +-
 5 files changed, 75 insertions(+), 194 deletions(-)
 delete mode 100644 Makefile

diff --git a/CMakeLists-cflags.txt b/CMakeLists-cflags.txt
index 056d5f9..b431ca0 100644
--- a/CMakeLists-cflags.txt
+++ b/CMakeLists-cflags.txt
@@ -1,42 +1,41 @@
-
-SET( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE )
-SET( CMAKE_VERBOSE_MAKEFILE            TRUE )
+set( CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true )
+set( CMAKE_VERBOSE_MAKEFILE            true )
 
 # /Gd Uses the __cdecl calling convention (x86 only).
 # /Gr Uses the __fastcall calling convention (x86 only).
 # /Gv Uses the __vectorcall calling convention. (x86 and x64 only)
 # /Gz Uses the __stdcall calling convention (x86 only).
 
-SET( CXX_WARN   "-Wall -Wno-float-equal -Wno-padded -Wno-comment ")
-SET( CLANG_WARN "-Weverything -Wno-alloca -Wno-cast-align -Wno-cast-qual -Wno-conversion -Wno-c++2a-compat -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-format-nonliteral -Wno-implicit-fallthrough -Wno-documentation -Wno-float-equal -Wno-padded -Wno-reserved-id-macro -Wno-unreachable-code-break -Wno-unused-macros -Wno-switch-enum -Wno-sign-conversion -Wno-signed-enum-bitfield -Wno-weak-vtables ")
-SET( VS_WARN    "")
-
-IF( CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
-  SET( CMAKE_CXX_FLAGS         "-std=c++11   ${CXX_WARN}" )
-  SET( CMAKE_CXX_FLAGS_RELEASE "-fPIC -fopenmp -O2 -g -floop-interchange -floop-block -funroll-loops " )
-  SET( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -fopenmp -O0 -ggdb -DMECHATRONIX_DEBUG -DDEBUG " )
-ELSEIF( CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
-  SET( CMAKE_CXX_FLAGS         "-std=c++11 -stdlib=libc++  ${CLANG_WARN}" )
-  SET( CMAKE_CXX_FLAGS_RELEASE "-fPIC -Os -g -finline-functions -finline-hint-functions -funroll-loops -fcolor-diagnostics " )
-  SET( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -O0 -gfull -fcolor-diagnostics -DMECHATRONIX_DEBUG -DDEBUG " )
-ELSEIF( CMAKE_CXX_COMPILER_ID MATCHES "MSVC" )
-  SET( CMAKE_CXX_FLAGS         " ${VS_WARN}" )
-  SET( CMAKE_CXX_FLAGS_RELEASE "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /O2 /MD " )
-  SET( CMAKE_CXX_FLAGS_DEBUG   "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /Od /Ob0 /MDd /RTC1 /guard:cf /Zi /D_DEBUG /DMECHATRONIX_DEBUG " )
-ELSE()
-  MESSAGE( FATAL_ERROR "Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")
-ENDIF()
-
-MESSAGE( STATUS "Compiler used: ${CMAKE_CXX_COMPILER_ID}")
-
-SET( CMAKE_C_FLAGS         "" )
-SET( CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} )
-SET( CMAKE_C_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG} )
+set( CXX_WARN   "-Wall -Wno-float-equal -Wno-padded ")
+set( CLANG_WARN "-Weverything -Wno-alloca -Wno-cast-align -Wno-cast-qual -Wno-conversion -Wno-c++2a-compat -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-format-nonliteral -Wno-implicit-fallthrough -Wno-documentation -Wno-float-equal -Wno-padded -Wno-reserved-id-macro -Wno-unreachable-code-break -Wno-unused-macros -Wno-switch-enum -Wno-sign-conversion -Wno-signed-enum-bitfield -Wno-weak-vtables ")
+set( VS_WARN    "")
+
+if ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
+  set( CMAKE_CXX_FLAGS         "-std=c++11 " )
+  set( CMAKE_CXX_FLAGS_RELEASE "-fPIC -fopenmp -O2 -g -floop-interchange -floop-block -funroll-loops  ${CXX_WARN}" )
+  set( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -fopenmp -O0 -ggdb -DMECHATRONIX_DEBUG -DDEBUG  ${CXX_WARN}" )
+elseif( CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
+  set( CMAKE_CXX_FLAGS         "-std=c++11 -stdlib=libc++ " )
+  set( CMAKE_CXX_FLAGS_RELEASE "-fPIC -Os -g -finline-functions -finline-hint-functions -funroll-loops -fcolor-diagnostics  ${CLANG_WARN}" )
+  set( CMAKE_CXX_FLAGS_DEBUG   "-fPIC -O0 -gfull -fcolor-diagnostics -DMECHATRONIX_DEBUG -DDEBUG  ${CLANG_WARN}" )
+elseif( CMAKE_CXX_COMPILER_ID MATCHES "MSVC" )
+  set( CMAKE_CXX_FLAGS         "" )
+  set( CMAKE_CXX_FLAGS_RELEASE "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /O2 /MD  ${VS_WARN}" )
+  set( CMAKE_CXX_FLAGS_DEBUG   "/nologo /GS /W3 /WX- /EHsc /bigobj /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS /DHAVE_STRING_H /DNO_GETTIMEOFDAY /DYAML_DECLARE_STATIC /DPCRE_STATIC /Od /Ob0 /MDd /RTC1 /guard:cf /Zi /D_DEBUG /DMECHATRONIX_DEBUG  ${VS_WARN}" )
+elseif()
+  message( FATAL_ERROR "Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")
+endif()
+
+message( STATUS "Compiler used: ${CMAKE_CXX_COMPILER_ID}")
+
+set( CMAKE_C_FLAGS         "" )
+set( CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} )
+set( CMAKE_C_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG} )
 
 # select LAPACK library to be used
-SET( PINS_USE_ACCELERATE true )
+set( PINS_USE_ACCELERATE true )
 
 # check if link against static libgcc
-SET( PINS_USE_STATIC_LIBGCC false )
+set( PINS_USE_STATIC_LIBGCC false )
 
-SET( PINS_ON_RASPBERRY false )
+set( PINS_ON_RASPBERRY false )
diff --git a/Makefile b/Makefile
deleted file mode 100644
index 7ada289..0000000
--- a/Makefile
+++ /dev/null
@@ -1,121 +0,0 @@
-# get the type of OS currently running
-OS=$(shell uname -s)
-PWD=$(shell pwd)
-
-INC         = -Isrc
-LIBS        = -L./lib -lQuartic
-DEFS        =
-STATIC_EXT  = .a
-DYNAMIC_EXT = .so
-AR          = ar rcs
-LDCONFIG    = sudo ldconfig
-
-WARN=-Wall -Wno-sign-compare
-#-Weverything -Wno-global-constructors -Wno-padded -Wno-documentation-unknown-command
-
-# default values
-
-# check if the OS string contains 'Linux'
-ifneq (,$(findstring Linux, $(OS)))
-  LIBS     = -static -L./lib -lQuartic
-  CXXFLAGS = -std=c++11 $(WARN) -O3 -fPIC
-  AR       = ar rcs
-  LDCONFIG = sudo ldconfig
-endif
-
-# check if the OS string contains 'MINGW'
-ifneq (,$(findstring MINGW, $(OS)))
-  LIBS     = -static -L./lib -lQuartic
-  CXXFLAGS = -std=c++11 $(WARN) -O3
-  AR       = ar rcs
-  LDCONFIG = sudo ldconfig
-endif
-
-# check if the OS string contains 'Darwin'
-ifneq (,$(findstring Darwin, $(OS)))
-  WARN        = -Wall -Weverything -Wno-sign-compare -Wno-global-constructors -Wno-padded -Wno-documentation-unknown-command -Wno-poison-system-directories
-  LIBS        = -L./lib -lQuartic
-  CXXFLAGS    = $(WARN) -O3 -fPIC -std=c++11
-  AR          = libtool -static -o
-  LDCONFIG    =
-  DYNAMIC_EXT = .dylib
-endif
-
-LIB_QUARTIC = libQuartic
-
-SRCS = \
-src/PolynomialRoots-1-Quadratic.cc \
-src/PolynomialRoots-2-Cubic.cc \
-src/PolynomialRoots-3-Quartic.cc \
-src/PolynomialRoots-Jenkins-Traub.cc \
-src/PolynomialRoots-Utils.cc
-
-OBJS  = $(SRCS:.cc=.o)
-DEPS  = src/PolynomialRoots-Utils.hh src/PolynomialRoots.hh
-MKDIR = mkdir -p
-
-# prefix for installation, use make PREFIX=/new/prefix install
-# to override
-PREFIX    = /usr/local
-FRAMEWORK = Quartic
-
-all: bin
-
-travis: bin
-
-bin: lib
-	@$(MKDIR) bin
-	$(CXX) $(INC) $(CXXFLAGS) -o bin/check_1_quadratic src_tests/check_1_quadratic.cc $(LIBS)
-	$(CXX) $(INC) $(CXXFLAGS) -o bin/check_2_cubic     src_tests/check_2_cubic.cc     $(LIBS)
-	$(CXX) $(INC) $(CXXFLAGS) -o bin/check_3_quartic   src_tests/check_3_quartic.cc   $(LIBS)
-
-lib: lib/$(LIB_QUARTIC)$(STATIC_EXT) lib/$(LIB_QUARTIC)$(DYNAMIC_EXT)
-
-include_local:
-	@rm -rf lib/include
-	$(MKDIR) lib
-	$(MKDIR) lib/include
-	@cp -f src/*.hh lib/include
-
-src/%.o: src/%.cc $(DEPS)
-	$(CXX) $(INC) $(CXXFLAGS) $(DEFS) -c $< -o $@
-
-src/%.o: src/%.c $(DEPS)
-	$(CC) $(INC) $(CFLAGS) $(DEFS) -c -o $@ $<
-
-lib/libQuartic.a: $(OBJS) include_local
-	@$(MKDIR) lib
-	$(AR) lib/libQuartic.a $(OBJS)
-
-lib/libQuartic.dylib: $(OBJS) include_local
-	@$(MKDIR) lib
-	$(CXX) -shared -o lib/libQuartic.dylib $(OBJS)
-
-lib/libQuartic.so: $(OBJS) include_local
-	@$(MKDIR) lib
-	$(CXX) -shared -o lib/libQuartic.so $(OBJS)
-
-install: lib
-	@$(MKDIR) $(PREFIX)/lib
-	@$(MKDIR) $(PREFIX)/include
-	cp src/*.hh               $(PREFIX)/include
-	cp lib/$(LIB_QUARTIC).*   $(PREFIX)/lib
-	@$(LDCONFIG) $(PREFIX)/lib
-
-install_as_framework: lib
-	@$(MKDIR) $(PREFIX)/lib
-	@$(MKDIR) $(PREFIX)/include/$(FRAMEWORK)
-	cp src/*.hh           $(PREFIX)/include/$(FRAMEWORK)
-	cp lib/$(LIB_QUARTIC) $(PREFIX)/lib
-
-run:
-	./bin/check_1_quadratic
-	./bin/check_2_cubic
-	./bin/check_3_quartic
-
-doc:
-	doxygen
-
-clean:
-	rm -f lib/include/* lib/libQuartic.* src/*.o
-	rm -rf bin
diff --git a/Rakefile b/Rakefile
index c36c6f0..f666dd8 100755
--- a/Rakefile
+++ b/Rakefile
@@ -7,6 +7,15 @@
   end
 end
 
+case RUBY_PLATFORM
+when /darwin/
+  OS = :mac
+when /linux/
+  OS = :linux
+when /cygwin|mswin|mingw|bccwin|wince|emx/
+  OS = :win
+end
+
 require_relative "./Rakefile_common.rb"
 
 file_base = File.expand_path(File.dirname(__FILE__)).to_s+'/lib'
@@ -29,7 +38,7 @@ else
 end
 cmd_cmake_build += " -DINSTALL_HERE:VAR=true "
 
-task :default => [:build]
+task :default => :build
 
 TESTS = [
   "check_1_quadratic",
@@ -37,36 +46,38 @@ TESTS = [
   "check_3_quartic"
 ]
 
-desc "run tests on linux/osx"
+desc "run tests"
 task :run do
-  TESTS.each do |cmd|
-    sh "./bin/#{cmd}"
-  end
-end
-
-desc "run tests (Release) on windows"
-task :run_win do
-  TESTS.each do |cmd|
-    sh "bin\\Release\\#{cmd}.exe"
-  end
-end
-
-desc "run tests (Debug) on windows"
-task :run_win_debug do
-  TESTS.each do |cmd|
-    sh "bin\\Debug\\#{cmd}.exe"
+  puts "UTILS run tests".green
+  case OS
+  when :mac,:linux
+    TESTS.each do |cmd|
+      exe = "./bin/#{cmd}"
+      next unless File.exist?(exe)
+      puts "execute #{exe}".yellow
+      sh exe
+    end
+  when :win
+    TESTS.each do |cmd|
+      exe = "bin\\#{cmd}.exe"
+      next unless File.exist?(exe)
+      puts "execute #{exe}".yellow
+      sh exe
+    end
   end
 end
 
 desc "build lib"
 task :build do
-  sh "make config"
-  sh "make --jobs=8 install_local"
-end
-
-def ChangeOnFile( file, text_to_replace, text_to_put_in_place )
-  text = File.read file
-  File.open(file, 'w+'){|f| f << text.gsub(text_to_replace, text_to_put_in_place)}
+  puts "UTILS build".green
+  case OS
+  when :mac
+    Rake::Task[:build_osx].invoke
+  when :linux
+    Rake::Task[:build_linux].invoke
+  when :win
+    Rake::Task[:build_win].invoke
+  end
 end
 
 desc "compile for Visual Studio [default year=2017, bits=x64]"
@@ -136,6 +147,8 @@ task :build_linux do |t, args|
   FileUtils.mkdir_p dir
   FileUtils.cd      dir
 
+  cmd_cmake = "cmake " + cmd_cmake_build
+
   puts "run CMAKE for ROOTS".yellow
   sh cmd_cmake + ' ..'
   puts "compile with CMAKE for ROOTS".yellow
@@ -155,10 +168,7 @@ task :clean_osx do
 end
 
 desc "clean for LINUX"
-task :clean_linux do
-  FileUtils.rm_rf 'lib'
-  sh "make clean"
-end
+task :clean_linux => :clean_osx
 
 desc "clean for WINDOWS"
 task :clean_win do
diff --git a/Rakefile_common.rb b/Rakefile_common.rb
index 9fb873d..4076c80 100755
--- a/Rakefile_common.rb
+++ b/Rakefile_common.rb
@@ -12,17 +12,6 @@ end
 
 require_relative "./Rakefile_conf.rb"
 
-if (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil then
-  #linux
-  task :default => [:install_linux]
-elsif (/darwin/ =~ RUBY_PLATFORM) != nil then
-  #osx
-  task :default => [:install_osx]
-else
-  #windows
-  task :default => [:install_windows]
-end
-
 #
 # https://stackoverflow.com/questions/6934185/ruby-net-http-following-redirects/6934503
 #
@@ -111,6 +100,8 @@ def extract_tgz( tar_gz_archive, destination = '.' )
         FileUtils.chmod entry.header.mode, dest, :verbose => false
       elsif entry.header.typeflag == '2' #Symlink!
         File.symlink entry.header.linkname, dest
+      elsif entry.header.typeflag == 'g' && entry.full_name == "pax_global_header"
+        puts "Skip entry: #{entry.full_name} type: #{entry.header.typeflag}."
       else
         puts "Unkown tar entry: #{entry.full_name} type: #{entry.header.typeflag}."
       end
@@ -138,6 +129,8 @@ def extract_zip( filename, destination_path='.' )
 end
 
 
+
+
 def win_vs( bits, year )
 
   tmp = " -DBITS:VAR=#{bits} -DYEAR:VAR=#{year} "
@@ -173,4 +166,4 @@ def win_vs( bits, year )
     end
   end
   return tmp
-end
\ No newline at end of file
+end
diff --git a/Rakefile_conf.rb b/Rakefile_conf.rb
index c4e455b..a1144e7 100755
--- a/Rakefile_conf.rb
+++ b/Rakefile_conf.rb
@@ -4,7 +4,7 @@ if File.exists?(File.expand_path('../Rakefile_conf.rb', File.dirname(__FILE__)))
 else
   COMPILE_DEBUG      = false
   COMPILE_DYNAMIC    = false
-  COMPILE_EXECUTABLE = false
+  COMPILE_EXECUTABLE = true
   USE_NMAKE          = true
 
   case RUBY_PLATFORM
-- 
2.34.1

