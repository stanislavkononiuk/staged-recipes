From 1c61625d752f5865ceff6b33556c3fde5ef972e4 Mon Sep 17 00:00:00 2001
From: "matteo.ragni" <matteo.ragni@antemotion.com>
Date: Fri, 15 Oct 2021 12:06:16 +0200
Subject: [PATCH 06/13] Consistent cmake targets

The commit works only on cmake files of the library:

 - exposes predictable targets (`Quartic` and `QuarticStatic`) so that can be used consistently in projects that needs them (i.e., `target_link_library(target PRIVATE QuarticStatic)`)
 - sources are hardcoded in CMakeLists.txt as suggested in guideline
 - public header are exposed so that packing can be done
 - headers installed in subdirectory relative to each library (`include/Quartic`) unless  `INSTALL_HERE` is defined. `INSTALL_HERE` forces installation in `${CMAKE_CURRENT_SOURCE_DIR}/lib`.
 - output filename of the libraries follow the same logic of the target name used before this commit
 - CTest are enabled when configured with `-DBUILD_EXECUTABLE=1` and can be run with `make test`. All tests passes on this commit.
---
 CMakeLists.txt     | 223 ++++++++++++++++++++++++---------------------
 CMakeUtilities.txt |  15 +++
 2 files changed, 132 insertions(+), 106 deletions(-)
 create mode 100644 CMakeUtilities.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d8ef49b..76b6cc4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,109 +9,120 @@
 #                                                                          #
 ############################################################################
 
-CMAKE_MINIMUM_REQUIRED( VERSION 2.8.12 )
-SET( CMAKE_VERBOSE_MAKEFILE OFF )
-SET( CMAKE_INSTALL_MESSAGE NEVER )
-
-PROJECT( Quartic CXX C )
-ENABLE_TESTING()
-
-IF ( CMAKE_BUILD_TYPE STREQUAL "Debug" )
-  SET( DEBUG_SUFFIX "_debug" )
-ELSE()
-  SET( DEBUG_SUFFIX )
-ENDIF()
-
-IF(APPLE)
-  SET( TARGETS Quartic_osx_static${DEBUG_SUFFIX} )
-ELSEIF( UNIX )
-  SET( TARGETS Quartic_linux_static${DEBUG_SUFFIX} )
-ELSE()
-  SET( CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON )
-  SET( TARGETS Quartic_win_${BITS}_static${DEBUG_SUFFIX} )
-ENDIF()
-
-IF ( BUILD_SHARED )
-  IF(APPLE)
-    SET( TARGET Quartic_osx${DEBUG_SUFFIX} )
-  ELSEIF( UNIX )
-    SET( TARGET Quartic_linux${DEBUG_SUFFIX} )
-  ELSE()
-    SET( TARGET Quartic_win_${BITS}${DEBUG_SUFFIX} )
-  ENDIF()
-ENDIF()
-
-PROJECT( ${TARGET} CXX C )
-
-INCLUDE( ./CMakeLists-cflags.txt )
-
-MESSAGE( STATUS "Compiler used: ${CMAKE_CXX_COMPILER_ID}")
-
-SET( CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} )
-SET( CMAKE_C_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG} )
-
-SET( SOURCES )
-FILE( GLOB S ./src/*.cc )
-FOREACH (F ${S})
-  FILE( RELATIVE_PATH RF ${CMAKE_CURRENT_SOURCE_DIR} "${F}" )
-  LIST( APPEND SOURCES ${RF} )
-ENDFOREACH (F ${S})
-SET( HEADERS )
-FILE( GLOB S ./src/*.hh )
-FOREACH (F ${S})
-  FILE( RELATIVE_PATH RF ${CMAKE_CURRENT_SOURCE_DIR} "${F}" )
-  LIST( APPEND HEADERS ${RF} )
-ENDFOREACH (F ${S})
-
-INCLUDE_DIRECTORIES( src )
-
-ADD_LIBRARY( ${TARGETS} STATIC ${SOURCES} ${HEADERS} )
-IF ( BUILD_SHARED )
-  ADD_LIBRARY( ${TARGET} SHARED ${SOURCES} ${HEADERS} )
-ENDIF()
-
-IF( BUILD_EXECUTABLE )
-  SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
-  SET( EXECUTABLE check_1_quadratic  check_2_cubic check_3_quartic )
-  FOREACH ( EXE ${EXECUTABLE} )
-    ADD_EXECUTABLE( ${EXE} src_tests/${EXE}.cc ${HEADERS} )
-    TARGET_LINK_LIBRARIES( ${EXE} ${TARGETS} )
-  ENDFOREACH ( EXE ${EXECUTABLE} )
-ENDIF()
-
-SET( CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/lib" )
-
-IF ( BUILD_SHARED )
-  INSTALL(
-    TARGETS ${TARGET} ${TARGETS}
-    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
-    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/dll
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
-  )
-ELSE()
-  INSTALL(
-    TARGETS ${TARGETS}
-    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
-    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/dll
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
-  )
-ENDIF()
-
-INSTALL( FILES ${HEADERS} DESTINATION ${CMAKE_INSTALL_PREFIX}/include )
-
-MESSAGE( STATUS "Using ${SSE_FLAGS} extensions")
-MESSAGE( STATUS "C compiler                  = ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER}" )
-MESSAGE( STATUS "C++ compiler                = ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER}" )
-MESSAGE( STATUS "CMAKE_CXX_FLAGS_RELEASE     = ${CMAKE_CXX_FLAGS_RELEASE}" )
-MESSAGE( STATUS "CMAKE_CXX_FLAGS             = ${CMAKE_CXX_FLAGS}" )
-MESSAGE( STATUS "CMAKE_C_FLAGS_RELEASE       = ${CMAKE_C_FLAGS_RELEASE}" )
-MESSAGE( STATUS "CMAKE_C_FLAGS               = ${CMAKE_C_FLAGS}" )
-MESSAGE( STATUS "CMAKE_SYSTEM_NAME           = ${CMAKE_SYSTEM_NAME}" )
-MESSAGE( STATUS "CMAKE_SYSTEM_PROCESSOR      = ${CMAKE_SYSTEM_PROCESSOR}" )
-IF(APPLE)
-  MESSAGE( STATUS "CMAKE_OSX_SYSROOT           = ${CMAKE_OSX_SYSROOT}" )
-  MESSAGE( STATUS "CMAKE_OSX_ARCHITECTURES     = ${CMAKE_OSX_ARCHITECTURES}" )
-  MESSAGE( STATUS "CMAKE_OSX_DEPLOYMENT_TARGET = ${CMAKE_OSX_DEPLOYMENT_TARGET}" )
-ENDIF()
-MESSAGE( STATUS "CMAKE_INSTALL_PREFIX        = ${CMAKE_INSTALL_PREFIX}" )
-MESSAGE( STATUS "BUILD_EXECUTABLE            = ${BUILD_EXECUTABLE}" )
+cmake_minimum_required(VERSION 3.0.0)
+set(CMAKE_VERBOSE_MAKEFILE OFF)
+set(CMAKE_INSTALL_MESSAGE NEVER)
+set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)
+
+if(ENABLE_CTEST)
+  enable_testing()
+endif()
+
+project(Quartic
+  VERSION 1.0.0
+  HOMEPAGE_URL "https://ebertolazzi.github.io/quarticRootsFlocke/")
+
+# NOTE: Predictable target name
+set(STATIC_PROJECT "${PROJECT_NAME}Static")
+set(DYNAMIC_PROJECT "${PROJECT_NAME}")
+
+# FIXME: This should refer to functions that acts on targets
+include(./CMakeLists-cflags.txt)
+include(./CMakeUtilities.txt)
+
+message(STATUS "Compiler used: ${CMAKE_CXX_COMPILER_ID}")
+set(CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
+set(CMAKE_C_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG})
+
+# Evaluating the suffix to append to target built by this CMake file
+ebertolazzi_artifacts_suffix(ARTIFACTS_STATIC_SUFFIX TRUE)
+if (BUILD_SHARED)
+  ebertolazzi_artifacts_suffix(ARTIFACTS_DYNAMIC_SUFFIX FALSE)
+endif()
+
+# NOTE: Glob shall be avoided. Headers and sources shall be declared 
+# manually in order to rebuild cmake-cache automatically.
+# Ref: https://cmake.org/cmake/help/v3.15/command/file.html?highlight=glob#filesystem
+set(SOURCES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
+set(SOURCES
+  "${SOURCES_DIR}/PolynomialRoots-1-Quadratic.cc"
+  "${SOURCES_DIR}/PolynomialRoots-2-Cubic.cc"
+  "${SOURCES_DIR}/PolynomialRoots-3-Quartic.cc"
+  "${SOURCES_DIR}/PolynomialRoots-Jenkins-Traub.cc"
+  "${SOURCES_DIR}/PolynomialRoots-Utils.cc")
+file(GLOB HEADERS "${SOURCES_DIR}/*.hh")
+
+add_library(${STATIC_PROJECT} STATIC ${SOURCES})
+target_include_directories(${STATIC_PROJECT} PUBLIC 
+  "$<BUILD_INTERFACE:${SOURCES_DIR}>"
+  "$<INSTALL_INTERFACE:include/${PROJECT_NAME}>")
+set_target_properties(${STATIC_PROJECT} PROPERTIES 
+  OUTPUT_NAME "${PROJECT_NAME}${ARTIFACTS_STATIC_SUFFIX}"
+  PUBLIC_HEADER "${HEADERS}"
+  POSITION_INDEPENDENT_CODE ON)
+
+if(BUILD_SHARED)
+  add_library(${DYNAMIC_PROJECT} SHARED ${SOURCES})
+  target_include_directories(${DYNAMIC_PROJECT} PUBLIC "${SOURCES_DIR}")
+  set_target_properties(${DYNAMIC_PROJECT} PROPERTIES 
+    OUTPUT_NAME "${PROJECT_NAME}${ARTIFACTS_STATIC_SUFFIX}"
+    PUBLIC_HEADER "${HEADERS}"
+    POSITION_INDEPENDENT_CODE ON)
+  if(WIN32)
+    set_target_properties(${DYNAMIC_PROJECT} PROPERTIES 
+      WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
+  endif()
+endif()
+
+if(BUILD_EXECUTABLE)
+  set(TEST_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin")
+  file(MAKE_DIRECTORY "${TEST_OUTPUT_PATH}")
+  set(EXECUTABLES check_1_quadratic  check_2_cubic check_3_quartic)
+  foreach(EXE ${EXECUTABLES})
+    add_executable(${EXE} "${CMAKE_CURRENT_SOURCE_DIR}/src_tests/${EXE}.cc")
+    target_link_libraries(${EXE} PRIVATE ${STATIC_PROJECT})
+    set_target_properties(${EXE} PROPERTIES
+      RUNTIME_OUTPUT_DIRECTORY "${TEST_OUTPUT_PATH}")
+    add_test(NAME ${EXE}
+      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+      COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/bin/${EXE}")
+  endforeach()
+endif()
+
+# INSTALL TARGETS
+
+# FIXME: CMakeLists should not override CMAKE_INSTALL_PREFIX
+# ref: https://gitlab.kitware.com/cmake/cmake/-/issues/19322
+if(INSTALL_HERE)
+  set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/lib")
+  set(PROJECT_PUBLIC_HEADER_DESTINATION "${CMAKE_INSTALL_PREFIX}/include")
+else()
+  set(PROJECT_PUBLIC_HEADER_DESTINATION "${CMAKE_INSTALL_PREFIX}/include/${PROJECT_NAME}")
+endif()
+
+set(INSTALL_TARGETS ${STATIC_PROJECT})
+if(BUILD_SHARED)
+  set(INSTALL_TARGETS ${INSTALL_TARGETS} ${DYNAMIC_PROJECT})
+endif()
+install(TARGETS ${INSTALL_TARGETS}
+  RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+  ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/lib"
+  LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/dll"
+  PUBLIC_HEADER DESTINATION "${PROJECT_PUBLIC_HEADER_DESTINATION}")
+
+message(STATUS "Using ${SSE_FLAGS} extensions")
+message(STATUS "C compiler                  = ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER}")
+message(STATUS "C++ compiler                = ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER}")
+message(STATUS "CMAKE_CXX_FLAGS_RELEASE     = ${CMAKE_CXX_FLAGS_RELEASE}")
+message(STATUS "CMAKE_CXX_FLAGS             = ${CMAKE_CXX_FLAGS}")
+message(STATUS "CMAKE_C_FLAGS_RELEASE       = ${CMAKE_C_FLAGS_RELEASE}")
+message(STATUS "CMAKE_C_FLAGS               = ${CMAKE_C_FLAGS}")
+message(STATUS "CMAKE_SYSTEM_NAME           = ${CMAKE_SYSTEM_NAME}")
+message(STATUS "CMAKE_SYSTEM_PROCESSOR      = ${CMAKE_SYSTEM_PROCESSOR}")
+if(APPLE)
+  message(STATUS "CMAKE_OSX_SYSROOT           = ${CMAKE_OSX_SYSROOT}")
+  message(STATUS "CMAKE_OSX_ARCHITECTURES     = ${CMAKE_OSX_ARCHITECTURES}")
+  message(STATUS "CMAKE_OSX_DEPLOYMENT_TARGET = ${CMAKE_OSX_DEPLOYMENT_TARGET}")
+endif()
+message(STATUS "CMAKE_INSTALL_PREFIX        = ${CMAKE_INSTALL_PREFIX}")
+message(STATUS "BUILD_EXECUTABLE            = ${BUILD_EXECUTABLE}")
diff --git a/CMakeUtilities.txt b/CMakeUtilities.txt
new file mode 100644
index 0000000..7d6e299
--- /dev/null
+++ b/CMakeUtilities.txt
@@ -0,0 +1,15 @@
+function(ebertolazzi_artifacts_suffix VAR_NAME BUILD_STATIC)
+  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
+    set(suffix "_debug")
+  endif()
+  if (${BUILD_STATIC})
+    set(suffix "_static${suffix}")
+  endif()
+  if(APPLE)
+    set(${VAR_NAME} _osx${suffix} PARENT_SCOPE)
+  elseif(UNIX)
+    set(${VAR_NAME} _linux${suffix} PARENT_SCOPE)
+  else()
+    set(${VAR_NAME} "_win_${BITS}${suffix}" PARENT_SCOPE)
+  endif()
+endfunction()
\ No newline at end of file
-- 
2.34.1

