From d6d8f22948046b5c683d442b34d33258615a1ff6 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Thu, 10 Jun 2021 21:51:53 +0200
Subject: [PATCH] Use aws-* libs from PREFIX

---
 setup.py | 9 ++-------
 1 file changed, 2 insertions(+), 7 deletions(-)

diff --git a/setup.py b/setup.py
index b7fba7e..d15cb17 100644
--- a/setup.py
+++ b/setup.py
@@ -192,10 +192,6 @@ class awscrt_build_ext(setuptools.command.build_ext.build_ext):
         os.chdir(prev_cwd)
 
     def run(self):
-        # build dependencies
-        for lib in AWS_LIBS:
-            self._build_dependency(lib)
-
         # update paths so awscrt_ext can access dependencies
         self.include_dirs.append(os.path.join(DEP_INSTALL_PATH, 'include'))
 
@@ -237,13 +233,12 @@ def awscrt_ext():
         # HACK: Don't understand why, but if AWS_LIBS are linked normally on macos, we get this error:
         # ImportError: dlopen(_awscrt.cpython-37m-darwin.so, 2): Symbol not found: _aws_byte_cursor_eq_ignore_case
         # Workaround is to pass them as 'extra_objects' instead of 'libraries'.
-        extra_objects = [os.path.join(DEP_INSTALL_PATH, 'lib', 'lib{}.a'.format(x)) for x in libraries]
-        libraries = []
+        libraries = ['{}'.format(x) for x in libraries]
 
     else:  # unix
         # linker will prefer shared libraries over static if it can find both.
         # force linker to choose static variant by using using "-l:libcrypto.a" syntax instead of just "-lcrypto".
-        libraries = [':lib{}.a'.format(x) for x in libraries]
+        libraries = ['{}'.format(x) for x in libraries]
         libraries += ['rt']
 
     if distutils.ccompiler.get_default_compiler() != 'msvc':
-- 
2.30.2

