--- tests/motion-compression.c.orig	2015-01-04 18:16:38.213712389 -0500
+++ tests/motion-compression.c	2015-01-04 18:17:01.019751035 -0500
@@ -27,7 +27,7 @@
 
   cairo_set_source_rgb (cr, 0, 0.5, 0.5);
 
-  cairo_arc (cr, cursor_x, cursor_y, 10, 0, 2 * M_PI);
+  cairo_arc (cr, cursor_x, cursor_y, 10, 0, 2 * G_PI);
   cairo_stroke (cr);
 }
 
--- tests/video-timer.c.orig	2015-01-04 18:16:38.216712394 -0500
+++ tests/video-timer.c	2015-01-04 18:17:08.037764428 -0500
@@ -108,7 +108,7 @@
   while (TRUE)
     {
       FrameData *frame_data = g_slice_new0 (FrameData);
-      frame_data->angle = 2 * M_PI * (frame_count % fps) / (double)fps;
+      frame_data->angle = 2 * G_PI * (frame_count % fps) / (double)fps;
       frame_data->stream_time = (G_GINT64_CONSTANT (1000000) * frame_count) / fps;
 
       queue_frame (frame_data);
@@ -208,14 +208,14 @@
   r = MIN (allocation.width, allocation.height) / 2.;
 
   cairo_arc (cr, cx, cy, r,
-             0, 2 * M_PI);
+             0, 2 * G_PI);
   cairo_stroke (cr);
   if (displayed_frame)
     {
       cairo_move_to (cr, cx, cy);
       cairo_line_to (cr,
-                     cx + r * cos(displayed_frame->angle - M_PI / 2),
-                     cy + r * sin(displayed_frame->angle - M_PI / 2));
+                     cx + r * cos(displayed_frame->angle - G_PI / 2),
+                     cy + r * sin(displayed_frame->angle - G_PI / 2));
       cairo_stroke (cr);
 
       if (displayed_frame->frame_counter == 0)
--- tests/animated-resizing.c.orig	2015-01-04 18:16:38.218712397 -0500
+++ tests/animated-resizing.c	2015-01-04 18:17:14.584776923 -0500
@@ -55,7 +55,7 @@
                               0.25);
         cairo_arc(cr,
                   i * DIAMETER + RADIUS, j * DIAMETER + RADIUS,
-                  RADIUS - 0.5, 0, 2 * M_PI);
+                  RADIUS - 0.5, 0, 2 * G_PI);
         cairo_fill_preserve(cr);
         cairo_set_source_rgba(cr,
                               ((i * 41) % 16) / 15.,
@@ -91,7 +91,7 @@
   for(i = 0; i < load_factor * 150; i++)
     {
       int source = g_rand_int_range(rand, 0, 255);
-      double phi = g_rand_double_range(rand, 0, 2 * M_PI) + angle;
+      double phi = g_rand_double_range(rand, 0, 2 * G_PI) + angle;
       double r = g_rand_double_range(rand, 0, width / 2 - RADIUS);
       int x, y;
 
@@ -117,7 +117,7 @@
 {
   int jitter;
 
-  angle = 2 * M_PI * progress;
+  angle = 2 * G_PI * progress;
   jitter = WINDOW_SIZE_JITTER * sin(angle);
 
   if (!cb_no_resize)
--- docs/tools/shadow.c.orig	2015-01-04 18:16:38.224712406 -0500
+++ docs/tools/shadow.c	2015-01-04 18:18:17.712897402 -0500
@@ -13,7 +13,7 @@
 static double
 gaussian (double x, double y, double r)
 {
-    return ((1 / (2 * M_PI * r)) *
+    return ((1 / (2 * G_PI * r)) *
 	    exp ((- (x * x + y * y)) / (2 * r * r)));
 }
 
