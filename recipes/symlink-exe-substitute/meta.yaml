package:
  name: symlink-exe-substitute
  version: 1.0

build:
  number: 0
  skip: true  # [not win]

outputs:

  - name: symlink-exe-runtime
    requirements:
      build:
        - {{ compiler("c") }}
      host:
      run:
    test:
      commands:
        - if not exist %PREFIX%\vcruntime*.dll exit 1
        - if not exist %PREFIX%\api-ms-win-crt-*.dll exit 1
    about:
      home: http://github.com/conda-forge/symlink-exe-substitute-feedstock
      summary: Runtimes needed for .exe files built by symlink-exe-build.
      description: |
        This is an empty, only-dependency-providing package (meta-package).
        The executable launchers built by symlink-exe-build are dynamically
        linked to the C runtime provided by the "strong" "run_exports" from the
        "compiler('c')" packages. As of now, conda-build does not offer
        transitive "run_exports" and as such this package helps to provide them.
      license: BSD-3-Clause

  - name: symlink-exe-build
    script: bld-build.bat
    build:
      run_exports:
        strong:
          - {{ pin_subpackage("symlink-exe-runtime") }}
    requirements:
      build:
      host:
      run:
        # To make things less painful (i.e., not having to deal with CMD and
        # other Windows idiosyncracies) for me (@mbargull), I opted to use a
        # POSIX shell script to create an easy-to-use wrapper around calling
        # the compiler. m2-bash is used to run the script, m2-coreutils is used
        # for realpath, etc. and m2-sed for sed itself.
        - m2-bash
        - m2-coreutils
        - m2-sed
        - {{ compiler("c") }}
    test:
      requires:
        # Some random packages that have exe files not under %PREFIX%\Scripts.
        - zstd
        - m2w64-xz
      commands:
        - if exist "%PREFIX%\Scripts\xz.exe" exit 1
        - if exist "%PREFIX%\Scripts\zstd.exe" exit 1
        - if exist "%PREFIX%\Scripts\xzcat.exe" exit 1
        - if not exist "%PREFIX%\Scripts\" md "%PREFIX%\Scripts"
        - >
          call build-symlink-exe
          "%PREFIX%\Library\mingw-w64\bin\xz.exe"
          "%PREFIX%\Library\bin\zstd.exe"
          "%PREFIX%\Library\mingw-w64\bin\xzcat.exe"
          "%PREFIX%\Scripts"
        - dir "%PREFIX%\Scripts\xz.exe"
        - dir "%PREFIX%\Scripts\zstd.exe"
        - dir "%PREFIX%\Scripts\xzcat.exe"
        - '"%PREFIX%\Scripts\xz.exe" --version | findstr "/C:XZ Utils"'
        - '"%PREFIX%\Scripts\zstd.exe" --version | findstr "/C:zstd"'
        - '"%PREFIX%\Scripts\xzcat.exe" --version | findstr "/C:XZ Utils"'

about:
  home: http://github.com/conda-forge/symlink-exe-substitute-feedstock
  dev_url: http://github.com/conda-forge/symlink-exe-substitute-feedstock
  summary: Build .exe launchers under %PREFIX%/Scripts as symlink substitutes.
  description: |
    Compile small .exe launchers to be placed under, e.g., %PREFIX%/Scripts.
    These launch target executables relative to their path inside the prefix
    and as such work as alternative to symbolic links (symlinks) to binaries.
    Use this package as a build dependency to workaround the fact that by
    default creating symlinks is not available to non-admin users on Windows.
    Usage is similar to `ln TARGET... DIRECTORY` on Unixes, e.g., run
    `call build-symlink-exe "%PREFIX%\some\dir\your.exe" "%PREFIX%\Scripts"`
  license: BSD-3-Clause AND (MIT OR PSF-2.0 OR ZPL-2.1)
  license_file:
    - LICENSE.txt
    - LICENSE-conda-forge.txt
    - LICENSE-conda-recipes.txt
    - LICENSE-setuptools-new.txt
    - LICENSE-setuptools-old.txt

extra:
  recipe-maintainers:
    - mbargull
