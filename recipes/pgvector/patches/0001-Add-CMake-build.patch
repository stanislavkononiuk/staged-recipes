From 6d5752396e18ae3ff405773085df7f96a7e812db Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Thu, 1 Dec 2022 17:12:23 -0800
Subject: [PATCH] Add CMake build

---
 CMakeLists.txt         | 21 ++++++++++++++++++
 src/CMakeLists.txt     | 39 ++++++++++++++++++++++++++++++++++
 src/ivfbuild.c         |  2 +-
 src/ivfflat.c          |  1 +
 src/ivfflat.h          | 48 +++++++++++++++++++++---------------------
 src/ivfkmeans.c        |  2 +-
 src/vector.c           | 25 ++++++++++++++++++++++
 src/vector.h           |  2 +-
 test/expected/copy.out |  4 ++--
 test/sql/copy.sql      |  4 ++--
 10 files changed, 117 insertions(+), 31 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt

diff --git CMakeLists.txt CMakeLists.txt
new file mode 100644
index 0000000..d05bb02
--- /dev/null
+++ CMakeLists.txt
@@ -0,0 +1,21 @@
+
+cmake_minimum_required(VERSION 3.20)
+project(pgvector)
+
+include(GNUInstallDirs)
+set(CMAKE_MACOSX_RPATH 1)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+find_package(PostgreSQL  REQUIRED)
+if (MSVC)
+
+    #set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_compile_options(/O3)
+
+    else()
+    add_compile_options(-ftree-vectorize -fassociative-math -fno-signed-zeros -fno-trapping-math)
+endif (MSVC)
+
+
+
+add_subdirectory(src)
diff --git src/CMakeLists.txt src/CMakeLists.txt
new file mode 100644
index 0000000..5897d64
--- /dev/null
+++ src/CMakeLists.txt
@@ -0,0 +1,39 @@
+
+
+add_library(vector
+  MODULE
+  ivfbuild.c 
+  ivfflat.c 
+  ivfinsert.c 
+  ivfkmeans.c 
+  ivfscan.c 
+  ivfutils.c 
+  ivfvacuum.c 
+  vector.c
+)
+SET_TARGET_PROPERTIES(vector PROPERTIES PREFIX "")
+target_include_directories(vector PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+                           $<INSTALL_INTERFACE:include>)
+target_include_directories(vector PRIVATE ${PostgreSQL_INCLUDE_DIRS})
+if (MSVC)
+target_include_directories(vector PRIVATE ${CMAKE_PREFIX_PATH}/include/server/port/win32)
+target_include_directories(vector PRIVATE ${CMAKE_PREFIX_PATH}/include/server/port/win32_msvc)
+endif(MSVC)
+
+target_link_libraries(vector postgres)
+
+install(TARGETS vector
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+  )
+
+
+INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/sql/ DESTINATION ${CMAKE_PREFIX_PATH}/share/extension)
+INSTALL(
+  FILES ${CMAKE_SOURCE_DIR}/vector.control 
+  DESTINATION ${CMAKE_PREFIX_PATH}/share/extension)
+  INSTALL(
+    FILES ${CMAKE_SOURCE_DIR}/sql/vector.sql 
+    DESTINATION ${CMAKE_PREFIX_PATH}/share/extension
+    RENAME vector--0.3.2.sql)
\ No newline at end of file
diff --git src/ivfbuild.c src/ivfbuild.c
index cd37aad..0ab4b24 100644
--- src/ivfbuild.c
+++ src/ivfbuild.c
@@ -107,7 +107,7 @@ SampleRows(IvfflatBuildState * buildstate)
 
 	buildstate->rowstoskip = -1;
 
-	BlockSampler_Init(&buildstate->bs, totalblocks, targsamples, random());
+	BlockSampler_Init(&buildstate->bs, totalblocks, targsamples, rand());
 
 	reservoir_init_selection_state(&buildstate->rstate, targsamples);
 	while (BlockSampler_HasMore(&buildstate->bs))
diff --git src/ivfflat.c src/ivfflat.c
index 35c0e48..6cc14f6 100644
--- src/ivfflat.c
+++ src/ivfflat.c
@@ -164,6 +164,7 @@ ivfflatvalidate(Oid opclassoid)
  *
  * See https://www.postgresql.org/docs/current/index-api.html
  */
+PGDLLEXPORT Datum ivfflathandler(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(ivfflathandler);
 Datum
 ivfflathandler(PG_FUNCTION_ARGS)
diff --git src/ivfflat.h src/ivfflat.h
index a64c28c..e54fa45 100644
--- src/ivfflat.h
+++ src/ivfflat.h
@@ -70,7 +70,7 @@ typedef struct VectorArrayData
 	int			length;
 	int			maxlen;
 	int			dim;
-	Vector		items[FLEXIBLE_ARRAY_MEMBER];
+	Vector		items[1];
 }			VectorArrayData;
 
 typedef VectorArrayData * VectorArray;
@@ -186,7 +186,7 @@ typedef struct IvfflatScanOpaqueData
 
 	/* Lists */
 	pairingheap *listQueue;
-	IvfflatScanList lists[FLEXIBLE_ARRAY_MEMBER];	/* must come last */
+	IvfflatScanList lists[1];	/* must come last */
 }			IvfflatScanOpaqueData;
 
 typedef IvfflatScanOpaqueData * IvfflatScanOpaque;
@@ -197,24 +197,24 @@ typedef IvfflatScanOpaqueData * IvfflatScanOpaque;
 #define VectorArraySet(_arr, _offset, _val) (memcpy(VECTOR_ARRAY_OFFSET(_arr, _offset), _val, VECTOR_SIZE(_arr->dim)))
 
 /* Methods */
-void		_PG_init(void);
-VectorArray VectorArrayInit(int maxlen, int dimensions);
-void		PrintVectorArray(char *msg, VectorArray arr);
-void		IvfflatKmeans(Relation index, VectorArray samples, VectorArray centers);
-FmgrInfo   *IvfflatOptionalProcInfo(Relation rel, uint16 procnum);
-bool		IvfflatNormValue(FmgrInfo *procinfo, Oid collation, Datum *value, Vector * result);
-int			IvfflatGetLists(Relation index);
-void		IvfflatUpdateList(Relation index, GenericXLogState *state, ListInfo listInfo, BlockNumber insertPage, BlockNumber originalInsertPage, BlockNumber startPage, ForkNumber forkNum);
-void		IvfflatCommitBuffer(Buffer buf, GenericXLogState *state);
-void		IvfflatAppendPage(Relation index, Buffer *buf, Page *page, GenericXLogState **state, ForkNumber forkNum);
-Buffer		IvfflatNewBuffer(Relation index, ForkNumber forkNum);
-void		IvfflatInitPage(Buffer buf, Page page);
-void		IvfflatInitRegisterPage(Relation index, Buffer *buf, Page *page, GenericXLogState **state);
+PGDLLEXPORT void		_PG_init(void);
+PGDLLEXPORT VectorArray VectorArrayInit(int maxlen, int dimensions);
+PGDLLEXPORT void		PrintVectorArray(char *msg, VectorArray arr);
+PGDLLEXPORT void		IvfflatKmeans(Relation index, VectorArray samples, VectorArray centers);
+PGDLLEXPORT FmgrInfo   *IvfflatOptionalProcInfo(Relation rel, uint16 procnum);
+PGDLLEXPORT bool		IvfflatNormValue(FmgrInfo *procinfo, Oid collation, Datum *value, Vector * result);
+PGDLLEXPORT int			IvfflatGetLists(Relation index);
+PGDLLEXPORT void		IvfflatUpdateList(Relation index, GenericXLogState *state, ListInfo listInfo, BlockNumber insertPage, BlockNumber originalInsertPage, BlockNumber startPage, ForkNumber forkNum);
+PGDLLEXPORT void		IvfflatCommitBuffer(Buffer buf, GenericXLogState *state);
+PGDLLEXPORT void		IvfflatAppendPage(Relation index, Buffer *buf, Page *page, GenericXLogState **state, ForkNumber forkNum);
+PGDLLEXPORT Buffer		IvfflatNewBuffer(Relation index, ForkNumber forkNum);
+PGDLLEXPORT void		IvfflatInitPage(Buffer buf, Page page);
+PGDLLEXPORT void		IvfflatInitRegisterPage(Relation index, Buffer *buf, Page *page, GenericXLogState **state);
 
 /* Index access methods */
-IndexBuildResult *ivfflatbuild(Relation heap, Relation index, IndexInfo *indexInfo);
-void		ivfflatbuildempty(Relation index);
-bool		ivfflatinsert(Relation index, Datum *values, bool *isnull, ItemPointer heap_tid, Relation heap, IndexUniqueCheck checkUnique
+PGDLLEXPORT IndexBuildResult *ivfflatbuild(Relation heap, Relation index, IndexInfo *indexInfo);
+PGDLLEXPORT void		ivfflatbuildempty(Relation index);
+PGDLLEXPORT bool		ivfflatinsert(Relation index, Datum *values, bool *isnull, ItemPointer heap_tid, Relation heap, IndexUniqueCheck checkUnique
 #if PG_VERSION_NUM >= 140000
 						  ,bool indexUnchanged
 #endif
@@ -222,11 +222,11 @@ bool		ivfflatinsert(Relation index, Datum *values, bool *isnull, ItemPointer hea
 						  ,IndexInfo *indexInfo
 #endif
 );
-IndexBulkDeleteResult *ivfflatbulkdelete(IndexVacuumInfo *info, IndexBulkDeleteResult *stats, IndexBulkDeleteCallback callback, void *callback_state);
-IndexBulkDeleteResult *ivfflatvacuumcleanup(IndexVacuumInfo *info, IndexBulkDeleteResult *stats);
-IndexScanDesc ivfflatbeginscan(Relation index, int nkeys, int norderbys);
-void		ivfflatrescan(IndexScanDesc scan, ScanKey keys, int nkeys, ScanKey orderbys, int norderbys);
-bool		ivfflatgettuple(IndexScanDesc scan, ScanDirection dir);
-void		ivfflatendscan(IndexScanDesc scan);
+PGDLLEXPORT IndexBulkDeleteResult *ivfflatbulkdelete(IndexVacuumInfo *info, IndexBulkDeleteResult *stats, IndexBulkDeleteCallback callback, void *callback_state);
+PGDLLEXPORT IndexBulkDeleteResult *ivfflatvacuumcleanup(IndexVacuumInfo *info, IndexBulkDeleteResult *stats);
+PGDLLEXPORT IndexScanDesc ivfflatbeginscan(Relation index, int nkeys, int norderbys);
+PGDLLEXPORT void		ivfflatrescan(IndexScanDesc scan, ScanKey keys, int nkeys, ScanKey orderbys, int norderbys);
+PGDLLEXPORT bool		ivfflatgettuple(IndexScanDesc scan, ScanDirection dir);
+PGDLLEXPORT void		ivfflatendscan(IndexScanDesc scan);
 
 #endif
diff --git src/ivfkmeans.c src/ivfkmeans.c
index fc12ff5..7bf697a 100644
--- src/ivfkmeans.c
+++ src/ivfkmeans.c
@@ -39,7 +39,7 @@ InitCenters(Relation index, VectorArray samples, VectorArray centers, float *low
 	collation = index->rd_indcollation[0];
 
 	/* Choose an initial center uniformly at random */
-	VectorArraySet(centers, 0, VectorArrayGet(samples, random() % samples->length));
+	VectorArraySet(centers, 0, VectorArrayGet(samples, rand() % samples->length));
 	centers->length++;
 
 	for (j = 0; j < numSamples; j++)
diff --git src/vector.c src/vector.c
index 9174942..7f883a7 100644
--- src/vector.c
+++ src/vector.c
@@ -106,6 +106,7 @@ PrintVector(char *msg, Vector * vector)
 /*
  * Convert textual representation to internal representation
  */
+PGDLLEXPORT Datum vector_in(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_in);
 Datum
 vector_in(PG_FUNCTION_ARGS)
@@ -182,6 +183,7 @@ vector_in(PG_FUNCTION_ARGS)
 /*
  * Convert internal representation to textual representation
  */
+PGDLLEXPORT Datum vector_out(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_out);
 Datum
 vector_out(PG_FUNCTION_ARGS)
@@ -210,6 +212,7 @@ vector_out(PG_FUNCTION_ARGS)
 /*
  * Convert type modifier
  */
+PGDLLEXPORT Datum vector_typmod_in(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_typmod_in);
 Datum
 vector_typmod_in(PG_FUNCTION_ARGS)
@@ -241,6 +244,7 @@ vector_typmod_in(PG_FUNCTION_ARGS)
 /*
  * Convert external binary representation to internal representation
  */
+PGDLLEXPORT Datum vector_recv(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_recv);
 Datum
 vector_recv(PG_FUNCTION_ARGS)
@@ -273,6 +277,7 @@ vector_recv(PG_FUNCTION_ARGS)
 /*
  * Convert internal representation to the external binary representation
  */
+PGDLLEXPORT Datum vector_send(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_send);
 Datum
 vector_send(PG_FUNCTION_ARGS)
@@ -293,6 +298,7 @@ vector_send(PG_FUNCTION_ARGS)
 /*
  * Convert vector to vector
  */
+PGDLLEXPORT Datum vector(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector);
 Datum
 vector(PG_FUNCTION_ARGS)
@@ -308,6 +314,7 @@ vector(PG_FUNCTION_ARGS)
 /*
  * Convert array to vector
  */
+PGDLLEXPORT Datum array_to_vector(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(array_to_vector);
 Datum
 array_to_vector(PG_FUNCTION_ARGS)
@@ -366,6 +373,7 @@ array_to_vector(PG_FUNCTION_ARGS)
 /*
  * Convert vector to float4[]
  */
+PGDLLEXPORT Datum vector_to_float4(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_to_float4);
 Datum
 vector_to_float4(PG_FUNCTION_ARGS)
@@ -389,6 +397,7 @@ vector_to_float4(PG_FUNCTION_ARGS)
 /*
  * Get the L2 distance between vectors
  */
+PGDLLEXPORT Datum l2_distance(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(l2_distance);
 Datum
 l2_distance(PG_FUNCTION_ARGS)
@@ -413,6 +422,7 @@ l2_distance(PG_FUNCTION_ARGS)
  * Get the L2 squared distance between vectors
  * This saves a sqrt calculation
  */
+PGDLLEXPORT Datum vector_l2_squared_distance(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_l2_squared_distance);
 Datum
 vector_l2_squared_distance(PG_FUNCTION_ARGS)
@@ -436,6 +446,7 @@ vector_l2_squared_distance(PG_FUNCTION_ARGS)
 /*
  * Get the inner product of two vectors
  */
+PGDLLEXPORT Datum inner_product(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(inner_product);
 Datum
 inner_product(PG_FUNCTION_ARGS)
@@ -455,6 +466,7 @@ inner_product(PG_FUNCTION_ARGS)
 /*
  * Get the negative inner product of two vectors
  */
+PGDLLEXPORT Datum vector_negative_inner_product(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_negative_inner_product);
 Datum
 vector_negative_inner_product(PG_FUNCTION_ARGS)
@@ -474,6 +486,7 @@ vector_negative_inner_product(PG_FUNCTION_ARGS)
 /*
  * Get the cosine distance between two vectors
  */
+PGDLLEXPORT Datum cosine_distance(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(cosine_distance);
 Datum
 cosine_distance(PG_FUNCTION_ARGS)
@@ -501,6 +514,7 @@ cosine_distance(PG_FUNCTION_ARGS)
  * Currently uses angular distance since needs to satisfy triangle inequality
  * Assumes inputs are unit vectors (skips norm)
  */
+PGDLLEXPORT Datum vector_spherical_distance(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_spherical_distance);
 Datum
 vector_spherical_distance(PG_FUNCTION_ARGS)
@@ -526,6 +540,7 @@ vector_spherical_distance(PG_FUNCTION_ARGS)
 /*
  * Get the dimensions of a vector
  */
+PGDLLEXPORT Datum vector_dims(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_dims);
 Datum
 vector_dims(PG_FUNCTION_ARGS)
@@ -538,6 +553,7 @@ vector_dims(PG_FUNCTION_ARGS)
 /*
  * Get the L2 norm of a vector
  */
+PGDLLEXPORT Datum vector_norm(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_norm);
 Datum
 vector_norm(PG_FUNCTION_ARGS)
@@ -554,6 +570,7 @@ vector_norm(PG_FUNCTION_ARGS)
 /*
  * Add vectors
  */
+PGDLLEXPORT Datum vector_add(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_add);
 Datum
 vector_add(PG_FUNCTION_ARGS)
@@ -575,6 +592,7 @@ vector_add(PG_FUNCTION_ARGS)
 /*
  * Subtract vectors
  */
+PGDLLEXPORT Datum vector_sub(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_sub);
 Datum
 vector_sub(PG_FUNCTION_ARGS)
@@ -617,6 +635,7 @@ vector_cmp_internal(Vector * a, Vector * b)
 /*
  * Less than
  */
+PGDLLEXPORT Datum vector_lt(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_lt);
 Datum
 vector_lt(PG_FUNCTION_ARGS)
@@ -630,6 +649,7 @@ vector_lt(PG_FUNCTION_ARGS)
 /*
  * Less than or equal
  */
+PGDLLEXPORT Datum vector_le(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_le);
 Datum
 vector_le(PG_FUNCTION_ARGS)
@@ -643,6 +663,7 @@ vector_le(PG_FUNCTION_ARGS)
 /*
  * Equal
  */
+PGDLLEXPORT Datum vector_eq(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_eq);
 Datum
 vector_eq(PG_FUNCTION_ARGS)
@@ -656,6 +677,7 @@ vector_eq(PG_FUNCTION_ARGS)
 /*
  * Not equal
  */
+PGDLLEXPORT Datum vector_ne(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_ne);
 Datum
 vector_ne(PG_FUNCTION_ARGS)
@@ -669,6 +691,7 @@ vector_ne(PG_FUNCTION_ARGS)
 /*
  * Greater than or equal
  */
+PGDLLEXPORT Datum vector_ge(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_ge);
 Datum
 vector_ge(PG_FUNCTION_ARGS)
@@ -682,6 +705,7 @@ vector_ge(PG_FUNCTION_ARGS)
 /*
  * Greater than
  */
+PGDLLEXPORT Datum vector_gt(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_gt);
 Datum
 vector_gt(PG_FUNCTION_ARGS)
@@ -695,6 +719,7 @@ vector_gt(PG_FUNCTION_ARGS)
 /*
  * Compare vectors
  */
+PGDLLEXPORT Datum vector_cmp(PG_FUNCTION_ARGS);
 PG_FUNCTION_INFO_V1(vector_cmp);
 Datum
 vector_cmp(PG_FUNCTION_ARGS)
diff --git src/vector.h src/vector.h
index cf14b79..8f739c6 100644
--- src/vector.h
+++ src/vector.h
@@ -15,7 +15,7 @@ typedef struct Vector
 	int32		vl_len_;		/* varlena header (do not touch directly!) */
 	int16		dim;			/* number of dimensions */
 	int16		unused;
-	float		x[FLEXIBLE_ARRAY_MEMBER];
+	float		x[1];
 }			Vector;
 
 void		PrintVector(char *msg, Vector * vector);
diff --git test/expected/copy.out test/expected/copy.out
index 4c55fa3..d9c090b 100644
--- test/expected/copy.out
+++ test/expected/copy.out
@@ -3,8 +3,8 @@ CREATE EXTENSION IF NOT EXISTS vector;
 CREATE TABLE t (val vector(3));
 INSERT INTO t (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
 CREATE TABLE t2 (val vector(3));
-\copy t TO '/tmp/data.bin' WITH (FORMAT binary)
-\copy t2 FROM '/tmp/data.bin' WITH (FORMAT binary)
+\copy t TO 'data.bin' WITH (FORMAT binary)
+\copy t2 FROM 'data.bin' WITH (FORMAT binary)
 SELECT * FROM t2 ORDER BY val;
    val   
 ---------
diff --git test/sql/copy.sql test/sql/copy.sql
index c884fa5..4a0d862 100644
--- test/sql/copy.sql
+++ test/sql/copy.sql
@@ -6,8 +6,8 @@ INSERT INTO t (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
 
 CREATE TABLE t2 (val vector(3));
 
-\copy t TO '/tmp/data.bin' WITH (FORMAT binary)
-\copy t2 FROM '/tmp/data.bin' WITH (FORMAT binary)
+\copy t TO 'data.bin' WITH (FORMAT binary)
+\copy t2 FROM 'data.bin' WITH (FORMAT binary)
 
 SELECT * FROM t2 ORDER BY val;
 
-- 
2.38.0

