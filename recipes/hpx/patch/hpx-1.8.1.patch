diff --git a/libs/full/parcelset_base/include/hpx/parcelset_base/parcelset_base_fwd.hpp b/libs/full/parcelset_base/include/hpx/parcelset_base/parcelset_base_fwd.hpp
index 4d86b68e..8d41f6f8 100644
--- a/libs/full/parcelset_base/include/hpx/parcelset_base/parcelset_base_fwd.hpp
+++ b/libs/full/parcelset_base/include/hpx/parcelset_base/parcelset_base_fwd.hpp
@@ -14,7 +14,7 @@
 namespace hpx::parcelset {
 
     class HPX_EXPORT parcelport;
-    class HPX_EXPORT locality;
+    class /* HPX_EXPORT */ locality;
     class HPX_EXPORT parcel;
 
     /// The type of a function that can be registered as a parcel write handler
diff --git a/libs/core/compute_local/include/hpx/compute_local/host/numa_binding_allocator.hpp b/libs/core/compute_local/include/hpx/compute_local/host/numa_binding_allocator.hpp
index 2b2950c5..70e0b759 100644
--- a/libs/core/compute_local/include/hpx/compute_local/host/numa_binding_allocator.hpp
+++ b/libs/core/compute_local/include/hpx/compute_local/host/numa_binding_allocator.hpp
@@ -309,7 +309,7 @@ namespace hpx { namespace compute { namespace host {
                         0));
                 nba_deb.debug(debug::str<>("alloc:user(bind)"),
                     debug::hex<12, void*>(result));
-#if defined(NUMA_ALLOCATOR_LINUX)
+#if defined(NUMA_ALLOCATOR_LINUX) && defined(MADV_NOHUGEPAGE)
                 // if Transparent Huge Pages (THP) are enabled, this prevents
                 // pages from being merged into a single numa bound block
                 int ret = madvise(result, n * sizeof(T), MADV_NOHUGEPAGE);
diff --git a/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp b/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp
index 68afa3c80a..928a434143 100644
--- a/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp
+++ b/libs/core/datastructures/include/hpx/datastructures/detail/optional.hpp
@@ -62,7 +62,7 @@ namespace hpx::optional_ns {
         {
         }
 
-        explicit constexpr optional(nullopt_t) noexcept
+        constexpr optional(nullopt_t) noexcept
           : empty_(true)
         {
         }
