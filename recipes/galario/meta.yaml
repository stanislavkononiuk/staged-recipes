# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "galario" %}
{% set version = "1.0.1" %}
{% set github = "https://github.com/mtazzari/galario" %}
{% set sha256 = "986ea0880f8066cb64251351ad40720b080c2cfe78ab3b5dc347564d0a858979" %}
# sha256 is the prefered checksum -- you can get it for a file with either of
#  `openssl sha256 <file name>`
#  `sha256sum <file name>`
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # for a release with tarball
  fn: {{ name }}-{{ version }}.tar.gz
  url: {{ github }}/archive/v{{ version }}.tar.gz
  sha256: {{ sha256 }}

  # from the master branch: only for testing
  # git_url: {{ github }}.git
  # git_url: https://github.com/fredRos/galario.git
  # git_rev: master

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [win]

requirements:
  build:
    # compilation
    - cmake
    - fftw
    - gcc  # [osx]
    # python bindings
    - python
    - cython
    - numpy 1.11.*
    - pytest
    - scipy

  run:
    # c++
    - fftw
    - libgcc  # [osx]
    # python
    - python
    - numpy >=1.11
    - pytest
    - scipy

test:
  imports:
    - galario
  source_files:
    - python/test_galario.py
    - python/utils.py
  commands:
    - test -d ${PREFIX}/
    - test ${PREFIX}/include/galario.h
    - test ${PREFIX}/lib/libgalario.so  # [linux]
    - test ${PREFIX}/lib/libgalario.dylib  # [osx]
    - cd python && py.test test_galario.py

about:
  home: {{ github }}
  license: LGPL-3.0
  license_family: GPL
  license_file: LICENSE
  summary: 'Gpu Accelerated Library for Analysing Radio Interferometer Observations'

  # The remaining entries in this section are optional, but recommended
  description: |
    galario is a library that exploits the computing power of modern graphic
    cards (GPUs) to accelerate the comparison of model predictions to radio
    interferometer observations. Namely, it speeds up the computation of the
    synthetic visibilities given a model image (or an axisymmetric brightness
    profile) and their comparison to the observations.

  doc_url: https://mtazzari.github.io/galario/
  dev_url: {{ github }}

extra:
  recipe-maintainers:
    # GitHub IDs
    - fredRos
    - mtazzari
