# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "galario" %}
{% set version = "1.0" %}
{% set github = "https://github.com/mtazzari/galario" %}
{% set sha256 = "3401cb5d0aa32d168da400c8c33a675a010b0cdd7213ff02a7bb8a8a856d9415" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

# source:

source:
  # for a release with tarball
  # fn: {{ name }}-{{ version }}.tar.gz
  # url: {{ github }}/archive/v{{ version }}.tar.gz
  # sha256: {{ sha256 }}

  # from the master branch
  # git_url: {{ github }}.git
  # git_rev: master

  # from a local repo
  git_url: ../../../galario/.git
  git_rev: conda-build

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # script: python setup.py install --single-version-externally-managed --record record.txt
  skip: true  # [win]

requirements:
  build:
    # compilation
    - cmake
    - fftw
    - gcc 4.8.5
    # python bindings
    - python
    - cython
    - numpy
    - pytest
    - scipy

  run:
    # c++
    - libgcc
    - fftw
    # python
    - python
    - numpy
    - pytest
    - scipy

test:
  commands:
    - test -d ${PREFIX}/
    - test ${PREFIX}/include/galario.h
    - test ${PREFIX}/lib/libgalario.so  # [linux]
    - test ${PREFIX}/lib/libgalario.dylib  # [osx]
    - python -c 'import galario'

about:
  home: {{ github }}
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: LGPL-3.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Gpu Accelerated Library for Analysing Radio Interferometer Observations'

  # The remaining entries in this section are optional, but recommended
  description: |
    galario is a library that exploits the computing power of modern graphic
    cards (GPUs) to accelerate the comparison of model predictions to radio
    interferometer observations. Namely, it speeds up the computation of the
    synthetic visibilities given a model image (or an axisymmetric brightness
    profile) and their comparison to the observations.

  doc_url: https://mtazzari.github.io/galario/
  dev_url: {{ github }}

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - fredRos
    - mtazzari
