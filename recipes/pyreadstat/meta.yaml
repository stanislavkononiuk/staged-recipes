# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 13 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "pyreadstat" %}
{% set version = "0.2.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 8e48f4ad426dce82ee0036f5874223fd7688709cc4a7a337fd9896cefca73596

build:
  number: 20
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # Note: --no-deps is currently required due to https://github.com/conda/conda-build/issues/3254
  # Once resolved, it should be removed.
  #script: "{{ PYTHON }} -m pip install . --no-deps -vv"
  skip: True  # [py<35]
  skip: True  # [win32]
  skip: True  # [linux32]
  script: "{{ PYTHON }} -m pip install . --no-deps -vv"

requirements:
  build:
    # if your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler("m2w64_c") }}  # [win]
    - {{ compiler('c') }}  # [not win]
  host:
    - python
    - pip
    - cython
    - m2w64-toolchain  # [win]
    - libpython  # [win]
    - zlib  # [not win]
  run:
    - python
    - pandas
    - m2w64-gcc-libs  # [win]
    - zlib  # [not win]

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    #- pyreadstat
  commands:
    - python --version
    - python -c "import pyreadstat"

   
about:
  home: https://github.com/Roche/pyreadstat
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: Apache
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: Apache
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.txt
  summary: 'read SAS, SPSS and STATA files into pandas data frames'

  # The remaining entries in this section are optional, but recommended
  description: |
    A Python package to read SAS (sas7bdat, sas7bcat, xport/xpt), SPSS (sav, zsav, por) and Stata (dta) files into pandas data frames. It is a wrapper around the C library readstat.
  doc_url: https://github.com/Roche/pyreadstat
  dev_url: https://github.com/Roche/pyreadstat

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - ofajardo
