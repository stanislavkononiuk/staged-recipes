{% set org = "njoy" %}
{% set name = "NJOY2016" %}
{% set version = "2016.66" %}
{% set build = 0 %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/{{ org }}/{{ name }}/archive/refs/tags/{{ version }}.tar.gz
  sha256: a88fe581edf03f5afff81f495ea1b626bad46150ef5c35f4c9350cc194e2ce38

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  script: {{ PYTHON }} -m pip install . -vv
  number: {{ build }}

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
  host:
    - python
    - pip
  run:
    - python

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - simplejson
    - simplejson.tests
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://www.njoy21.io/NJOY2016/
  summary: 'Nuclear Data Processing System'
  description: |
    The NJOY Nuclear Data Processing System is a modular computer code designed
    to read evaluated data in ENDF format, transform the data in various ways,
    and output the results as libraries designed to be used in various applications.
    Each module performs a well defined processing task. The modules are essentially
    independent programs, and they communicate with each other using input and
    output files, plus a very few common variables.
  license: "BSD-3-Clause"
  license_family: BSD
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  # The doc_url and dev_url are optional.
  doc_url: https://simplejson.readthedocs.io/
  dev_url: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - LisaSimpson
    - LandoCalrissian
