# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "fatiando" %}
{% set version = "0.4" %}
{% set sha256 = "7709a4f7e40fd94bce8f0825d1d33094d271052374707bf2595a2cbd314401c7" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  #script: python setup.py install --single-version-externally-managed --record record.txt
  script: python setup.py install

requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    #- setuptools  # Setuptools is only used for next release (0.5)
    - numpy
  run:
    - python
    - future
    - numpy
    - scipy
    - matplotlib
    - numba
    - pillow
    - mayavi

test:
  # Some package might need a `test/commands` key to check CLI.
  imports:
    - fatiando
    - fatiando.gravmag._prism

about:
  home: http://www.fatiando.org
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: BSD 3-clause
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.txt
  summary: 'Python toolkit for modeling and inversion in geophysics'

  # The remaining entries in this section are optional, but recommended
  description: |
    Fatiando a Terra is an open-source Python library for modeling and
    inversion in geophysics.  Our goal is provide a comprehensive and
    extensible framework for geophysical data analysis and the
    development of new methodologies.
  doc_url: http://www.fatiando.org
  dev_url: https://github.com/fatiando/fatiando

extra:
  recipe-maintainers:
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - leouieda
