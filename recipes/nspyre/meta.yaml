{% set name = "nspyre" %}
{% set version = "0.3.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive: 
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  sha256: d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  entry_points:
    - nspyre = nspyre.gui.main:main
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
  host:
    - python >=3.8
    - pip
  run:
    - python >=3.8
    - pip
    - git
    - hub

    - mongodb =4.2.*  # still don't have a version from conda-forge that works with windows
    - pymongo >=3.10.1

    - pyqtgraph >=0.11.0

    - numpy >=1.19.1  # do we want mlk versions??
    - scipy >=1.5.2
    - pandas >=1.1.1

    - pint >=0.15
    - lantz >=0.5.3 # may update the label for a minor update

    - parse >=1.17.0 # parse or argparse??
    - tqdm >=4.48.2
    - waiting       # not on conda-forge
    - rpyc >=4.1.5  # ask jacob about this vs paramiko
    # - qscintilla
    # - pyyaml
    # - coloram
    # - pyusb
    # - pyserial
    # - pyvisa-py

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - nspyre
    - simplejson.tests

about:
  home: https://github.com/NSpyre-Dev/nspyre
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  summary: 'Pythonic Networked Scientific Experimentation Toolkit'

  # The remaining entries in this section are optional, but recommended.
  description: |
    NSpyre is a Python Framework for conducting physics experiments.
    It uses a networked approach to allow for the running of experiments 
    using distributed equipment over many networked systems. The 
    experimental hardware being controlled can thus be connected to 
    different computers, which can in turn be controlled by another 
    machine running the experimental commands. This allows for the easy 
    integration of shared resources in a research environment.

    simplejson is a simple, fast, complete, correct and extensible
    JSON <https://json.org> encoder and decoder for Python 2.5+ and
    Python 3.3+. It is pure Python code with no dependencies, but includes
    an optional C extension for a serious speed boost.
  doc_url: https://nspyre.readthedocs.io/
  dev_url: https://github.com/NSpyre-Dev/nspyre

extra:
  recipe-maintainers:
    - mtsolmn
    - jacobfeder
