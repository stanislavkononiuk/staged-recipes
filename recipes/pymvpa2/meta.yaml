# Use
# python -c 'from jinja2 import Template; print(Template(open("meta.yaml").read()).render())'
# to see templating interpolated
{% set name = "pymvpa2" %}
{% set version = "2.6.1" %}
{% set sha256 = "206fa302fc6292831c50d6ffe9b1a95fc048380b0701c140eb7300dcd017052a" %}
# Common dependencies between run and build (Yarik hates duplication)
{% set common_deps = "
    - python
    - numpy \
" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: True  # [py>3]
  script: python setup.py install --single-version-externally-managed --record record.txt
  # TODO: entry_points -- well, we have scripts

requirements:
  build: {{common_deps}}
    - setuptools
    - swig
    - toolchain
  run: {{common_deps}}
    - h5py
    - joblib
    - matplotlib
    - nibabel
    - scikit-learn
    - scipy
    - statsmodels
    # TODO: Later, yet to package
    # - duecredit

test:
  requires:
    - mock
    - nose
  imports:
    - mvpa2
    - mvpa2.tests
  commands:
    - MVPA_TESTS_LABILE=no MVPA_TESTS_LOWMEM=yes MVPA_TESTS_LABILE=no MVPA_TESTS_LOWMEM=yes \
      python -m nose -s -v mvpa2

about:
  home: http://pymvpa.org
  license: MIT
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: COPYING
  summary: 'Python multivariate pattern analysis framework'

  # The remaining entries in this section are optional, but recommended
  description: |
    PyMVPA eases pattern classification analyses of large datasets, with an
    accent on neuroimaging. It provides high-level abstraction of typical
    processing steps (e.g., data preparation, classification, feature selection,
    generalization testing), a number of implementations of some popular
    algorithms (e.g., kNN, Ridge Regressions, Sparse Multinomial Logistic
    Regression), and bindings to external machine learning libraries (libsvm,
    mdp, etc).
    While it is not limited to neuroimaging data (e.g. fMRI, or EEG) it
    is eminently suited for such datasets.
  dev_url: https://github.com/PyMVPA/PyMVPA

extra:
  recipe-maintainers:
    - yarikoptic
    # Later when it all works and SPAM is meaningful
    # - mih
