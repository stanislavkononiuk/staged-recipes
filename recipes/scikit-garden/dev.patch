Binary files orig/.DS_Store and new/.DS_Store differ
diff -ruN orig/LICENSE.txt new/LICENSE.txt
--- orig/LICENSE.txt	1969-12-31 16:00:00.000000000 -0800
+++ new/LICENSE.txt	2017-12-27 11:16:05.000000000 -0800
@@ -0,0 +1,32 @@
+New BSD License
+
+Copyright (c) 2016 - scikit-garden developers.
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+  a. Redistributions of source code must retain the above copyright notice,
+     this list of conditions and the following disclaimer.
+
+  b. Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in the
+     documentation and/or other materials provided with the distribution.
+
+  c. Neither the name of the scikit-garden developers nor the names of
+     its contributors may be used to endorse or promote products
+     derived from this software without specific prior written
+     permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGE.
diff -ruN orig/MANIFEST.in new/MANIFEST.in
--- orig/MANIFEST.in	2017-06-07 04:55:57.000000000 -0700
+++ new/MANIFEST.in	2017-12-27 11:16:05.000000000 -0800
@@ -1,2 +1,3 @@
 include MANIFEST.in
+include LICENSE.txt
 recursive-include skgarden *.pyx *.pxd
diff -ruN orig/PKG-INFO new/PKG-INFO
--- orig/PKG-INFO	2017-06-07 04:59:01.000000000 -0700
+++ new/PKG-INFO	2017-12-27 11:16:29.000000000 -0800
@@ -6,6 +6,7 @@
 Author: Manoj Kumar
 Author-email: mks542@nyu.edu
 License: new BSD
+Description-Content-Type: UNKNOWN
 Description: UNKNOWN
 Platform: UNKNOWN
 Classifier: Intended Audience :: Science/Research
diff -ruN orig/README.md new/README.md
--- orig/README.md	1969-12-31 16:00:00.000000000 -0800
+++ new/README.md	2017-12-27 11:16:05.000000000 -0800
@@ -0,0 +1,66 @@
+# Scikit-Garden
+
+[![Build
+Status](https://travis-ci.org/scikit-garden/scikit-garden.svg?branch=master)](https://travis-ci.org/scikit-garden/scikit-garden)
+[![Build Status](https://circleci.com/gh/scikit-garden/scikit-garden/tree/master.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/scikit-garden/scikit-garden)
+
+Scikit-Garden or skgarden (pronounced as skarden) is a garden for Scikit-Learn compatible decision trees and forests.
+
+#### Weights at different depths of a MondrianTree
+<img src="docs/mondrian_tree/plot3.png" height="300" />
+
+#### Ordered prediction intervals on the Boston dataset.
+<img src="docs/quantile/boston.png" height="300" />
+
+
+## Installation
+
+Scikit-Garden depends on NumPy, SciPy, Scikit-Learn and Cython. So make sure these dependencies are installed using pip:
+
+```
+pip3 install setuptools numpy scipy scikit-learn cython
+```
+
+After that Scikit-Garden can be installed using pip.
+
+```
+pip install scikit-garden
+```
+
+## Available models
+
+### Regressors
+* MondrianForestRegressor
+* ExtraTreesRegressor (with `return_std` support)
+* ExtraTreesQuantileRegressor
+* RandomForestRegressor (with `return_std` support)
+* RandomForestQuantileRegressor
+
+### Classifiers
+* MondrianForestClassifier
+
+## Usage
+
+The estimators in Scikit-Garden are Scikit-Learn compatible and can serve as a drop-in replacement for Scikit-Learn's trees and forests.
+
+```python
+from sklearn.datasets import load_boston
+X, y = load_boston()
+
+### Use MondrianForests for variance estimation
+from skgarden import MondrianForestRegressor
+mfr = MondrianForestRegressor()
+mfr.fit(X, y)
+y_mean, y_std = mfr.predict(X, return_std=True)
+
+### Use QuantileForests for quantile estimation
+from skgarden import RandomForestQuantileRegressor
+rfqr = RandomForestQuantileRegressor(random_state=0)
+rfqr.fit(X, y)
+y_mean = rfqr.predict(X)
+y_median = rfqr.predict(X, 50)
+```
+
+## Important links
+-  API Reference: https://scikit-garden.github.io/api/
+-  Examples: https://scikit-garden.github.io/examples/
diff -ruN orig/scikit_garden.egg-info/PKG-INFO new/scikit_garden.egg-info/PKG-INFO
--- orig/scikit_garden.egg-info/PKG-INFO	2017-06-07 04:59:00.000000000 -0700
+++ new/scikit_garden.egg-info/PKG-INFO	2017-12-27 11:16:29.000000000 -0800
@@ -6,6 +6,7 @@
 Author: Manoj Kumar
 Author-email: mks542@nyu.edu
 License: new BSD
+Description-Content-Type: UNKNOWN
 Description: UNKNOWN
 Platform: UNKNOWN
 Classifier: Intended Audience :: Science/Research
diff -ruN orig/scikit_garden.egg-info/SOURCES.txt new/scikit_garden.egg-info/SOURCES.txt
--- orig/scikit_garden.egg-info/SOURCES.txt	2017-06-07 04:59:00.000000000 -0700
+++ new/scikit_garden.egg-info/SOURCES.txt	2017-12-27 11:16:29.000000000 -0800
@@ -1,8 +1,8 @@
+LICENSE.txt
 MANIFEST.in
+README.md
 setup.cfg
 setup.py
-/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/arrayobject.h
-/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/ufuncobject.h
 scikit_garden.egg-info/PKG-INFO
 scikit_garden.egg-info/SOURCES.txt
 scikit_garden.egg-info/dependency_links.txt
@@ -11,12 +11,9 @@
 scikit_garden.egg-info/top_level.txt
 skgarden/__init__.py
 skgarden/forest.py
-skgarden/setup.py
 skgarden/mondrian/__init__.py
-skgarden/mondrian/setup.py
 skgarden/mondrian/ensemble/__init__.py
 skgarden/mondrian/ensemble/forest.py
-skgarden/mondrian/ensemble/setup.py
 skgarden/mondrian/tree/__init__.py
 skgarden/mondrian/tree/_criterion.c
 skgarden/mondrian/tree/_criterion.pxd
@@ -30,10 +27,8 @@
 skgarden/mondrian/tree/_utils.c
 skgarden/mondrian/tree/_utils.pxd
 skgarden/mondrian/tree/_utils.pyx
-skgarden/mondrian/tree/setup.py
 skgarden/mondrian/tree/tree.py
 skgarden/quantile/__init__.py
 skgarden/quantile/ensemble.py
-skgarden/quantile/setup.py
 skgarden/quantile/tree.py
 skgarden/quantile/utils.py
\ No newline at end of file
diff -ruN orig/setup.cfg new/setup.cfg
--- orig/setup.cfg	2017-06-07 04:59:01.000000000 -0700
+++ new/setup.cfg	2017-12-27 11:16:29.000000000 -0800
@@ -1,5 +1,6 @@
 [metadata]
 description-file = README.md
+license-file = LICENSE.txt
 
 [egg_info]
 tag_build = 
diff -ruN orig/setup.py new/setup.py
--- orig/setup.py	2017-06-07 04:56:13.000000000 -0700
+++ new/setup.py	2017-12-27 11:16:05.000000000 -0800
@@ -1,11 +1,11 @@
 #! /usr/bin/env python
 
-import sys
+from distutils.version import LooseVersion
 import os
-import setuptools
-import numpy
-from numpy.distutils.core import setup
-from setuptools import find_packages
+
+import numpy as np
+from setuptools import Extension, find_packages, setup
+
 
 DISTNAME = 'scikit-garden'
 DESCRIPTION = "A garden of scikit-learn compatible trees"
@@ -15,26 +15,41 @@
 LICENSE = 'new BSD'
 VERSION = '0.1.3'
 
+CYTHON_MIN_VERSION = '0.23'
 
-def configuration(parent_package='', top_path=None):
-    if os.path.exists('MANIFEST'):
-        os.remove('MANIFEST')
-
-    from numpy.distutils.misc_util import Configuration
-    config = Configuration(None, parent_package, top_path)
-    config.add_subpackage('skgarden')
 
-    return config
+message = ('Please install cython with a version >= {0} in order '
+           'to build a scikit-garden development version.').format(
+           CYTHON_MIN_VERSION)
+try:
+    import Cython
+    if LooseVersion(Cython.__version__) < CYTHON_MIN_VERSION:
+        message += ' Your version of Cython was {0}.'.format(
+            Cython.__version__)
+        raise ValueError(message)
+    from Cython.Build import cythonize
+except ImportError as exc:
+    exc.args += (message,)
+    raise
+
+libraries = []
+if os.name == 'posix':
+    libraries.append('m')
+
+extensions = []
+for name in ['_tree', '_splitter', '_criterion', '_utils']:
+    extensions.append(Extension(
+        'skgarden.mondrian.tree.{}'.format(name),
+        sources=['skgarden/mondrian/tree/{}.pyx'.format(name)],
+        include_dirs=[np.get_include()],
+        libraries=libraries,
+        extra_compile_args=['-O3'],
+    ))
+extensions = cythonize(extensions)
 
-if __name__ == "__main__":
 
-    old_path = os.getcwd()
-    local_path = os.path.dirname(os.path.abspath(sys.argv[0]))
-
-    os.chdir(local_path)
-    sys.path.insert(0, local_path)
-    setup(configuration=configuration,
-          name=DISTNAME,
+if __name__ == "__main__":
+    setup(name=DISTNAME,
           maintainer=MAINTAINER,
           maintainer_email=MAINTAINER_EMAIL,
           packages=find_packages(),
@@ -58,4 +73,5 @@
               'Operating System :: MacOS'
             ],
           install_requires=["numpy", "scipy", "scikit-learn>=0.18", "cython"],
-          setup_requires=["cython"])
+          setup_requires=["cython"],
+          ext_modules=extensions)
diff -ruN orig/skgarden/mondrian/ensemble/forest.py new/skgarden/mondrian/ensemble/forest.py
--- orig/skgarden/mondrian/ensemble/forest.py	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/mondrian/ensemble/forest.py	2017-12-27 11:16:05.000000000 -0800
@@ -1,8 +1,12 @@
 import numpy as np
 from scipy import sparse
+from sklearn.base import ClassifierMixin
 from sklearn.ensemble.forest import ForestClassifier
 from sklearn.ensemble.forest import ForestRegressor
 from sklearn.exceptions import NotFittedError
+from sklearn.externals.joblib import delayed, Parallel
+from sklearn.preprocessing import LabelEncoder
+from sklearn.utils import check_random_state
 from sklearn.utils.validation import check_array
 from sklearn.utils.validation import check_X_y
 
@@ -10,6 +14,13 @@
 from ..tree import MondrianTreeRegressor
 
 
+def _single_tree_pfit(tree, X, y, classes=None):
+    if classes is not None:
+        tree.partial_fit(X, y, classes)
+    else:
+        tree.partial_fit(X, y)
+    return tree
+
 class BaseMondrian(object):
     def weighted_decision_path(self, X):
         """
@@ -40,6 +51,79 @@
             [est.weighted_decision_path(X) for est in self.estimators_]).tocsr()
         return paths, est_inds
 
+    # XXX: This is mainly a stripped version of BaseForest.fit
+    # from sklearn.forest
+    def partial_fit(self, X, y, classes=None):
+        """
+        Incremental building of Mondrian Forests.
+
+        Parameters
+        ----------
+        X : array_like, shape = [n_samples, n_features]
+            The input samples. Internally, it will be converted to
+            ``dtype=np.float32``
+
+        y: array_like, shape = [n_samples]
+            Input targets.
+
+        classes: array_like, shape = [n_classes]
+            Ignored for a regression problem. For a classification
+            problem, if not provided this is inferred from y.
+            This is taken into account for only the first call to
+            partial_fit and ignored for subsequent calls.
+
+        Returns
+        -------
+        self: instance of MondrianForest
+        """
+        X, y = check_X_y(X, y, dtype=np.float32, multi_output=False)
+        random_state = check_random_state(self.random_state)
+
+        # Wipe out estimators if partial_fit is called after fit.
+        first_call = not hasattr(self, "first_")
+        if first_call:
+            self.first_ = True
+
+        if isinstance(self, ClassifierMixin):
+            if first_call:
+                if classes is None:
+                    classes = LabelEncoder().fit(y).classes_
+
+                self.classes_ = classes
+                self.n_classes_ = len(self.classes_)
+
+        # Remap output
+        n_samples, self.n_features_ = X.shape
+
+        y = np.atleast_1d(y)
+        if y.ndim == 2 and y.shape[1] == 1:
+            warn("A column-vector y was passed when a 1d array was"
+                 " expected. Please change the shape of y to "
+                 "(n_samples,), for example using ravel().",
+                 DataConversionWarning, stacklevel=2)
+
+        self.n_outputs_ = 1
+
+        # Initialize estimators at first call to partial_fit.
+        if first_call:
+            # Check estimators
+            self._validate_estimator()
+            self.estimators_ = []
+
+            for _ in range(self.n_estimators):
+                tree = self._make_estimator(append=False, random_state=random_state)
+                self.estimators_.append(tree)
+
+        # XXX: Switch to threading backend when GIL is released.
+        if isinstance(self, ClassifierMixin):
+            self.estimators_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)(
+                delayed(_single_tree_pfit)(t, X, y, classes) for t in self.estimators_)
+        else:
+            self.estimators_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)(
+                delayed(_single_tree_pfit)(t, X, y) for t in self.estimators_)
+
+        return self
+
 
 class MondrianForestRegressor(ForestRegressor, BaseMondrian):
     """
@@ -173,6 +257,31 @@
         std **= 0.5
         return ensemble_mean, std
 
+    def partial_fit(self, X, y):
+        """
+        Incremental building of Mondrian Forest Regressors.
+
+        Parameters
+        ----------
+        X : array_like, shape = [n_samples, n_features]
+            The input samples. Internally, it will be converted to
+            ``dtype=np.float32``
+
+        y: array_like, shape = [n_samples]
+            Input targets.
+
+        classes: array_like, shape = [n_classes]
+            Ignored for a regression problem. For a classification
+            problem, if not provided this is inferred from y.
+            This is taken into account for only the first call to
+            partial_fit and ignored for subsequent calls.
+
+        Returns
+        -------
+        self: instance of MondrianForestClassifier
+        """
+        return super(MondrianForestRegressor, self).partial_fit(X, y)
+
 
 class MondrianForestClassifier(ForestClassifier, BaseMondrian):
     """
@@ -252,3 +361,29 @@
         """
         X, y = check_X_y(X, y, dtype=np.float32, multi_output=False)
         return super(MondrianForestClassifier, self).fit(X, y)
+
+    def partial_fit(self, X, y, classes=None):
+        """
+        Incremental building of Mondrian Forest Classifiers.
+
+        Parameters
+        ----------
+        X : array_like, shape = [n_samples, n_features]
+            The input samples. Internally, it will be converted to
+            ``dtype=np.float32``
+
+        y: array_like, shape = [n_samples]
+            Input targets.
+
+        classes: array_like, shape = [n_classes]
+            Ignored for a regression problem. For a classification
+            problem, if not provided this is inferred from y.
+            This is taken into account for only the first call to
+            partial_fit and ignored for subsequent calls.
+
+        Returns
+        -------
+        self: instance of MondrianForestClassifier
+        """
+        return super(MondrianForestClassifier, self).partial_fit(
+            X, y, classes=classes)
diff -ruN orig/skgarden/mondrian/ensemble/setup.py new/skgarden/mondrian/ensemble/setup.py
--- orig/skgarden/mondrian/ensemble/setup.py	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/mondrian/ensemble/setup.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,17 +0,0 @@
-import os
-
-import numpy
-from numpy.distutils.misc_util import Configuration
-
-
-def configuration(parent_package="", top_path=None):
-    config = Configuration("ensemble", parent_package, top_path)
-    libraries = []
-    if os.name == 'posix':
-        libraries.append('m')
-    return config
-
-
-if __name__ == "__main__":
-    from numpy.distutils.core import setup
-    setup(**configuration(top_path="").todict())
diff -ruN orig/skgarden/mondrian/setup.py new/skgarden/mondrian/setup.py
--- orig/skgarden/mondrian/setup.py	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/mondrian/setup.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,32 +0,0 @@
-from distutils.version import LooseVersion
-
-CYTHON_MIN_VERSION = '0.23'
-
-def configuration(parent_package='', top_path=None):
-    from numpy.distutils.misc_util import Configuration
-
-    config = Configuration('mondrian', parent_package, top_path)
-    config.add_subpackage('tree')
-    config.add_subpackage('ensemble')
-
-    message = ('Please install cython with a version >= {0} in order '
-               'to build a scikit-learn development version.').format(
-               CYTHON_MIN_VERSION)
-    try:
-        import Cython
-        if LooseVersion(Cython.__version__) < CYTHON_MIN_VERSION:
-            message += ' Your version of Cython was {0}.'.format(
-                Cython.__version__)
-            raise ValueError(message)
-        from Cython.Build import cythonize
-    except ImportError as exc:
-        exc.args += (message,)
-        raise
-    config.ext_modules = cythonize(config.ext_modules)
-
-    return config
-
-
-if __name__ == '__main__':
-    from numpy.distutils.core import setup
-    setup(**configuration(top_path='').todict())
diff -ruN orig/skgarden/mondrian/tree/_criterion.c new/skgarden/mondrian/tree/_criterion.c
--- orig/skgarden/mondrian/tree/_criterion.c	2017-06-07 04:59:00.000000000 -0700
+++ new/skgarden/mondrian/tree/_criterion.c	2017-12-27 11:16:27.000000000 -0800
@@ -1,20 +1,24 @@
-/* Generated by Cython 0.25.2 */
+/* Generated by Cython 0.27.3 */
 
 /* BEGIN: Cython Metadata
 {
     "distutils": {
         "depends": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/arrayobject.h",
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/ufuncobject.h"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h"
         ],
         "extra_compile_args": [
             "-O3"
         ],
         "include_dirs": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include"
         ],
         "libraries": [
             "m"
+        ],
+        "name": "skgarden.mondrian.tree._criterion",
+        "sources": [
+            "skgarden/mondrian/tree/_criterion.pyx"
         ]
     },
     "module_name": "skgarden.mondrian.tree._criterion"
@@ -25,10 +29,11 @@
 #include "Python.h"
 #ifndef Py_PYTHON_H
     #error Python headers needed to compile C extensions, please install development version of Python.
-#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
-    #error Cython requires Python 2.6+ or Python 3.2+.
+#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
+    #error Cython requires Python 2.6+ or Python 3.3+.
 #else
-#define CYTHON_ABI "0_25_2"
+#define CYTHON_ABI "0_27_3"
+#define CYTHON_FUTURE_DIVISION 0
 #include <stddef.h>
 #ifndef offsetof
   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
@@ -50,8 +55,9 @@
 #ifndef DL_EXPORT
   #define DL_EXPORT(t) t
 #endif
+#define __PYX_COMMA ,
 #ifndef HAVE_LONG_LONG
-  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
+  #if PY_VERSION_HEX >= 0x02070000
     #define HAVE_LONG_LONG
   #endif
 #endif
@@ -67,8 +73,14 @@
   #define CYTHON_COMPILING_IN_CPYTHON 0
   #undef CYTHON_USE_TYPE_SLOTS
   #define CYTHON_USE_TYPE_SLOTS 0
-  #undef CYTHON_USE_ASYNC_SLOTS
-  #define CYTHON_USE_ASYNC_SLOTS 0
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #if PY_VERSION_HEX < 0x03050000
+    #undef CYTHON_USE_ASYNC_SLOTS
+    #define CYTHON_USE_ASYNC_SLOTS 0
+  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
+    #define CYTHON_USE_ASYNC_SLOTS 1
+  #endif
   #undef CYTHON_USE_PYLIST_INTERNALS
   #define CYTHON_USE_PYLIST_INTERNALS 0
   #undef CYTHON_USE_UNICODE_INTERNALS
@@ -87,6 +99,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #elif defined(PYSTON_VERSION)
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 1
@@ -94,6 +110,8 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
   #undef CYTHON_USE_ASYNC_SLOTS
   #define CYTHON_USE_ASYNC_SLOTS 0
   #undef CYTHON_USE_PYLIST_INTERNALS
@@ -118,6 +136,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #else
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 0
@@ -125,6 +147,12 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #if PY_VERSION_HEX < 0x02070000
+    #undef CYTHON_USE_PYTYPE_LOOKUP
+    #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
+    #define CYTHON_USE_PYTYPE_LOOKUP 1
+  #endif
   #if PY_MAJOR_VERSION < 3
     #undef CYTHON_USE_ASYNC_SLOTS
     #define CYTHON_USE_ASYNC_SLOTS 0
@@ -164,6 +192,12 @@
   #ifndef CYTHON_FAST_PYCALL
     #define CYTHON_FAST_PYCALL 1
   #endif
+  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
+    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
+  #endif
+  #ifndef CYTHON_USE_TP_FINALIZE
+    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
+  #endif
 #endif
 #if !defined(CYTHON_FAST_PYCCALL)
 #define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
@@ -202,19 +236,44 @@
 #ifndef Py_TPFLAGS_HAVE_FINALIZE
   #define Py_TPFLAGS_HAVE_FINALIZE 0
 #endif
-#ifndef METH_FASTCALL
-  #define METH_FASTCALL 0x80
-  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
-                                              Py_ssize_t nargs, PyObject *kwnames);
+#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
+  #ifndef METH_FASTCALL
+     #define METH_FASTCALL 0x80
+  #endif
+  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
+  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
+                                                          Py_ssize_t nargs, PyObject *kwnames);
 #else
   #define __Pyx_PyCFunctionFast _PyCFunctionFast
+  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
 #endif
 #if CYTHON_FAST_PYCCALL
 #define __Pyx_PyFastCFunction_Check(func)\
-    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
+    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
 #else
 #define __Pyx_PyFastCFunction_Check(func) 0
 #endif
+#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#elif PY_VERSION_HEX >= 0x03060000
+  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
+#elif PY_VERSION_HEX >= 0x03000000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#else
+  #define __Pyx_PyThreadState_Current _PyThreadState_Current
+#endif
+#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
+#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
+#else
+#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
+#endif
+#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
+#endif
 #if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
   #define CYTHON_PEP393_ENABLED 1
   #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
@@ -298,7 +357,6 @@
 #ifndef PySet_CheckExact
   #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
 #endif
-#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
 #define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
 #if PY_MAJOR_VERSION >= 3
   #define PyIntObject                  PyLongObject
@@ -338,20 +396,28 @@
 #else
   #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
 #endif
+#ifndef __has_attribute
+  #define __has_attribute(x) 0
+#endif
+#ifndef __has_cpp_attribute
+  #define __has_cpp_attribute(x) 0
+#endif
 #if CYTHON_USE_ASYNC_SLOTS
   #if PY_VERSION_HEX >= 0x030500B1
     #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
     #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
   #else
+    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
+  #endif
+#else
+  #define __Pyx_PyType_AsAsync(obj) NULL
+#endif
+#ifndef __Pyx_PyAsyncMethodsStruct
     typedef struct {
         unaryfunc am_await;
         unaryfunc am_aiter;
         unaryfunc am_anext;
     } __Pyx_PyAsyncMethodsStruct;
-    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
-  #endif
-#else
-  #define __Pyx_PyType_AsAsync(obj) NULL
 #endif
 #ifndef CYTHON_RESTRICT
   #if defined(__GNUC__)
@@ -392,6 +458,43 @@
 # endif
 #endif
 #define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
+#ifdef _MSC_VER
+    #ifndef _MSC_STDINT_H_
+        #if _MSC_VER < 1300
+           typedef unsigned char     uint8_t;
+           typedef unsigned int      uint32_t;
+        #else
+           typedef unsigned __int8   uint8_t;
+           typedef unsigned __int32  uint32_t;
+        #endif
+    #endif
+#else
+   #include <stdint.h>
+#endif
+#ifndef CYTHON_FALLTHROUGH
+  #if defined(__cplusplus) && __cplusplus >= 201103L
+    #if __has_cpp_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH [[fallthrough]]
+    #elif __has_cpp_attribute(clang::fallthrough)
+      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
+    #elif __has_cpp_attribute(gnu::fallthrough)
+      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
+    #endif
+  #endif
+  #ifndef CYTHON_FALLTHROUGH
+    #if __has_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
+    #else
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+  #if defined(__clang__ ) && defined(__apple_build_version__)
+    #if __apple_build_version__ < 7000000
+      #undef  CYTHON_FALLTHROUGH
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+#endif
 
 #ifndef CYTHON_INLINE
   #if defined(__clang__)
@@ -432,14 +535,6 @@
   __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
 }
 
-#if PY_MAJOR_VERSION >= 3
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
-#else
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
-#endif
-
 #ifndef __PYX_EXTERN_C
   #ifdef __cplusplus
     #define __PYX_EXTERN_C extern "C"
@@ -452,15 +547,15 @@
 #define __PYX_HAVE_API__skgarden__mondrian__tree___criterion
 #include <string.h>
 #include <stdio.h>
-#include <stdlib.h>
 #include "numpy/arrayobject.h"
 #include "numpy/ufuncobject.h"
+#include <stdlib.h>
 #include <math.h>
 #ifdef _OPENMP
 #include <omp.h>
 #endif /* _OPENMP */
 
-#ifdef PYREX_WITHOUT_ASSERTIONS
+#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
 #define CYTHON_WITHOUT_ASSERTIONS
 #endif
 
@@ -491,8 +586,8 @@
     #define __Pyx_sst_abs(value) abs(value)
 #elif SIZEOF_LONG >= SIZEOF_SIZE_T
     #define __Pyx_sst_abs(value) labs(value)
-#elif defined (_MSC_VER) && defined (_M_X64)
-    #define __Pyx_sst_abs(value) _abs64(value)
+#elif defined (_MSC_VER)
+    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
 #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
     #define __Pyx_sst_abs(value) llabs(value)
 #elif defined (__GNUC__)
@@ -500,8 +595,8 @@
 #else
     #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
 #endif
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
 #define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
 #define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
 #define __Pyx_PyBytes_FromString        PyBytes_FromString
@@ -514,23 +609,27 @@
     #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
 #endif
-#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
-#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
 #define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
 #define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
 #define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
 #define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
 #define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
-#if PY_MAJOR_VERSION < 3
-static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
-{
+static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
     const Py_UNICODE *u_end = u;
     while (*u_end++) ;
     return (size_t)(u_end - u - 1);
 }
-#else
-#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
-#endif
 #define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
 #define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
 #define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
@@ -539,6 +638,8 @@
 #define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
 static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
+#define __Pyx_PySequence_Tuple(obj)\
+    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
 static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
 static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
 #if CYTHON_ASSUME_SAFE_MACROS
@@ -637,10 +738,12 @@
   #define likely(x)   (x)
   #define unlikely(x) (x)
 #endif /* __GNUC__ */
+static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
 
-static PyObject *__pyx_m;
+static PyObject *__pyx_m = NULL;
 static PyObject *__pyx_d;
 static PyObject *__pyx_b;
+static PyObject *__pyx_cython_runtime;
 static PyObject *__pyx_empty_tuple;
 static PyObject *__pyx_empty_bytes;
 static PyObject *__pyx_empty_unicode;
@@ -673,6 +776,7 @@
 
 
 static const char *__pyx_f[] = {
+  "stringsource",
   "skgarden/mondrian/tree/_criterion.pyx",
   "__init__.pxd",
   "type.pxd",
@@ -680,6 +784,18 @@
   "skgarden/mondrian/tree/_tree.pxd",
   "skgarden/mondrian/tree/_utils.pxd",
 };
+/* ForceInitThreads.proto */
+#ifndef __PYX_FORCE_INIT_THREADS
+  #define __PYX_FORCE_INIT_THREADS 0
+#endif
+
+/* NoFastGil.proto */
+#define __Pyx_PyGILState_Ensure PyGILState_Ensure
+#define __Pyx_PyGILState_Release PyGILState_Release
+#define __Pyx_FastGIL_Remember()
+#define __Pyx_FastGIL_Forget()
+#define __Pyx_FastGilFuncInit()
+
 /* BufferFormatStructs.proto */
 #define IS_UNSIGNED(type) (((type) -1) > 0)
 struct __Pyx_StructField_;
@@ -717,7 +833,7 @@
 } __Pyx_BufFmt_Context;
 
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":725
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":743
  * # in Cython to enable them only on the right systems.
  * 
  * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
@@ -726,7 +842,7 @@
  */
 typedef npy_int8 __pyx_t_5numpy_int8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":726
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
  * 
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
@@ -735,7 +851,7 @@
  */
 typedef npy_int16 __pyx_t_5numpy_int16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":727
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
@@ -744,7 +860,7 @@
  */
 typedef npy_int32 __pyx_t_5numpy_int32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":728
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":746
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t
  * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
@@ -753,7 +869,7 @@
  */
 typedef npy_int64 __pyx_t_5numpy_int64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":732
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":750
  * #ctypedef npy_int128     int128_t
  * 
  * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
@@ -762,7 +878,7 @@
  */
 typedef npy_uint8 __pyx_t_5numpy_uint8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":733
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
  * 
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
@@ -771,7 +887,7 @@
  */
 typedef npy_uint16 __pyx_t_5numpy_uint16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":734
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":752
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
@@ -780,7 +896,7 @@
  */
 typedef npy_uint32 __pyx_t_5numpy_uint32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":735
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t
  * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
@@ -789,7 +905,7 @@
  */
 typedef npy_uint64 __pyx_t_5numpy_uint64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":739
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":757
  * #ctypedef npy_uint128    uint128_t
  * 
  * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
@@ -798,7 +914,7 @@
  */
 typedef npy_float32 __pyx_t_5numpy_float32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":740
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
  * 
  * ctypedef npy_float32    float32_t
  * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
@@ -807,7 +923,7 @@
  */
 typedef npy_float64 __pyx_t_5numpy_float64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":749
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
  * # The int types are mapped a bit surprising --
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
@@ -816,7 +932,7 @@
  */
 typedef npy_long __pyx_t_5numpy_int_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":750
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
@@ -825,7 +941,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_long_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":751
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t
  * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
@@ -834,7 +950,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_longlong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":753
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
  * ctypedef npy_longlong   longlong_t
  * 
  * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
@@ -843,7 +959,7 @@
  */
 typedef npy_ulong __pyx_t_5numpy_uint_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":754
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":772
  * 
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
@@ -852,7 +968,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":755
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t
  * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
@@ -861,7 +977,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":757
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
  * ctypedef npy_ulonglong  ulonglong_t
  * 
  * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
@@ -870,7 +986,7 @@
  */
 typedef npy_intp __pyx_t_5numpy_intp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":758
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
  * 
  * ctypedef npy_intp       intp_t
  * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
@@ -879,7 +995,7 @@
  */
 typedef npy_uintp __pyx_t_5numpy_uintp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":760
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
  * ctypedef npy_uintp      uintp_t
  * 
  * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
@@ -888,7 +1004,7 @@
  */
 typedef npy_double __pyx_t_5numpy_float_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":761
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
  * 
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
@@ -897,7 +1013,7 @@
  */
 typedef npy_double __pyx_t_5numpy_double_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":762
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t
  * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
@@ -1120,7 +1236,7 @@
 struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_MSE;
 struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":764
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
  * ctypedef npy_longdouble longdouble_t
  * 
  * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
@@ -1129,7 +1245,7 @@
  */
 typedef npy_cfloat __pyx_t_5numpy_cfloat_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":765
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
  * 
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
@@ -1138,7 +1254,7 @@
  */
 typedef npy_cdouble __pyx_t_5numpy_cdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":766
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t
  * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
@@ -1147,7 +1263,7 @@
  */
 typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":768
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":786
  * ctypedef npy_clongdouble clongdouble_t
  * 
  * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
@@ -1189,6 +1305,7 @@
 struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict;
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build;
 
 /* "_tree.pxd":25
@@ -1212,7 +1329,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t variance;
 };
 
-/* "_tree.pxd":70
+/* "_tree.pxd":71
  *                           double E) nogil except -1
  *     cdef int _resize(self, SIZE_t capacity) nogil except -1
  *     cdef int _resize_c(self, SIZE_t capacity=*) nogil except -1             # <<<<<<<<<<<<<<
@@ -1224,7 +1341,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t capacity;
 };
 
-/* "_tree.pxd":75
+/* "_tree.pxd":76
  *     cdef np.ndarray _get_node_ndarray(self)
  * 
  *     cpdef tuple predict(self, object X, bint return_std=*, bint is_regression=*)             # <<<<<<<<<<<<<<
@@ -1237,8 +1354,21 @@
   int is_regression;
 };
 
-/* "_tree.pxd":106
- *     cdef SIZE_t max_depth           # Maximal tree depth
+/* "_tree.pxd":88
+ *                      SIZE_t X_f_stride, SIZE_t y_stride, UINT32_t random_state,
+ *                      SIZE_t min_samples_split)
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,             # <<<<<<<<<<<<<<
+ *                                   SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+ *                                   DTYPE_t tau, SIZE_t n_node_samples,
+ */
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes {
+  int __pyx_n;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t child_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t y_start;
+};
+
+/* "_tree.pxd":120
+ *     cdef object random_state
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
  *                 np.ndarray sample_weight=*,
@@ -1262,7 +1392,7 @@
   __pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX = 0x7FFFFFFF
 };
 
-/* "_utils.pxd":65
+/* "_utils.pxd":69
  * 
  * # A record on the stack for depth-first tree growing
  * cdef struct StackRecord:             # <<<<<<<<<<<<<<
@@ -1331,10 +1461,11 @@
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *nodes;
   double *value;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t value_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t root;
 };
 
 
-/* "_tree.pxd":91
+/* "_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1349,10 +1480,11 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t min_samples_leaf;
   double min_weight_leaf;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t max_depth;
+  PyObject *random_state;
 };
 
 
-/* "_utils.pxd":74
+/* "_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1398,7 +1530,7 @@
 };
 
 
-/* "skgarden/mondrian/tree/_criterion.pyx":212
+/* "skgarden/mondrian/tree/_criterion.pyx":218
  * 
  * 
  * cdef class RegressionCriterion(Criterion):             # <<<<<<<<<<<<<<
@@ -1411,7 +1543,7 @@
 };
 
 
-/* "skgarden/mondrian/tree/_criterion.pyx":420
+/* "skgarden/mondrian/tree/_criterion.pyx":426
  * 
  * 
  * cdef class MSE(RegressionCriterion):             # <<<<<<<<<<<<<<
@@ -1423,7 +1555,7 @@
 };
 
 
-/* "skgarden/mondrian/tree/_criterion.pyx":514
+/* "skgarden/mondrian/tree/_criterion.pyx":523
  * 
  * 
  * cdef class ClassificationCriterion(Criterion):             # <<<<<<<<<<<<<<
@@ -1474,16 +1606,19 @@
   PyObject *(*predict)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args);
   PyArrayObject *(*apply)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyArrayObject *(*_apply_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyArrayObject *(*_apply_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyObject *(*_decision_path_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyObject *(*_decision_path_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*weighted_decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
+  void (*_init)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*extend)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*set_node_attributes)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args);
+  void (*update_node_extent)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*_update_node_info)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree;
 
 
-/* "_tree.pxd":91
+/* "_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1498,7 +1633,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
 
 
-/* "_utils.pxd":74
+/* "_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1532,11 +1667,12 @@
   void (*node_value)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *);
   double (*impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double);
   double (*proxy_impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
+  int (*is_pure)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion;
 
 
-/* "skgarden/mondrian/tree/_criterion.pyx":212
+/* "skgarden/mondrian/tree/_criterion.pyx":218
  * 
  * 
  * cdef class RegressionCriterion(Criterion):             # <<<<<<<<<<<<<<
@@ -1550,7 +1686,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion;
 
 
-/* "skgarden/mondrian/tree/_criterion.pyx":420
+/* "skgarden/mondrian/tree/_criterion.pyx":426
  * 
  * 
  * cdef class MSE(RegressionCriterion):             # <<<<<<<<<<<<<<
@@ -1564,7 +1700,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_MSE *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_MSE;
 
 
-/* "skgarden/mondrian/tree/_criterion.pyx":514
+/* "skgarden/mondrian/tree/_criterion.pyx":523
  * 
  * 
  * cdef class ClassificationCriterion(Criterion):             # <<<<<<<<<<<<<<
@@ -1660,6 +1796,52 @@
 /* GetBuiltinName.proto */
 static PyObject *__Pyx_GetBuiltinName(PyObject *name);
 
+/* PyObjectCall.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
+#else
+#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
+#endif
+
+/* PyThreadStateGet.proto */
+#if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
+#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
+#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
+#else
+#define __Pyx_PyThreadState_declare
+#define __Pyx_PyThreadState_assign
+#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
+#endif
+
+/* PyErrFetchRestore.proto */
+#if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
+#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
+#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
+#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
+#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
+static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
+static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
+#else
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
+#endif
+#else
+#define __Pyx_PyErr_Clear() PyErr_Clear()
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
+#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
+#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
+#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
+#endif
+
+/* RaiseException.proto */
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
+
 /* RaiseArgTupleInvalid.proto */
 static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
     Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);
@@ -1690,13 +1872,6 @@
 #endif
 #endif
 
-/* PyObjectCall.proto */
-#if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
-#else
-#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
-#endif
-
 /* PyObjectCallMethO.proto */
 #if CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
@@ -1712,52 +1887,34 @@
 #define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
 #endif
 
-/* ForceInitThreads.proto */
-#ifndef __PYX_FORCE_INIT_THREADS
-  #define __PYX_FORCE_INIT_THREADS 0
-#endif
-
 /* ArgTypeTest.proto */
-static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
-    const char *name, int exact);
+#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
+    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
+        __Pyx__ArgTypeTest(obj, type, name, exact))
+static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);
+
+/* IsLittleEndian.proto */
+static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);
 
 /* BufferFormatCheck.proto */
-static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
-    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
-static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
 static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
 static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                               __Pyx_BufFmt_StackElem* stack,
-                              __Pyx_TypeInfo* type); // PROTO
-
-#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
-/* PyThreadStateGet.proto */
-#if CYTHON_FAST_THREAD_STATE
-#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
-#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
-#else
-#define __Pyx_PyThreadState_declare
-#define __Pyx_PyThreadState_assign
-#endif
-
-/* PyErrFetchRestore.proto */
-#if CYTHON_FAST_THREAD_STATE
-#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
-#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
-#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
-#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
-static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
-static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
-#else
-#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
-#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
-#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
-#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
-#endif
+                              __Pyx_TypeInfo* type);
 
-/* RaiseException.proto */
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
+/* BufferGetAndValidate.proto */
+#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
+    ((obj == Py_None || obj == NULL) ?\
+    (__Pyx_ZeroBuffer(buf), 0) :\
+    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
+static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
+    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
+static void __Pyx_ZeroBuffer(Py_buffer* buf);
+static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
+static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
+static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 
+#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
 /* DictGetItem.proto */
 #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
 static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
@@ -1821,6 +1978,9 @@
 /* SetVTable.proto */
 static int __Pyx_SetVtable(PyObject *dict, void *vtable);
 
+/* SetupReduce.proto */
+static int __Pyx_setup_reduce(PyObject* type_obj);
+
 /* GetVTable.proto */
 static void* __Pyx_GetVtable(PyObject *dict);
 
@@ -1830,6 +1990,13 @@
 /* GetModuleGlobalName.proto */
 static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);
 
+/* CLineInTraceback.proto */
+#ifdef CYTHON_CLINE_IN_TRACEBACK
+#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
+#else
+static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
+#endif
+
 /* CodeObjectCache.proto */
 typedef struct {
     PyCodeObject* code_object;
@@ -1872,10 +2039,6 @@
 #endif
 
 
-/* None.proto */
-static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
-static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};
-
 /* CIntToPy.proto */
 static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);
 
@@ -1995,6 +2158,18 @@
 /* CIntFromPy.proto */
 static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);
 
+/* FastTypeChecks.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
+#else
+#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
+#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
+#endif
+
 /* CheckBinaryVersion.proto */
 static int __Pyx_check_binary_version(void);
 
@@ -2028,6 +2203,7 @@
 static void __pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_node_value(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_dest); /* proto*/
 static double __pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_proxy_impurity_improvement(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self); /* proto*/
 static double __pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_impurity_improvement(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self, double __pyx_v_impurity); /* proto*/
+static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_is_pure(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion_init(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_DOUBLE_t *__pyx_v_y, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_y_stride, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_DOUBLE_t *__pyx_v_sample_weight, double __pyx_v_weighted_n_samples, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *__pyx_v_samples, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_start, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_end); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion_reset(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *__pyx_v_self); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion_reverse_reset(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *__pyx_v_self); /* proto*/
@@ -2038,6 +2214,7 @@
 static double __pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_node_impurity(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_MSE *__pyx_v_self); /* proto*/
 static double __pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_proxy_impurity_improvement(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_MSE *__pyx_v_self); /* proto*/
 static void __pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_children_impurity(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_MSE *__pyx_v_self, double *__pyx_v_impurity_left, double *__pyx_v_impurity_right); /* proto*/
+static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_is_pure(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_MSE *__pyx_v_self); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_init(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_DOUBLE_t *__pyx_v_y, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_y_stride, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_DOUBLE_t *__pyx_v_sample_weight, double __pyx_v_weighted_n_samples, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *__pyx_v_samples, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_start, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_end); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_reset(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_reverse_reset(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self); /* proto*/
@@ -2045,6 +2222,7 @@
 static double __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_node_impurity(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self); /* proto*/
 static void __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_children_impurity(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_impurity_left, CYTHON_UNUSED double *__pyx_v_impurity_right); /* proto*/
 static void __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_node_value(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self, double *__pyx_v_dest); /* proto*/
+static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_is_pure(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self); /* proto*/
 
 /* Module declarations from 'cpython.buffer' */
 
@@ -2063,7 +2241,7 @@
 
 /* Module declarations from 'cpython.ref' */
 
-/* Module declarations from 'libc.stdlib' */
+/* Module declarations from 'cpython.mem' */
 
 /* Module declarations from 'numpy' */
 
@@ -2076,6 +2254,8 @@
 static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
 static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/
 
+/* Module declarations from 'libc.stdlib' */
+
 /* Module declarations from 'libc.math' */
 
 /* Module declarations from 'skgarden.mondrian.tree._splitter' */
@@ -2106,9 +2286,11 @@
 static double __pyx_v_8skgarden_8mondrian_4tree_10_criterion_INFINITY;
 static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t = { "SIZE_t", NULL, sizeof(__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t), 0 };
 #define __Pyx_MODULE_NAME "skgarden.mondrian.tree._criterion"
+extern int __pyx_module_is_main_skgarden__mondrian__tree___criterion;
 int __pyx_module_is_main_skgarden__mondrian__tree___criterion = 0;
 
 /* Implementation of 'skgarden.mondrian.tree._criterion' */
+static PyObject *__pyx_builtin_TypeError;
 static PyObject *__pyx_builtin_MemoryError;
 static PyObject *__pyx_builtin_range;
 static PyObject *__pyx_builtin_ValueError;
@@ -2117,21 +2299,30 @@
 static const char __pyx_k_np[] = "np";
 static const char __pyx_k_inf[] = "inf";
 static const char __pyx_k_main[] = "__main__";
+static const char __pyx_k_name[] = "__name__";
 static const char __pyx_k_test[] = "__test__";
 static const char __pyx_k_numpy[] = "numpy";
 static const char __pyx_k_range[] = "range";
 static const char __pyx_k_import[] = "__import__";
+static const char __pyx_k_reduce[] = "__reduce__";
 static const char __pyx_k_getstate[] = "__getstate__";
+static const char __pyx_k_setstate[] = "__setstate__";
+static const char __pyx_k_TypeError[] = "TypeError";
 static const char __pyx_k_n_classes[] = "n_classes";
 static const char __pyx_k_n_outputs[] = "n_outputs";
 static const char __pyx_k_n_samples[] = "n_samples";
+static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
 static const char __pyx_k_ValueError[] = "ValueError";
 static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
 static const char __pyx_k_ImportError[] = "ImportError";
 static const char __pyx_k_MemoryError[] = "MemoryError";
 static const char __pyx_k_RuntimeError[] = "RuntimeError";
+static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
+static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
+static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
 static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
 static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
+static const char __pyx_k_self_sample_weight_self_samples[] = "self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling";
 static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
 static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
 static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
@@ -2144,7 +2335,9 @@
 static PyObject *__pyx_n_s_MemoryError;
 static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
 static PyObject *__pyx_n_s_RuntimeError;
+static PyObject *__pyx_n_s_TypeError;
 static PyObject *__pyx_n_s_ValueError;
+static PyObject *__pyx_n_s_cline_in_traceback;
 static PyObject *__pyx_n_s_getstate;
 static PyObject *__pyx_n_s_import;
 static PyObject *__pyx_n_s_inf;
@@ -2152,6 +2345,7 @@
 static PyObject *__pyx_n_s_n_classes;
 static PyObject *__pyx_n_s_n_outputs;
 static PyObject *__pyx_n_s_n_samples;
+static PyObject *__pyx_n_s_name;
 static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
 static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
 static PyObject *__pyx_n_s_np;
@@ -2160,11 +2354,19 @@
 static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
 static PyObject *__pyx_n_s_pyx_vtable;
 static PyObject *__pyx_n_s_range;
+static PyObject *__pyx_n_s_reduce;
+static PyObject *__pyx_n_s_reduce_cython;
+static PyObject *__pyx_n_s_reduce_ex;
+static PyObject *__pyx_kp_s_self_sample_weight_self_samples;
+static PyObject *__pyx_n_s_setstate;
+static PyObject *__pyx_n_s_setstate_cython;
 static PyObject *__pyx_n_s_test;
 static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
 static void __pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion___dealloc__(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_2__getstate__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_4__setstate__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_d); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_n_outputs, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_n_samples); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion_2__reduce__(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *__pyx_v_self); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_n_outputs, PyArrayObject *__pyx_v_n_classes); /* proto */
@@ -2185,6 +2387,8 @@
 static PyObject *__pyx_tuple__7;
 static PyObject *__pyx_tuple__8;
 static PyObject *__pyx_tuple__9;
+static PyObject *__pyx_tuple__10;
+static PyObject *__pyx_tuple__11;
 
 /* "skgarden/mondrian/tree/_criterion.pyx":41
  *     """
@@ -2283,7 +2487,7 @@
  *     def __setstate__(self, d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 49, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -2537,7 +2741,130 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":226
+/* "skgarden/mondrian/tree/_criterion.pyx":211
+ *                              self.weighted_n_node_samples * impurity_left)))
+ * 
+ *     cdef bint is_pure(self) nogil:             # <<<<<<<<<<<<<<
+ *         """
+ *         Returns if a node is pure, i.e if samples[start:end] are identical.
+ */
+
+static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_is_pure(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self) {
+  int __pyx_r;
+
+  /* function exit code */
+  __pyx_r = 0;
+  return __pyx_r;
+}
+
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ * def __setstate_cython__(self, __pyx_state):
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_6__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
+
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(0, 2, __pyx_L1_error)
+
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ * def __setstate_cython__(self, __pyx_state):
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.Criterion.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_8__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_10_criterion_9Criterion_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(0, 4, __pyx_L1_error)
+
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.Criterion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_criterion.pyx":232
  *     cdef double sq_sum_total
  * 
  *     def __cinit__(self, SIZE_t n_outputs, SIZE_t n_samples):             # <<<<<<<<<<<<<<
@@ -2561,7 +2888,9 @@
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -2570,14 +2899,15 @@
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_outputs)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 226, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(1, 232, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 226, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 232, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
       goto __pyx_L5_argtuple_error;
@@ -2585,12 +2915,12 @@
       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
     }
-    __pyx_v_n_outputs = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_n_outputs == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L3_error)
-    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L3_error)
+    __pyx_v_n_outputs = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_n_outputs == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 232, __pyx_L3_error)
+    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 232, __pyx_L3_error)
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 226, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 232, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.RegressionCriterion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -2610,7 +2940,7 @@
   int __pyx_t_2;
   __Pyx_RefNannySetupContext("__cinit__", 0);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":239
+  /* "skgarden/mondrian/tree/_criterion.pyx":245
  * 
  *         # Default values
  *         self.y = NULL             # <<<<<<<<<<<<<<
@@ -2619,7 +2949,7 @@
  */
   __pyx_v_self->__pyx_base.y = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":240
+  /* "skgarden/mondrian/tree/_criterion.pyx":246
  *         # Default values
  *         self.y = NULL
  *         self.y_stride = 0             # <<<<<<<<<<<<<<
@@ -2628,7 +2958,7 @@
  */
   __pyx_v_self->__pyx_base.y_stride = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":241
+  /* "skgarden/mondrian/tree/_criterion.pyx":247
  *         self.y = NULL
  *         self.y_stride = 0
  *         self.sample_weight = NULL             # <<<<<<<<<<<<<<
@@ -2637,7 +2967,7 @@
  */
   __pyx_v_self->__pyx_base.sample_weight = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":243
+  /* "skgarden/mondrian/tree/_criterion.pyx":249
  *         self.sample_weight = NULL
  * 
  *         self.samples = NULL             # <<<<<<<<<<<<<<
@@ -2646,7 +2976,7 @@
  */
   __pyx_v_self->__pyx_base.samples = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":244
+  /* "skgarden/mondrian/tree/_criterion.pyx":250
  * 
  *         self.samples = NULL
  *         self.start = 0             # <<<<<<<<<<<<<<
@@ -2655,7 +2985,7 @@
  */
   __pyx_v_self->__pyx_base.start = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":245
+  /* "skgarden/mondrian/tree/_criterion.pyx":251
  *         self.samples = NULL
  *         self.start = 0
  *         self.pos = 0             # <<<<<<<<<<<<<<
@@ -2664,7 +2994,7 @@
  */
   __pyx_v_self->__pyx_base.pos = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":246
+  /* "skgarden/mondrian/tree/_criterion.pyx":252
  *         self.start = 0
  *         self.pos = 0
  *         self.end = 0             # <<<<<<<<<<<<<<
@@ -2673,7 +3003,7 @@
  */
   __pyx_v_self->__pyx_base.end = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":248
+  /* "skgarden/mondrian/tree/_criterion.pyx":254
  *         self.end = 0
  * 
  *         self.n_outputs = n_outputs             # <<<<<<<<<<<<<<
@@ -2682,7 +3012,7 @@
  */
   __pyx_v_self->__pyx_base.n_outputs = __pyx_v_n_outputs;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":249
+  /* "skgarden/mondrian/tree/_criterion.pyx":255
  * 
  *         self.n_outputs = n_outputs
  *         self.n_samples = n_samples             # <<<<<<<<<<<<<<
@@ -2691,7 +3021,7 @@
  */
   __pyx_v_self->__pyx_base.n_samples = __pyx_v_n_samples;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":250
+  /* "skgarden/mondrian/tree/_criterion.pyx":256
  *         self.n_outputs = n_outputs
  *         self.n_samples = n_samples
  *         self.n_node_samples = 0             # <<<<<<<<<<<<<<
@@ -2700,7 +3030,7 @@
  */
   __pyx_v_self->__pyx_base.n_node_samples = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":251
+  /* "skgarden/mondrian/tree/_criterion.pyx":257
  *         self.n_samples = n_samples
  *         self.n_node_samples = 0
  *         self.weighted_n_node_samples = 0.0             # <<<<<<<<<<<<<<
@@ -2709,7 +3039,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_node_samples = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":252
+  /* "skgarden/mondrian/tree/_criterion.pyx":258
  *         self.n_node_samples = 0
  *         self.weighted_n_node_samples = 0.0
  *         self.weighted_n_left = 0.0             # <<<<<<<<<<<<<<
@@ -2718,7 +3048,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_left = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":253
+  /* "skgarden/mondrian/tree/_criterion.pyx":259
  *         self.weighted_n_node_samples = 0.0
  *         self.weighted_n_left = 0.0
  *         self.weighted_n_right = 0.0             # <<<<<<<<<<<<<<
@@ -2727,7 +3057,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_right = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":255
+  /* "skgarden/mondrian/tree/_criterion.pyx":261
  *         self.weighted_n_right = 0.0
  * 
  *         self.sq_sum_total = 0.0             # <<<<<<<<<<<<<<
@@ -2736,7 +3066,7 @@
  */
   __pyx_v_self->sq_sum_total = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":259
+  /* "skgarden/mondrian/tree/_criterion.pyx":265
  *         # Allocate accumulators. Make sure they are NULL, not uninitialized,
  *         # before an exception can be raised (which triggers __dealloc__).
  *         self.sum_total = NULL             # <<<<<<<<<<<<<<
@@ -2745,7 +3075,7 @@
  */
   __pyx_v_self->__pyx_base.sum_total = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":260
+  /* "skgarden/mondrian/tree/_criterion.pyx":266
  *         # before an exception can be raised (which triggers __dealloc__).
  *         self.sum_total = NULL
  *         self.sum_left = NULL             # <<<<<<<<<<<<<<
@@ -2754,7 +3084,7 @@
  */
   __pyx_v_self->__pyx_base.sum_left = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":261
+  /* "skgarden/mondrian/tree/_criterion.pyx":267
  *         self.sum_total = NULL
  *         self.sum_left = NULL
  *         self.sum_right = NULL             # <<<<<<<<<<<<<<
@@ -2763,7 +3093,7 @@
  */
   __pyx_v_self->__pyx_base.sum_right = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":264
+  /* "skgarden/mondrian/tree/_criterion.pyx":270
  * 
  *         # Allocate memory for the accumulators
  *         self.sum_total = <double*> calloc(n_outputs, sizeof(double))             # <<<<<<<<<<<<<<
@@ -2772,7 +3102,7 @@
  */
   __pyx_v_self->__pyx_base.sum_total = ((double *)calloc(__pyx_v_n_outputs, (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":265
+  /* "skgarden/mondrian/tree/_criterion.pyx":271
  *         # Allocate memory for the accumulators
  *         self.sum_total = <double*> calloc(n_outputs, sizeof(double))
  *         self.sum_left = <double*> calloc(n_outputs, sizeof(double))             # <<<<<<<<<<<<<<
@@ -2781,7 +3111,7 @@
  */
   __pyx_v_self->__pyx_base.sum_left = ((double *)calloc(__pyx_v_n_outputs, (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":266
+  /* "skgarden/mondrian/tree/_criterion.pyx":272
  *         self.sum_total = <double*> calloc(n_outputs, sizeof(double))
  *         self.sum_left = <double*> calloc(n_outputs, sizeof(double))
  *         self.sum_right = <double*> calloc(n_outputs, sizeof(double))             # <<<<<<<<<<<<<<
@@ -2790,7 +3120,7 @@
  */
   __pyx_v_self->__pyx_base.sum_right = ((double *)calloc(__pyx_v_n_outputs, (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":268
+  /* "skgarden/mondrian/tree/_criterion.pyx":274
  *         self.sum_right = <double*> calloc(n_outputs, sizeof(double))
  * 
  *         if (self.sum_total == NULL or             # <<<<<<<<<<<<<<
@@ -2804,7 +3134,7 @@
     goto __pyx_L4_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":269
+  /* "skgarden/mondrian/tree/_criterion.pyx":275
  * 
  *         if (self.sum_total == NULL or
  *                 self.sum_left == NULL or             # <<<<<<<<<<<<<<
@@ -2818,7 +3148,7 @@
     goto __pyx_L4_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":270
+  /* "skgarden/mondrian/tree/_criterion.pyx":276
  *         if (self.sum_total == NULL or
  *                 self.sum_left == NULL or
  *                 self.sum_right == NULL):             # <<<<<<<<<<<<<<
@@ -2829,7 +3159,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L4_bool_binop_done:;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":268
+  /* "skgarden/mondrian/tree/_criterion.pyx":274
  *         self.sum_right = <double*> calloc(n_outputs, sizeof(double))
  * 
  *         if (self.sum_total == NULL or             # <<<<<<<<<<<<<<
@@ -2838,16 +3168,16 @@
  */
   if (__pyx_t_1) {
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":271
+    /* "skgarden/mondrian/tree/_criterion.pyx":277
  *                 self.sum_left == NULL or
  *                 self.sum_right == NULL):
  *             raise MemoryError()             # <<<<<<<<<<<<<<
  * 
  *     def __reduce__(self):
  */
-    PyErr_NoMemory(); __PYX_ERR(0, 271, __pyx_L1_error)
+    PyErr_NoMemory(); __PYX_ERR(1, 277, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":268
+    /* "skgarden/mondrian/tree/_criterion.pyx":274
  *         self.sum_right = <double*> calloc(n_outputs, sizeof(double))
  * 
  *         if (self.sum_total == NULL or             # <<<<<<<<<<<<<<
@@ -2856,7 +3186,7 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":226
+  /* "skgarden/mondrian/tree/_criterion.pyx":232
  *     cdef double sq_sum_total
  * 
  *     def __cinit__(self, SIZE_t n_outputs, SIZE_t n_samples):             # <<<<<<<<<<<<<<
@@ -2875,7 +3205,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":273
+/* "skgarden/mondrian/tree/_criterion.pyx":279
  *             raise MemoryError()
  * 
  *     def __reduce__(self):             # <<<<<<<<<<<<<<
@@ -2905,7 +3235,7 @@
   PyObject *__pyx_t_4 = NULL;
   __Pyx_RefNannySetupContext("__reduce__", 0);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":274
+  /* "skgarden/mondrian/tree/_criterion.pyx":280
  * 
  *     def __reduce__(self):
  *         return (type(self), (self.n_outputs, self.n_samples), self.__getstate__())             # <<<<<<<<<<<<<<
@@ -2913,11 +3243,11 @@
  *     cdef int init(self, DOUBLE_t* y, SIZE_t y_stride, DOUBLE_t* sample_weight,
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->__pyx_base.n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->__pyx_base.n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->__pyx_base.n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->__pyx_base.n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 280, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
+  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 280, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_GIVEREF(__pyx_t_1);
   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
@@ -2925,7 +3255,7 @@
   PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
   __pyx_t_1 = 0;
   __pyx_t_2 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_t_4 = NULL;
   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
@@ -2938,14 +3268,14 @@
     }
   }
   if (__pyx_t_4) {
-    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 280, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   } else {
-    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 280, __pyx_L1_error)
   }
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
+  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
   __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
@@ -2960,7 +3290,7 @@
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":273
+  /* "skgarden/mondrian/tree/_criterion.pyx":279
  *             raise MemoryError()
  * 
  *     def __reduce__(self):             # <<<<<<<<<<<<<<
@@ -2982,7 +3312,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":276
+/* "skgarden/mondrian/tree/_criterion.pyx":282
  *         return (type(self), (self.n_outputs, self.n_samples), self.__getstate__())
  * 
  *     cdef int init(self, DOUBLE_t* y, SIZE_t y_stride, DOUBLE_t* sample_weight,             # <<<<<<<<<<<<<<
@@ -3006,7 +3336,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_6;
   int __pyx_t_7;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":282
+  /* "skgarden/mondrian/tree/_criterion.pyx":288
  *            children samples[start:start] and samples[start:end]."""
  *         # Initialize fields
  *         self.y = y             # <<<<<<<<<<<<<<
@@ -3015,7 +3345,7 @@
  */
   __pyx_v_self->__pyx_base.y = __pyx_v_y;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":283
+  /* "skgarden/mondrian/tree/_criterion.pyx":289
  *         # Initialize fields
  *         self.y = y
  *         self.y_stride = y_stride             # <<<<<<<<<<<<<<
@@ -3024,7 +3354,7 @@
  */
   __pyx_v_self->__pyx_base.y_stride = __pyx_v_y_stride;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":284
+  /* "skgarden/mondrian/tree/_criterion.pyx":290
  *         self.y = y
  *         self.y_stride = y_stride
  *         self.sample_weight = sample_weight             # <<<<<<<<<<<<<<
@@ -3033,7 +3363,7 @@
  */
   __pyx_v_self->__pyx_base.sample_weight = __pyx_v_sample_weight;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":285
+  /* "skgarden/mondrian/tree/_criterion.pyx":291
  *         self.y_stride = y_stride
  *         self.sample_weight = sample_weight
  *         self.samples = samples             # <<<<<<<<<<<<<<
@@ -3042,7 +3372,7 @@
  */
   __pyx_v_self->__pyx_base.samples = __pyx_v_samples;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":286
+  /* "skgarden/mondrian/tree/_criterion.pyx":292
  *         self.sample_weight = sample_weight
  *         self.samples = samples
  *         self.start = start             # <<<<<<<<<<<<<<
@@ -3051,7 +3381,7 @@
  */
   __pyx_v_self->__pyx_base.start = __pyx_v_start;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":287
+  /* "skgarden/mondrian/tree/_criterion.pyx":293
  *         self.samples = samples
  *         self.start = start
  *         self.end = end             # <<<<<<<<<<<<<<
@@ -3060,7 +3390,7 @@
  */
   __pyx_v_self->__pyx_base.end = __pyx_v_end;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":288
+  /* "skgarden/mondrian/tree/_criterion.pyx":294
  *         self.start = start
  *         self.end = end
  *         self.n_node_samples = end - start             # <<<<<<<<<<<<<<
@@ -3069,7 +3399,7 @@
  */
   __pyx_v_self->__pyx_base.n_node_samples = (__pyx_v_end - __pyx_v_start);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":289
+  /* "skgarden/mondrian/tree/_criterion.pyx":295
  *         self.end = end
  *         self.n_node_samples = end - start
  *         self.weighted_n_samples = weighted_n_samples             # <<<<<<<<<<<<<<
@@ -3078,7 +3408,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_samples = __pyx_v_weighted_n_samples;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":290
+  /* "skgarden/mondrian/tree/_criterion.pyx":296
  *         self.n_node_samples = end - start
  *         self.weighted_n_samples = weighted_n_samples
  *         self.weighted_n_node_samples = 0.             # <<<<<<<<<<<<<<
@@ -3087,7 +3417,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_node_samples = 0.;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":297
+  /* "skgarden/mondrian/tree/_criterion.pyx":303
  *         cdef DOUBLE_t y_ik
  *         cdef DOUBLE_t w_y_ik
  *         cdef DOUBLE_t w = 1.0             # <<<<<<<<<<<<<<
@@ -3096,7 +3426,7 @@
  */
   __pyx_v_w = 1.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":299
+  /* "skgarden/mondrian/tree/_criterion.pyx":305
  *         cdef DOUBLE_t w = 1.0
  * 
  *         self.sq_sum_total = 0.0             # <<<<<<<<<<<<<<
@@ -3105,7 +3435,7 @@
  */
   __pyx_v_self->sq_sum_total = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":300
+  /* "skgarden/mondrian/tree/_criterion.pyx":306
  * 
  *         self.sq_sum_total = 0.0
  *         memset(self.sum_total, 0, self.n_outputs * sizeof(double))             # <<<<<<<<<<<<<<
@@ -3114,7 +3444,7 @@
  */
   memset(__pyx_v_self->__pyx_base.sum_total, 0, (__pyx_v_self->__pyx_base.n_outputs * (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":302
+  /* "skgarden/mondrian/tree/_criterion.pyx":308
  *         memset(self.sum_total, 0, self.n_outputs * sizeof(double))
  * 
  *         for p in range(start, end):             # <<<<<<<<<<<<<<
@@ -3125,7 +3455,7 @@
   for (__pyx_t_2 = __pyx_v_start; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
     __pyx_v_p = __pyx_t_2;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":303
+    /* "skgarden/mondrian/tree/_criterion.pyx":309
  * 
  *         for p in range(start, end):
  *             i = samples[p]             # <<<<<<<<<<<<<<
@@ -3134,7 +3464,7 @@
  */
     __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":305
+    /* "skgarden/mondrian/tree/_criterion.pyx":311
  *             i = samples[p]
  * 
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -3144,7 +3474,7 @@
     __pyx_t_3 = ((__pyx_v_sample_weight != NULL) != 0);
     if (__pyx_t_3) {
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":306
+      /* "skgarden/mondrian/tree/_criterion.pyx":312
  * 
  *             if sample_weight != NULL:
  *                 w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -3153,7 +3483,7 @@
  */
       __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":305
+      /* "skgarden/mondrian/tree/_criterion.pyx":311
  *             i = samples[p]
  * 
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -3162,7 +3492,7 @@
  */
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":308
+    /* "skgarden/mondrian/tree/_criterion.pyx":314
  *                 w = sample_weight[i]
  * 
  *             for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -3173,7 +3503,7 @@
     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
       __pyx_v_k = __pyx_t_5;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":309
+      /* "skgarden/mondrian/tree/_criterion.pyx":315
  * 
  *             for k in range(self.n_outputs):
  *                 y_ik = y[i * y_stride + k]             # <<<<<<<<<<<<<<
@@ -3182,7 +3512,7 @@
  */
       __pyx_v_y_ik = (__pyx_v_y[((__pyx_v_i * __pyx_v_y_stride) + __pyx_v_k)]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":310
+      /* "skgarden/mondrian/tree/_criterion.pyx":316
  *             for k in range(self.n_outputs):
  *                 y_ik = y[i * y_stride + k]
  *                 w_y_ik = w * y_ik             # <<<<<<<<<<<<<<
@@ -3191,7 +3521,7 @@
  */
       __pyx_v_w_y_ik = (__pyx_v_w * __pyx_v_y_ik);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":311
+      /* "skgarden/mondrian/tree/_criterion.pyx":317
  *                 y_ik = y[i * y_stride + k]
  *                 w_y_ik = w * y_ik
  *                 self.sum_total[k] += w_y_ik             # <<<<<<<<<<<<<<
@@ -3201,7 +3531,7 @@
       __pyx_t_6 = __pyx_v_k;
       (__pyx_v_self->__pyx_base.sum_total[__pyx_t_6]) = ((__pyx_v_self->__pyx_base.sum_total[__pyx_t_6]) + __pyx_v_w_y_ik);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":312
+      /* "skgarden/mondrian/tree/_criterion.pyx":318
  *                 w_y_ik = w * y_ik
  *                 self.sum_total[k] += w_y_ik
  *                 self.sq_sum_total += w_y_ik * y_ik             # <<<<<<<<<<<<<<
@@ -3211,7 +3541,7 @@
       __pyx_v_self->sq_sum_total = (__pyx_v_self->sq_sum_total + (__pyx_v_w_y_ik * __pyx_v_y_ik));
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":314
+    /* "skgarden/mondrian/tree/_criterion.pyx":320
  *                 self.sq_sum_total += w_y_ik * y_ik
  * 
  *             self.weighted_n_node_samples += w             # <<<<<<<<<<<<<<
@@ -3221,16 +3551,16 @@
     __pyx_v_self->__pyx_base.weighted_n_node_samples = (__pyx_v_self->__pyx_base.weighted_n_node_samples + __pyx_v_w);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":317
+  /* "skgarden/mondrian/tree/_criterion.pyx":323
  * 
  *         # Reset to pos=start
  *         self.reset()             # <<<<<<<<<<<<<<
  *         return 0
  * 
  */
-  __pyx_t_7 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 317, __pyx_L1_error)
+  __pyx_t_7 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 323, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":318
+  /* "skgarden/mondrian/tree/_criterion.pyx":324
  *         # Reset to pos=start
  *         self.reset()
  *         return 0             # <<<<<<<<<<<<<<
@@ -3240,7 +3570,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":276
+  /* "skgarden/mondrian/tree/_criterion.pyx":282
  *         return (type(self), (self.n_outputs, self.n_samples), self.__getstate__())
  * 
  *     cdef int init(self, DOUBLE_t* y, SIZE_t y_stride, DOUBLE_t* sample_weight,             # <<<<<<<<<<<<<<
@@ -3252,11 +3582,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.RegressionCriterion.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -3264,7 +3594,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":320
+/* "skgarden/mondrian/tree/_criterion.pyx":326
  *         return 0
  * 
  *     cdef int reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -3278,7 +3608,7 @@
   double __pyx_t_1;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":322
+  /* "skgarden/mondrian/tree/_criterion.pyx":328
  *     cdef int reset(self) nogil except -1:
  *         """Reset the criterion at pos=start."""
  *         cdef SIZE_t n_bytes = self.n_outputs * sizeof(double)             # <<<<<<<<<<<<<<
@@ -3287,7 +3617,7 @@
  */
   __pyx_v_n_bytes = (__pyx_v_self->__pyx_base.n_outputs * (sizeof(double)));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":323
+  /* "skgarden/mondrian/tree/_criterion.pyx":329
  *         """Reset the criterion at pos=start."""
  *         cdef SIZE_t n_bytes = self.n_outputs * sizeof(double)
  *         memset(self.sum_left, 0, n_bytes)             # <<<<<<<<<<<<<<
@@ -3296,7 +3626,7 @@
  */
   memset(__pyx_v_self->__pyx_base.sum_left, 0, __pyx_v_n_bytes);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":324
+  /* "skgarden/mondrian/tree/_criterion.pyx":330
  *         cdef SIZE_t n_bytes = self.n_outputs * sizeof(double)
  *         memset(self.sum_left, 0, n_bytes)
  *         memcpy(self.sum_right, self.sum_total, n_bytes)             # <<<<<<<<<<<<<<
@@ -3305,7 +3635,7 @@
  */
   memcpy(__pyx_v_self->__pyx_base.sum_right, __pyx_v_self->__pyx_base.sum_total, __pyx_v_n_bytes);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":326
+  /* "skgarden/mondrian/tree/_criterion.pyx":332
  *         memcpy(self.sum_right, self.sum_total, n_bytes)
  * 
  *         self.weighted_n_left = 0.0             # <<<<<<<<<<<<<<
@@ -3314,7 +3644,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_left = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":327
+  /* "skgarden/mondrian/tree/_criterion.pyx":333
  * 
  *         self.weighted_n_left = 0.0
  *         self.weighted_n_right = self.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -3324,7 +3654,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.weighted_n_node_samples;
   __pyx_v_self->__pyx_base.weighted_n_right = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":328
+  /* "skgarden/mondrian/tree/_criterion.pyx":334
  *         self.weighted_n_left = 0.0
  *         self.weighted_n_right = self.weighted_n_node_samples
  *         self.pos = self.start             # <<<<<<<<<<<<<<
@@ -3334,7 +3664,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.start;
   __pyx_v_self->__pyx_base.pos = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":329
+  /* "skgarden/mondrian/tree/_criterion.pyx":335
  *         self.weighted_n_right = self.weighted_n_node_samples
  *         self.pos = self.start
  *         return 0             # <<<<<<<<<<<<<<
@@ -3344,7 +3674,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":320
+  /* "skgarden/mondrian/tree/_criterion.pyx":326
  *         return 0
  * 
  *     cdef int reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -3357,7 +3687,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":331
+/* "skgarden/mondrian/tree/_criterion.pyx":337
  *         return 0
  * 
  *     cdef int reverse_reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -3371,7 +3701,7 @@
   double __pyx_t_1;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":333
+  /* "skgarden/mondrian/tree/_criterion.pyx":339
  *     cdef int reverse_reset(self) nogil except -1:
  *         """Reset the criterion at pos=end."""
  *         cdef SIZE_t n_bytes = self.n_outputs * sizeof(double)             # <<<<<<<<<<<<<<
@@ -3380,7 +3710,7 @@
  */
   __pyx_v_n_bytes = (__pyx_v_self->__pyx_base.n_outputs * (sizeof(double)));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":334
+  /* "skgarden/mondrian/tree/_criterion.pyx":340
  *         """Reset the criterion at pos=end."""
  *         cdef SIZE_t n_bytes = self.n_outputs * sizeof(double)
  *         memset(self.sum_right, 0, n_bytes)             # <<<<<<<<<<<<<<
@@ -3389,7 +3719,7 @@
  */
   memset(__pyx_v_self->__pyx_base.sum_right, 0, __pyx_v_n_bytes);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":335
+  /* "skgarden/mondrian/tree/_criterion.pyx":341
  *         cdef SIZE_t n_bytes = self.n_outputs * sizeof(double)
  *         memset(self.sum_right, 0, n_bytes)
  *         memcpy(self.sum_left, self.sum_total, n_bytes)             # <<<<<<<<<<<<<<
@@ -3398,7 +3728,7 @@
  */
   memcpy(__pyx_v_self->__pyx_base.sum_left, __pyx_v_self->__pyx_base.sum_total, __pyx_v_n_bytes);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":337
+  /* "skgarden/mondrian/tree/_criterion.pyx":343
  *         memcpy(self.sum_left, self.sum_total, n_bytes)
  * 
  *         self.weighted_n_right = 0.0             # <<<<<<<<<<<<<<
@@ -3407,7 +3737,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_right = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":338
+  /* "skgarden/mondrian/tree/_criterion.pyx":344
  * 
  *         self.weighted_n_right = 0.0
  *         self.weighted_n_left = self.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -3417,7 +3747,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.weighted_n_node_samples;
   __pyx_v_self->__pyx_base.weighted_n_left = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":339
+  /* "skgarden/mondrian/tree/_criterion.pyx":345
  *         self.weighted_n_right = 0.0
  *         self.weighted_n_left = self.weighted_n_node_samples
  *         self.pos = self.end             # <<<<<<<<<<<<<<
@@ -3427,7 +3757,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.end;
   __pyx_v_self->__pyx_base.pos = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":340
+  /* "skgarden/mondrian/tree/_criterion.pyx":346
  *         self.weighted_n_left = self.weighted_n_node_samples
  *         self.pos = self.end
  *         return 0             # <<<<<<<<<<<<<<
@@ -3437,7 +3767,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":331
+  /* "skgarden/mondrian/tree/_criterion.pyx":337
  *         return 0
  * 
  *     cdef int reverse_reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -3450,7 +3780,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":342
+/* "skgarden/mondrian/tree/_criterion.pyx":348
  *         return 0
  * 
  *     cdef int update(self, SIZE_t new_pos) nogil except -1:             # <<<<<<<<<<<<<<
@@ -3485,7 +3815,7 @@
   int __pyx_t_10;
   long __pyx_t_11;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":345
+  /* "skgarden/mondrian/tree/_criterion.pyx":351
  *         """Updated statistics by moving samples[pos:new_pos] to the left."""
  * 
  *         cdef double* sum_left = self.sum_left             # <<<<<<<<<<<<<<
@@ -3495,7 +3825,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.sum_left;
   __pyx_v_sum_left = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":346
+  /* "skgarden/mondrian/tree/_criterion.pyx":352
  * 
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right             # <<<<<<<<<<<<<<
@@ -3505,7 +3835,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.sum_right;
   __pyx_v_sum_right = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":347
+  /* "skgarden/mondrian/tree/_criterion.pyx":353
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
@@ -3515,7 +3845,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":349
+  /* "skgarden/mondrian/tree/_criterion.pyx":355
  *         cdef double* sum_total = self.sum_total
  * 
  *         cdef double* sample_weight = self.sample_weight             # <<<<<<<<<<<<<<
@@ -3525,7 +3855,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.sample_weight;
   __pyx_v_sample_weight = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":350
+  /* "skgarden/mondrian/tree/_criterion.pyx":356
  * 
  *         cdef double* sample_weight = self.sample_weight
  *         cdef SIZE_t* samples = self.samples             # <<<<<<<<<<<<<<
@@ -3535,7 +3865,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.samples;
   __pyx_v_samples = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":352
+  /* "skgarden/mondrian/tree/_criterion.pyx":358
  *         cdef SIZE_t* samples = self.samples
  * 
  *         cdef DOUBLE_t* y = self.y             # <<<<<<<<<<<<<<
@@ -3545,7 +3875,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.y;
   __pyx_v_y = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":353
+  /* "skgarden/mondrian/tree/_criterion.pyx":359
  * 
  *         cdef DOUBLE_t* y = self.y
  *         cdef SIZE_t pos = self.pos             # <<<<<<<<<<<<<<
@@ -3555,7 +3885,7 @@
   __pyx_t_4 = __pyx_v_self->__pyx_base.pos;
   __pyx_v_pos = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":354
+  /* "skgarden/mondrian/tree/_criterion.pyx":360
  *         cdef DOUBLE_t* y = self.y
  *         cdef SIZE_t pos = self.pos
  *         cdef SIZE_t end = self.end             # <<<<<<<<<<<<<<
@@ -3565,7 +3895,7 @@
   __pyx_t_4 = __pyx_v_self->__pyx_base.end;
   __pyx_v_end = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":358
+  /* "skgarden/mondrian/tree/_criterion.pyx":364
  *         cdef SIZE_t p
  *         cdef SIZE_t k
  *         cdef DOUBLE_t w = 1.0             # <<<<<<<<<<<<<<
@@ -3574,7 +3904,7 @@
  */
   __pyx_v_w = 1.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":369
+  /* "skgarden/mondrian/tree/_criterion.pyx":375
  *         # of computations, i.e. from pos to new_pos or from end to new_po.
  * 
  *         if (new_pos - pos) <= (end - new_pos):             # <<<<<<<<<<<<<<
@@ -3584,7 +3914,7 @@
   __pyx_t_5 = (((__pyx_v_new_pos - __pyx_v_pos) <= (__pyx_v_end - __pyx_v_new_pos)) != 0);
   if (__pyx_t_5) {
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":370
+    /* "skgarden/mondrian/tree/_criterion.pyx":376
  * 
  *         if (new_pos - pos) <= (end - new_pos):
  *             for p in range(pos, new_pos):             # <<<<<<<<<<<<<<
@@ -3595,7 +3925,7 @@
     for (__pyx_t_6 = __pyx_v_pos; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
       __pyx_v_p = __pyx_t_6;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":371
+      /* "skgarden/mondrian/tree/_criterion.pyx":377
  *         if (new_pos - pos) <= (end - new_pos):
  *             for p in range(pos, new_pos):
  *                 i = samples[p]             # <<<<<<<<<<<<<<
@@ -3604,7 +3934,7 @@
  */
       __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":373
+      /* "skgarden/mondrian/tree/_criterion.pyx":379
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -3614,7 +3944,7 @@
       __pyx_t_5 = ((__pyx_v_sample_weight != NULL) != 0);
       if (__pyx_t_5) {
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":374
+        /* "skgarden/mondrian/tree/_criterion.pyx":380
  * 
  *                 if sample_weight != NULL:
  *                     w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -3623,7 +3953,7 @@
  */
         __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":373
+        /* "skgarden/mondrian/tree/_criterion.pyx":379
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -3632,7 +3962,7 @@
  */
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":376
+      /* "skgarden/mondrian/tree/_criterion.pyx":382
  *                     w = sample_weight[i]
  * 
  *                 for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -3643,7 +3973,7 @@
       for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
         __pyx_v_k = __pyx_t_8;
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":377
+        /* "skgarden/mondrian/tree/_criterion.pyx":383
  * 
  *                 for k in range(self.n_outputs):
  *                     y_ik = y[i * self.y_stride + k]             # <<<<<<<<<<<<<<
@@ -3652,7 +3982,7 @@
  */
         __pyx_v_y_ik = (__pyx_v_y[((__pyx_v_i * __pyx_v_self->__pyx_base.y_stride) + __pyx_v_k)]);
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":378
+        /* "skgarden/mondrian/tree/_criterion.pyx":384
  *                 for k in range(self.n_outputs):
  *                     y_ik = y[i * self.y_stride + k]
  *                     sum_left[k] += w * y_ik             # <<<<<<<<<<<<<<
@@ -3663,7 +3993,7 @@
         (__pyx_v_sum_left[__pyx_t_9]) = ((__pyx_v_sum_left[__pyx_t_9]) + (__pyx_v_w * __pyx_v_y_ik));
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":380
+      /* "skgarden/mondrian/tree/_criterion.pyx":386
  *                     sum_left[k] += w * y_ik
  * 
  *                 self.weighted_n_left += w             # <<<<<<<<<<<<<<
@@ -3673,7 +4003,7 @@
       __pyx_v_self->__pyx_base.weighted_n_left = (__pyx_v_self->__pyx_base.weighted_n_left + __pyx_v_w);
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":369
+    /* "skgarden/mondrian/tree/_criterion.pyx":375
  *         # of computations, i.e. from pos to new_pos or from end to new_po.
  * 
  *         if (new_pos - pos) <= (end - new_pos):             # <<<<<<<<<<<<<<
@@ -3683,7 +4013,7 @@
     goto __pyx_L3;
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":382
+  /* "skgarden/mondrian/tree/_criterion.pyx":388
  *                 self.weighted_n_left += w
  *         else:
  *             self.reverse_reset()             # <<<<<<<<<<<<<<
@@ -3691,9 +4021,9 @@
  *             for p in range(end - 1, new_pos - 1, -1):
  */
   /*else*/ {
-    __pyx_t_10 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reverse_reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 382, __pyx_L1_error)
+    __pyx_t_10 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reverse_reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 388, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":384
+    /* "skgarden/mondrian/tree/_criterion.pyx":390
  *             self.reverse_reset()
  * 
  *             for p in range(end - 1, new_pos - 1, -1):             # <<<<<<<<<<<<<<
@@ -3704,7 +4034,7 @@
     for (__pyx_t_4 = (__pyx_v_end - 1); __pyx_t_4 > __pyx_t_11; __pyx_t_4-=1) {
       __pyx_v_p = __pyx_t_4;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":385
+      /* "skgarden/mondrian/tree/_criterion.pyx":391
  * 
  *             for p in range(end - 1, new_pos - 1, -1):
  *                 i = samples[p]             # <<<<<<<<<<<<<<
@@ -3713,7 +4043,7 @@
  */
       __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":387
+      /* "skgarden/mondrian/tree/_criterion.pyx":393
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -3723,7 +4053,7 @@
       __pyx_t_5 = ((__pyx_v_sample_weight != NULL) != 0);
       if (__pyx_t_5) {
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":388
+        /* "skgarden/mondrian/tree/_criterion.pyx":394
  * 
  *                 if sample_weight != NULL:
  *                     w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -3732,7 +4062,7 @@
  */
         __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":387
+        /* "skgarden/mondrian/tree/_criterion.pyx":393
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -3741,7 +4071,7 @@
  */
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":390
+      /* "skgarden/mondrian/tree/_criterion.pyx":396
  *                     w = sample_weight[i]
  * 
  *                 for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -3752,7 +4082,7 @@
       for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
         __pyx_v_k = __pyx_t_7;
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":391
+        /* "skgarden/mondrian/tree/_criterion.pyx":397
  * 
  *                 for k in range(self.n_outputs):
  *                     y_ik = y[i * self.y_stride + k]             # <<<<<<<<<<<<<<
@@ -3761,7 +4091,7 @@
  */
         __pyx_v_y_ik = (__pyx_v_y[((__pyx_v_i * __pyx_v_self->__pyx_base.y_stride) + __pyx_v_k)]);
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":392
+        /* "skgarden/mondrian/tree/_criterion.pyx":398
  *                 for k in range(self.n_outputs):
  *                     y_ik = y[i * self.y_stride + k]
  *                     sum_left[k] -= w * y_ik             # <<<<<<<<<<<<<<
@@ -3772,7 +4102,7 @@
         (__pyx_v_sum_left[__pyx_t_8]) = ((__pyx_v_sum_left[__pyx_t_8]) - (__pyx_v_w * __pyx_v_y_ik));
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":394
+      /* "skgarden/mondrian/tree/_criterion.pyx":400
  *                     sum_left[k] -= w * y_ik
  * 
  *                 self.weighted_n_left -= w             # <<<<<<<<<<<<<<
@@ -3784,7 +4114,7 @@
   }
   __pyx_L3:;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":396
+  /* "skgarden/mondrian/tree/_criterion.pyx":402
  *                 self.weighted_n_left -= w
  * 
  *         self.weighted_n_right = (self.weighted_n_node_samples -             # <<<<<<<<<<<<<<
@@ -3793,7 +4123,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_right = (__pyx_v_self->__pyx_base.weighted_n_node_samples - __pyx_v_self->__pyx_base.weighted_n_left);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":398
+  /* "skgarden/mondrian/tree/_criterion.pyx":404
  *         self.weighted_n_right = (self.weighted_n_node_samples -
  *                                  self.weighted_n_left)
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -3804,7 +4134,7 @@
   for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6+=1) {
     __pyx_v_k = __pyx_t_6;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":399
+    /* "skgarden/mondrian/tree/_criterion.pyx":405
  *                                  self.weighted_n_left)
  *         for k in range(self.n_outputs):
  *             sum_right[k] = sum_total[k] - sum_left[k]             # <<<<<<<<<<<<<<
@@ -3814,7 +4144,7 @@
     (__pyx_v_sum_right[__pyx_v_k]) = ((__pyx_v_sum_total[__pyx_v_k]) - (__pyx_v_sum_left[__pyx_v_k]));
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":401
+  /* "skgarden/mondrian/tree/_criterion.pyx":407
  *             sum_right[k] = sum_total[k] - sum_left[k]
  * 
  *         self.pos = new_pos             # <<<<<<<<<<<<<<
@@ -3823,7 +4153,7 @@
  */
   __pyx_v_self->__pyx_base.pos = __pyx_v_new_pos;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":402
+  /* "skgarden/mondrian/tree/_criterion.pyx":408
  * 
  *         self.pos = new_pos
  *         return 0             # <<<<<<<<<<<<<<
@@ -3833,7 +4163,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":342
+  /* "skgarden/mondrian/tree/_criterion.pyx":348
  *         return 0
  * 
  *     cdef int update(self, SIZE_t new_pos) nogil except -1:             # <<<<<<<<<<<<<<
@@ -3845,11 +4175,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.RegressionCriterion.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -3857,7 +4187,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":404
+/* "skgarden/mondrian/tree/_criterion.pyx":410
  *         return 0
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -3873,7 +4203,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":407
+/* "skgarden/mondrian/tree/_criterion.pyx":413
  *         pass
  * 
  *     cdef void children_impurity(self, double* impurity_left,             # <<<<<<<<<<<<<<
@@ -3886,7 +4216,7 @@
   /* function exit code */
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":411
+/* "skgarden/mondrian/tree/_criterion.pyx":417
  *         pass
  * 
  *     cdef void node_value(self, double* dest) nogil:             # <<<<<<<<<<<<<<
@@ -3899,7 +4229,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_1;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":416
+  /* "skgarden/mondrian/tree/_criterion.pyx":422
  *         cdef SIZE_t k
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -3910,7 +4240,7 @@
   for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
     __pyx_v_k = __pyx_t_2;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":417
+    /* "skgarden/mondrian/tree/_criterion.pyx":423
  * 
  *         for k in range(self.n_outputs):
  *             dest[k] = self.sum_total[k] / self.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -3920,7 +4250,7 @@
     (__pyx_v_dest[__pyx_v_k]) = ((__pyx_v_self->__pyx_base.sum_total[__pyx_v_k]) / __pyx_v_self->__pyx_base.weighted_n_node_samples);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":411
+  /* "skgarden/mondrian/tree/_criterion.pyx":417
  *         pass
  * 
  *     cdef void node_value(self, double* dest) nogil:             # <<<<<<<<<<<<<<
@@ -3931,7 +4261,7 @@
   /* function exit code */
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":426
+/* "skgarden/mondrian/tree/_criterion.pyx":432
  *     """
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -3948,7 +4278,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_2;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":430
+  /* "skgarden/mondrian/tree/_criterion.pyx":436
  *            samples[start:end]."""
  * 
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
@@ -3958,7 +4288,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":434
+  /* "skgarden/mondrian/tree/_criterion.pyx":440
  *         cdef SIZE_t k
  * 
  *         impurity = self.sq_sum_total / self.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -3967,7 +4297,7 @@
  */
   __pyx_v_impurity = (__pyx_v_self->__pyx_base.sq_sum_total / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_node_samples);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":435
+  /* "skgarden/mondrian/tree/_criterion.pyx":441
  * 
  *         impurity = self.sq_sum_total / self.weighted_n_node_samples
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -3978,7 +4308,7 @@
   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
     __pyx_v_k = __pyx_t_3;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":436
+    /* "skgarden/mondrian/tree/_criterion.pyx":442
  *         impurity = self.sq_sum_total / self.weighted_n_node_samples
  *         for k in range(self.n_outputs):
  *             impurity -= (sum_total[k] / self.weighted_n_node_samples)**2.0             # <<<<<<<<<<<<<<
@@ -3988,7 +4318,7 @@
     __pyx_v_impurity = (__pyx_v_impurity - pow(((__pyx_v_sum_total[__pyx_v_k]) / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_node_samples), 2.0));
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":438
+  /* "skgarden/mondrian/tree/_criterion.pyx":444
  *             impurity -= (sum_total[k] / self.weighted_n_node_samples)**2.0
  * 
  *         return impurity / self.n_outputs             # <<<<<<<<<<<<<<
@@ -3998,7 +4328,7 @@
   __pyx_r = (__pyx_v_impurity / __pyx_v_self->__pyx_base.__pyx_base.n_outputs);
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":426
+  /* "skgarden/mondrian/tree/_criterion.pyx":432
  *     """
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -4011,7 +4341,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":440
+/* "skgarden/mondrian/tree/_criterion.pyx":446
  *         return impurity / self.n_outputs
  * 
  *     cdef double proxy_impurity_improvement(self) nogil:             # <<<<<<<<<<<<<<
@@ -4030,7 +4360,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_2;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":452
+  /* "skgarden/mondrian/tree/_criterion.pyx":458
  *         """
  * 
  *         cdef double* sum_left = self.sum_left             # <<<<<<<<<<<<<<
@@ -4040,7 +4370,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.sum_left;
   __pyx_v_sum_left = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":453
+  /* "skgarden/mondrian/tree/_criterion.pyx":459
  * 
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right             # <<<<<<<<<<<<<<
@@ -4050,7 +4380,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.sum_right;
   __pyx_v_sum_right = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":456
+  /* "skgarden/mondrian/tree/_criterion.pyx":462
  * 
  *         cdef SIZE_t k
  *         cdef double proxy_impurity_left = 0.0             # <<<<<<<<<<<<<<
@@ -4059,7 +4389,7 @@
  */
   __pyx_v_proxy_impurity_left = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":457
+  /* "skgarden/mondrian/tree/_criterion.pyx":463
  *         cdef SIZE_t k
  *         cdef double proxy_impurity_left = 0.0
  *         cdef double proxy_impurity_right = 0.0             # <<<<<<<<<<<<<<
@@ -4068,7 +4398,7 @@
  */
   __pyx_v_proxy_impurity_right = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":459
+  /* "skgarden/mondrian/tree/_criterion.pyx":465
  *         cdef double proxy_impurity_right = 0.0
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -4079,7 +4409,7 @@
   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
     __pyx_v_k = __pyx_t_3;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":460
+    /* "skgarden/mondrian/tree/_criterion.pyx":466
  * 
  *         for k in range(self.n_outputs):
  *             proxy_impurity_left += sum_left[k] * sum_left[k]             # <<<<<<<<<<<<<<
@@ -4088,7 +4418,7 @@
  */
     __pyx_v_proxy_impurity_left = (__pyx_v_proxy_impurity_left + ((__pyx_v_sum_left[__pyx_v_k]) * (__pyx_v_sum_left[__pyx_v_k])));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":461
+    /* "skgarden/mondrian/tree/_criterion.pyx":467
  *         for k in range(self.n_outputs):
  *             proxy_impurity_left += sum_left[k] * sum_left[k]
  *             proxy_impurity_right += sum_right[k] * sum_right[k]             # <<<<<<<<<<<<<<
@@ -4098,7 +4428,7 @@
     __pyx_v_proxy_impurity_right = (__pyx_v_proxy_impurity_right + ((__pyx_v_sum_right[__pyx_v_k]) * (__pyx_v_sum_right[__pyx_v_k])));
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":463
+  /* "skgarden/mondrian/tree/_criterion.pyx":469
  *             proxy_impurity_right += sum_right[k] * sum_right[k]
  * 
  *         return (proxy_impurity_left / self.weighted_n_left +             # <<<<<<<<<<<<<<
@@ -4108,7 +4438,7 @@
   __pyx_r = ((__pyx_v_proxy_impurity_left / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_left) + (__pyx_v_proxy_impurity_right / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_right));
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":440
+  /* "skgarden/mondrian/tree/_criterion.pyx":446
  *         return impurity / self.n_outputs
  * 
  *     cdef double proxy_impurity_improvement(self) nogil:             # <<<<<<<<<<<<<<
@@ -4121,7 +4451,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":466
+/* "skgarden/mondrian/tree/_criterion.pyx":472
  *                 proxy_impurity_right / self.weighted_n_right)
  * 
  *     cdef void children_impurity(self, double* impurity_left,             # <<<<<<<<<<<<<<
@@ -4154,7 +4484,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_8;
   long __pyx_t_9;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":473
+  /* "skgarden/mondrian/tree/_criterion.pyx":479
  * 
  * 
  *         cdef DOUBLE_t* y = self.y             # <<<<<<<<<<<<<<
@@ -4164,7 +4494,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.y;
   __pyx_v_y = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":474
+  /* "skgarden/mondrian/tree/_criterion.pyx":480
  * 
  *         cdef DOUBLE_t* y = self.y
  *         cdef DOUBLE_t* sample_weight = self.sample_weight             # <<<<<<<<<<<<<<
@@ -4174,7 +4504,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.sample_weight;
   __pyx_v_sample_weight = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":475
+  /* "skgarden/mondrian/tree/_criterion.pyx":481
  *         cdef DOUBLE_t* y = self.y
  *         cdef DOUBLE_t* sample_weight = self.sample_weight
  *         cdef SIZE_t* samples = self.samples             # <<<<<<<<<<<<<<
@@ -4184,7 +4514,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.__pyx_base.samples;
   __pyx_v_samples = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":476
+  /* "skgarden/mondrian/tree/_criterion.pyx":482
  *         cdef DOUBLE_t* sample_weight = self.sample_weight
  *         cdef SIZE_t* samples = self.samples
  *         cdef SIZE_t pos = self.pos             # <<<<<<<<<<<<<<
@@ -4194,7 +4524,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base.pos;
   __pyx_v_pos = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":477
+  /* "skgarden/mondrian/tree/_criterion.pyx":483
  *         cdef SIZE_t* samples = self.samples
  *         cdef SIZE_t pos = self.pos
  *         cdef SIZE_t start = self.start             # <<<<<<<<<<<<<<
@@ -4204,7 +4534,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base.start;
   __pyx_v_start = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":479
+  /* "skgarden/mondrian/tree/_criterion.pyx":485
  *         cdef SIZE_t start = self.start
  * 
  *         cdef double* sum_left = self.sum_left             # <<<<<<<<<<<<<<
@@ -4214,7 +4544,7 @@
   __pyx_t_4 = __pyx_v_self->__pyx_base.__pyx_base.sum_left;
   __pyx_v_sum_left = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":480
+  /* "skgarden/mondrian/tree/_criterion.pyx":486
  * 
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right             # <<<<<<<<<<<<<<
@@ -4224,7 +4554,7 @@
   __pyx_t_4 = __pyx_v_self->__pyx_base.__pyx_base.sum_right;
   __pyx_v_sum_right = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":482
+  /* "skgarden/mondrian/tree/_criterion.pyx":488
  *         cdef double* sum_right = self.sum_right
  * 
  *         cdef double sq_sum_left = 0.0             # <<<<<<<<<<<<<<
@@ -4233,7 +4563,7 @@
  */
   __pyx_v_sq_sum_left = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":488
+  /* "skgarden/mondrian/tree/_criterion.pyx":494
  *         cdef SIZE_t p
  *         cdef SIZE_t k
  *         cdef DOUBLE_t w = 1.0             # <<<<<<<<<<<<<<
@@ -4242,7 +4572,7 @@
  */
   __pyx_v_w = 1.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":491
+  /* "skgarden/mondrian/tree/_criterion.pyx":497
  *         cdef DOUBLE_t y_ik
  * 
  *         for p in range(start, pos):             # <<<<<<<<<<<<<<
@@ -4253,7 +4583,7 @@
   for (__pyx_t_5 = __pyx_v_start; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
     __pyx_v_p = __pyx_t_5;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":492
+    /* "skgarden/mondrian/tree/_criterion.pyx":498
  * 
  *         for p in range(start, pos):
  *             i = samples[p]             # <<<<<<<<<<<<<<
@@ -4262,7 +4592,7 @@
  */
     __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":494
+    /* "skgarden/mondrian/tree/_criterion.pyx":500
  *             i = samples[p]
  * 
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -4272,7 +4602,7 @@
     __pyx_t_6 = ((__pyx_v_sample_weight != NULL) != 0);
     if (__pyx_t_6) {
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":495
+      /* "skgarden/mondrian/tree/_criterion.pyx":501
  * 
  *             if sample_weight != NULL:
  *                 w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -4281,7 +4611,7 @@
  */
       __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":494
+      /* "skgarden/mondrian/tree/_criterion.pyx":500
  *             i = samples[p]
  * 
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -4290,7 +4620,7 @@
  */
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":497
+    /* "skgarden/mondrian/tree/_criterion.pyx":503
  *                 w = sample_weight[i]
  * 
  *             for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -4301,7 +4631,7 @@
     for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
       __pyx_v_k = __pyx_t_8;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":498
+      /* "skgarden/mondrian/tree/_criterion.pyx":504
  * 
  *             for k in range(self.n_outputs):
  *                 y_ik = y[i * self.y_stride + k]             # <<<<<<<<<<<<<<
@@ -4310,7 +4640,7 @@
  */
       __pyx_v_y_ik = (__pyx_v_y[((__pyx_v_i * __pyx_v_self->__pyx_base.__pyx_base.y_stride) + __pyx_v_k)]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":499
+      /* "skgarden/mondrian/tree/_criterion.pyx":505
  *             for k in range(self.n_outputs):
  *                 y_ik = y[i * self.y_stride + k]
  *                 sq_sum_left += w * y_ik * y_ik             # <<<<<<<<<<<<<<
@@ -4321,7 +4651,7 @@
     }
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":501
+  /* "skgarden/mondrian/tree/_criterion.pyx":507
  *                 sq_sum_left += w * y_ik * y_ik
  * 
  *         sq_sum_right = self.sq_sum_total - sq_sum_left             # <<<<<<<<<<<<<<
@@ -4330,7 +4660,7 @@
  */
   __pyx_v_sq_sum_right = (__pyx_v_self->__pyx_base.sq_sum_total - __pyx_v_sq_sum_left);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":503
+  /* "skgarden/mondrian/tree/_criterion.pyx":509
  *         sq_sum_right = self.sq_sum_total - sq_sum_left
  * 
  *         impurity_left[0] = sq_sum_left / self.weighted_n_left             # <<<<<<<<<<<<<<
@@ -4339,7 +4669,7 @@
  */
   (__pyx_v_impurity_left[0]) = (__pyx_v_sq_sum_left / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_left);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":504
+  /* "skgarden/mondrian/tree/_criterion.pyx":510
  * 
  *         impurity_left[0] = sq_sum_left / self.weighted_n_left
  *         impurity_right[0] = sq_sum_right / self.weighted_n_right             # <<<<<<<<<<<<<<
@@ -4348,7 +4678,7 @@
  */
   (__pyx_v_impurity_right[0]) = (__pyx_v_sq_sum_right / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_right);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":506
+  /* "skgarden/mondrian/tree/_criterion.pyx":512
  *         impurity_right[0] = sq_sum_right / self.weighted_n_right
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -4359,7 +4689,7 @@
   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
     __pyx_v_k = __pyx_t_5;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":507
+    /* "skgarden/mondrian/tree/_criterion.pyx":513
  * 
  *         for k in range(self.n_outputs):
  *             impurity_left[0] -= (sum_left[k] / self.weighted_n_left) ** 2.0             # <<<<<<<<<<<<<<
@@ -4369,7 +4699,7 @@
     __pyx_t_9 = 0;
     (__pyx_v_impurity_left[__pyx_t_9]) = ((__pyx_v_impurity_left[__pyx_t_9]) - pow(((__pyx_v_sum_left[__pyx_v_k]) / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_left), 2.0));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":508
+    /* "skgarden/mondrian/tree/_criterion.pyx":514
  *         for k in range(self.n_outputs):
  *             impurity_left[0] -= (sum_left[k] / self.weighted_n_left) ** 2.0
  *             impurity_right[0] -= (sum_right[k] / self.weighted_n_right) ** 2.0             # <<<<<<<<<<<<<<
@@ -4380,7 +4710,7 @@
     (__pyx_v_impurity_right[__pyx_t_9]) = ((__pyx_v_impurity_right[__pyx_t_9]) - pow(((__pyx_v_sum_right[__pyx_v_k]) / __pyx_v_self->__pyx_base.__pyx_base.weighted_n_right), 2.0));
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":510
+  /* "skgarden/mondrian/tree/_criterion.pyx":516
  *             impurity_right[0] -= (sum_right[k] / self.weighted_n_right) ** 2.0
  * 
  *         impurity_left[0] /= self.n_outputs             # <<<<<<<<<<<<<<
@@ -4390,17 +4720,17 @@
   __pyx_t_9 = 0;
   (__pyx_v_impurity_left[__pyx_t_9]) = ((__pyx_v_impurity_left[__pyx_t_9]) / __pyx_v_self->__pyx_base.__pyx_base.n_outputs);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":511
+  /* "skgarden/mondrian/tree/_criterion.pyx":517
  * 
  *         impurity_left[0] /= self.n_outputs
  *         impurity_right[0] /= self.n_outputs             # <<<<<<<<<<<<<<
  * 
- * 
+ *     cdef bint is_pure(self) nogil:
  */
   __pyx_t_9 = 0;
   (__pyx_v_impurity_right[__pyx_t_9]) = ((__pyx_v_impurity_right[__pyx_t_9]) / __pyx_v_self->__pyx_base.__pyx_base.n_outputs);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":466
+  /* "skgarden/mondrian/tree/_criterion.pyx":472
  *                 proxy_impurity_right / self.weighted_n_right)
  * 
  *     cdef void children_impurity(self, double* impurity_left,             # <<<<<<<<<<<<<<
@@ -4411,7 +4741,41 @@
   /* function exit code */
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":520
+/* "skgarden/mondrian/tree/_criterion.pyx":519
+ *         impurity_right[0] /= self.n_outputs
+ * 
+ *     cdef bint is_pure(self) nogil:             # <<<<<<<<<<<<<<
+ *         return self.node_impurity() == 0
+ * 
+ */
+
+static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_is_pure(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_MSE *__pyx_v_self) {
+  int __pyx_r;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":520
+ * 
+ *     cdef bint is_pure(self) nogil:
+ *         return self.node_impurity() == 0             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  __pyx_r = (((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_MSE *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.node_impurity(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)) == 0.0);
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":519
+ *         impurity_right[0] /= self.n_outputs
+ * 
+ *     cdef bint is_pure(self) nogil:             # <<<<<<<<<<<<<<
+ *         return self.node_impurity() == 0
+ * 
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_criterion.pyx":529
  *     cdef SIZE_t sum_stride
  * 
  *     def __cinit__(self, SIZE_t n_outputs,             # <<<<<<<<<<<<<<
@@ -4435,7 +4799,9 @@
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -4444,14 +4810,15 @@
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_outputs)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_classes)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 520, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(1, 529, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 520, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 529, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
       goto __pyx_L5_argtuple_error;
@@ -4459,18 +4826,18 @@
       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
     }
-    __pyx_v_n_outputs = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_n_outputs == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L3_error)
+    __pyx_v_n_outputs = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_n_outputs == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 529, __pyx_L3_error)
     __pyx_v_n_classes = ((PyArrayObject *)values[1]);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 520, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 529, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.ClassificationCriterion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return -1;
   __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n_classes), __pyx_ptype_5numpy_ndarray, 1, "n_classes", 0))) __PYX_ERR(0, 521, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n_classes), __pyx_ptype_5numpy_ndarray, 1, "n_classes", 0))) __PYX_ERR(1, 530, __pyx_L1_error)
   __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *)__pyx_v_self), __pyx_v_n_outputs, __pyx_v_n_classes);
 
   /* function exit code */
@@ -4504,11 +4871,11 @@
   __pyx_pybuffernd_n_classes.rcbuffer = &__pyx_pybuffer_n_classes;
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer, (PyObject*)__pyx_v_n_classes, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 520, __pyx_L1_error)
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer, (PyObject*)__pyx_v_n_classes, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 529, __pyx_L1_error)
   }
   __pyx_pybuffernd_n_classes.diminfo[0].strides = __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n_classes.diminfo[0].shape = __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.shape[0];
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":532
+  /* "skgarden/mondrian/tree/_criterion.pyx":541
  *         """
  * 
  *         self.y = NULL             # <<<<<<<<<<<<<<
@@ -4517,7 +4884,7 @@
  */
   __pyx_v_self->__pyx_base.y = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":533
+  /* "skgarden/mondrian/tree/_criterion.pyx":542
  * 
  *         self.y = NULL
  *         self.y_stride = 0             # <<<<<<<<<<<<<<
@@ -4526,7 +4893,7 @@
  */
   __pyx_v_self->__pyx_base.y_stride = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":534
+  /* "skgarden/mondrian/tree/_criterion.pyx":543
  *         self.y = NULL
  *         self.y_stride = 0
  *         self.sample_weight = NULL             # <<<<<<<<<<<<<<
@@ -4535,7 +4902,7 @@
  */
   __pyx_v_self->__pyx_base.sample_weight = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":536
+  /* "skgarden/mondrian/tree/_criterion.pyx":545
  *         self.sample_weight = NULL
  * 
  *         self.samples = NULL             # <<<<<<<<<<<<<<
@@ -4544,7 +4911,7 @@
  */
   __pyx_v_self->__pyx_base.samples = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":537
+  /* "skgarden/mondrian/tree/_criterion.pyx":546
  * 
  *         self.samples = NULL
  *         self.start = 0             # <<<<<<<<<<<<<<
@@ -4553,7 +4920,7 @@
  */
   __pyx_v_self->__pyx_base.start = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":538
+  /* "skgarden/mondrian/tree/_criterion.pyx":547
  *         self.samples = NULL
  *         self.start = 0
  *         self.pos = 0             # <<<<<<<<<<<<<<
@@ -4562,7 +4929,7 @@
  */
   __pyx_v_self->__pyx_base.pos = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":539
+  /* "skgarden/mondrian/tree/_criterion.pyx":548
  *         self.start = 0
  *         self.pos = 0
  *         self.end = 0             # <<<<<<<<<<<<<<
@@ -4571,7 +4938,7 @@
  */
   __pyx_v_self->__pyx_base.end = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":541
+  /* "skgarden/mondrian/tree/_criterion.pyx":550
  *         self.end = 0
  * 
  *         self.n_outputs = n_outputs             # <<<<<<<<<<<<<<
@@ -4580,7 +4947,7 @@
  */
   __pyx_v_self->__pyx_base.n_outputs = __pyx_v_n_outputs;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":542
+  /* "skgarden/mondrian/tree/_criterion.pyx":551
  * 
  *         self.n_outputs = n_outputs
  *         self.n_samples = 0             # <<<<<<<<<<<<<<
@@ -4589,7 +4956,7 @@
  */
   __pyx_v_self->__pyx_base.n_samples = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":543
+  /* "skgarden/mondrian/tree/_criterion.pyx":552
  *         self.n_outputs = n_outputs
  *         self.n_samples = 0
  *         self.n_node_samples = 0             # <<<<<<<<<<<<<<
@@ -4598,7 +4965,7 @@
  */
   __pyx_v_self->__pyx_base.n_node_samples = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":544
+  /* "skgarden/mondrian/tree/_criterion.pyx":553
  *         self.n_samples = 0
  *         self.n_node_samples = 0
  *         self.weighted_n_node_samples = 0.0             # <<<<<<<<<<<<<<
@@ -4607,7 +4974,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_node_samples = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":545
+  /* "skgarden/mondrian/tree/_criterion.pyx":554
  *         self.n_node_samples = 0
  *         self.weighted_n_node_samples = 0.0
  *         self.weighted_n_left = 0.0             # <<<<<<<<<<<<<<
@@ -4616,7 +4983,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_left = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":546
+  /* "skgarden/mondrian/tree/_criterion.pyx":555
  *         self.weighted_n_node_samples = 0.0
  *         self.weighted_n_left = 0.0
  *         self.weighted_n_right = 0.0             # <<<<<<<<<<<<<<
@@ -4625,7 +4992,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_right = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":549
+  /* "skgarden/mondrian/tree/_criterion.pyx":558
  * 
  *         # Count labels for each output
  *         self.sum_total = NULL             # <<<<<<<<<<<<<<
@@ -4634,7 +5001,7 @@
  */
   __pyx_v_self->__pyx_base.sum_total = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":550
+  /* "skgarden/mondrian/tree/_criterion.pyx":559
  *         # Count labels for each output
  *         self.sum_total = NULL
  *         self.sum_left = NULL             # <<<<<<<<<<<<<<
@@ -4643,7 +5010,7 @@
  */
   __pyx_v_self->__pyx_base.sum_left = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":551
+  /* "skgarden/mondrian/tree/_criterion.pyx":560
  *         self.sum_total = NULL
  *         self.sum_left = NULL
  *         self.sum_right = NULL             # <<<<<<<<<<<<<<
@@ -4652,7 +5019,7 @@
  */
   __pyx_v_self->__pyx_base.sum_right = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":552
+  /* "skgarden/mondrian/tree/_criterion.pyx":561
  *         self.sum_left = NULL
  *         self.sum_right = NULL
  *         self.n_classes = NULL             # <<<<<<<<<<<<<<
@@ -4661,16 +5028,16 @@
  */
   __pyx_v_self->n_classes = NULL;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":554
+  /* "skgarden/mondrian/tree/_criterion.pyx":563
  *         self.n_classes = NULL
  * 
  *         safe_realloc(&self.n_classes, n_outputs)             # <<<<<<<<<<<<<<
  * 
  *         cdef SIZE_t k = 0
  */
-  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->n_classes), __pyx_v_n_outputs); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L1_error)
+  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->n_classes), __pyx_v_n_outputs); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 563, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":556
+  /* "skgarden/mondrian/tree/_criterion.pyx":565
  *         safe_realloc(&self.n_classes, n_outputs)
  * 
  *         cdef SIZE_t k = 0             # <<<<<<<<<<<<<<
@@ -4679,7 +5046,7 @@
  */
   __pyx_v_k = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":557
+  /* "skgarden/mondrian/tree/_criterion.pyx":566
  * 
  *         cdef SIZE_t k = 0
  *         cdef SIZE_t sum_stride = 0             # <<<<<<<<<<<<<<
@@ -4688,7 +5055,7 @@
  */
   __pyx_v_sum_stride = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":561
+  /* "skgarden/mondrian/tree/_criterion.pyx":570
  *         # For each target, set the number of unique classes in that target,
  *         # and also compute the maximal stride of all targets
  *         for k in range(n_outputs):             # <<<<<<<<<<<<<<
@@ -4699,7 +5066,7 @@
   for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
     __pyx_v_k = __pyx_t_2;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":562
+    /* "skgarden/mondrian/tree/_criterion.pyx":571
  *         # and also compute the maximal stride of all targets
  *         for k in range(n_outputs):
  *             self.n_classes[k] = n_classes[k]             # <<<<<<<<<<<<<<
@@ -4709,7 +5076,7 @@
     __pyx_t_3 = __pyx_v_k;
     (__pyx_v_self->n_classes[__pyx_v_k]) = (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *, __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_n_classes.diminfo[0].strides));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":564
+    /* "skgarden/mondrian/tree/_criterion.pyx":573
  *             self.n_classes[k] = n_classes[k]
  * 
  *             if n_classes[k] > sum_stride:             # <<<<<<<<<<<<<<
@@ -4720,7 +5087,7 @@
     __pyx_t_5 = (((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *, __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_n_classes.diminfo[0].strides)) > __pyx_v_sum_stride) != 0);
     if (__pyx_t_5) {
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":565
+      /* "skgarden/mondrian/tree/_criterion.pyx":574
  * 
  *             if n_classes[k] > sum_stride:
  *                 sum_stride = n_classes[k]             # <<<<<<<<<<<<<<
@@ -4730,7 +5097,7 @@
       __pyx_t_6 = __pyx_v_k;
       __pyx_v_sum_stride = (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *, __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_n_classes.diminfo[0].strides));
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":564
+      /* "skgarden/mondrian/tree/_criterion.pyx":573
  *             self.n_classes[k] = n_classes[k]
  * 
  *             if n_classes[k] > sum_stride:             # <<<<<<<<<<<<<<
@@ -4740,7 +5107,7 @@
     }
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":567
+  /* "skgarden/mondrian/tree/_criterion.pyx":576
  *                 sum_stride = n_classes[k]
  * 
  *         self.sum_stride = sum_stride             # <<<<<<<<<<<<<<
@@ -4749,7 +5116,7 @@
  */
   __pyx_v_self->sum_stride = __pyx_v_sum_stride;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":569
+  /* "skgarden/mondrian/tree/_criterion.pyx":578
  *         self.sum_stride = sum_stride
  * 
  *         cdef SIZE_t n_elements = n_outputs * sum_stride             # <<<<<<<<<<<<<<
@@ -4758,7 +5125,7 @@
  */
   __pyx_v_n_elements = (__pyx_v_n_outputs * __pyx_v_sum_stride);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":570
+  /* "skgarden/mondrian/tree/_criterion.pyx":579
  * 
  *         cdef SIZE_t n_elements = n_outputs * sum_stride
  *         self.sum_total = <double*> calloc(n_elements, sizeof(double))             # <<<<<<<<<<<<<<
@@ -4767,7 +5134,7 @@
  */
   __pyx_v_self->__pyx_base.sum_total = ((double *)calloc(__pyx_v_n_elements, (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":571
+  /* "skgarden/mondrian/tree/_criterion.pyx":580
  *         cdef SIZE_t n_elements = n_outputs * sum_stride
  *         self.sum_total = <double*> calloc(n_elements, sizeof(double))
  *         self.sum_left = <double*> calloc(n_elements, sizeof(double))             # <<<<<<<<<<<<<<
@@ -4776,7 +5143,7 @@
  */
   __pyx_v_self->__pyx_base.sum_left = ((double *)calloc(__pyx_v_n_elements, (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":572
+  /* "skgarden/mondrian/tree/_criterion.pyx":581
  *         self.sum_total = <double*> calloc(n_elements, sizeof(double))
  *         self.sum_left = <double*> calloc(n_elements, sizeof(double))
  *         self.sum_right = <double*> calloc(n_elements, sizeof(double))             # <<<<<<<<<<<<<<
@@ -4785,7 +5152,7 @@
  */
   __pyx_v_self->__pyx_base.sum_right = ((double *)calloc(__pyx_v_n_elements, (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":574
+  /* "skgarden/mondrian/tree/_criterion.pyx":583
  *         self.sum_right = <double*> calloc(n_elements, sizeof(double))
  * 
  *         if (self.sum_total == NULL or             # <<<<<<<<<<<<<<
@@ -4799,7 +5166,7 @@
     goto __pyx_L7_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":575
+  /* "skgarden/mondrian/tree/_criterion.pyx":584
  * 
  *         if (self.sum_total == NULL or
  *                 self.sum_left == NULL or             # <<<<<<<<<<<<<<
@@ -4813,7 +5180,7 @@
     goto __pyx_L7_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":576
+  /* "skgarden/mondrian/tree/_criterion.pyx":585
  *         if (self.sum_total == NULL or
  *                 self.sum_left == NULL or
  *                 self.sum_right == NULL):             # <<<<<<<<<<<<<<
@@ -4824,7 +5191,7 @@
   __pyx_t_5 = __pyx_t_7;
   __pyx_L7_bool_binop_done:;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":574
+  /* "skgarden/mondrian/tree/_criterion.pyx":583
  *         self.sum_right = <double*> calloc(n_elements, sizeof(double))
  * 
  *         if (self.sum_total == NULL or             # <<<<<<<<<<<<<<
@@ -4833,16 +5200,16 @@
  */
   if (__pyx_t_5) {
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":577
+    /* "skgarden/mondrian/tree/_criterion.pyx":586
  *                 self.sum_left == NULL or
  *                 self.sum_right == NULL):
  *             raise MemoryError()             # <<<<<<<<<<<<<<
  * 
  *     def __dealloc__(self):
  */
-    PyErr_NoMemory(); __PYX_ERR(0, 577, __pyx_L1_error)
+    PyErr_NoMemory(); __PYX_ERR(1, 586, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":574
+    /* "skgarden/mondrian/tree/_criterion.pyx":583
  *         self.sum_right = <double*> calloc(n_elements, sizeof(double))
  * 
  *         if (self.sum_total == NULL or             # <<<<<<<<<<<<<<
@@ -4851,7 +5218,7 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":520
+  /* "skgarden/mondrian/tree/_criterion.pyx":529
  *     cdef SIZE_t sum_stride
  * 
  *     def __cinit__(self, SIZE_t n_outputs,             # <<<<<<<<<<<<<<
@@ -4879,7 +5246,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":579
+/* "skgarden/mondrian/tree/_criterion.pyx":588
  *             raise MemoryError()
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -4902,7 +5269,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__dealloc__", 0);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":581
+  /* "skgarden/mondrian/tree/_criterion.pyx":590
  *     def __dealloc__(self):
  *         """Destructor."""
  *         free(self.n_classes)             # <<<<<<<<<<<<<<
@@ -4911,7 +5278,7 @@
  */
   free(__pyx_v_self->n_classes);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":579
+  /* "skgarden/mondrian/tree/_criterion.pyx":588
  *             raise MemoryError()
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -4923,7 +5290,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":583
+/* "skgarden/mondrian/tree/_criterion.pyx":592
  *         free(self.n_classes)
  * 
  *     def __reduce__(self):             # <<<<<<<<<<<<<<
@@ -4953,7 +5320,7 @@
   PyObject *__pyx_t_4 = NULL;
   __Pyx_RefNannySetupContext("__reduce__", 0);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":584
+  /* "skgarden/mondrian/tree/_criterion.pyx":593
  * 
  *     def __reduce__(self):
  *         return (type(self),             # <<<<<<<<<<<<<<
@@ -4962,34 +5329,34 @@
  */
   __Pyx_XDECREF(__pyx_r);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":585
+  /* "skgarden/mondrian/tree/_criterion.pyx":594
  *     def __reduce__(self):
  *         return (type(self),
  *                 (self.n_outputs,             # <<<<<<<<<<<<<<
  *                  sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)),
  *                 self.__getstate__())
  */
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->__pyx_base.n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->__pyx_base.n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 594, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":586
+  /* "skgarden/mondrian/tree/_criterion.pyx":595
  *         return (type(self),
  *                 (self.n_outputs,
  *                  sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)),             # <<<<<<<<<<<<<<
  *                 self.__getstate__())
  * 
  */
-  __pyx_t_2 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray(__pyx_v_self->n_classes, __pyx_v_self->__pyx_base.n_outputs)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
+  __pyx_t_2 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray(__pyx_v_self->n_classes, __pyx_v_self->__pyx_base.n_outputs)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 595, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":585
+  /* "skgarden/mondrian/tree/_criterion.pyx":594
  *     def __reduce__(self):
  *         return (type(self),
  *                 (self.n_outputs,             # <<<<<<<<<<<<<<
  *                  sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)),
  *                 self.__getstate__())
  */
-  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 585, __pyx_L1_error)
+  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 594, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_GIVEREF(__pyx_t_1);
   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
@@ -4998,14 +5365,14 @@
   __pyx_t_1 = 0;
   __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":587
+  /* "skgarden/mondrian/tree/_criterion.pyx":596
  *                 (self.n_outputs,
  *                  sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)),
  *                 self.__getstate__())             # <<<<<<<<<<<<<<
  * 
  *     cdef int init(self, DOUBLE_t* y, SIZE_t y_stride,
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 596, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_t_4 = NULL;
   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
@@ -5018,22 +5385,22 @@
     }
   }
   if (__pyx_t_4) {
-    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 596, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   } else {
-    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 596, __pyx_L1_error)
   }
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":584
+  /* "skgarden/mondrian/tree/_criterion.pyx":593
  * 
  *     def __reduce__(self):
  *         return (type(self),             # <<<<<<<<<<<<<<
  *                 (self.n_outputs,
  *                  sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)),
  */
-  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
+  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 593, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
   __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
@@ -5048,7 +5415,7 @@
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":583
+  /* "skgarden/mondrian/tree/_criterion.pyx":592
  *         free(self.n_classes)
  * 
  *     def __reduce__(self):             # <<<<<<<<<<<<<<
@@ -5070,7 +5437,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":589
+/* "skgarden/mondrian/tree/_criterion.pyx":598
  *                 self.__getstate__())
  * 
  *     cdef int init(self, DOUBLE_t* y, SIZE_t y_stride,             # <<<<<<<<<<<<<<
@@ -5098,7 +5465,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_8;
   int __pyx_t_9;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":617
+  /* "skgarden/mondrian/tree/_criterion.pyx":626
  *         """
  * 
  *         self.y = y             # <<<<<<<<<<<<<<
@@ -5107,7 +5474,7 @@
  */
   __pyx_v_self->__pyx_base.y = __pyx_v_y;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":618
+  /* "skgarden/mondrian/tree/_criterion.pyx":627
  * 
  *         self.y = y
  *         self.y_stride = y_stride             # <<<<<<<<<<<<<<
@@ -5116,7 +5483,7 @@
  */
   __pyx_v_self->__pyx_base.y_stride = __pyx_v_y_stride;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":619
+  /* "skgarden/mondrian/tree/_criterion.pyx":628
  *         self.y = y
  *         self.y_stride = y_stride
  *         self.sample_weight = sample_weight             # <<<<<<<<<<<<<<
@@ -5125,7 +5492,7 @@
  */
   __pyx_v_self->__pyx_base.sample_weight = __pyx_v_sample_weight;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":620
+  /* "skgarden/mondrian/tree/_criterion.pyx":629
  *         self.y_stride = y_stride
  *         self.sample_weight = sample_weight
  *         self.samples = samples             # <<<<<<<<<<<<<<
@@ -5134,7 +5501,7 @@
  */
   __pyx_v_self->__pyx_base.samples = __pyx_v_samples;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":621
+  /* "skgarden/mondrian/tree/_criterion.pyx":630
  *         self.sample_weight = sample_weight
  *         self.samples = samples
  *         self.start = start             # <<<<<<<<<<<<<<
@@ -5143,7 +5510,7 @@
  */
   __pyx_v_self->__pyx_base.start = __pyx_v_start;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":622
+  /* "skgarden/mondrian/tree/_criterion.pyx":631
  *         self.samples = samples
  *         self.start = start
  *         self.end = end             # <<<<<<<<<<<<<<
@@ -5152,7 +5519,7 @@
  */
   __pyx_v_self->__pyx_base.end = __pyx_v_end;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":623
+  /* "skgarden/mondrian/tree/_criterion.pyx":632
  *         self.start = start
  *         self.end = end
  *         self.n_node_samples = end - start             # <<<<<<<<<<<<<<
@@ -5161,7 +5528,7 @@
  */
   __pyx_v_self->__pyx_base.n_node_samples = (__pyx_v_end - __pyx_v_start);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":624
+  /* "skgarden/mondrian/tree/_criterion.pyx":633
  *         self.end = end
  *         self.n_node_samples = end - start
  *         self.weighted_n_samples = weighted_n_samples             # <<<<<<<<<<<<<<
@@ -5170,7 +5537,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_samples = __pyx_v_weighted_n_samples;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":625
+  /* "skgarden/mondrian/tree/_criterion.pyx":634
  *         self.n_node_samples = end - start
  *         self.weighted_n_samples = weighted_n_samples
  *         self.weighted_n_node_samples = 0.0             # <<<<<<<<<<<<<<
@@ -5179,7 +5546,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_node_samples = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":627
+  /* "skgarden/mondrian/tree/_criterion.pyx":636
  *         self.weighted_n_node_samples = 0.0
  * 
  *         cdef SIZE_t* n_classes = self.n_classes             # <<<<<<<<<<<<<<
@@ -5189,7 +5556,7 @@
   __pyx_t_1 = __pyx_v_self->n_classes;
   __pyx_v_n_classes = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":628
+  /* "skgarden/mondrian/tree/_criterion.pyx":637
  * 
  *         cdef SIZE_t* n_classes = self.n_classes
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
@@ -5199,7 +5566,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":634
+  /* "skgarden/mondrian/tree/_criterion.pyx":643
  *         cdef SIZE_t k
  *         cdef SIZE_t c
  *         cdef DOUBLE_t w = 1.0             # <<<<<<<<<<<<<<
@@ -5208,7 +5575,7 @@
  */
   __pyx_v_w = 1.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":635
+  /* "skgarden/mondrian/tree/_criterion.pyx":644
  *         cdef SIZE_t c
  *         cdef DOUBLE_t w = 1.0
  *         cdef SIZE_t offset = 0             # <<<<<<<<<<<<<<
@@ -5217,7 +5584,7 @@
  */
   __pyx_v_offset = 0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":637
+  /* "skgarden/mondrian/tree/_criterion.pyx":646
  *         cdef SIZE_t offset = 0
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -5228,7 +5595,7 @@
   for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
     __pyx_v_k = __pyx_t_4;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":638
+    /* "skgarden/mondrian/tree/_criterion.pyx":647
  * 
  *         for k in range(self.n_outputs):
  *             memset(sum_total + offset, 0, n_classes[k] * sizeof(double))             # <<<<<<<<<<<<<<
@@ -5237,7 +5604,7 @@
  */
     memset((__pyx_v_sum_total + __pyx_v_offset), 0, ((__pyx_v_n_classes[__pyx_v_k]) * (sizeof(double))));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":639
+    /* "skgarden/mondrian/tree/_criterion.pyx":648
  *         for k in range(self.n_outputs):
  *             memset(sum_total + offset, 0, n_classes[k] * sizeof(double))
  *             offset += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5247,7 +5614,7 @@
     __pyx_v_offset = (__pyx_v_offset + __pyx_v_self->sum_stride);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":641
+  /* "skgarden/mondrian/tree/_criterion.pyx":650
  *             offset += self.sum_stride
  * 
  *         for p in range(start, end):             # <<<<<<<<<<<<<<
@@ -5258,7 +5625,7 @@
   for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
     __pyx_v_p = __pyx_t_4;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":642
+    /* "skgarden/mondrian/tree/_criterion.pyx":651
  * 
  *         for p in range(start, end):
  *             i = samples[p]             # <<<<<<<<<<<<<<
@@ -5267,7 +5634,7 @@
  */
     __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":646
+    /* "skgarden/mondrian/tree/_criterion.pyx":655
  *             # w is originally set to be 1.0, meaning that if no sample weights
  *             # are given, the default weight of each sample is 1.0
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -5277,7 +5644,7 @@
     __pyx_t_5 = ((__pyx_v_sample_weight != NULL) != 0);
     if (__pyx_t_5) {
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":647
+      /* "skgarden/mondrian/tree/_criterion.pyx":656
  *             # are given, the default weight of each sample is 1.0
  *             if sample_weight != NULL:
  *                 w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -5286,7 +5653,7 @@
  */
       __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":646
+      /* "skgarden/mondrian/tree/_criterion.pyx":655
  *             # w is originally set to be 1.0, meaning that if no sample weights
  *             # are given, the default weight of each sample is 1.0
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -5295,7 +5662,7 @@
  */
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":650
+    /* "skgarden/mondrian/tree/_criterion.pyx":659
  * 
  *             # Count weighted class frequency for each target
  *             for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -5306,7 +5673,7 @@
     for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
       __pyx_v_k = __pyx_t_7;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":651
+      /* "skgarden/mondrian/tree/_criterion.pyx":660
  *             # Count weighted class frequency for each target
  *             for k in range(self.n_outputs):
  *                 c = <SIZE_t> y[i * y_stride + k]             # <<<<<<<<<<<<<<
@@ -5315,7 +5682,7 @@
  */
       __pyx_v_c = ((__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t)(__pyx_v_y[((__pyx_v_i * __pyx_v_y_stride) + __pyx_v_k)]));
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":652
+      /* "skgarden/mondrian/tree/_criterion.pyx":661
  *             for k in range(self.n_outputs):
  *                 c = <SIZE_t> y[i * y_stride + k]
  *                 sum_total[k * self.sum_stride + c] += w             # <<<<<<<<<<<<<<
@@ -5326,7 +5693,7 @@
       (__pyx_v_sum_total[__pyx_t_8]) = ((__pyx_v_sum_total[__pyx_t_8]) + __pyx_v_w);
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":654
+    /* "skgarden/mondrian/tree/_criterion.pyx":663
  *                 sum_total[k * self.sum_stride + c] += w
  * 
  *             self.weighted_n_node_samples += w             # <<<<<<<<<<<<<<
@@ -5336,16 +5703,16 @@
     __pyx_v_self->__pyx_base.weighted_n_node_samples = (__pyx_v_self->__pyx_base.weighted_n_node_samples + __pyx_v_w);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":657
+  /* "skgarden/mondrian/tree/_criterion.pyx":666
  * 
  *         # Reset to pos=start
  *         self.reset()             # <<<<<<<<<<<<<<
  *         return 0
  * 
  */
-  __pyx_t_9 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 657, __pyx_L1_error)
+  __pyx_t_9 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 666, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":658
+  /* "skgarden/mondrian/tree/_criterion.pyx":667
  *         # Reset to pos=start
  *         self.reset()
  *         return 0             # <<<<<<<<<<<<<<
@@ -5355,7 +5722,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":589
+  /* "skgarden/mondrian/tree/_criterion.pyx":598
  *                 self.__getstate__())
  * 
  *     cdef int init(self, DOUBLE_t* y, SIZE_t y_stride,             # <<<<<<<<<<<<<<
@@ -5367,11 +5734,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.ClassificationCriterion.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -5379,7 +5746,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":660
+/* "skgarden/mondrian/tree/_criterion.pyx":669
  *         return 0
  * 
  *     cdef int reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -5400,7 +5767,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *__pyx_t_4;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":666
+  /* "skgarden/mondrian/tree/_criterion.pyx":675
  *         or 0 otherwise.
  *         """
  *         self.pos = self.start             # <<<<<<<<<<<<<<
@@ -5410,7 +5777,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.start;
   __pyx_v_self->__pyx_base.pos = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":668
+  /* "skgarden/mondrian/tree/_criterion.pyx":677
  *         self.pos = self.start
  * 
  *         self.weighted_n_left = 0.0             # <<<<<<<<<<<<<<
@@ -5419,7 +5786,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_left = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":669
+  /* "skgarden/mondrian/tree/_criterion.pyx":678
  * 
  *         self.weighted_n_left = 0.0
  *         self.weighted_n_right = self.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -5429,7 +5796,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.weighted_n_node_samples;
   __pyx_v_self->__pyx_base.weighted_n_right = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":671
+  /* "skgarden/mondrian/tree/_criterion.pyx":680
  *         self.weighted_n_right = self.weighted_n_node_samples
  * 
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
@@ -5439,7 +5806,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":672
+  /* "skgarden/mondrian/tree/_criterion.pyx":681
  * 
  *         cdef double* sum_total = self.sum_total
  *         cdef double* sum_left = self.sum_left             # <<<<<<<<<<<<<<
@@ -5449,7 +5816,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_left;
   __pyx_v_sum_left = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":673
+  /* "skgarden/mondrian/tree/_criterion.pyx":682
  *         cdef double* sum_total = self.sum_total
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right             # <<<<<<<<<<<<<<
@@ -5459,7 +5826,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_right;
   __pyx_v_sum_right = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":675
+  /* "skgarden/mondrian/tree/_criterion.pyx":684
  *         cdef double* sum_right = self.sum_right
  * 
  *         cdef SIZE_t* n_classes = self.n_classes             # <<<<<<<<<<<<<<
@@ -5469,7 +5836,7 @@
   __pyx_t_4 = __pyx_v_self->n_classes;
   __pyx_v_n_classes = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":678
+  /* "skgarden/mondrian/tree/_criterion.pyx":687
  *         cdef SIZE_t k
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -5480,7 +5847,7 @@
   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
     __pyx_v_k = __pyx_t_5;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":679
+    /* "skgarden/mondrian/tree/_criterion.pyx":688
  * 
  *         for k in range(self.n_outputs):
  *             memset(sum_left, 0, n_classes[k] * sizeof(double))             # <<<<<<<<<<<<<<
@@ -5489,7 +5856,7 @@
  */
     memset(__pyx_v_sum_left, 0, ((__pyx_v_n_classes[__pyx_v_k]) * (sizeof(double))));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":680
+    /* "skgarden/mondrian/tree/_criterion.pyx":689
  *         for k in range(self.n_outputs):
  *             memset(sum_left, 0, n_classes[k] * sizeof(double))
  *             memcpy(sum_right, sum_total, n_classes[k] * sizeof(double))             # <<<<<<<<<<<<<<
@@ -5498,7 +5865,7 @@
  */
     memcpy(__pyx_v_sum_right, __pyx_v_sum_total, ((__pyx_v_n_classes[__pyx_v_k]) * (sizeof(double))));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":682
+    /* "skgarden/mondrian/tree/_criterion.pyx":691
  *             memcpy(sum_right, sum_total, n_classes[k] * sizeof(double))
  * 
  *             sum_total += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5507,7 +5874,7 @@
  */
     __pyx_v_sum_total = (__pyx_v_sum_total + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":683
+    /* "skgarden/mondrian/tree/_criterion.pyx":692
  * 
  *             sum_total += self.sum_stride
  *             sum_left += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5516,7 +5883,7 @@
  */
     __pyx_v_sum_left = (__pyx_v_sum_left + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":684
+    /* "skgarden/mondrian/tree/_criterion.pyx":693
  *             sum_total += self.sum_stride
  *             sum_left += self.sum_stride
  *             sum_right += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5526,7 +5893,7 @@
     __pyx_v_sum_right = (__pyx_v_sum_right + __pyx_v_self->sum_stride);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":685
+  /* "skgarden/mondrian/tree/_criterion.pyx":694
  *             sum_left += self.sum_stride
  *             sum_right += self.sum_stride
  *         return 0             # <<<<<<<<<<<<<<
@@ -5536,7 +5903,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":660
+  /* "skgarden/mondrian/tree/_criterion.pyx":669
  *         return 0
  * 
  *     cdef int reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -5549,7 +5916,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":687
+/* "skgarden/mondrian/tree/_criterion.pyx":696
  *         return 0
  * 
  *     cdef int reverse_reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -5570,7 +5937,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t *__pyx_t_4;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":693
+  /* "skgarden/mondrian/tree/_criterion.pyx":702
  *         or 0 otherwise.
  *         """
  *         self.pos = self.end             # <<<<<<<<<<<<<<
@@ -5580,7 +5947,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.end;
   __pyx_v_self->__pyx_base.pos = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":695
+  /* "skgarden/mondrian/tree/_criterion.pyx":704
  *         self.pos = self.end
  * 
  *         self.weighted_n_left = self.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -5590,7 +5957,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.weighted_n_node_samples;
   __pyx_v_self->__pyx_base.weighted_n_left = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":696
+  /* "skgarden/mondrian/tree/_criterion.pyx":705
  * 
  *         self.weighted_n_left = self.weighted_n_node_samples
  *         self.weighted_n_right = 0.0             # <<<<<<<<<<<<<<
@@ -5599,7 +5966,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_right = 0.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":698
+  /* "skgarden/mondrian/tree/_criterion.pyx":707
  *         self.weighted_n_right = 0.0
  * 
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
@@ -5609,7 +5976,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":699
+  /* "skgarden/mondrian/tree/_criterion.pyx":708
  * 
  *         cdef double* sum_total = self.sum_total
  *         cdef double* sum_left = self.sum_left             # <<<<<<<<<<<<<<
@@ -5619,7 +5986,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_left;
   __pyx_v_sum_left = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":700
+  /* "skgarden/mondrian/tree/_criterion.pyx":709
  *         cdef double* sum_total = self.sum_total
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right             # <<<<<<<<<<<<<<
@@ -5629,7 +5996,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_right;
   __pyx_v_sum_right = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":702
+  /* "skgarden/mondrian/tree/_criterion.pyx":711
  *         cdef double* sum_right = self.sum_right
  * 
  *         cdef SIZE_t* n_classes = self.n_classes             # <<<<<<<<<<<<<<
@@ -5639,7 +6006,7 @@
   __pyx_t_4 = __pyx_v_self->n_classes;
   __pyx_v_n_classes = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":705
+  /* "skgarden/mondrian/tree/_criterion.pyx":714
  *         cdef SIZE_t k
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -5650,7 +6017,7 @@
   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
     __pyx_v_k = __pyx_t_5;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":706
+    /* "skgarden/mondrian/tree/_criterion.pyx":715
  * 
  *         for k in range(self.n_outputs):
  *             memset(sum_right, 0, n_classes[k] * sizeof(double))             # <<<<<<<<<<<<<<
@@ -5659,7 +6026,7 @@
  */
     memset(__pyx_v_sum_right, 0, ((__pyx_v_n_classes[__pyx_v_k]) * (sizeof(double))));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":707
+    /* "skgarden/mondrian/tree/_criterion.pyx":716
  *         for k in range(self.n_outputs):
  *             memset(sum_right, 0, n_classes[k] * sizeof(double))
  *             memcpy(sum_left, sum_total, n_classes[k] * sizeof(double))             # <<<<<<<<<<<<<<
@@ -5668,7 +6035,7 @@
  */
     memcpy(__pyx_v_sum_left, __pyx_v_sum_total, ((__pyx_v_n_classes[__pyx_v_k]) * (sizeof(double))));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":709
+    /* "skgarden/mondrian/tree/_criterion.pyx":718
  *             memcpy(sum_left, sum_total, n_classes[k] * sizeof(double))
  * 
  *             sum_total += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5677,7 +6044,7 @@
  */
     __pyx_v_sum_total = (__pyx_v_sum_total + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":710
+    /* "skgarden/mondrian/tree/_criterion.pyx":719
  * 
  *             sum_total += self.sum_stride
  *             sum_left += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5686,7 +6053,7 @@
  */
     __pyx_v_sum_left = (__pyx_v_sum_left + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":711
+    /* "skgarden/mondrian/tree/_criterion.pyx":720
  *             sum_total += self.sum_stride
  *             sum_left += self.sum_stride
  *             sum_right += self.sum_stride             # <<<<<<<<<<<<<<
@@ -5696,7 +6063,7 @@
     __pyx_v_sum_right = (__pyx_v_sum_right + __pyx_v_self->sum_stride);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":712
+  /* "skgarden/mondrian/tree/_criterion.pyx":721
  *             sum_left += self.sum_stride
  *             sum_right += self.sum_stride
  *         return 0             # <<<<<<<<<<<<<<
@@ -5706,7 +6073,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":687
+  /* "skgarden/mondrian/tree/_criterion.pyx":696
  *         return 0
  * 
  *     cdef int reverse_reset(self) nogil except -1:             # <<<<<<<<<<<<<<
@@ -5719,7 +6086,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":714
+/* "skgarden/mondrian/tree/_criterion.pyx":723
  *         return 0
  * 
  *     cdef int update(self, SIZE_t new_pos) nogil except -1:             # <<<<<<<<<<<<<<
@@ -5756,7 +6123,7 @@
   int __pyx_t_10;
   long __pyx_t_11;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":726
+  /* "skgarden/mondrian/tree/_criterion.pyx":735
  *             child to the left child.
  *         """
  *         cdef DOUBLE_t* y = self.y             # <<<<<<<<<<<<<<
@@ -5766,7 +6133,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.y;
   __pyx_v_y = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":727
+  /* "skgarden/mondrian/tree/_criterion.pyx":736
  *         """
  *         cdef DOUBLE_t* y = self.y
  *         cdef SIZE_t pos = self.pos             # <<<<<<<<<<<<<<
@@ -5776,7 +6143,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.pos;
   __pyx_v_pos = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":728
+  /* "skgarden/mondrian/tree/_criterion.pyx":737
  *         cdef DOUBLE_t* y = self.y
  *         cdef SIZE_t pos = self.pos
  *         cdef SIZE_t end = self.end             # <<<<<<<<<<<<<<
@@ -5786,7 +6153,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.end;
   __pyx_v_end = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":730
+  /* "skgarden/mondrian/tree/_criterion.pyx":739
  *         cdef SIZE_t end = self.end
  * 
  *         cdef double* sum_left = self.sum_left             # <<<<<<<<<<<<<<
@@ -5796,7 +6163,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_left;
   __pyx_v_sum_left = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":731
+  /* "skgarden/mondrian/tree/_criterion.pyx":740
  * 
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right             # <<<<<<<<<<<<<<
@@ -5806,7 +6173,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_right;
   __pyx_v_sum_right = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":732
+  /* "skgarden/mondrian/tree/_criterion.pyx":741
  *         cdef double* sum_left = self.sum_left
  *         cdef double* sum_right = self.sum_right
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
@@ -5816,7 +6183,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":734
+  /* "skgarden/mondrian/tree/_criterion.pyx":743
  *         cdef double* sum_total = self.sum_total
  * 
  *         cdef SIZE_t* n_classes = self.n_classes             # <<<<<<<<<<<<<<
@@ -5826,7 +6193,7 @@
   __pyx_t_4 = __pyx_v_self->n_classes;
   __pyx_v_n_classes = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":735
+  /* "skgarden/mondrian/tree/_criterion.pyx":744
  * 
  *         cdef SIZE_t* n_classes = self.n_classes
  *         cdef SIZE_t* samples = self.samples             # <<<<<<<<<<<<<<
@@ -5836,7 +6203,7 @@
   __pyx_t_4 = __pyx_v_self->__pyx_base.samples;
   __pyx_v_samples = __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":736
+  /* "skgarden/mondrian/tree/_criterion.pyx":745
  *         cdef SIZE_t* n_classes = self.n_classes
  *         cdef SIZE_t* samples = self.samples
  *         cdef DOUBLE_t* sample_weight = self.sample_weight             # <<<<<<<<<<<<<<
@@ -5846,7 +6213,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.sample_weight;
   __pyx_v_sample_weight = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":743
+  /* "skgarden/mondrian/tree/_criterion.pyx":752
  *         cdef SIZE_t c
  *         cdef SIZE_t label_index
  *         cdef DOUBLE_t w = 1.0             # <<<<<<<<<<<<<<
@@ -5855,7 +6222,7 @@
  */
   __pyx_v_w = 1.0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":753
+  /* "skgarden/mondrian/tree/_criterion.pyx":762
  *         # of computations, i.e. from pos to new_pos or from end to new_po.
  * 
  *         if (new_pos - pos) <= (end - new_pos):             # <<<<<<<<<<<<<<
@@ -5865,7 +6232,7 @@
   __pyx_t_5 = (((__pyx_v_new_pos - __pyx_v_pos) <= (__pyx_v_end - __pyx_v_new_pos)) != 0);
   if (__pyx_t_5) {
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":754
+    /* "skgarden/mondrian/tree/_criterion.pyx":763
  * 
  *         if (new_pos - pos) <= (end - new_pos):
  *             for p in range(pos, new_pos):             # <<<<<<<<<<<<<<
@@ -5876,7 +6243,7 @@
     for (__pyx_t_6 = __pyx_v_pos; __pyx_t_6 < __pyx_t_2; __pyx_t_6+=1) {
       __pyx_v_p = __pyx_t_6;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":755
+      /* "skgarden/mondrian/tree/_criterion.pyx":764
  *         if (new_pos - pos) <= (end - new_pos):
  *             for p in range(pos, new_pos):
  *                 i = samples[p]             # <<<<<<<<<<<<<<
@@ -5885,7 +6252,7 @@
  */
       __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":757
+      /* "skgarden/mondrian/tree/_criterion.pyx":766
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -5895,7 +6262,7 @@
       __pyx_t_5 = ((__pyx_v_sample_weight != NULL) != 0);
       if (__pyx_t_5) {
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":758
+        /* "skgarden/mondrian/tree/_criterion.pyx":767
  * 
  *                 if sample_weight != NULL:
  *                     w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -5904,7 +6271,7 @@
  */
         __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":757
+        /* "skgarden/mondrian/tree/_criterion.pyx":766
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -5913,7 +6280,7 @@
  */
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":760
+      /* "skgarden/mondrian/tree/_criterion.pyx":769
  *                     w = sample_weight[i]
  * 
  *                 for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -5924,7 +6291,7 @@
       for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
         __pyx_v_k = __pyx_t_8;
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":761
+        /* "skgarden/mondrian/tree/_criterion.pyx":770
  * 
  *                 for k in range(self.n_outputs):
  *                     label_index = (k * self.sum_stride +             # <<<<<<<<<<<<<<
@@ -5933,7 +6300,7 @@
  */
         __pyx_v_label_index = ((__pyx_v_k * __pyx_v_self->sum_stride) + ((__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t)(__pyx_v_y[((__pyx_v_i * __pyx_v_self->__pyx_base.y_stride) + __pyx_v_k)])));
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":763
+        /* "skgarden/mondrian/tree/_criterion.pyx":772
  *                     label_index = (k * self.sum_stride +
  *                                    <SIZE_t> y[i * self.y_stride + k])
  *                     sum_left[label_index] += w             # <<<<<<<<<<<<<<
@@ -5944,7 +6311,7 @@
         (__pyx_v_sum_left[__pyx_t_9]) = ((__pyx_v_sum_left[__pyx_t_9]) + __pyx_v_w);
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":765
+      /* "skgarden/mondrian/tree/_criterion.pyx":774
  *                     sum_left[label_index] += w
  * 
  *                 self.weighted_n_left += w             # <<<<<<<<<<<<<<
@@ -5954,7 +6321,7 @@
       __pyx_v_self->__pyx_base.weighted_n_left = (__pyx_v_self->__pyx_base.weighted_n_left + __pyx_v_w);
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":753
+    /* "skgarden/mondrian/tree/_criterion.pyx":762
  *         # of computations, i.e. from pos to new_pos or from end to new_po.
  * 
  *         if (new_pos - pos) <= (end - new_pos):             # <<<<<<<<<<<<<<
@@ -5964,7 +6331,7 @@
     goto __pyx_L3;
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":768
+  /* "skgarden/mondrian/tree/_criterion.pyx":777
  * 
  *         else:
  *             self.reverse_reset()             # <<<<<<<<<<<<<<
@@ -5972,9 +6339,9 @@
  *             for p in range(end - 1, new_pos - 1, -1):
  */
   /*else*/ {
-    __pyx_t_10 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reverse_reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 768, __pyx_L1_error)
+    __pyx_t_10 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.reverse_reset(((struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 777, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":770
+    /* "skgarden/mondrian/tree/_criterion.pyx":779
  *             self.reverse_reset()
  * 
  *             for p in range(end - 1, new_pos - 1, -1):             # <<<<<<<<<<<<<<
@@ -5985,7 +6352,7 @@
     for (__pyx_t_2 = (__pyx_v_end - 1); __pyx_t_2 > __pyx_t_11; __pyx_t_2-=1) {
       __pyx_v_p = __pyx_t_2;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":771
+      /* "skgarden/mondrian/tree/_criterion.pyx":780
  * 
  *             for p in range(end - 1, new_pos - 1, -1):
  *                 i = samples[p]             # <<<<<<<<<<<<<<
@@ -5994,7 +6361,7 @@
  */
       __pyx_v_i = (__pyx_v_samples[__pyx_v_p]);
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":773
+      /* "skgarden/mondrian/tree/_criterion.pyx":782
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -6004,7 +6371,7 @@
       __pyx_t_5 = ((__pyx_v_sample_weight != NULL) != 0);
       if (__pyx_t_5) {
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":774
+        /* "skgarden/mondrian/tree/_criterion.pyx":783
  * 
  *                 if sample_weight != NULL:
  *                     w = sample_weight[i]             # <<<<<<<<<<<<<<
@@ -6013,7 +6380,7 @@
  */
         __pyx_v_w = (__pyx_v_sample_weight[__pyx_v_i]);
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":773
+        /* "skgarden/mondrian/tree/_criterion.pyx":782
  *                 i = samples[p]
  * 
  *                 if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -6022,7 +6389,7 @@
  */
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":776
+      /* "skgarden/mondrian/tree/_criterion.pyx":785
  *                     w = sample_weight[i]
  * 
  *                 for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -6033,7 +6400,7 @@
       for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
         __pyx_v_k = __pyx_t_7;
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":777
+        /* "skgarden/mondrian/tree/_criterion.pyx":786
  * 
  *                 for k in range(self.n_outputs):
  *                     label_index = (k * self.sum_stride +             # <<<<<<<<<<<<<<
@@ -6042,7 +6409,7 @@
  */
         __pyx_v_label_index = ((__pyx_v_k * __pyx_v_self->sum_stride) + ((__pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t)(__pyx_v_y[((__pyx_v_i * __pyx_v_self->__pyx_base.y_stride) + __pyx_v_k)])));
 
-        /* "skgarden/mondrian/tree/_criterion.pyx":779
+        /* "skgarden/mondrian/tree/_criterion.pyx":788
  *                     label_index = (k * self.sum_stride +
  *                                    <SIZE_t> y[i * self.y_stride + k])
  *                     sum_left[label_index] -= w             # <<<<<<<<<<<<<<
@@ -6053,7 +6420,7 @@
         (__pyx_v_sum_left[__pyx_t_8]) = ((__pyx_v_sum_left[__pyx_t_8]) - __pyx_v_w);
       }
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":781
+      /* "skgarden/mondrian/tree/_criterion.pyx":790
  *                     sum_left[label_index] -= w
  * 
  *                 self.weighted_n_left -= w             # <<<<<<<<<<<<<<
@@ -6065,7 +6432,7 @@
   }
   __pyx_L3:;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":784
+  /* "skgarden/mondrian/tree/_criterion.pyx":793
  * 
  *         # Update right part statistics
  *         self.weighted_n_right = self.weighted_n_node_samples - self.weighted_n_left             # <<<<<<<<<<<<<<
@@ -6074,7 +6441,7 @@
  */
   __pyx_v_self->__pyx_base.weighted_n_right = (__pyx_v_self->__pyx_base.weighted_n_node_samples - __pyx_v_self->__pyx_base.weighted_n_left);
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":785
+  /* "skgarden/mondrian/tree/_criterion.pyx":794
  *         # Update right part statistics
  *         self.weighted_n_right = self.weighted_n_node_samples - self.weighted_n_left
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -6085,7 +6452,7 @@
   for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_2; __pyx_t_6+=1) {
     __pyx_v_k = __pyx_t_6;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":786
+    /* "skgarden/mondrian/tree/_criterion.pyx":795
  *         self.weighted_n_right = self.weighted_n_node_samples - self.weighted_n_left
  *         for k in range(self.n_outputs):
  *             for c in range(n_classes[k]):             # <<<<<<<<<<<<<<
@@ -6096,7 +6463,7 @@
     for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
       __pyx_v_c = __pyx_t_8;
 
-      /* "skgarden/mondrian/tree/_criterion.pyx":787
+      /* "skgarden/mondrian/tree/_criterion.pyx":796
  *         for k in range(self.n_outputs):
  *             for c in range(n_classes[k]):
  *                 sum_right[c] = sum_total[c] - sum_left[c]             # <<<<<<<<<<<<<<
@@ -6106,7 +6473,7 @@
       (__pyx_v_sum_right[__pyx_v_c]) = ((__pyx_v_sum_total[__pyx_v_c]) - (__pyx_v_sum_left[__pyx_v_c]));
     }
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":789
+    /* "skgarden/mondrian/tree/_criterion.pyx":798
  *                 sum_right[c] = sum_total[c] - sum_left[c]
  * 
  *             sum_right += self.sum_stride             # <<<<<<<<<<<<<<
@@ -6115,7 +6482,7 @@
  */
     __pyx_v_sum_right = (__pyx_v_sum_right + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":790
+    /* "skgarden/mondrian/tree/_criterion.pyx":799
  * 
  *             sum_right += self.sum_stride
  *             sum_left += self.sum_stride             # <<<<<<<<<<<<<<
@@ -6124,7 +6491,7 @@
  */
     __pyx_v_sum_left = (__pyx_v_sum_left + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":791
+    /* "skgarden/mondrian/tree/_criterion.pyx":800
  *             sum_right += self.sum_stride
  *             sum_left += self.sum_stride
  *             sum_total += self.sum_stride             # <<<<<<<<<<<<<<
@@ -6134,7 +6501,7 @@
     __pyx_v_sum_total = (__pyx_v_sum_total + __pyx_v_self->sum_stride);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":793
+  /* "skgarden/mondrian/tree/_criterion.pyx":802
  *             sum_total += self.sum_stride
  * 
  *         self.pos = new_pos             # <<<<<<<<<<<<<<
@@ -6143,7 +6510,7 @@
  */
   __pyx_v_self->__pyx_base.pos = __pyx_v_new_pos;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":794
+  /* "skgarden/mondrian/tree/_criterion.pyx":803
  * 
  *         self.pos = new_pos
  *         return 0             # <<<<<<<<<<<<<<
@@ -6153,7 +6520,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":714
+  /* "skgarden/mondrian/tree/_criterion.pyx":723
  *         return 0
  * 
  *     cdef int update(self, SIZE_t new_pos) nogil except -1:             # <<<<<<<<<<<<<<
@@ -6165,11 +6532,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._criterion.ClassificationCriterion.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -6177,7 +6544,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":796
+/* "skgarden/mondrian/tree/_criterion.pyx":805
  *         return 0
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -6188,7 +6555,7 @@
 static double __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_node_impurity(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self) {
   double __pyx_r;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":797
+  /* "skgarden/mondrian/tree/_criterion.pyx":806
  * 
  *     cdef double node_impurity(self) nogil:
  *         return INFINITY             # <<<<<<<<<<<<<<
@@ -6198,7 +6565,7 @@
   __pyx_r = __pyx_v_8skgarden_8mondrian_4tree_10_criterion_INFINITY;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":796
+  /* "skgarden/mondrian/tree/_criterion.pyx":805
  *         return 0
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -6211,7 +6578,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":799
+/* "skgarden/mondrian/tree/_criterion.pyx":808
  *         return INFINITY
  * 
  *     cdef void children_impurity(self, double* impurity_left,             # <<<<<<<<<<<<<<
@@ -6224,7 +6591,7 @@
   /* function exit code */
 }
 
-/* "skgarden/mondrian/tree/_criterion.pyx":803
+/* "skgarden/mondrian/tree/_criterion.pyx":812
  *         pass
  * 
  *     cdef void node_value(self, double* dest) nogil:             # <<<<<<<<<<<<<<
@@ -6241,9 +6608,9 @@
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_3;
   __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_4;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":812
+  /* "skgarden/mondrian/tree/_criterion.pyx":820
+ *             The memory address which we will save the node value into.
  *         """
- * 
  *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
  *         cdef SIZE_t* n_classes = self.n_classes
  *         cdef SIZE_t k
@@ -6251,8 +6618,8 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.sum_total;
   __pyx_v_sum_total = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":813
- * 
+  /* "skgarden/mondrian/tree/_criterion.pyx":821
+ *         """
  *         cdef double* sum_total = self.sum_total
  *         cdef SIZE_t* n_classes = self.n_classes             # <<<<<<<<<<<<<<
  *         cdef SIZE_t k
@@ -6261,7 +6628,7 @@
   __pyx_t_2 = __pyx_v_self->n_classes;
   __pyx_v_n_classes = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":816
+  /* "skgarden/mondrian/tree/_criterion.pyx":824
  *         cdef SIZE_t k
  * 
  *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
@@ -6272,7 +6639,7 @@
   for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
     __pyx_v_k = __pyx_t_4;
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":817
+    /* "skgarden/mondrian/tree/_criterion.pyx":825
  * 
  *         for k in range(self.n_outputs):
  *             memcpy(dest, sum_total, n_classes[k] * sizeof(double))             # <<<<<<<<<<<<<<
@@ -6281,23 +6648,26 @@
  */
     memcpy(__pyx_v_dest, __pyx_v_sum_total, ((__pyx_v_n_classes[__pyx_v_k]) * (sizeof(double))));
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":818
+    /* "skgarden/mondrian/tree/_criterion.pyx":826
  *         for k in range(self.n_outputs):
  *             memcpy(dest, sum_total, n_classes[k] * sizeof(double))
  *             dest += self.sum_stride             # <<<<<<<<<<<<<<
  *             sum_total += self.sum_stride
+ * 
  */
     __pyx_v_dest = (__pyx_v_dest + __pyx_v_self->sum_stride);
 
-    /* "skgarden/mondrian/tree/_criterion.pyx":819
+    /* "skgarden/mondrian/tree/_criterion.pyx":827
  *             memcpy(dest, sum_total, n_classes[k] * sizeof(double))
  *             dest += self.sum_stride
  *             sum_total += self.sum_stride             # <<<<<<<<<<<<<<
+ * 
+ *     cdef bint is_pure(self) nogil:
  */
     __pyx_v_sum_total = (__pyx_v_sum_total + __pyx_v_self->sum_stride);
   }
 
-  /* "skgarden/mondrian/tree/_criterion.pyx":803
+  /* "skgarden/mondrian/tree/_criterion.pyx":812
  *         pass
  * 
  *     cdef void node_value(self, double* dest) nogil:             # <<<<<<<<<<<<<<
@@ -6308,7 +6678,186 @@
   /* function exit code */
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+/* "skgarden/mondrian/tree/_criterion.pyx":829
+ *             sum_total += self.sum_stride
+ * 
+ *     cdef bint is_pure(self) nogil:             # <<<<<<<<<<<<<<
+ *         cdef bint is_pure_node = True
+ *         cdef bint is_pure_output = False
+ */
+
+static int __pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_is_pure(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion *__pyx_v_self) {
+  int __pyx_v_is_pure_node;
+  int __pyx_v_is_pure_output;
+  __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_c_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_v_k;
+  double *__pyx_v_sum_total;
+  int __pyx_r;
+  double *__pyx_t_1;
+  __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_2;
+  __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_3;
+  __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_4;
+  __pyx_t_8skgarden_8mondrian_4tree_10_criterion_SIZE_t __pyx_t_5;
+  int __pyx_t_6;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":830
+ * 
+ *     cdef bint is_pure(self) nogil:
+ *         cdef bint is_pure_node = True             # <<<<<<<<<<<<<<
+ *         cdef bint is_pure_output = False
+ *         cdef SIZE_t c_ind
+ */
+  __pyx_v_is_pure_node = 1;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":831
+ *     cdef bint is_pure(self) nogil:
+ *         cdef bint is_pure_node = True
+ *         cdef bint is_pure_output = False             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t c_ind
+ *         cdef SIZE_t k
+ */
+  __pyx_v_is_pure_output = 0;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":834
+ *         cdef SIZE_t c_ind
+ *         cdef SIZE_t k
+ *         cdef double* sum_total = self.sum_total             # <<<<<<<<<<<<<<
+ * 
+ *         for k in range(self.n_outputs):
+ */
+  __pyx_t_1 = __pyx_v_self->__pyx_base.sum_total;
+  __pyx_v_sum_total = __pyx_t_1;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":836
+ *         cdef double* sum_total = self.sum_total
+ * 
+ *         for k in range(self.n_outputs):             # <<<<<<<<<<<<<<
+ *             is_pure_output = False
+ *             for c_ind in range(self.n_classes[k]):
+ */
+  __pyx_t_2 = __pyx_v_self->__pyx_base.n_outputs;
+  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
+    __pyx_v_k = __pyx_t_3;
+
+    /* "skgarden/mondrian/tree/_criterion.pyx":837
+ * 
+ *         for k in range(self.n_outputs):
+ *             is_pure_output = False             # <<<<<<<<<<<<<<
+ *             for c_ind in range(self.n_classes[k]):
+ *                 if sum_total[c_ind] == self.n_node_samples:
+ */
+    __pyx_v_is_pure_output = 0;
+
+    /* "skgarden/mondrian/tree/_criterion.pyx":838
+ *         for k in range(self.n_outputs):
+ *             is_pure_output = False
+ *             for c_ind in range(self.n_classes[k]):             # <<<<<<<<<<<<<<
+ *                 if sum_total[c_ind] == self.n_node_samples:
+ *                     is_pure_output = True
+ */
+    __pyx_t_4 = (__pyx_v_self->n_classes[__pyx_v_k]);
+    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
+      __pyx_v_c_ind = __pyx_t_5;
+
+      /* "skgarden/mondrian/tree/_criterion.pyx":839
+ *             is_pure_output = False
+ *             for c_ind in range(self.n_classes[k]):
+ *                 if sum_total[c_ind] == self.n_node_samples:             # <<<<<<<<<<<<<<
+ *                     is_pure_output = True
+ *                     break
+ */
+      __pyx_t_6 = (((__pyx_v_sum_total[__pyx_v_c_ind]) == __pyx_v_self->__pyx_base.n_node_samples) != 0);
+      if (__pyx_t_6) {
+
+        /* "skgarden/mondrian/tree/_criterion.pyx":840
+ *             for c_ind in range(self.n_classes[k]):
+ *                 if sum_total[c_ind] == self.n_node_samples:
+ *                     is_pure_output = True             # <<<<<<<<<<<<<<
+ *                     break
+ *             if not is_pure_output:
+ */
+        __pyx_v_is_pure_output = 1;
+
+        /* "skgarden/mondrian/tree/_criterion.pyx":841
+ *                 if sum_total[c_ind] == self.n_node_samples:
+ *                     is_pure_output = True
+ *                     break             # <<<<<<<<<<<<<<
+ *             if not is_pure_output:
+ *                 is_pure_node = False
+ */
+        goto __pyx_L6_break;
+
+        /* "skgarden/mondrian/tree/_criterion.pyx":839
+ *             is_pure_output = False
+ *             for c_ind in range(self.n_classes[k]):
+ *                 if sum_total[c_ind] == self.n_node_samples:             # <<<<<<<<<<<<<<
+ *                     is_pure_output = True
+ *                     break
+ */
+      }
+    }
+    __pyx_L6_break:;
+
+    /* "skgarden/mondrian/tree/_criterion.pyx":842
+ *                     is_pure_output = True
+ *                     break
+ *             if not is_pure_output:             # <<<<<<<<<<<<<<
+ *                 is_pure_node = False
+ *                 break
+ */
+    __pyx_t_6 = ((!(__pyx_v_is_pure_output != 0)) != 0);
+    if (__pyx_t_6) {
+
+      /* "skgarden/mondrian/tree/_criterion.pyx":843
+ *                     break
+ *             if not is_pure_output:
+ *                 is_pure_node = False             # <<<<<<<<<<<<<<
+ *                 break
+ *         return is_pure_node
+ */
+      __pyx_v_is_pure_node = 0;
+
+      /* "skgarden/mondrian/tree/_criterion.pyx":844
+ *             if not is_pure_output:
+ *                 is_pure_node = False
+ *                 break             # <<<<<<<<<<<<<<
+ *         return is_pure_node
+ */
+      goto __pyx_L4_break;
+
+      /* "skgarden/mondrian/tree/_criterion.pyx":842
+ *                     is_pure_output = True
+ *                     break
+ *             if not is_pure_output:             # <<<<<<<<<<<<<<
+ *                 is_pure_node = False
+ *                 break
+ */
+    }
+  }
+  __pyx_L4_break:;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":845
+ *                 is_pure_node = False
+ *                 break
+ *         return is_pure_node             # <<<<<<<<<<<<<<
+ */
+  __pyx_r = __pyx_v_is_pure_node;
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_criterion.pyx":829
+ *             sum_total += self.sum_stride
+ * 
+ *     cdef bint is_pure(self) nogil:             # <<<<<<<<<<<<<<
+ *         cdef bint is_pure_node = True
+ *         cdef bint is_pure_output = False
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -6355,7 +6904,7 @@
     __Pyx_GIVEREF(__pyx_v_info->obj);
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":203
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
  *             # of flags
  * 
  *             if info == NULL: return             # <<<<<<<<<<<<<<
@@ -6368,7 +6917,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":206
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
  * 
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -6377,7 +6926,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":207
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":224
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -6386,7 +6935,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":209
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
  * 
  *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
@@ -6395,7 +6944,7 @@
  */
   __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -6405,7 +6954,7 @@
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":212
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  *                 copy_shape = 1             # <<<<<<<<<<<<<<
@@ -6414,7 +6963,7 @@
  */
     __pyx_v_copy_shape = 1;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -6424,7 +6973,7 @@
     goto __pyx_L4;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":214
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
  *                 copy_shape = 1
  *             else:
  *                 copy_shape = 0             # <<<<<<<<<<<<<<
@@ -6436,7 +6985,7 @@
   }
   __pyx_L4:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -6450,7 +6999,7 @@
     goto __pyx_L6_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":217
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":234
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -6461,7 +7010,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L6_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -6470,20 +7019,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(1, 218, __pyx_L1_error)
+    __PYX_ERR(2, 235, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -6492,7 +7041,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -6506,7 +7055,7 @@
     goto __pyx_L9_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":221
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":238
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -6517,7 +7066,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L9_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -6526,20 +7075,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 239, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(1, 222, __pyx_L1_error)
+    __PYX_ERR(2, 239, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -6548,7 +7097,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":224
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
  * 
  *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
@@ -6557,7 +7106,7 @@
  */
   __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":225
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
  * 
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim             # <<<<<<<<<<<<<<
@@ -6566,7 +7115,7 @@
  */
   __pyx_v_info->ndim = __pyx_v_ndim;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -6576,26 +7125,26 @@
   __pyx_t_1 = (__pyx_v_copy_shape != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":229
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
  *                 # Allocate new buffer for strides and shape info.
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  */
-    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));
+    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":230
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  */
     __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":231
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):             # <<<<<<<<<<<<<<
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
@@ -6605,7 +7154,7 @@
     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
       __pyx_v_i = __pyx_t_5;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":232
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
@@ -6614,7 +7163,7 @@
  */
       (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":233
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
@@ -6624,7 +7173,7 @@
       (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -6634,7 +7183,7 @@
     goto __pyx_L11;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":235
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":252
  *                     info.shape[i] = PyArray_DIMS(self)[i]
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
@@ -6644,7 +7193,7 @@
   /*else*/ {
     __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":236
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
@@ -6655,7 +7204,7 @@
   }
   __pyx_L11:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":237
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
@@ -6664,7 +7213,7 @@
  */
   __pyx_v_info->suboffsets = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":238
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
@@ -6673,7 +7222,7 @@
  */
   __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":239
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)
  *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
@@ -6682,7 +7231,7 @@
  */
   __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":242
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
  * 
  *             cdef int t
  *             cdef char* f = NULL             # <<<<<<<<<<<<<<
@@ -6691,7 +7240,7 @@
  */
   __pyx_v_f = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":243
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
  *             cdef int t
  *             cdef char* f = NULL
  *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
@@ -6703,7 +7252,7 @@
   __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
   __pyx_t_3 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":246
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
  *             cdef int offset
  * 
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
@@ -6712,7 +7261,7 @@
  */
   __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -6730,7 +7279,7 @@
   __pyx_L15_bool_binop_done:;
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":250
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
  *             if not hasfields and not copy_shape:
  *                 # do not call releasebuffer
  *                 info.obj = None             # <<<<<<<<<<<<<<
@@ -6743,7 +7292,7 @@
     __Pyx_DECREF(__pyx_v_info->obj);
     __pyx_v_info->obj = Py_None;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -6753,7 +7302,7 @@
     goto __pyx_L14;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":253
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
  *             else:
  *                 # need to call releasebuffer
  *                 info.obj = self             # <<<<<<<<<<<<<<
@@ -6769,7 +7318,7 @@
   }
   __pyx_L14:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -6779,7 +7328,7 @@
   __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":256
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
  * 
  *             if not hasfields:
  *                 t = descr.type_num             # <<<<<<<<<<<<<<
@@ -6789,7 +7338,7 @@
     __pyx_t_4 = __pyx_v_descr->type_num;
     __pyx_v_t = __pyx_t_4;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6809,7 +7358,7 @@
     }
     __pyx_L20_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":258
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -6826,7 +7375,7 @@
     __pyx_t_1 = __pyx_t_2;
     __pyx_L19_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6835,20 +7384,20 @@
  */
     if (__pyx_t_1) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(1, 259, __pyx_L1_error)
+      __PYX_ERR(2, 276, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6857,7 +7406,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":260
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
@@ -6869,7 +7418,7 @@
       __pyx_v_f = ((char *)"b");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":261
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
@@ -6880,7 +7429,7 @@
       __pyx_v_f = ((char *)"B");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":262
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
@@ -6891,7 +7440,7 @@
       __pyx_v_f = ((char *)"h");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":263
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
@@ -6902,7 +7451,7 @@
       __pyx_v_f = ((char *)"H");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":264
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":281
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
@@ -6913,7 +7462,7 @@
       __pyx_v_f = ((char *)"i");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":265
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
@@ -6924,7 +7473,7 @@
       __pyx_v_f = ((char *)"I");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":266
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
@@ -6935,7 +7484,7 @@
       __pyx_v_f = ((char *)"l");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":267
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
@@ -6946,7 +7495,7 @@
       __pyx_v_f = ((char *)"L");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":268
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
@@ -6957,7 +7506,7 @@
       __pyx_v_f = ((char *)"q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":269
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
@@ -6968,7 +7517,7 @@
       __pyx_v_f = ((char *)"Q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":270
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
@@ -6979,7 +7528,7 @@
       __pyx_v_f = ((char *)"f");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":271
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
@@ -6990,7 +7539,7 @@
       __pyx_v_f = ((char *)"d");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":272
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
@@ -7001,7 +7550,7 @@
       __pyx_v_f = ((char *)"g");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":273
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
@@ -7012,7 +7561,7 @@
       __pyx_v_f = ((char *)"Zf");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":274
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
@@ -7023,7 +7572,7 @@
       __pyx_v_f = ((char *)"Zd");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":275
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
@@ -7034,7 +7583,7 @@
       __pyx_v_f = ((char *)"Zg");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":276
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
  *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
@@ -7046,33 +7595,33 @@
       break;
       default:
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":278
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
  *                 elif t == NPY_OBJECT:      f = "O"
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
  *                 info.format = f
  *                 return
  */
-      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_GIVEREF(__pyx_t_6);
       PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
       __pyx_t_6 = 0;
-      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       __Pyx_Raise(__pyx_t_6, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __PYX_ERR(1, 278, __pyx_L1_error)
+      __PYX_ERR(2, 295, __pyx_L1_error)
       break;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":279
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f             # <<<<<<<<<<<<<<
@@ -7081,17 +7630,17 @@
  */
     __pyx_v_info->format = __pyx_v_f;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":280
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f
  *                 return             # <<<<<<<<<<<<<<
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  */
     __pyx_r = 0;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -7100,27 +7649,27 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":282
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":299
  *                 return
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  */
   /*else*/ {
-    __pyx_v_info->format = ((char *)malloc(0xFF));
+    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":283
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":300
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,
  */
     (__pyx_v_info->format[0]) = '^';
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":284
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":301
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0             # <<<<<<<<<<<<<<
  *                 f = _util_dtypestring(descr, info.format + 1,
@@ -7128,17 +7677,17 @@
  */
     __pyx_v_offset = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":285
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  */
-    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
+    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 302, __pyx_L1_error)
     __pyx_v_f = __pyx_t_7;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":288
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":305
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
@@ -7148,7 +7697,7 @@
     (__pyx_v_f[0]) = '\x00';
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -7180,12 +7729,12 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
 /* Python wrapper */
@@ -7204,75 +7753,75 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("__releasebuffer__", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":292
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":309
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  */
-    free(__pyx_v_info->format);
+    PyObject_Free(__pyx_v_info->format);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":294
- *                 stdlib.free(info.format)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":311
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
  *                 # info.shape was stored after info.strides in the same block
  * 
  */
-    free(__pyx_v_info->strides);
+    PyObject_Free(__pyx_v_info->strides);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -7286,7 +7835,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":771
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":789
  * 
  * cdef inline object PyArray_MultiIterNew1(a):
  *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
@@ -7294,13 +7843,13 @@
  * cdef inline object PyArray_MultiIterNew2(a, b):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 789, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -7319,7 +7868,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -7333,7 +7882,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":774
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
@@ -7341,13 +7890,13 @@
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 792, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -7366,7 +7915,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -7380,7 +7929,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":777
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
@@ -7388,13 +7937,13 @@
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 795, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -7413,7 +7962,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -7427,7 +7976,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":780
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
@@ -7435,13 +7984,13 @@
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 798, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -7460,7 +8009,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -7474,21 +8023,21 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":783
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
  * 
- * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 801, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -7507,9 +8056,83 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
+ *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
+  if (__pyx_t_1) {
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
+ *     else:
+ *         return ()
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
+    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
+    goto __pyx_L0;
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
+ *         return <tuple>d.subarray.shape
+ *     else:
+ *         return ()             # <<<<<<<<<<<<<<
+ * 
+ * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(__pyx_empty_tuple);
+    __pyx_r = __pyx_empty_tuple;
+    goto __pyx_L0;
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
  * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
+ * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
  *     # string. The new location in the format string is returned.
@@ -7536,7 +8159,7 @@
   char *__pyx_t_9;
   __Pyx_RefNannySetupContext("_util_dtypestring", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":790
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
  * 
  *     cdef dtype child
  *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -7545,7 +8168,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":791
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
  *     cdef dtype child
  *     cdef int endian_detector = 1
  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -7554,7 +8177,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -7563,21 +8186,21 @@
  */
   if (unlikely(__pyx_v_descr->names == Py_None)) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
-    __PYX_ERR(1, 794, __pyx_L1_error)
+    __PYX_ERR(2, 818, __pyx_L1_error)
   }
   __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
   for (;;) {
     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
+    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 818, __pyx_L1_error)
     #else
-    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
+    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 818, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     #endif
     __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":795
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":819
  * 
  *     for childname in descr.names:
  *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
@@ -7586,15 +8209,15 @@
  */
     if (unlikely(__pyx_v_descr->fields == Py_None)) {
       PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
-      __PYX_ERR(1, 795, __pyx_L1_error)
+      __PYX_ERR(2, 819, __pyx_L1_error)
     }
-    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 819, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
-    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
+    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 819, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":796
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
  *     for childname in descr.names:
  *         fields = descr.fields[childname]
  *         child, new_offset = fields             # <<<<<<<<<<<<<<
@@ -7611,7 +8234,7 @@
       if (unlikely(size != 2)) {
         if (size > 2) __Pyx_RaiseTooManyValuesError(2);
         else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
-        __PYX_ERR(1, 796, __pyx_L1_error)
+        __PYX_ERR(2, 820, __pyx_L1_error)
       }
       #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
       __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
@@ -7619,51 +8242,51 @@
       __Pyx_INCREF(__pyx_t_3);
       __Pyx_INCREF(__pyx_t_4);
       #else
-      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
+      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
+      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       #endif
     } else {
-      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
+      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 820, __pyx_L1_error)
     }
-    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
+    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 820, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
     __pyx_t_3 = 0;
     __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
     __pyx_t_4 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  */
-    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
+    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
+    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 822, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 823, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(1, 799, __pyx_L1_error)
+      __PYX_ERR(2, 823, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
@@ -7672,7 +8295,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -7692,7 +8315,7 @@
     }
     __pyx_L8_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":802
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -7709,7 +8332,7 @@
     __pyx_t_6 = __pyx_t_7;
     __pyx_L7_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -7718,20 +8341,20 @@
  */
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(1, 803, __pyx_L1_error)
+      __PYX_ERR(2, 827, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -7740,7 +8363,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":813
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
  * 
  *         # Output padding bytes
  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
@@ -7748,15 +8371,15 @@
  *             f += 1
  */
     while (1) {
-      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (!__pyx_t_6) break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":814
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
  *         # Output padding bytes
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
@@ -7765,7 +8388,7 @@
  */
       (__pyx_v_f[0]) = 0x78;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":815
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte
  *             f += 1             # <<<<<<<<<<<<<<
@@ -7774,7 +8397,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":816
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
  *             f[0] = 120 # "x"; pad byte
  *             f += 1
  *             offset[0] += 1             # <<<<<<<<<<<<<<
@@ -7785,7 +8408,7 @@
       (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":818
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
  *             offset[0] += 1
  * 
  *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
@@ -7795,7 +8418,7 @@
     __pyx_t_8 = 0;
     (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -7805,19 +8428,19 @@
     __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":821
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
  * 
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num             # <<<<<<<<<<<<<<
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")
  */
-      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
       __pyx_t_4 = 0;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -7827,20 +8450,20 @@
       __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
       if (__pyx_t_6) {
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
+        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_Raise(__pyx_t_4, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-        __PYX_ERR(1, 823, __pyx_L1_error)
+        __PYX_ERR(2, 847, __pyx_L1_error)
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -7849,252 +8472,252 @@
  */
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":826
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 98;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":827
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":828
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x68;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":829
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 72;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":830
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":854
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 854, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x69;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":831
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 73;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":832
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 856, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x6C;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":833
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":857
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 857, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 76;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":834
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 858, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x71;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":835
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":859
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 859, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 81;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":836
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 860, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":837
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 861, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x64;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":838
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":862
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 862, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x67;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":839
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":863
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 863, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -8103,18 +8726,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":840
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":864
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 864, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -8123,18 +8746,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":841
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":865
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 865, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -8143,25 +8766,25 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":842
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":866
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 866, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 79;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":844
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":868
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
@@ -8169,23 +8792,23 @@
  *         else:
  */
       /*else*/ {
-        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
+        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
-        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
+        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_GIVEREF(__pyx_t_3);
         PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
         __pyx_t_3 = 0;
-        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_Raise(__pyx_t_3, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-        __PYX_ERR(1, 844, __pyx_L1_error)
+        __PYX_ERR(2, 868, __pyx_L1_error)
       }
       __pyx_L15:;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":845
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":869
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *             f += 1             # <<<<<<<<<<<<<<
@@ -8194,7 +8817,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -8204,7 +8827,7 @@
       goto __pyx_L13;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":849
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":873
  *             # Cython ignores struct boundary information ("T{...}"),
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
@@ -8212,12 +8835,12 @@
  * 
  */
     /*else*/ {
-      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
+      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 873, __pyx_L1_error)
       __pyx_v_f = __pyx_t_9;
     }
     __pyx_L13:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -8227,7 +8850,7 @@
   }
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":850
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":874
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)
  *     return f             # <<<<<<<<<<<<<<
@@ -8237,8 +8860,8 @@
   __pyx_r = __pyx_v_f;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
  * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
@@ -8262,7 +8885,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -8277,7 +8900,7 @@
   int __pyx_t_2;
   __Pyx_RefNannySetupContext("set_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -8288,7 +8911,7 @@
   __pyx_t_2 = (__pyx_t_1 != 0);
   if (__pyx_t_2) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":969
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":993
  *      cdef PyObject* baseptr
  *      if base is None:
  *          baseptr = NULL             # <<<<<<<<<<<<<<
@@ -8297,7 +8920,7 @@
  */
     __pyx_v_baseptr = NULL;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -8307,7 +8930,7 @@
     goto __pyx_L3;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":971
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
  *          baseptr = NULL
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
@@ -8317,7 +8940,7 @@
   /*else*/ {
     Py_INCREF(__pyx_v_base);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":972
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
@@ -8328,7 +8951,7 @@
   }
   __pyx_L3:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":973
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
@@ -8337,7 +8960,7 @@
  */
   Py_XDECREF(__pyx_v_arr->base);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":974
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)
  *      arr.base = baseptr             # <<<<<<<<<<<<<<
@@ -8346,7 +8969,7 @@
  */
   __pyx_v_arr->base = __pyx_v_baseptr;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -8358,7 +8981,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -8372,7 +8995,7 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("get_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -8382,7 +9005,7 @@
   __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":978
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:
  *         return None             # <<<<<<<<<<<<<<
@@ -8394,7 +9017,7 @@
     __pyx_r = Py_None;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -8403,7 +9026,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":980
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
  *         return None
  *     else:
  *         return <object>arr.base             # <<<<<<<<<<<<<<
@@ -8417,7 +9040,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -8432,7 +9055,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -8453,7 +9076,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_array", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -8469,16 +9092,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":987
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
  * cdef inline int import_array() except -1:
  *     try:
  *         _import_array()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")
  */
-      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)
+      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1011, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -8489,11 +9112,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":988
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
  *     try:
  *         _import_array()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -8503,44 +9125,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1012, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1013, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 989, __pyx_L5_except_error)
+      __PYX_ERR(2, 1013, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_array()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -8563,7 +9184,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -8584,7 +9205,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_umath", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -8600,16 +9221,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":993
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1017
  * cdef inline int import_umath() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1017, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -8620,11 +9241,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":994
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1018
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -8634,44 +9254,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1018, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1019, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 995, __pyx_L5_except_error)
+      __PYX_ERR(2, 1019, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -8694,7 +9313,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -8715,7 +9334,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_ufunc", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -8731,16 +9350,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":999
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1023
  * cdef inline int import_ufunc() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1023, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -8751,11 +9370,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1000
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1024
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -8764,42 +9382,41 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1024, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1025, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 1001, __pyx_L5_except_error)
+      __PYX_ERR(2, 1025, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -8838,8 +9455,8 @@
 }
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_10_criterion_Criterion(PyObject *o) {
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -8857,6 +9474,8 @@
 static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_10_criterion_Criterion[] = {
   {"__getstate__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_3__getstate__, METH_NOARGS, 0},
   {"__setstate__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_5__setstate__, METH_O, 0},
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_7__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_10_criterion_9Criterion_9__setstate_cython__, METH_O, 0},
   {0, 0, 0, 0}
 };
 
@@ -9078,8 +9697,8 @@
 }
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion(PyObject *o) {
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -9162,17 +9781,31 @@
 };
 
 #if PY_MAJOR_VERSION >= 3
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
+static int __pyx_pymod_exec__criterion(PyObject* module); /*proto*/
+static PyModuleDef_Slot __pyx_moduledef_slots[] = {
+  {Py_mod_create, (void*)__pyx_pymod_create},
+  {Py_mod_exec, (void*)__pyx_pymod_exec__criterion},
+  {0, NULL}
+};
+#endif
+
 static struct PyModuleDef __pyx_moduledef = {
-  #if PY_VERSION_HEX < 0x03020000
-    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
-  #else
     PyModuleDef_HEAD_INIT,
-  #endif
     "_criterion",
     0, /* m_doc */
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    0, /* m_size */
+  #else
     -1, /* m_size */
+  #endif
     __pyx_methods /* m_methods */,
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    __pyx_moduledef_slots, /* m_slots */
+  #else
     NULL, /* m_reload */
+  #endif
     NULL, /* m_traverse */
     NULL, /* m_clear */
     NULL /* m_free */
@@ -9186,7 +9819,9 @@
   {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
   {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
   {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
+  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
+  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
   {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
   {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
   {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
@@ -9194,6 +9829,7 @@
   {&__pyx_n_s_n_classes, __pyx_k_n_classes, sizeof(__pyx_k_n_classes), 0, 0, 1, 1},
   {&__pyx_n_s_n_outputs, __pyx_k_n_outputs, sizeof(__pyx_k_n_outputs), 0, 0, 1, 1},
   {&__pyx_n_s_n_samples, __pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 0, 1, 1},
+  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
   {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
   {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
   {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
@@ -9202,16 +9838,23 @@
   {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
   {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
   {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
+  {&__pyx_kp_s_self_sample_weight_self_samples, __pyx_k_self_sample_weight_self_samples, sizeof(__pyx_k_self_sample_weight_self_samples), 0, 0, 1, 0},
+  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
   {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
   {0, 0, 0, 0, 0, 0, 0}
 };
 static int __Pyx_InitCachedBuiltins(void) {
-  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 271, __pyx_L1_error)
-  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 302, __pyx_L1_error)
-  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
-  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
-  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
+  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
+  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 277, __pyx_L1_error)
+  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 308, __pyx_L1_error)
+  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 235, __pyx_L1_error)
+  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 823, __pyx_L1_error)
+  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1013, __pyx_L1_error)
   return 0;
   __pyx_L1_error:;
   return -1;
@@ -9221,102 +9864,121 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ */
+  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_sample_weight_self_samples); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple_);
+  __Pyx_GIVEREF(__pyx_tuple_);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("self.sample_weight,self.samples,self.sum_left,self.sum_right,self.sum_total,self.y cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
+ */
+  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_sample_weight_self_samples); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__2);
+  __Pyx_GIVEREF(__pyx_tuple__2);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 218, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple_);
-  __Pyx_GIVEREF(__pyx_tuple_);
+  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 235, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__3);
+  __Pyx_GIVEREF(__pyx_tuple__3);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 222, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__2);
-  __Pyx_GIVEREF(__pyx_tuple__2);
+  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 239, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__4);
+  __Pyx_GIVEREF(__pyx_tuple__4);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 259, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__3);
-  __Pyx_GIVEREF(__pyx_tuple__3);
+  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 276, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__5);
+  __Pyx_GIVEREF(__pyx_tuple__5);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 799, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__4);
-  __Pyx_GIVEREF(__pyx_tuple__4);
+  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 823, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__6);
+  __Pyx_GIVEREF(__pyx_tuple__6);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 803, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__5);
-  __Pyx_GIVEREF(__pyx_tuple__5);
+  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 827, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__7);
+  __Pyx_GIVEREF(__pyx_tuple__7);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 823, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__6);
-  __Pyx_GIVEREF(__pyx_tuple__6);
+  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 847, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__8);
+  __Pyx_GIVEREF(__pyx_tuple__8);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 989, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__7);
-  __Pyx_GIVEREF(__pyx_tuple__7);
+  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 1013, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__9);
+  __Pyx_GIVEREF(__pyx_tuple__9);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 995, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__8);
-  __Pyx_GIVEREF(__pyx_tuple__8);
+  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 1019, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__10);
+  __Pyx_GIVEREF(__pyx_tuple__10);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1001, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__9);
-  __Pyx_GIVEREF(__pyx_tuple__9);
+  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 1025, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__11);
+  __Pyx_GIVEREF(__pyx_tuple__11);
   __Pyx_RefNannyFinishContext();
   return 0;
   __pyx_L1_error:;
@@ -9325,7 +9987,7 @@
 }
 
 static int __Pyx_InitGlobals(void) {
-  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
+  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
   return 0;
   __pyx_L1_error:;
   return -1;
@@ -9337,6 +9999,47 @@
 #else
 PyMODINIT_FUNC PyInit__criterion(void); /*proto*/
 PyMODINIT_FUNC PyInit__criterion(void)
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+{
+  return PyModuleDef_Init(&__pyx_moduledef);
+}
+static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
+    PyObject *value = PyObject_GetAttrString(spec, from_name);
+    int result = 0;
+    if (likely(value)) {
+        result = PyDict_SetItemString(moddict, to_name, value);
+        Py_DECREF(value);
+    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Clear();
+    } else {
+        result = -1;
+    }
+    return result;
+}
+static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
+    PyObject *module = NULL, *moddict, *modname;
+    if (__pyx_m)
+        return __Pyx_NewRef(__pyx_m);
+    modname = PyObject_GetAttrString(spec, "name");
+    if (unlikely(!modname)) goto bad;
+    module = PyModule_NewObject(modname);
+    Py_DECREF(modname);
+    if (unlikely(!module)) goto bad;
+    moddict = PyModule_GetDict(module);
+    if (unlikely(!moddict)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
+    return module;
+bad:
+    Py_XDECREF(module);
+    return NULL;
+}
+
+
+static int __pyx_pymod_exec__criterion(PyObject *__pyx_pyinit_module)
+#endif
 #endif
 {
   PyObject *__pyx_t_1 = NULL;
@@ -9345,6 +10048,9 @@
   PyObject *__pyx_t_4 = NULL;
   double __pyx_t_5;
   __Pyx_RefNannyDeclarations
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
+  #endif
   #if CYTHON_REFNANNY
   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
   if (!__Pyx_RefNanny) {
@@ -9355,24 +10061,27 @@
   }
   #endif
   __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__criterion(void)", 0);
-  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
-  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
-  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
   #ifdef __Pyx_CyFunction_USED
-  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
   #ifdef __Pyx_FusedFunction_USED
-  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
   #ifdef __Pyx_Coroutine_USED
-  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
   #ifdef __Pyx_Generator_USED
-  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  #endif
+  #ifdef __Pyx_AsyncGen_USED
+  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
   #ifdef __Pyx_StopAsyncIteration_USED
-  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
   /*--- Library function declarations ---*/
   /*--- Threads initialization code ---*/
@@ -9382,39 +10091,45 @@
   #endif
   #endif
   /*--- Module creation code ---*/
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  __pyx_m = __pyx_pyinit_module;
+  Py_INCREF(__pyx_m);
+  #else
   #if PY_MAJOR_VERSION < 3
   __pyx_m = Py_InitModule4("_criterion", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
   #else
   __pyx_m = PyModule_Create(&__pyx_moduledef);
   #endif
-  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
-  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
+  #endif
+  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
   Py_INCREF(__pyx_d);
-  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
   #if CYTHON_COMPILING_IN_PYPY
   Py_INCREF(__pyx_b);
   #endif
-  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
+  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
   /*--- Initialize various global constants etc. ---*/
-  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
-  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
   if (__pyx_module_is_main_skgarden__mondrian__tree___criterion) {
-    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   }
   #if PY_MAJOR_VERSION >= 3
   {
-    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
+    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
     if (!PyDict_GetItemString(modules, "skgarden.mondrian.tree._criterion")) {
-      if (unlikely(PyDict_SetItemString(modules, "skgarden.mondrian.tree._criterion", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
+      if (unlikely(PyDict_SetItemString(modules, "skgarden.mondrian.tree._criterion", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
     }
   }
   #endif
   /*--- Builtin init code ---*/
-  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   /*--- Constants init code ---*/
-  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   /*--- Global init code ---*/
   /*--- Variable export code ---*/
   /*--- Function export code ---*/
@@ -9429,10 +10144,12 @@
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_Criterion.node_value = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_node_value;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_Criterion.impurity_improvement = (double (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_impurity_improvement;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_Criterion.proxy_impurity_improvement = (double (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_proxy_impurity_improvement;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
+  __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_Criterion.is_pure = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_9Criterion_is_pure;
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "Criterion", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "Criterion", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = &__pyx_type_8skgarden_8mondrian_4tree_10_criterion_Criterion;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion = &__pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion;
@@ -9444,21 +10161,22 @@
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.__pyx_base.children_impurity = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *, double *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion_children_impurity;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.__pyx_base.node_value = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_19RegressionCriterion_node_value;
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion) < 0) __PYX_ERR(1, 218, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "RegressionCriterion", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion) < 0) __PYX_ERR(1, 218, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "RegressionCriterion", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion) < 0) __PYX_ERR(1, 218, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion = &__pyx_type_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_MSE = &__pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_MSE;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_MSE.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_MSE.__pyx_base.__pyx_base.node_impurity = (double (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_node_impurity;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_MSE.__pyx_base.__pyx_base.children_impurity = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *, double *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_children_impurity;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_MSE.__pyx_base.__pyx_base.proxy_impurity_improvement = (double (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_proxy_impurity_improvement;
+  __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_MSE.__pyx_base.__pyx_base.is_pure = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_3MSE_is_pure;
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_RegressionCriterion;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE) < 0) __PYX_ERR(1, 426, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_MSE) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "MSE", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_MSE) < 0) __PYX_ERR(1, 426, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "MSE", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE) < 0) __PYX_ERR(1, 426, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_MSE = &__pyx_type_8skgarden_8mondrian_4tree_10_criterion_MSE;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion = &__pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion;
@@ -9469,11 +10187,12 @@
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.__pyx_base.node_impurity = (double (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_node_impurity;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.__pyx_base.children_impurity = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *, double *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_children_impurity;
   __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.__pyx_base.node_value = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_node_value;
+  __pyx_vtable_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.__pyx_base.is_pure = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *))__pyx_f_8skgarden_8mondrian_4tree_10_criterion_23ClassificationCriterion_is_pure;
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion) < 0) __PYX_ERR(1, 523, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "ClassificationCriterion", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion) < 0) __PYX_ERR(1, 523, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "ClassificationCriterion", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion) < 0) __PYX_ERR(1, 523, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion = &__pyx_type_8skgarden_8mondrian_4tree_10_criterion_ClassificationCriterion;
   /*--- Type import code ---*/
   __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
@@ -9482,37 +10201,37 @@
   #else
   sizeof(PyHeapTypeObject),
   #endif
-  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
-  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
-  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
-  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
-  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
-  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = __Pyx_ImportType("skgarden.mondrian.tree._splitter", "Splitter", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(3, 35, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(3, 35, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = __Pyx_ImportType("skgarden.mondrian.tree._tree", "Tree", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(4, 41, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(4, 41, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = __Pyx_ImportType("skgarden.mondrian.tree._tree", "TreeBuilder", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(4, 91, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(4, 91, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = __Pyx_ImportType("skgarden.mondrian.tree._utils", "Stack", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(5, 74, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(5, 74, __pyx_L1_error)
+  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
+  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 163, __pyx_L1_error)
+  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 185, __pyx_L1_error)
+  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 189, __pyx_L1_error)
+  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 198, __pyx_L1_error)
+  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 885, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = __Pyx_ImportType("skgarden.mondrian.tree._splitter", "Splitter", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(4, 35, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(4, 35, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = __Pyx_ImportType("skgarden.mondrian.tree._tree", "Tree", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(5, 41, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(5, 41, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = __Pyx_ImportType("skgarden.mondrian.tree._tree", "TreeBuilder", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(5, 104, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(5, 104, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = __Pyx_ImportType("skgarden.mondrian.tree._utils", "Stack", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(6, 78, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(6, 78, __pyx_L1_error)
   /*--- Variable import code ---*/
   /*--- Function import code ---*/
-  __pyx_t_1 = __Pyx_ImportModule("skgarden.mondrian.tree._utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "sizet_ptr_to_ndarray", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray, "PyArrayObject *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "log", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_log, "double (double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_0safe_realloc", (void (**)(void))&__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_1safe_realloc", (void (**)(void))&__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_2safe_realloc", (void (**)(void))&__pyx_fuse_2__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "unsigned char *(unsigned char **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_3safe_realloc", (void (**)(void))&__pyx_fuse_3__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_4safe_realloc", (void (**)(void))&__pyx_fuse_4__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t **(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t ***, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_5safe_realloc", (void (**)(void))&__pyx_fuse_5__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_6safe_realloc", (void (**)(void))&__pyx_fuse_6__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node **(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node ***, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_7safe_realloc", (void (**)(void))&__pyx_fuse_7__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *(struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_ImportModule("skgarden.mondrian.tree._utils"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "sizet_ptr_to_ndarray", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray, "PyArrayObject *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "log", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_log, "double (double)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_0safe_realloc", (void (**)(void))&__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_1safe_realloc", (void (**)(void))&__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_2safe_realloc", (void (**)(void))&__pyx_fuse_2__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "unsigned char *(unsigned char **, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_3safe_realloc", (void (**)(void))&__pyx_fuse_3__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t **, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_4safe_realloc", (void (**)(void))&__pyx_fuse_4__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t **(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DOUBLE_t ***, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_5safe_realloc", (void (**)(void))&__pyx_fuse_5__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node **, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_6safe_realloc", (void (**)(void))&__pyx_fuse_6__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node **(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node ***, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_7safe_realloc", (void (**)(void))&__pyx_fuse_7__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *(struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord **, size_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   /*--- Execution code ---*/
   #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
-  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   #endif
 
   /* "skgarden/mondrian/tree/_criterion.pyx":25
@@ -9522,9 +10241,9 @@
  * cimport numpy as np
  * np.import_array()
  */
-  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 25, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
   /* "skgarden/mondrian/tree/_criterion.pyx":27
@@ -9534,7 +10253,7 @@
  * 
  * from ._utils cimport log
  */
-  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 27, __pyx_L1_error)
+  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 27, __pyx_L1_error)
 
   /* "skgarden/mondrian/tree/_criterion.pyx":33
  * from ._utils cimport sizet_ptr_to_ndarray
@@ -9543,12 +10262,12 @@
  * cdef class Criterion:
  *     """Interface for impurity criteria.
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inf); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L1_error)
+  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 33, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   __pyx_v_8skgarden_8mondrian_4tree_10_criterion_INFINITY = __pyx_t_5;
 
@@ -9557,12 +10276,12 @@
  * # cython: boundscheck=False
  * # cython: wraparound=False
  */
-  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -9579,7 +10298,7 @@
   __Pyx_XDECREF(__pyx_t_4);
   if (__pyx_m) {
     if (__pyx_d) {
-      __Pyx_AddTraceback("init skgarden.mondrian.tree._criterion", __pyx_clineno, __pyx_lineno, __pyx_filename);
+      __Pyx_AddTraceback("init skgarden.mondrian.tree._criterion", 0, __pyx_lineno, __pyx_filename);
     }
     Py_DECREF(__pyx_m); __pyx_m = 0;
   } else if (!PyErr_Occurred()) {
@@ -9587,10 +10306,12 @@
   }
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
-  #if PY_MAJOR_VERSION < 3
-  return;
-  #else
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  return (__pyx_m != NULL) ? 0 : -1;
+  #elif PY_MAJOR_VERSION >= 3
   return __pyx_m;
+  #else
+  return;
   #endif
 }
 
@@ -9626,87 +10347,290 @@
     return result;
 }
 
-/* RaiseArgTupleInvalid */
-static void __Pyx_RaiseArgtupleInvalid(
-    const char* func_name,
-    int exact,
-    Py_ssize_t num_min,
-    Py_ssize_t num_max,
-    Py_ssize_t num_found)
-{
-    Py_ssize_t num_expected;
-    const char *more_or_less;
-    if (num_found < num_min) {
-        num_expected = num_min;
-        more_or_less = "at least";
-    } else {
-        num_expected = num_max;
-        more_or_less = "at most";
-    }
-    if (exact) {
-        more_or_less = "exactly";
+/* PyObjectCall */
+#if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
+    PyObject *result;
+    ternaryfunc call = func->ob_type->tp_call;
+    if (unlikely(!call))
+        return PyObject_Call(func, arg, kw);
+    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
+        return NULL;
+    result = (*call)(func, arg, kw);
+    Py_LeaveRecursiveCall();
+    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
+        PyErr_SetString(
+            PyExc_SystemError,
+            "NULL result without error in PyObject_Call");
     }
-    PyErr_Format(PyExc_TypeError,
-                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
-                 func_name, more_or_less, num_expected,
-                 (num_expected == 1) ? "" : "s", num_found);
+    return result;
 }
+#endif
 
-/* RaiseDoubleKeywords */
-static void __Pyx_RaiseDoubleKeywordsError(
-    const char* func_name,
-    PyObject* kw_name)
-{
-    PyErr_Format(PyExc_TypeError,
-        #if PY_MAJOR_VERSION >= 3
-        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
-        #else
-        "%s() got multiple values for keyword argument '%s'", func_name,
-        PyString_AsString(kw_name));
-        #endif
+/* PyErrFetchRestore */
+#if CYTHON_FAST_THREAD_STATE
+static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
+    PyObject *tmp_type, *tmp_value, *tmp_tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
+    Py_XDECREF(tmp_type);
+    Py_XDECREF(tmp_value);
+    Py_XDECREF(tmp_tb);
+}
+static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
+    tstate->curexc_type = 0;
+    tstate->curexc_value = 0;
+    tstate->curexc_traceback = 0;
 }
+#endif
 
-/* ParseKeywords */
-static int __Pyx_ParseOptionalKeywords(
-    PyObject *kwds,
-    PyObject **argnames[],
-    PyObject *kwds2,
-    PyObject *values[],
-    Py_ssize_t num_pos_args,
-    const char* function_name)
-{
-    PyObject *key = 0, *value = 0;
-    Py_ssize_t pos = 0;
-    PyObject*** name;
-    PyObject*** first_kw_arg = argnames + num_pos_args;
-    while (PyDict_Next(kwds, &pos, &key, &value)) {
-        name = first_kw_arg;
-        while (*name && (**name != key)) name++;
-        if (*name) {
-            values[name-argnames] = value;
-            continue;
+/* RaiseException */
+#if PY_MAJOR_VERSION < 3
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
+                        CYTHON_UNUSED PyObject *cause) {
+    __Pyx_PyThreadState_declare
+    Py_XINCREF(type);
+    if (!value || value == Py_None)
+        value = NULL;
+    else
+        Py_INCREF(value);
+    if (!tb || tb == Py_None)
+        tb = NULL;
+    else {
+        Py_INCREF(tb);
+        if (!PyTraceBack_Check(tb)) {
+            PyErr_SetString(PyExc_TypeError,
+                "raise: arg 3 must be a traceback or None");
+            goto raise_error;
         }
-        name = first_kw_arg;
-        #if PY_MAJOR_VERSION < 3
-        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
-            while (*name) {
-                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
-                        && _PyString_Eq(**name, key)) {
-                    values[name-argnames] = value;
-                    break;
-                }
-                name++;
-            }
-            if (*name) continue;
-            else {
-                PyObject*** argname = argnames;
-                while (argname != first_kw_arg) {
-                    if ((**argname == key) || (
-                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
-                             && _PyString_Eq(**argname, key))) {
-                        goto arg_passed_twice;
-                    }
-                    argname++;
+    }
+    if (PyType_Check(type)) {
+#if CYTHON_COMPILING_IN_PYPY
+        if (!value) {
+            Py_INCREF(Py_None);
+            value = Py_None;
+        }
+#endif
+        PyErr_NormalizeException(&type, &value, &tb);
+    } else {
+        if (value) {
+            PyErr_SetString(PyExc_TypeError,
+                "instance exception may not have a separate value");
+            goto raise_error;
+        }
+        value = type;
+        type = (PyObject*) Py_TYPE(type);
+        Py_INCREF(type);
+        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
+            PyErr_SetString(PyExc_TypeError,
+                "raise: exception class must be a subclass of BaseException");
+            goto raise_error;
+        }
+    }
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrRestore(type, value, tb);
+    return;
+raise_error:
+    Py_XDECREF(value);
+    Py_XDECREF(type);
+    Py_XDECREF(tb);
+    return;
+}
+#else
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
+    PyObject* owned_instance = NULL;
+    if (tb == Py_None) {
+        tb = 0;
+    } else if (tb && !PyTraceBack_Check(tb)) {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: arg 3 must be a traceback or None");
+        goto bad;
+    }
+    if (value == Py_None)
+        value = 0;
+    if (PyExceptionInstance_Check(type)) {
+        if (value) {
+            PyErr_SetString(PyExc_TypeError,
+                "instance exception may not have a separate value");
+            goto bad;
+        }
+        value = type;
+        type = (PyObject*) Py_TYPE(value);
+    } else if (PyExceptionClass_Check(type)) {
+        PyObject *instance_class = NULL;
+        if (value && PyExceptionInstance_Check(value)) {
+            instance_class = (PyObject*) Py_TYPE(value);
+            if (instance_class != type) {
+                int is_subclass = PyObject_IsSubclass(instance_class, type);
+                if (!is_subclass) {
+                    instance_class = NULL;
+                } else if (unlikely(is_subclass == -1)) {
+                    goto bad;
+                } else {
+                    type = instance_class;
+                }
+            }
+        }
+        if (!instance_class) {
+            PyObject *args;
+            if (!value)
+                args = PyTuple_New(0);
+            else if (PyTuple_Check(value)) {
+                Py_INCREF(value);
+                args = value;
+            } else
+                args = PyTuple_Pack(1, value);
+            if (!args)
+                goto bad;
+            owned_instance = PyObject_Call(type, args, NULL);
+            Py_DECREF(args);
+            if (!owned_instance)
+                goto bad;
+            value = owned_instance;
+            if (!PyExceptionInstance_Check(value)) {
+                PyErr_Format(PyExc_TypeError,
+                             "calling %R should have returned an instance of "
+                             "BaseException, not %R",
+                             type, Py_TYPE(value));
+                goto bad;
+            }
+        }
+    } else {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: exception class must be a subclass of BaseException");
+        goto bad;
+    }
+    if (cause) {
+        PyObject *fixed_cause;
+        if (cause == Py_None) {
+            fixed_cause = NULL;
+        } else if (PyExceptionClass_Check(cause)) {
+            fixed_cause = PyObject_CallObject(cause, NULL);
+            if (fixed_cause == NULL)
+                goto bad;
+        } else if (PyExceptionInstance_Check(cause)) {
+            fixed_cause = cause;
+            Py_INCREF(fixed_cause);
+        } else {
+            PyErr_SetString(PyExc_TypeError,
+                            "exception causes must derive from "
+                            "BaseException");
+            goto bad;
+        }
+        PyException_SetCause(value, fixed_cause);
+    }
+    PyErr_SetObject(type, value);
+    if (tb) {
+#if CYTHON_COMPILING_IN_PYPY
+        PyObject *tmp_type, *tmp_value, *tmp_tb;
+        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
+        Py_INCREF(tb);
+        PyErr_Restore(tmp_type, tmp_value, tb);
+        Py_XDECREF(tmp_tb);
+#else
+        PyThreadState *tstate = __Pyx_PyThreadState_Current;
+        PyObject* tmp_tb = tstate->curexc_traceback;
+        if (tb != tmp_tb) {
+            Py_INCREF(tb);
+            tstate->curexc_traceback = tb;
+            Py_XDECREF(tmp_tb);
+        }
+#endif
+    }
+bad:
+    Py_XDECREF(owned_instance);
+    return;
+}
+#endif
+
+/* RaiseArgTupleInvalid */
+static void __Pyx_RaiseArgtupleInvalid(
+    const char* func_name,
+    int exact,
+    Py_ssize_t num_min,
+    Py_ssize_t num_max,
+    Py_ssize_t num_found)
+{
+    Py_ssize_t num_expected;
+    const char *more_or_less;
+    if (num_found < num_min) {
+        num_expected = num_min;
+        more_or_less = "at least";
+    } else {
+        num_expected = num_max;
+        more_or_less = "at most";
+    }
+    if (exact) {
+        more_or_less = "exactly";
+    }
+    PyErr_Format(PyExc_TypeError,
+                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
+                 func_name, more_or_less, num_expected,
+                 (num_expected == 1) ? "" : "s", num_found);
+}
+
+/* RaiseDoubleKeywords */
+static void __Pyx_RaiseDoubleKeywordsError(
+    const char* func_name,
+    PyObject* kw_name)
+{
+    PyErr_Format(PyExc_TypeError,
+        #if PY_MAJOR_VERSION >= 3
+        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
+        #else
+        "%s() got multiple values for keyword argument '%s'", func_name,
+        PyString_AsString(kw_name));
+        #endif
+}
+
+/* ParseKeywords */
+static int __Pyx_ParseOptionalKeywords(
+    PyObject *kwds,
+    PyObject **argnames[],
+    PyObject *kwds2,
+    PyObject *values[],
+    Py_ssize_t num_pos_args,
+    const char* function_name)
+{
+    PyObject *key = 0, *value = 0;
+    Py_ssize_t pos = 0;
+    PyObject*** name;
+    PyObject*** first_kw_arg = argnames + num_pos_args;
+    while (PyDict_Next(kwds, &pos, &key, &value)) {
+        name = first_kw_arg;
+        while (*name && (**name != key)) name++;
+        if (*name) {
+            values[name-argnames] = value;
+            continue;
+        }
+        name = first_kw_arg;
+        #if PY_MAJOR_VERSION < 3
+        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
+            while (*name) {
+                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
+                        && _PyString_Eq(**name, key)) {
+                    values[name-argnames] = value;
+                    break;
+                }
+                name++;
+            }
+            if (*name) continue;
+            else {
+                PyObject*** argname = argnames;
+                while (argname != first_kw_arg) {
+                    if ((**argname == key) || (
+                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
+                             && _PyString_Eq(**argname, key))) {
+                        goto arg_passed_twice;
+                    }
+                    argname++;
                 }
             }
         } else
@@ -9774,17 +10698,22 @@
     PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
     PyCFunction meth = PyCFunction_GET_FUNCTION(func);
     PyObject *self = PyCFunction_GET_SELF(func);
+    int flags = PyCFunction_GET_FLAGS(func);
     assert(PyCFunction_Check(func));
-    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
+    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
     assert(nargs >= 0);
     assert(nargs == 0 || args != NULL);
     /* _PyCFunction_FastCallDict() must not be called with an exception set,
        because it may clear it (directly or indirectly) and so the
        caller loses its exception */
     assert(!PyErr_Occurred());
-    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
+    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
+        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
+    } else {
+        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
+    }
 }
-#endif  // CYTHON_FAST_PYCCALL
+#endif
 
 /* PyFunctionFastCall */
 #if CYTHON_FAST_PYCALL
@@ -9792,7 +10721,7 @@
 static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                                PyObject *globals) {
     PyFrameObject *f;
-    PyThreadState *tstate = PyThreadState_GET();
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
     PyObject **fastlocals;
     Py_ssize_t i;
     PyObject *result;
@@ -9903,27 +10832,7 @@
     Py_LeaveRecursiveCall();
     return result;
 }
-#endif  // CPython < 3.6
-#endif  // CYTHON_FAST_PYCALL
-
-/* PyObjectCall */
-#if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
-    PyObject *result;
-    ternaryfunc call = func->ob_type->tp_call;
-    if (unlikely(!call))
-        return PyObject_Call(func, arg, kw);
-    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
-        return NULL;
-    result = (*call)(func, arg, kw);
-    Py_LeaveRecursiveCall();
-    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
-        PyErr_SetString(
-            PyExc_SystemError,
-            "NULL result without error in PyObject_Call");
-    }
-    return result;
-}
+#endif
 #endif
 
 /* PyObjectCallMethO */
@@ -9964,11 +10873,7 @@
         return __Pyx_PyFunction_FastCall(func, &arg, 1);
     }
 #endif
-#ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
-#else
     if (likely(PyCFunction_Check(func))) {
-#endif
         if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
             return __Pyx_PyObject_CallMethO(func, arg);
 #if CYTHON_FAST_PYCCALL
@@ -9991,7 +10896,7 @@
 #endif
 
 /* PyObjectCallNoArg */
-  #if CYTHON_COMPILING_IN_CPYTHON
+#if CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
 #if CYTHON_FAST_PYCALL
     if (PyFunction_Check(func)) {
@@ -9999,7 +10904,7 @@
     }
 #endif
 #ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
+    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
 #else
     if (likely(PyCFunction_Check(func))) {
 #endif
@@ -10012,38 +10917,39 @@
 #endif
 
 /* ArgTypeTest */
-    static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
-    PyErr_Format(PyExc_TypeError,
-        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
-        name, type->tp_name, Py_TYPE(obj)->tp_name);
-}
-static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
-    const char *name, int exact)
+  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
 {
     if (unlikely(!type)) {
         PyErr_SetString(PyExc_SystemError, "Missing type object");
         return 0;
     }
-    if (none_allowed && obj == Py_None) return 1;
     else if (exact) {
-        if (likely(Py_TYPE(obj) == type)) return 1;
         #if PY_MAJOR_VERSION == 2
-        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
+        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
         #endif
     }
     else {
-        if (likely(PyObject_TypeCheck(obj, type))) return 1;
+        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
     }
-    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
+    PyErr_Format(PyExc_TypeError,
+        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
+        name, type->tp_name, Py_TYPE(obj)->tp_name);
     return 0;
 }
 
-/* BufferFormatCheck */
-    static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
-  unsigned int n = 1;
-  return *(unsigned char*)(&n) != 0;
+/* IsLittleEndian */
+  static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
+{
+  union {
+    uint32_t u32;
+    uint8_t u8[4];
+  } S;
+  S.u32 = 0x01020304;
+  return S.u8[0] == 4;
 }
-static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
+
+/* BufferFormatCheck */
+  static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                               __Pyx_BufFmt_StackElem* stack,
                               __Pyx_TypeInfo* type) {
   stack[0].field = &ctx->root;
@@ -10364,7 +11270,7 @@
   ctx->is_complex = 0;
   return 0;
 }
-static CYTHON_INLINE PyObject *
+static PyObject *
 __pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
 {
     const char *ts = *tsp;
@@ -10429,7 +11335,7 @@
         ++ts;
         break;
       case '<':
-        if (!__Pyx_IsLittleEndian()) {
+        if (!__Pyx_Is_Little_Endian()) {
           PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
           return NULL;
         }
@@ -10438,7 +11344,7 @@
         break;
       case '>':
       case '!':
-        if (__Pyx_IsLittleEndian()) {
+        if (__Pyx_Is_Little_Endian()) {
           PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
           return NULL;
         }
@@ -10481,325 +11387,139 @@
           ++ts;
           if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
           ctx->enc_type = 0;
-          if (alignment && ctx->fmt_offset % alignment) {
-            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
-          }
-        }
-        return ts;
-      case 'x':
-        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
-        ctx->fmt_offset += ctx->new_count;
-        ctx->new_count = 1;
-        ctx->enc_count = 0;
-        ctx->enc_type = 0;
-        ctx->enc_packmode = ctx->new_packmode;
-        ++ts;
-        break;
-      case 'Z':
-        got_Z = 1;
-        ++ts;
-        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
-          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
-          return NULL;
-        }
-      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
-      case 'l': case 'L': case 'q': case 'Q':
-      case 'f': case 'd': case 'g':
-      case 'O': case 'p':
-        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
-            ctx->enc_packmode == ctx->new_packmode) {
-          ctx->enc_count += ctx->new_count;
-          ctx->new_count = 1;
-          got_Z = 0;
-          ++ts;
-          break;
-        }
-      case 's':
-        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
-        ctx->enc_count = ctx->new_count;
-        ctx->enc_packmode = ctx->new_packmode;
-        ctx->enc_type = *ts;
-        ctx->is_complex = got_Z;
-        ++ts;
-        ctx->new_count = 1;
-        got_Z = 0;
-        break;
-      case ':':
-        ++ts;
-        while(*ts != ':') ++ts;
-        ++ts;
-        break;
-      case '(':
-        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
-        break;
-      default:
-        {
-          int number = __Pyx_BufFmt_ExpectNumber(&ts);
-          if (number == -1) return NULL;
-          ctx->new_count = (size_t)number;
-        }
-    }
-  }
-}
-static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
-  buf->buf = NULL;
-  buf->obj = NULL;
-  buf->strides = __Pyx_zeros;
-  buf->shape = __Pyx_zeros;
-  buf->suboffsets = __Pyx_minusones;
-}
-static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
-        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
-        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
-{
-  if (obj == Py_None || obj == NULL) {
-    __Pyx_ZeroBuffer(buf);
-    return 0;
-  }
-  buf->buf = NULL;
-  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
-  if (buf->ndim != nd) {
-    PyErr_Format(PyExc_ValueError,
-                 "Buffer has wrong number of dimensions (expected %d, got %d)",
-                 nd, buf->ndim);
-    goto fail;
-  }
-  if (!cast) {
-    __Pyx_BufFmt_Context ctx;
-    __Pyx_BufFmt_Init(&ctx, stack, dtype);
-    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
-  }
-  if ((unsigned)buf->itemsize != dtype->size) {
-    PyErr_Format(PyExc_ValueError,
-      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
-      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
-      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
-    goto fail;
-  }
-  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
-  return 0;
-fail:;
-  __Pyx_ZeroBuffer(buf);
-  return -1;
-}
-static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
-  if (info->buf == NULL) return;
-  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
-  __Pyx_ReleaseBuffer(info);
-}
-
-/* PyErrFetchRestore */
-      #if CYTHON_FAST_THREAD_STATE
-static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
-    PyObject *tmp_type, *tmp_value, *tmp_tb;
-    tmp_type = tstate->curexc_type;
-    tmp_value = tstate->curexc_value;
-    tmp_tb = tstate->curexc_traceback;
-    tstate->curexc_type = type;
-    tstate->curexc_value = value;
-    tstate->curexc_traceback = tb;
-    Py_XDECREF(tmp_type);
-    Py_XDECREF(tmp_value);
-    Py_XDECREF(tmp_tb);
-}
-static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
-    *type = tstate->curexc_type;
-    *value = tstate->curexc_value;
-    *tb = tstate->curexc_traceback;
-    tstate->curexc_type = 0;
-    tstate->curexc_value = 0;
-    tstate->curexc_traceback = 0;
-}
-#endif
-
-/* RaiseException */
-      #if PY_MAJOR_VERSION < 3
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
-                        CYTHON_UNUSED PyObject *cause) {
-    __Pyx_PyThreadState_declare
-    Py_XINCREF(type);
-    if (!value || value == Py_None)
-        value = NULL;
-    else
-        Py_INCREF(value);
-    if (!tb || tb == Py_None)
-        tb = NULL;
-    else {
-        Py_INCREF(tb);
-        if (!PyTraceBack_Check(tb)) {
-            PyErr_SetString(PyExc_TypeError,
-                "raise: arg 3 must be a traceback or None");
-            goto raise_error;
-        }
-    }
-    if (PyType_Check(type)) {
-#if CYTHON_COMPILING_IN_PYPY
-        if (!value) {
-            Py_INCREF(Py_None);
-            value = Py_None;
-        }
-#endif
-        PyErr_NormalizeException(&type, &value, &tb);
-    } else {
-        if (value) {
-            PyErr_SetString(PyExc_TypeError,
-                "instance exception may not have a separate value");
-            goto raise_error;
-        }
-        value = type;
-        type = (PyObject*) Py_TYPE(type);
-        Py_INCREF(type);
-        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
-            PyErr_SetString(PyExc_TypeError,
-                "raise: exception class must be a subclass of BaseException");
-            goto raise_error;
-        }
-    }
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrRestore(type, value, tb);
-    return;
-raise_error:
-    Py_XDECREF(value);
-    Py_XDECREF(type);
-    Py_XDECREF(tb);
-    return;
-}
-#else
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
-    PyObject* owned_instance = NULL;
-    if (tb == Py_None) {
-        tb = 0;
-    } else if (tb && !PyTraceBack_Check(tb)) {
-        PyErr_SetString(PyExc_TypeError,
-            "raise: arg 3 must be a traceback or None");
-        goto bad;
-    }
-    if (value == Py_None)
-        value = 0;
-    if (PyExceptionInstance_Check(type)) {
-        if (value) {
-            PyErr_SetString(PyExc_TypeError,
-                "instance exception may not have a separate value");
-            goto bad;
-        }
-        value = type;
-        type = (PyObject*) Py_TYPE(value);
-    } else if (PyExceptionClass_Check(type)) {
-        PyObject *instance_class = NULL;
-        if (value && PyExceptionInstance_Check(value)) {
-            instance_class = (PyObject*) Py_TYPE(value);
-            if (instance_class != type) {
-                int is_subclass = PyObject_IsSubclass(instance_class, type);
-                if (!is_subclass) {
-                    instance_class = NULL;
-                } else if (unlikely(is_subclass == -1)) {
-                    goto bad;
-                } else {
-                    type = instance_class;
-                }
-            }
+          if (alignment && ctx->fmt_offset % alignment) {
+            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
+          }
         }
-        if (!instance_class) {
-            PyObject *args;
-            if (!value)
-                args = PyTuple_New(0);
-            else if (PyTuple_Check(value)) {
-                Py_INCREF(value);
-                args = value;
-            } else
-                args = PyTuple_Pack(1, value);
-            if (!args)
-                goto bad;
-            owned_instance = PyObject_Call(type, args, NULL);
-            Py_DECREF(args);
-            if (!owned_instance)
-                goto bad;
-            value = owned_instance;
-            if (!PyExceptionInstance_Check(value)) {
-                PyErr_Format(PyExc_TypeError,
-                             "calling %R should have returned an instance of "
-                             "BaseException, not %R",
-                             type, Py_TYPE(value));
-                goto bad;
-            }
+        return ts;
+      case 'x':
+        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
+        ctx->fmt_offset += ctx->new_count;
+        ctx->new_count = 1;
+        ctx->enc_count = 0;
+        ctx->enc_type = 0;
+        ctx->enc_packmode = ctx->new_packmode;
+        ++ts;
+        break;
+      case 'Z':
+        got_Z = 1;
+        ++ts;
+        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
+          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
+          return NULL;
         }
-    } else {
-        PyErr_SetString(PyExc_TypeError,
-            "raise: exception class must be a subclass of BaseException");
-        goto bad;
-    }
-#if PY_VERSION_HEX >= 0x03030000
-    if (cause) {
-#else
-    if (cause && cause != Py_None) {
-#endif
-        PyObject *fixed_cause;
-        if (cause == Py_None) {
-            fixed_cause = NULL;
-        } else if (PyExceptionClass_Check(cause)) {
-            fixed_cause = PyObject_CallObject(cause, NULL);
-            if (fixed_cause == NULL)
-                goto bad;
-        } else if (PyExceptionInstance_Check(cause)) {
-            fixed_cause = cause;
-            Py_INCREF(fixed_cause);
-        } else {
-            PyErr_SetString(PyExc_TypeError,
-                            "exception causes must derive from "
-                            "BaseException");
-            goto bad;
+      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
+      case 'l': case 'L': case 'q': case 'Q':
+      case 'f': case 'd': case 'g':
+      case 'O': case 'p':
+        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
+            ctx->enc_packmode == ctx->new_packmode) {
+          ctx->enc_count += ctx->new_count;
+          ctx->new_count = 1;
+          got_Z = 0;
+          ++ts;
+          break;
         }
-        PyException_SetCause(value, fixed_cause);
-    }
-    PyErr_SetObject(type, value);
-    if (tb) {
-#if CYTHON_COMPILING_IN_PYPY
-        PyObject *tmp_type, *tmp_value, *tmp_tb;
-        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
-        Py_INCREF(tb);
-        PyErr_Restore(tmp_type, tmp_value, tb);
-        Py_XDECREF(tmp_tb);
-#else
-        PyThreadState *tstate = PyThreadState_GET();
-        PyObject* tmp_tb = tstate->curexc_traceback;
-        if (tb != tmp_tb) {
-            Py_INCREF(tb);
-            tstate->curexc_traceback = tb;
-            Py_XDECREF(tmp_tb);
+      case 's':
+        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
+        ctx->enc_count = ctx->new_count;
+        ctx->enc_packmode = ctx->new_packmode;
+        ctx->enc_type = *ts;
+        ctx->is_complex = got_Z;
+        ++ts;
+        ctx->new_count = 1;
+        got_Z = 0;
+        break;
+      case ':':
+        ++ts;
+        while(*ts != ':') ++ts;
+        ++ts;
+        break;
+      case '(':
+        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
+        break;
+      default:
+        {
+          int number = __Pyx_BufFmt_ExpectNumber(&ts);
+          if (number == -1) return NULL;
+          ctx->new_count = (size_t)number;
         }
-#endif
     }
-bad:
-    Py_XDECREF(owned_instance);
-    return;
+  }
+}
+
+/* BufferGetAndValidate */
+    static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
+  if (unlikely(info->buf == NULL)) return;
+  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
+  __Pyx_ReleaseBuffer(info);
+}
+static void __Pyx_ZeroBuffer(Py_buffer* buf) {
+  buf->buf = NULL;
+  buf->obj = NULL;
+  buf->strides = __Pyx_zeros;
+  buf->shape = __Pyx_zeros;
+  buf->suboffsets = __Pyx_minusones;
+}
+static int __Pyx__GetBufferAndValidate(
+        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
+        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
+{
+  buf->buf = NULL;
+  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
+    __Pyx_ZeroBuffer(buf);
+    return -1;
+  }
+  if (unlikely(buf->ndim != nd)) {
+    PyErr_Format(PyExc_ValueError,
+                 "Buffer has wrong number of dimensions (expected %d, got %d)",
+                 nd, buf->ndim);
+    goto fail;
+  }
+  if (!cast) {
+    __Pyx_BufFmt_Context ctx;
+    __Pyx_BufFmt_Init(&ctx, stack, dtype);
+    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
+  }
+  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
+    PyErr_Format(PyExc_ValueError,
+      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
+      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
+      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
+    goto fail;
+  }
+  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
+  return 0;
+fail:;
+  __Pyx_SafeReleaseBuffer(buf);
+  return -1;
 }
-#endif
 
 /* RaiseTooManyValuesToUnpack */
-        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
+    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
     PyErr_Format(PyExc_ValueError,
                  "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
 }
 
 /* RaiseNeedMoreValuesToUnpack */
-        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
+    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
     PyErr_Format(PyExc_ValueError,
                  "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                  index, (index == 1) ? "" : "s");
 }
 
 /* RaiseNoneIterError */
-        static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
+    static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
 }
 
 /* ExtTypeTest */
-        static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
+    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
     if (unlikely(!type)) {
         PyErr_SetString(PyExc_SystemError, "Missing type object");
         return 0;
     }
-    if (likely(PyObject_TypeCheck(obj, type)))
+    if (likely(__Pyx_TypeCheck(obj, type)))
         return 1;
     PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                  Py_TYPE(obj)->tp_name, type->tp_name);
@@ -10807,23 +11527,38 @@
 }
 
 /* SaveResetException */
-        #if CYTHON_FAST_THREAD_STATE
+    #if CYTHON_FAST_THREAD_STATE
 static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    #if PY_VERSION_HEX >= 0x030700A2
+    *type = tstate->exc_state.exc_type;
+    *value = tstate->exc_state.exc_value;
+    *tb = tstate->exc_state.exc_traceback;
+    #else
     *type = tstate->exc_type;
     *value = tstate->exc_value;
     *tb = tstate->exc_traceback;
+    #endif
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
 }
 static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
     PyObject *tmp_type, *tmp_value, *tmp_tb;
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = type;
+    tstate->exc_state.exc_value = value;
+    tstate->exc_state.exc_traceback = tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = type;
     tstate->exc_value = value;
     tstate->exc_traceback = tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -10831,17 +11566,32 @@
 #endif
 
 /* PyErrExceptionMatches */
-        #if CYTHON_FAST_THREAD_STATE
+    #if CYTHON_FAST_THREAD_STATE
+static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
+    Py_ssize_t i, n;
+    n = PyTuple_GET_SIZE(tuple);
+#if PY_MAJOR_VERSION >= 3
+    for (i=0; i<n; i++) {
+        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
+    }
+#endif
+    for (i=0; i<n; i++) {
+        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
+    }
+    return 0;
+}
 static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
     PyObject *exc_type = tstate->curexc_type;
     if (exc_type == err) return 1;
     if (unlikely(!exc_type)) return 0;
-    return PyErr_GivenExceptionMatches(exc_type, err);
+    if (unlikely(PyTuple_Check(err)))
+        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
+    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
 }
 #endif
 
 /* GetException */
-        #if CYTHON_FAST_THREAD_STATE
+    #if CYTHON_FAST_THREAD_STATE
 static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
 #else
 static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
@@ -10878,12 +11628,21 @@
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_FAST_THREAD_STATE
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = local_type;
+    tstate->exc_state.exc_value = local_value;
+    tstate->exc_state.exc_traceback = local_tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = local_type;
     tstate->exc_value = local_value;
     tstate->exc_traceback = local_tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -10902,7 +11661,7 @@
 }
 
 /* SetVTable */
-          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
+      static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
 #if PY_VERSION_HEX >= 0x02070000
     PyObject *ob = PyCapsule_New(vtable, 0, 0);
 #else
@@ -10919,8 +11678,84 @@
     return -1;
 }
 
+/* SetupReduce */
+      static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
+  int ret;
+  PyObject *name_attr;
+  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
+  if (likely(name_attr)) {
+      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
+  } else {
+      ret = -1;
+  }
+  if (unlikely(ret < 0)) {
+      PyErr_Clear();
+      ret = 0;
+  }
+  Py_XDECREF(name_attr);
+  return ret;
+}
+static int __Pyx_setup_reduce(PyObject* type_obj) {
+    int ret = 0;
+    PyObject *object_reduce = NULL;
+    PyObject *object_reduce_ex = NULL;
+    PyObject *reduce = NULL;
+    PyObject *reduce_ex = NULL;
+    PyObject *reduce_cython = NULL;
+    PyObject *setstate = NULL;
+    PyObject *setstate_cython = NULL;
+#if CYTHON_USE_PYTYPE_LOOKUP
+    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
+#else
+    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
+#endif
+#if CYTHON_USE_PYTYPE_LOOKUP
+    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#else
+    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#endif
+    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
+    if (reduce_ex == object_reduce_ex) {
+#if CYTHON_USE_PYTYPE_LOOKUP
+        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#else
+        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#endif
+        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
+        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
+            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
+            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
+            if (!setstate) PyErr_Clear();
+            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
+                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
+                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
+                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
+            }
+            PyType_Modified((PyTypeObject*)type_obj);
+        }
+    }
+    goto GOOD;
+BAD:
+    if (!PyErr_Occurred())
+        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
+    ret = -1;
+GOOD:
+#if !CYTHON_USE_PYTYPE_LOOKUP
+    Py_XDECREF(object_reduce);
+    Py_XDECREF(object_reduce_ex);
+#endif
+    Py_XDECREF(reduce);
+    Py_XDECREF(reduce_ex);
+    Py_XDECREF(reduce_cython);
+    Py_XDECREF(setstate);
+    Py_XDECREF(setstate_cython);
+    return ret;
+}
+
 /* GetVTable */
-          static void* __Pyx_GetVtable(PyObject *dict) {
+      static void* __Pyx_GetVtable(PyObject *dict) {
     void* ptr;
     PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
     if (!ob)
@@ -10940,13 +11775,13 @@
 }
 
 /* Import */
-          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
+      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
     PyObject *empty_list = 0;
     PyObject *module = 0;
     PyObject *global_dict = 0;
     PyObject *empty_dict = 0;
     PyObject *list;
-    #if PY_VERSION_HEX < 0x03030000
+    #if PY_MAJOR_VERSION < 3
     PyObject *py_import;
     py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
     if (!py_import)
@@ -10970,17 +11805,8 @@
         #if PY_MAJOR_VERSION >= 3
         if (level == -1) {
             if (strchr(__Pyx_MODULE_NAME, '.')) {
-                #if PY_VERSION_HEX < 0x03030000
-                PyObject *py_level = PyInt_FromLong(1);
-                if (!py_level)
-                    goto bad;
-                module = PyObject_CallFunctionObjArgs(py_import,
-                    name, global_dict, empty_dict, list, py_level, NULL);
-                Py_DECREF(py_level);
-                #else
                 module = PyImport_ImportModuleLevelObject(
                     name, global_dict, empty_dict, list, 1);
-                #endif
                 if (!module) {
                     if (!PyErr_ExceptionMatches(PyExc_ImportError))
                         goto bad;
@@ -10991,7 +11817,7 @@
         }
         #endif
         if (!module) {
-            #if PY_VERSION_HEX < 0x03030000
+            #if PY_MAJOR_VERSION < 3
             PyObject *py_level = PyInt_FromLong(level);
             if (!py_level)
                 goto bad;
@@ -11005,7 +11831,7 @@
         }
     }
 bad:
-    #if PY_VERSION_HEX < 0x03030000
+    #if PY_MAJOR_VERSION < 3
     Py_XDECREF(py_import);
     #endif
     Py_XDECREF(empty_list);
@@ -11014,7 +11840,7 @@
 }
 
 /* GetModuleGlobalName */
-          static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
+      static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
     PyObject *result;
 #if !CYTHON_AVOID_BORROWED_REFS
     result = PyDict_GetItem(__pyx_d, name);
@@ -11031,8 +11857,45 @@
     return result;
 }
 
+/* CLineInTraceback */
+        #ifndef CYTHON_CLINE_IN_TRACEBACK
+static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
+    PyObject *use_cline;
+    PyObject *ptype, *pvalue, *ptraceback;
+#if CYTHON_COMPILING_IN_CPYTHON
+    PyObject **cython_runtime_dict;
+#endif
+    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
+#if CYTHON_COMPILING_IN_CPYTHON
+    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
+    if (likely(cython_runtime_dict)) {
+      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
+    } else
+#endif
+    {
+      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
+      if (use_cline_obj) {
+        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
+        Py_DECREF(use_cline_obj);
+      } else {
+        PyErr_Clear();
+        use_cline = NULL;
+      }
+    }
+    if (!use_cline) {
+        c_line = 0;
+        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
+    }
+    else if (PyObject_Not(use_cline) != 0) {
+        c_line = 0;
+    }
+    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
+    return c_line;
+}
+#endif
+
 /* CodeObjectCache */
-            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
+        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
     int start = 0, mid = 0, end = count - 1;
     if (end >= 0 && code_line > entries[end].code_line) {
         return count;
@@ -11112,7 +11975,7 @@
 }
 
 /* AddTraceback */
-            #include "compile.h"
+        #include "compile.h"
 #include "frameobject.h"
 #include "traceback.h"
 static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
@@ -11171,18 +12034,22 @@
                                int py_line, const char *filename) {
     PyCodeObject *py_code = 0;
     PyFrameObject *py_frame = 0;
-    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    if (c_line) {
+        c_line = __Pyx_CLineForTraceback(tstate, c_line);
+    }
+    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
     if (!py_code) {
         py_code = __Pyx_CreateCodeObjectForTraceback(
             funcname, c_line, py_line, filename);
         if (!py_code) goto bad;
-        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
+        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
     }
     py_frame = PyFrame_New(
-        PyThreadState_GET(), /*PyThreadState *tstate,*/
-        py_code,             /*PyCodeObject *code,*/
-        __pyx_d,      /*PyObject *globals,*/
-        0                    /*PyObject *locals*/
+        tstate,            /*PyThreadState *tstate,*/
+        py_code,           /*PyCodeObject *code,*/
+        __pyx_d,    /*PyObject *globals,*/
+        0                  /*PyObject *locals*/
     );
     if (!py_frame) goto bad;
     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
@@ -11195,7 +12062,7 @@
 #if PY_MAJOR_VERSION < 3
 static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
     if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
-        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
+        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
     PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
     return -1;
 }
@@ -11206,15 +12073,16 @@
         PyBuffer_Release(view);
         return;
     }
-        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
-    Py_DECREF(obj);
+    if ((0)) {}
+        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
     view->obj = NULL;
+    Py_DECREF(obj);
 }
 #endif
 
 
-            /* CIntFromPyVerify */
-            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
+        /* CIntFromPyVerify */
+        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
 #define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
@@ -11236,7 +12104,7 @@
     }
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -11267,7 +12135,7 @@
 }
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -11298,7 +12166,7 @@
 }
 
 /* Declarations */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
       return ::std::complex< float >(x, y);
@@ -11318,7 +12186,7 @@
 #endif
 
 /* Arithmetic */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -11453,7 +12321,7 @@
 #endif
 
 /* Declarations */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
       return ::std::complex< double >(x, y);
@@ -11473,7 +12341,7 @@
 #endif
 
 /* Arithmetic */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -11608,7 +12476,7 @@
 #endif
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -11639,7 +12507,7 @@
 }
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
     const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -11670,7 +12538,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
+        static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -11859,7 +12727,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
+        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -12048,7 +12916,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
+        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -12236,8 +13104,80 @@
     return (long) -1;
 }
 
+/* FastTypeChecks */
+        #if CYTHON_COMPILING_IN_CPYTHON
+static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
+    while (a) {
+        a = a->tp_base;
+        if (a == b)
+            return 1;
+    }
+    return b == &PyBaseObject_Type;
+}
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
+    PyObject *mro;
+    if (a == b) return 1;
+    mro = a->tp_mro;
+    if (likely(mro)) {
+        Py_ssize_t i, n;
+        n = PyTuple_GET_SIZE(mro);
+        for (i = 0; i < n; i++) {
+            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
+                return 1;
+        }
+        return 0;
+    }
+    return __Pyx_InBases(a, b);
+}
+#if PY_MAJOR_VERSION == 2
+static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
+    PyObject *exception, *value, *tb;
+    int res;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&exception, &value, &tb);
+    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
+    if (unlikely(res == -1)) {
+        PyErr_WriteUnraisable(err);
+        res = 0;
+    }
+    if (!res) {
+        res = PyObject_IsSubclass(err, exc_type2);
+        if (unlikely(res == -1)) {
+            PyErr_WriteUnraisable(err);
+            res = 0;
+        }
+    }
+    __Pyx_ErrRestore(exception, value, tb);
+    return res;
+}
+#else
+static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
+    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
+    if (!res) {
+        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
+    }
+    return res;
+}
+#endif
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
+    if (likely(err == exc_type)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
+    }
+    return PyErr_GivenExceptionMatches(err, exc_type);
+}
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
+    if (likely(err == exc_type1 || err == exc_type2)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
+    }
+    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
+}
+#endif
+
 /* CheckBinaryVersion */
-            static int __Pyx_check_binary_version(void) {
+        static int __Pyx_check_binary_version(void) {
     char ctversion[4], rtversion[4];
     PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
     PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
@@ -12253,7 +13193,7 @@
 }
 
 /* ModuleImport */
-            #ifndef __PYX_HAVE_RT_ImportModule
+        #ifndef __PYX_HAVE_RT_ImportModule
 #define __PYX_HAVE_RT_ImportModule
 static PyObject *__Pyx_ImportModule(const char *name) {
     PyObject *py_name = 0;
@@ -12271,7 +13211,7 @@
 #endif
 
 /* TypeImport */
-            #ifndef __PYX_HAVE_RT_ImportType
+        #ifndef __PYX_HAVE_RT_ImportType
 #define __PYX_HAVE_RT_ImportType
 static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
     size_t size, int strict)
@@ -12336,7 +13276,7 @@
 #endif
 
 /* FunctionImport */
-            #ifndef __PYX_HAVE_RT_ImportFunction
+        #ifndef __PYX_HAVE_RT_ImportFunction
 #define __PYX_HAVE_RT_ImportFunction
 static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
     PyObject *d = 0;
@@ -12390,7 +13330,7 @@
 #endif
 
 /* InitStrings */
-            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
     while (t->p) {
         #if PY_MAJOR_VERSION < 3
         if (t->is_unicode) {
@@ -12415,6 +13355,8 @@
         #endif
         if (!*t->p)
             return -1;
+        if (PyObject_Hash(*t->p) == -1)
+            PyErr_Clear();
         ++t;
     }
     return 0;
@@ -12423,50 +13365,57 @@
 static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
     return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
     Py_ssize_t ignore;
     return __Pyx_PyObject_AsStringAndSize(o, &ignore);
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
-#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
-    if (
-#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-            __Pyx_sys_getdefaultencoding_not_ascii &&
-#endif
-            PyUnicode_Check(o)) {
-#if PY_VERSION_HEX < 0x03030000
-        char* defenc_c;
-        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
-        if (!defenc) return NULL;
-        defenc_c = PyBytes_AS_STRING(defenc);
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+#if !CYTHON_PEP393_ENABLED
+static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    char* defenc_c;
+    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
+    if (!defenc) return NULL;
+    defenc_c = PyBytes_AS_STRING(defenc);
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        {
-            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
-            char* c;
-            for (c = defenc_c; c < end; c++) {
-                if ((unsigned char) (*c) >= 128) {
-                    PyUnicode_AsASCIIString(o);
-                    return NULL;
-                }
+    {
+        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
+        char* c;
+        for (c = defenc_c; c < end; c++) {
+            if ((unsigned char) (*c) >= 128) {
+                PyUnicode_AsASCIIString(o);
+                return NULL;
             }
         }
+    }
 #endif
-        *length = PyBytes_GET_SIZE(defenc);
-        return defenc_c;
+    *length = PyBytes_GET_SIZE(defenc);
+    return defenc_c;
+}
 #else
-        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
+static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        if (PyUnicode_IS_ASCII(o)) {
-            *length = PyUnicode_GET_LENGTH(o);
-            return PyUnicode_AsUTF8(o);
-        } else {
-            PyUnicode_AsASCIIString(o);
-            return NULL;
-        }
+    if (likely(PyUnicode_IS_ASCII(o))) {
+        *length = PyUnicode_GET_LENGTH(o);
+        return PyUnicode_AsUTF8(o);
+    } else {
+        PyUnicode_AsASCIIString(o);
+        return NULL;
+    }
 #else
-        return PyUnicode_AsUTF8AndSize(o, length);
+    return PyUnicode_AsUTF8AndSize(o, length);
+#endif
+}
+#endif
 #endif
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+    if (
+#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
+            __Pyx_sys_getdefaultencoding_not_ascii &&
 #endif
+            PyUnicode_Check(o)) {
+        return __Pyx_PyUnicode_AsStringAndSize(o, length);
     } else
 #endif
 #if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
@@ -12490,6 +13439,26 @@
    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
    else return PyObject_IsTrue(x);
 }
+static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
+#if PY_MAJOR_VERSION >= 3
+    if (PyLong_Check(result)) {
+        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
+                "__int__ returned non-int (type %.200s).  "
+                "The ability to return an instance of a strict subclass of int "
+                "is deprecated, and may be removed in a future version of Python.",
+                Py_TYPE(result)->tp_name)) {
+            Py_DECREF(result);
+            return NULL;
+        }
+        return result;
+    }
+#endif
+    PyErr_Format(PyExc_TypeError,
+                 "__%.4s__ returned non-%.4s (type %.200s)",
+                 type_name, type_name, Py_TYPE(result)->tp_name);
+    Py_DECREF(result);
+    return NULL;
+}
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
 #if CYTHON_USE_TYPE_SLOTS
   PyNumberMethods *m;
@@ -12497,9 +13466,9 @@
   const char *name = NULL;
   PyObject *res = NULL;
 #if PY_MAJOR_VERSION < 3
-  if (PyInt_Check(x) || PyLong_Check(x))
+  if (likely(PyInt_Check(x) || PyLong_Check(x)))
 #else
-  if (PyLong_Check(x))
+  if (likely(PyLong_Check(x)))
 #endif
     return __Pyx_NewRef(x);
 #if CYTHON_USE_TYPE_SLOTS
@@ -12507,32 +13476,30 @@
   #if PY_MAJOR_VERSION < 3
   if (m && m->nb_int) {
     name = "int";
-    res = PyNumber_Int(x);
+    res = m->nb_int(x);
   }
   else if (m && m->nb_long) {
     name = "long";
-    res = PyNumber_Long(x);
+    res = m->nb_long(x);
   }
   #else
-  if (m && m->nb_int) {
+  if (likely(m && m->nb_int)) {
     name = "int";
-    res = PyNumber_Long(x);
+    res = m->nb_int(x);
   }
   #endif
 #else
-  res = PyNumber_Int(x);
+  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
+    res = PyNumber_Int(x);
+  }
 #endif
-  if (res) {
+  if (likely(res)) {
 #if PY_MAJOR_VERSION < 3
-    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
 #else
-    if (!PyLong_Check(res)) {
+    if (unlikely(!PyLong_CheckExact(res))) {
 #endif
-      PyErr_Format(PyExc_TypeError,
-                   "__%.4s__ returned non-%.4s (type %.200s)",
-                   name, name, Py_TYPE(res)->tp_name);
-      Py_DECREF(res);
-      return NULL;
+        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
     }
   }
   else if (!PyErr_Occurred()) {
diff -ruN orig/skgarden/mondrian/tree/_criterion.pxd new/skgarden/mondrian/tree/_criterion.pxd
--- orig/skgarden/mondrian/tree/_criterion.pxd	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/mondrian/tree/_criterion.pxd	2017-12-27 11:16:05.000000000 -0800
@@ -65,3 +65,4 @@
     cdef void node_value(self, double* dest) nogil
     cdef double impurity_improvement(self, double impurity) nogil
     cdef double proxy_impurity_improvement(self) nogil
+    cdef bint is_pure(self) nogil
diff -ruN orig/skgarden/mondrian/tree/_criterion.pyx new/skgarden/mondrian/tree/_criterion.pyx
--- orig/skgarden/mondrian/tree/_criterion.pyx	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/mondrian/tree/_criterion.pyx	2017-12-27 11:16:05.000000000 -0800
@@ -208,6 +208,12 @@
                           - (self.weighted_n_left /
                              self.weighted_n_node_samples * impurity_left)))
 
+    cdef bint is_pure(self) nogil:
+        """
+        Returns if a node is pure, i.e if samples[start:end] are identical.
+        """
+        pass
+
 
 cdef class RegressionCriterion(Criterion):
     """Abstract regression criterion.
@@ -510,6 +516,9 @@
         impurity_left[0] /= self.n_outputs
         impurity_right[0] /= self.n_outputs
 
+    cdef bint is_pure(self) nogil:
+        return self.node_impurity() == 0
+
 
 cdef class ClassificationCriterion(Criterion):
     """Abstract criterion for classification."""
@@ -808,7 +817,6 @@
         dest : double pointer
             The memory address which we will save the node value into.
         """
-
         cdef double* sum_total = self.sum_total
         cdef SIZE_t* n_classes = self.n_classes
         cdef SIZE_t k
@@ -817,3 +825,21 @@
             memcpy(dest, sum_total, n_classes[k] * sizeof(double))
             dest += self.sum_stride
             sum_total += self.sum_stride
+
+    cdef bint is_pure(self) nogil:
+        cdef bint is_pure_node = True
+        cdef bint is_pure_output = False
+        cdef SIZE_t c_ind
+        cdef SIZE_t k
+        cdef double* sum_total = self.sum_total
+
+        for k in range(self.n_outputs):
+            is_pure_output = False
+            for c_ind in range(self.n_classes[k]):
+                if sum_total[c_ind] == self.n_node_samples:
+                    is_pure_output = True
+                    break
+            if not is_pure_output:
+                is_pure_node = False
+                break
+        return is_pure_node
diff -ruN orig/skgarden/mondrian/tree/_splitter.c new/skgarden/mondrian/tree/_splitter.c
--- orig/skgarden/mondrian/tree/_splitter.c	2017-06-07 04:58:58.000000000 -0700
+++ new/skgarden/mondrian/tree/_splitter.c	2017-12-27 11:16:27.000000000 -0800
@@ -1,20 +1,24 @@
-/* Generated by Cython 0.25.2 */
+/* Generated by Cython 0.27.3 */
 
 /* BEGIN: Cython Metadata
 {
     "distutils": {
         "depends": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/arrayobject.h",
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/ufuncobject.h"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h"
         ],
         "extra_compile_args": [
             "-O3"
         ],
         "include_dirs": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include"
         ],
         "libraries": [
             "m"
+        ],
+        "name": "skgarden.mondrian.tree._splitter",
+        "sources": [
+            "skgarden/mondrian/tree/_splitter.pyx"
         ]
     },
     "module_name": "skgarden.mondrian.tree._splitter"
@@ -25,10 +29,11 @@
 #include "Python.h"
 #ifndef Py_PYTHON_H
     #error Python headers needed to compile C extensions, please install development version of Python.
-#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
-    #error Cython requires Python 2.6+ or Python 3.2+.
+#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
+    #error Cython requires Python 2.6+ or Python 3.3+.
 #else
-#define CYTHON_ABI "0_25_2"
+#define CYTHON_ABI "0_27_3"
+#define CYTHON_FUTURE_DIVISION 0
 #include <stddef.h>
 #ifndef offsetof
   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
@@ -50,8 +55,9 @@
 #ifndef DL_EXPORT
   #define DL_EXPORT(t) t
 #endif
+#define __PYX_COMMA ,
 #ifndef HAVE_LONG_LONG
-  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
+  #if PY_VERSION_HEX >= 0x02070000
     #define HAVE_LONG_LONG
   #endif
 #endif
@@ -67,8 +73,14 @@
   #define CYTHON_COMPILING_IN_CPYTHON 0
   #undef CYTHON_USE_TYPE_SLOTS
   #define CYTHON_USE_TYPE_SLOTS 0
-  #undef CYTHON_USE_ASYNC_SLOTS
-  #define CYTHON_USE_ASYNC_SLOTS 0
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #if PY_VERSION_HEX < 0x03050000
+    #undef CYTHON_USE_ASYNC_SLOTS
+    #define CYTHON_USE_ASYNC_SLOTS 0
+  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
+    #define CYTHON_USE_ASYNC_SLOTS 1
+  #endif
   #undef CYTHON_USE_PYLIST_INTERNALS
   #define CYTHON_USE_PYLIST_INTERNALS 0
   #undef CYTHON_USE_UNICODE_INTERNALS
@@ -87,6 +99,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #elif defined(PYSTON_VERSION)
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 1
@@ -94,6 +110,8 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
   #undef CYTHON_USE_ASYNC_SLOTS
   #define CYTHON_USE_ASYNC_SLOTS 0
   #undef CYTHON_USE_PYLIST_INTERNALS
@@ -118,6 +136,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #else
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 0
@@ -125,6 +147,12 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #if PY_VERSION_HEX < 0x02070000
+    #undef CYTHON_USE_PYTYPE_LOOKUP
+    #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
+    #define CYTHON_USE_PYTYPE_LOOKUP 1
+  #endif
   #if PY_MAJOR_VERSION < 3
     #undef CYTHON_USE_ASYNC_SLOTS
     #define CYTHON_USE_ASYNC_SLOTS 0
@@ -164,6 +192,12 @@
   #ifndef CYTHON_FAST_PYCALL
     #define CYTHON_FAST_PYCALL 1
   #endif
+  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
+    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
+  #endif
+  #ifndef CYTHON_USE_TP_FINALIZE
+    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
+  #endif
 #endif
 #if !defined(CYTHON_FAST_PYCCALL)
 #define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
@@ -202,19 +236,44 @@
 #ifndef Py_TPFLAGS_HAVE_FINALIZE
   #define Py_TPFLAGS_HAVE_FINALIZE 0
 #endif
-#ifndef METH_FASTCALL
-  #define METH_FASTCALL 0x80
-  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
-                                              Py_ssize_t nargs, PyObject *kwnames);
+#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
+  #ifndef METH_FASTCALL
+     #define METH_FASTCALL 0x80
+  #endif
+  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
+  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
+                                                          Py_ssize_t nargs, PyObject *kwnames);
 #else
   #define __Pyx_PyCFunctionFast _PyCFunctionFast
+  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
 #endif
 #if CYTHON_FAST_PYCCALL
 #define __Pyx_PyFastCFunction_Check(func)\
-    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
+    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
 #else
 #define __Pyx_PyFastCFunction_Check(func) 0
 #endif
+#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#elif PY_VERSION_HEX >= 0x03060000
+  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
+#elif PY_VERSION_HEX >= 0x03000000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#else
+  #define __Pyx_PyThreadState_Current _PyThreadState_Current
+#endif
+#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
+#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
+#else
+#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
+#endif
+#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
+#endif
 #if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
   #define CYTHON_PEP393_ENABLED 1
   #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
@@ -298,7 +357,6 @@
 #ifndef PySet_CheckExact
   #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
 #endif
-#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
 #define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
 #if PY_MAJOR_VERSION >= 3
   #define PyIntObject                  PyLongObject
@@ -338,20 +396,28 @@
 #else
   #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
 #endif
+#ifndef __has_attribute
+  #define __has_attribute(x) 0
+#endif
+#ifndef __has_cpp_attribute
+  #define __has_cpp_attribute(x) 0
+#endif
 #if CYTHON_USE_ASYNC_SLOTS
   #if PY_VERSION_HEX >= 0x030500B1
     #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
     #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
   #else
+    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
+  #endif
+#else
+  #define __Pyx_PyType_AsAsync(obj) NULL
+#endif
+#ifndef __Pyx_PyAsyncMethodsStruct
     typedef struct {
         unaryfunc am_await;
         unaryfunc am_aiter;
         unaryfunc am_anext;
     } __Pyx_PyAsyncMethodsStruct;
-    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
-  #endif
-#else
-  #define __Pyx_PyType_AsAsync(obj) NULL
 #endif
 #ifndef CYTHON_RESTRICT
   #if defined(__GNUC__)
@@ -392,6 +458,43 @@
 # endif
 #endif
 #define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
+#ifdef _MSC_VER
+    #ifndef _MSC_STDINT_H_
+        #if _MSC_VER < 1300
+           typedef unsigned char     uint8_t;
+           typedef unsigned int      uint32_t;
+        #else
+           typedef unsigned __int8   uint8_t;
+           typedef unsigned __int32  uint32_t;
+        #endif
+    #endif
+#else
+   #include <stdint.h>
+#endif
+#ifndef CYTHON_FALLTHROUGH
+  #if defined(__cplusplus) && __cplusplus >= 201103L
+    #if __has_cpp_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH [[fallthrough]]
+    #elif __has_cpp_attribute(clang::fallthrough)
+      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
+    #elif __has_cpp_attribute(gnu::fallthrough)
+      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
+    #endif
+  #endif
+  #ifndef CYTHON_FALLTHROUGH
+    #if __has_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
+    #else
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+  #if defined(__clang__ ) && defined(__apple_build_version__)
+    #if __apple_build_version__ < 7000000
+      #undef  CYTHON_FALLTHROUGH
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+#endif
 
 #ifndef CYTHON_INLINE
   #if defined(__clang__)
@@ -432,14 +535,6 @@
   __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
 }
 
-#if PY_MAJOR_VERSION >= 3
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
-#else
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
-#endif
-
 #ifndef __PYX_EXTERN_C
   #ifdef __cplusplus
     #define __PYX_EXTERN_C extern "C"
@@ -452,15 +547,15 @@
 #define __PYX_HAVE_API__skgarden__mondrian__tree___splitter
 #include <string.h>
 #include <stdio.h>
-#include <stdlib.h>
 #include "numpy/arrayobject.h"
 #include "numpy/ufuncobject.h"
+#include <stdlib.h>
 #include <math.h>
 #ifdef _OPENMP
 #include <omp.h>
 #endif /* _OPENMP */
 
-#ifdef PYREX_WITHOUT_ASSERTIONS
+#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
 #define CYTHON_WITHOUT_ASSERTIONS
 #endif
 
@@ -491,8 +586,8 @@
     #define __Pyx_sst_abs(value) abs(value)
 #elif SIZEOF_LONG >= SIZEOF_SIZE_T
     #define __Pyx_sst_abs(value) labs(value)
-#elif defined (_MSC_VER) && defined (_M_X64)
-    #define __Pyx_sst_abs(value) _abs64(value)
+#elif defined (_MSC_VER)
+    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
 #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
     #define __Pyx_sst_abs(value) llabs(value)
 #elif defined (__GNUC__)
@@ -500,8 +595,8 @@
 #else
     #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
 #endif
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
 #define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
 #define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
 #define __Pyx_PyBytes_FromString        PyBytes_FromString
@@ -514,23 +609,27 @@
     #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
 #endif
-#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
-#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
 #define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
 #define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
 #define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
 #define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
 #define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
-#if PY_MAJOR_VERSION < 3
-static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
-{
+static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
     const Py_UNICODE *u_end = u;
     while (*u_end++) ;
     return (size_t)(u_end - u - 1);
 }
-#else
-#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
-#endif
 #define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
 #define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
 #define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
@@ -539,6 +638,8 @@
 #define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
 static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
+#define __Pyx_PySequence_Tuple(obj)\
+    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
 static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
 static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
 #if CYTHON_ASSUME_SAFE_MACROS
@@ -637,10 +738,12 @@
   #define likely(x)   (x)
   #define unlikely(x) (x)
 #endif /* __GNUC__ */
+static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
 
-static PyObject *__pyx_m;
+static PyObject *__pyx_m = NULL;
 static PyObject *__pyx_d;
 static PyObject *__pyx_b;
+static PyObject *__pyx_cython_runtime;
 static PyObject *__pyx_empty_tuple;
 static PyObject *__pyx_empty_bytes;
 static PyObject *__pyx_empty_unicode;
@@ -674,6 +777,7 @@
 
 static const char *__pyx_f[] = {
   "skgarden/mondrian/tree/_splitter.pyx",
+  "stringsource",
   "skgarden/mondrian/tree/_splitter.pxd",
   "__init__.pxd",
   "type.pxd",
@@ -717,8 +821,20 @@
   char is_valid_array;
 } __Pyx_BufFmt_Context;
 
+/* ForceInitThreads.proto */
+#ifndef __PYX_FORCE_INIT_THREADS
+  #define __PYX_FORCE_INIT_THREADS 0
+#endif
+
+/* NoFastGil.proto */
+#define __Pyx_PyGILState_Ensure PyGILState_Ensure
+#define __Pyx_PyGILState_Release PyGILState_Release
+#define __Pyx_FastGIL_Remember()
+#define __Pyx_FastGIL_Forget()
+#define __Pyx_FastGilFuncInit()
+
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":725
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":743
  * # in Cython to enable them only on the right systems.
  * 
  * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
@@ -727,7 +843,7 @@
  */
 typedef npy_int8 __pyx_t_5numpy_int8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":726
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
  * 
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
@@ -736,7 +852,7 @@
  */
 typedef npy_int16 __pyx_t_5numpy_int16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":727
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
@@ -745,7 +861,7 @@
  */
 typedef npy_int32 __pyx_t_5numpy_int32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":728
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":746
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t
  * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
@@ -754,7 +870,7 @@
  */
 typedef npy_int64 __pyx_t_5numpy_int64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":732
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":750
  * #ctypedef npy_int128     int128_t
  * 
  * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
@@ -763,7 +879,7 @@
  */
 typedef npy_uint8 __pyx_t_5numpy_uint8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":733
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
  * 
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
@@ -772,7 +888,7 @@
  */
 typedef npy_uint16 __pyx_t_5numpy_uint16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":734
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":752
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
@@ -781,7 +897,7 @@
  */
 typedef npy_uint32 __pyx_t_5numpy_uint32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":735
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t
  * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
@@ -790,7 +906,7 @@
  */
 typedef npy_uint64 __pyx_t_5numpy_uint64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":739
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":757
  * #ctypedef npy_uint128    uint128_t
  * 
  * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
@@ -799,7 +915,7 @@
  */
 typedef npy_float32 __pyx_t_5numpy_float32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":740
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
  * 
  * ctypedef npy_float32    float32_t
  * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
@@ -808,7 +924,7 @@
  */
 typedef npy_float64 __pyx_t_5numpy_float64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":749
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
  * # The int types are mapped a bit surprising --
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
@@ -817,7 +933,7 @@
  */
 typedef npy_long __pyx_t_5numpy_int_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":750
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
@@ -826,7 +942,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_long_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":751
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t
  * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
@@ -835,7 +951,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_longlong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":753
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
  * ctypedef npy_longlong   longlong_t
  * 
  * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
@@ -844,7 +960,7 @@
  */
 typedef npy_ulong __pyx_t_5numpy_uint_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":754
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":772
  * 
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
@@ -853,7 +969,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":755
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t
  * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
@@ -862,7 +978,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":757
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
  * ctypedef npy_ulonglong  ulonglong_t
  * 
  * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
@@ -871,7 +987,7 @@
  */
 typedef npy_intp __pyx_t_5numpy_intp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":758
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
  * 
  * ctypedef npy_intp       intp_t
  * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
@@ -880,7 +996,7 @@
  */
 typedef npy_uintp __pyx_t_5numpy_uintp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":760
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
  * ctypedef npy_uintp      uintp_t
  * 
  * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
@@ -889,7 +1005,7 @@
  */
 typedef npy_double __pyx_t_5numpy_float_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":761
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
  * 
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
@@ -898,7 +1014,7 @@
  */
 typedef npy_double __pyx_t_5numpy_double_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":762
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t
  * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
@@ -1120,7 +1236,7 @@
 struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter;
 struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":764
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
  * ctypedef npy_longdouble longdouble_t
  * 
  * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
@@ -1129,7 +1245,7 @@
  */
 typedef npy_cfloat __pyx_t_5numpy_cfloat_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":765
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
  * 
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
@@ -1138,7 +1254,7 @@
  */
 typedef npy_cdouble __pyx_t_5numpy_cdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":766
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t
  * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
@@ -1147,7 +1263,7 @@
  */
 typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":768
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":786
  * ctypedef npy_clongdouble clongdouble_t
  * 
  * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
@@ -1158,6 +1274,7 @@
 struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict;
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build;
 
 /* "_tree.pxd":25
@@ -1181,7 +1298,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t variance;
 };
 
-/* "_tree.pxd":70
+/* "_tree.pxd":71
  *                           double E) nogil except -1
  *     cdef int _resize(self, SIZE_t capacity) nogil except -1
  *     cdef int _resize_c(self, SIZE_t capacity=*) nogil except -1             # <<<<<<<<<<<<<<
@@ -1193,7 +1310,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t capacity;
 };
 
-/* "_tree.pxd":75
+/* "_tree.pxd":76
  *     cdef np.ndarray _get_node_ndarray(self)
  * 
  *     cpdef tuple predict(self, object X, bint return_std=*, bint is_regression=*)             # <<<<<<<<<<<<<<
@@ -1206,8 +1323,21 @@
   int is_regression;
 };
 
-/* "_tree.pxd":106
- *     cdef SIZE_t max_depth           # Maximal tree depth
+/* "_tree.pxd":88
+ *                      SIZE_t X_f_stride, SIZE_t y_stride, UINT32_t random_state,
+ *                      SIZE_t min_samples_split)
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,             # <<<<<<<<<<<<<<
+ *                                   SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+ *                                   DTYPE_t tau, SIZE_t n_node_samples,
+ */
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes {
+  int __pyx_n;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t child_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t y_start;
+};
+
+/* "_tree.pxd":120
+ *     cdef object random_state
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
  *                 np.ndarray sample_weight=*,
@@ -1231,7 +1361,7 @@
   __pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX = 0x7FFFFFFF
 };
 
-/* "_utils.pxd":65
+/* "_utils.pxd":69
  * 
  * # A record on the stack for depth-first tree growing
  * cdef struct StackRecord:             # <<<<<<<<<<<<<<
@@ -1280,7 +1410,7 @@
   PyArrayObject *X_idx_sorted;
 };
 
-/* "skgarden/mondrian/tree/_splitter.pyx":232
+/* "skgarden/mondrian/tree/_splitter.pyx":235
  *         self.sample_mask = NULL
  * 
  *     cdef int init(self,             # <<<<<<<<<<<<<<
@@ -1342,10 +1472,11 @@
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *nodes;
   double *value;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t value_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t root;
 };
 
 
-/* "_tree.pxd":91
+/* "_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1360,10 +1491,11 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t min_samples_leaf;
   double min_weight_leaf;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t max_depth;
+  PyObject *random_state;
 };
 
 
-/* "_utils.pxd":74
+/* "_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1411,7 +1543,7 @@
 };
 
 
-/* "skgarden/mondrian/tree/_splitter.pyx":212
+/* "skgarden/mondrian/tree/_splitter.pyx":215
  *         pass
  * 
  * cdef class BaseDenseSplitter(Splitter):             # <<<<<<<<<<<<<<
@@ -1431,7 +1563,7 @@
 };
 
 
-/* "skgarden/mondrian/tree/_splitter.pyx":255
+/* "skgarden/mondrian/tree/_splitter.pyx":258
  * 
  * 
  * cdef class MondrianSplitter(BaseDenseSplitter):             # <<<<<<<<<<<<<<
@@ -1462,6 +1594,7 @@
   void (*node_value)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *);
   double (*impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double);
   double (*proxy_impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
+  int (*is_pure)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion;
 
@@ -1483,16 +1616,19 @@
   PyObject *(*predict)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args);
   PyArrayObject *(*apply)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyArrayObject *(*_apply_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyArrayObject *(*_apply_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyObject *(*_decision_path_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyObject *(*_decision_path_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*weighted_decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
+  void (*_init)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*extend)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*set_node_attributes)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args);
+  void (*update_node_extent)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*_update_node_info)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree;
 
 
-/* "_tree.pxd":91
+/* "_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1507,7 +1643,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
 
 
-/* "_utils.pxd":74
+/* "_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1523,7 +1659,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack;
 
 
-/* "skgarden/mondrian/tree/_splitter.pyx":41
+/* "skgarden/mondrian/tree/_splitter.pyx":44
  * cdef double INFINITY = np.inf
  * 
  * cdef class Splitter:             # <<<<<<<<<<<<<<
@@ -1542,7 +1678,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter;
 
 
-/* "skgarden/mondrian/tree/_splitter.pyx":212
+/* "skgarden/mondrian/tree/_splitter.pyx":215
  *         pass
  * 
  * cdef class BaseDenseSplitter(Splitter):             # <<<<<<<<<<<<<<
@@ -1556,7 +1692,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter;
 
 
-/* "skgarden/mondrian/tree/_splitter.pyx":255
+/* "skgarden/mondrian/tree/_splitter.pyx":258
  * 
  * 
  * cdef class MondrianSplitter(BaseDenseSplitter):             # <<<<<<<<<<<<<<
@@ -1665,17 +1801,31 @@
     const char* function_name);
 
 /* ArgTypeTest.proto */
-static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
-    const char *name, int exact);
+#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
+    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
+        __Pyx__ArgTypeTest(obj, type, name, exact))
+static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);
+
+/* IsLittleEndian.proto */
+static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);
 
 /* BufferFormatCheck.proto */
-static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
-    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
-static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
 static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
 static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                               __Pyx_BufFmt_StackElem* stack,
-                              __Pyx_TypeInfo* type); // PROTO
+                              __Pyx_TypeInfo* type);
+
+/* BufferGetAndValidate.proto */
+#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
+    ((obj == Py_None || obj == NULL) ?\
+    (__Pyx_ZeroBuffer(buf), 0) :\
+    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
+static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
+    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
+static void __Pyx_ZeroBuffer(Py_buffer* buf);
+static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
+static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
+static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 
 /* PyFunctionFastCall.proto */
 #if CYTHON_FAST_PYCALL
@@ -1720,42 +1870,52 @@
     (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
 static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                               int wraparound, int boundscheck);
-static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
+static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
 static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                      int is_list, int wraparound, int boundscheck);
 
 /* PyThreadStateGet.proto */
 #if CYTHON_FAST_THREAD_STATE
 #define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
-#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
+#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
+#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
 #else
 #define __Pyx_PyThreadState_declare
 #define __Pyx_PyThreadState_assign
+#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
 #endif
 
 /* PyErrFetchRestore.proto */
 #if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
 static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
 static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
 #else
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
+#endif
+#else
+#define __Pyx_PyErr_Clear() PyErr_Clear()
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
+#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
 #endif
 
-/* ForceInitThreads.proto */
-#ifndef __PYX_FORCE_INIT_THREADS
-  #define __PYX_FORCE_INIT_THREADS 0
-#endif
-
 /* ExtTypeTest.proto */
 static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);
 
+/* RaiseException.proto */
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
+
 /* PyObjectCallMethO.proto */
 #if CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
@@ -1776,9 +1936,6 @@
                                   int lineno, const char *filename,
                                   int full_traceback, int nogil);
 
-/* RaiseException.proto */
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
-
 /* DictGetItem.proto */
 #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
 static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
@@ -1839,6 +1996,9 @@
 /* SetVTable.proto */
 static int __Pyx_SetVtable(PyObject *dict, void *vtable);
 
+/* SetupReduce.proto */
+static int __Pyx_setup_reduce(PyObject* type_obj);
+
 /* GetVTable.proto */
 static void* __Pyx_GetVtable(PyObject *dict);
 
@@ -1851,6 +2011,13 @@
 /* GetModuleGlobalName.proto */
 static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);
 
+/* CLineInTraceback.proto */
+#ifdef CYTHON_CLINE_IN_TRACEBACK
+#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
+#else
+static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
+#endif
+
 /* CodeObjectCache.proto */
 typedef struct {
     PyCodeObject* code_object;
@@ -1893,10 +2060,6 @@
 #endif
 
 
-/* None.proto */
-static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
-static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};
-
 /* CIntToPy.proto */
 static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);
 
@@ -2022,6 +2185,18 @@
 /* CIntFromPy.proto */
 static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);
 
+/* FastTypeChecks.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
+#else
+#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
+#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
+#endif
+
 /* CheckBinaryVersion.proto */
 static int __Pyx_check_binary_version(void);
 
@@ -2073,7 +2248,7 @@
 
 /* Module declarations from 'cpython.ref' */
 
-/* Module declarations from 'libc.stdlib' */
+/* Module declarations from 'cpython.mem' */
 
 /* Module declarations from 'numpy' */
 
@@ -2089,6 +2264,8 @@
 /* Module declarations from 'skgarden.mondrian.tree._criterion' */
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = 0;
 
+/* Module declarations from 'libc.stdlib' */
+
 /* Module declarations from 'libc.math' */
 
 /* Module declarations from 'skgarden.mondrian.tree._tree' */
@@ -2099,6 +2276,8 @@
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = 0;
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_int)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
 static double (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform)(double, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
+static __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
+static double (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
 static double (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_log)(double); /*proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(*__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t); /*proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(*__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t); /*proto*/
@@ -2116,26 +2295,33 @@
 static double __pyx_v_8skgarden_8mondrian_4tree_9_splitter_INFINITY;
 static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t = { "DOUBLE_t", NULL, sizeof(__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t), { 0 }, 0, 'R', 0, 0 };
 #define __Pyx_MODULE_NAME "skgarden.mondrian.tree._splitter"
+extern int __pyx_module_is_main_skgarden__mondrian__tree___splitter;
 int __pyx_module_is_main_skgarden__mondrian__tree___splitter = 0;
 
 /* Implementation of 'skgarden.mondrian.tree._splitter' */
 static PyObject *__pyx_builtin_range;
+static PyObject *__pyx_builtin_TypeError;
 static PyObject *__pyx_builtin_ValueError;
 static PyObject *__pyx_builtin_RuntimeError;
 static PyObject *__pyx_builtin_ImportError;
 static const char __pyx_k_np[] = "np";
 static const char __pyx_k_inf[] = "inf";
 static const char __pyx_k_main[] = "__main__";
+static const char __pyx_k_name[] = "__name__";
 static const char __pyx_k_test[] = "__test__";
 static const char __pyx_k_numpy[] = "numpy";
 static const char __pyx_k_range[] = "range";
 static const char __pyx_k_shape[] = "shape";
 static const char __pyx_k_import[] = "__import__";
+static const char __pyx_k_reduce[] = "__reduce__";
 static const char __pyx_k_randint[] = "randint";
 static const char __pyx_k_strides[] = "strides";
 static const char __pyx_k_getstate[] = "__getstate__";
 static const char __pyx_k_itemsize[] = "itemsize";
+static const char __pyx_k_setstate[] = "__setstate__";
+static const char __pyx_k_TypeError[] = "TypeError";
 static const char __pyx_k_criterion[] = "criterion";
+static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
 static const char __pyx_k_ValueError[] = "ValueError";
 static const char __pyx_k_csc_matrix[] = "csc_matrix";
 static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
@@ -2143,12 +2329,16 @@
 static const char __pyx_k_RuntimeError[] = "RuntimeError";
 static const char __pyx_k_random_state[] = "random_state";
 static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
+static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
+static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
+static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
 static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
 static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
 static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
 static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
 static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
 static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
+static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
 static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
 static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
 static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
@@ -2156,7 +2346,9 @@
 static PyObject *__pyx_n_s_ImportError;
 static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
 static PyObject *__pyx_n_s_RuntimeError;
+static PyObject *__pyx_n_s_TypeError;
 static PyObject *__pyx_n_s_ValueError;
+static PyObject *__pyx_n_s_cline_in_traceback;
 static PyObject *__pyx_n_s_criterion;
 static PyObject *__pyx_n_s_csc_matrix;
 static PyObject *__pyx_n_s_getstate;
@@ -2164,8 +2356,10 @@
 static PyObject *__pyx_n_s_inf;
 static PyObject *__pyx_n_s_itemsize;
 static PyObject *__pyx_n_s_main;
+static PyObject *__pyx_n_s_name;
 static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
 static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
+static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
 static PyObject *__pyx_n_s_np;
 static PyObject *__pyx_n_s_numpy;
 static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
@@ -2174,7 +2368,12 @@
 static PyObject *__pyx_n_s_randint;
 static PyObject *__pyx_n_s_random_state;
 static PyObject *__pyx_n_s_range;
+static PyObject *__pyx_n_s_reduce;
+static PyObject *__pyx_n_s_reduce_cython;
+static PyObject *__pyx_n_s_reduce_ex;
 static PyObject *__pyx_n_s_scipy_sparse;
+static PyObject *__pyx_n_s_setstate;
+static PyObject *__pyx_n_s_setstate_cython;
 static PyObject *__pyx_n_s_shape;
 static PyObject *__pyx_n_s_strides;
 static PyObject *__pyx_n_s_test;
@@ -2188,7 +2387,11 @@
 static int __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_9criterion_4__del__(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_12max_features___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_12max_features_2__set__(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_v_criterion, CYTHON_UNUSED PyObject *__pyx_v_random_state); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
 static void __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter___dealloc__(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_2__reduce__(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter *__pyx_v_self); /* proto */
 static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
@@ -2206,8 +2409,12 @@
 static PyObject *__pyx_tuple__7;
 static PyObject *__pyx_tuple__8;
 static PyObject *__pyx_tuple__9;
+static PyObject *__pyx_tuple__10;
+static PyObject *__pyx_tuple__11;
+static PyObject *__pyx_tuple__12;
+static PyObject *__pyx_tuple__13;
 
-/* "skgarden/mondrian/tree/_splitter.pyx":48
+/* "skgarden/mondrian/tree/_splitter.pyx":51
  *     """
  * 
  *     def __cinit__(self, Criterion criterion, object random_state):             # <<<<<<<<<<<<<<
@@ -2231,7 +2438,9 @@
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -2240,14 +2449,15 @@
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_criterion)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_random_state)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 48, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 51, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 51, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
       goto __pyx_L5_argtuple_error;
@@ -2260,13 +2470,13 @@
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 48, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 51, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.Splitter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return -1;
   __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_criterion), __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion, 1, "criterion", 0))) __PYX_ERR(0, 48, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_criterion), __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion, 1, "criterion", 0))) __PYX_ERR(0, 51, __pyx_L1_error)
   __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_self), __pyx_v_criterion, __pyx_v_random_state);
 
   /* function exit code */
@@ -2283,7 +2493,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__cinit__", 0);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":59
+  /* "skgarden/mondrian/tree/_splitter.pyx":62
  *         """
  * 
  *         self.criterion = criterion             # <<<<<<<<<<<<<<
@@ -2296,7 +2506,7 @@
   __Pyx_DECREF(((PyObject *)__pyx_v_self->criterion));
   __pyx_v_self->criterion = __pyx_v_criterion;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":61
+  /* "skgarden/mondrian/tree/_splitter.pyx":64
  *         self.criterion = criterion
  * 
  *         self.samples = NULL             # <<<<<<<<<<<<<<
@@ -2305,7 +2515,7 @@
  */
   __pyx_v_self->samples = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":62
+  /* "skgarden/mondrian/tree/_splitter.pyx":65
  * 
  *         self.samples = NULL
  *         self.n_samples = 0             # <<<<<<<<<<<<<<
@@ -2314,7 +2524,7 @@
  */
   __pyx_v_self->n_samples = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":63
+  /* "skgarden/mondrian/tree/_splitter.pyx":66
  *         self.samples = NULL
  *         self.n_samples = 0
  *         self.features = NULL             # <<<<<<<<<<<<<<
@@ -2323,7 +2533,7 @@
  */
   __pyx_v_self->features = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":64
+  /* "skgarden/mondrian/tree/_splitter.pyx":67
  *         self.n_samples = 0
  *         self.features = NULL
  *         self.n_features = 0             # <<<<<<<<<<<<<<
@@ -2332,7 +2542,7 @@
  */
   __pyx_v_self->n_features = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":65
+  /* "skgarden/mondrian/tree/_splitter.pyx":68
  *         self.features = NULL
  *         self.n_features = 0
  *         self.feature_values = NULL             # <<<<<<<<<<<<<<
@@ -2341,7 +2551,7 @@
  */
   __pyx_v_self->feature_values = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":67
+  /* "skgarden/mondrian/tree/_splitter.pyx":70
  *         self.feature_values = NULL
  * 
  *         self.y = NULL             # <<<<<<<<<<<<<<
@@ -2350,7 +2560,7 @@
  */
   __pyx_v_self->y = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":68
+  /* "skgarden/mondrian/tree/_splitter.pyx":71
  * 
  *         self.y = NULL
  *         self.y_stride = 0             # <<<<<<<<<<<<<<
@@ -2359,7 +2569,7 @@
  */
   __pyx_v_self->y_stride = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":69
+  /* "skgarden/mondrian/tree/_splitter.pyx":72
  *         self.y = NULL
  *         self.y_stride = 0
  *         self.sample_weight = NULL             # <<<<<<<<<<<<<<
@@ -2368,7 +2578,7 @@
  */
   __pyx_v_self->sample_weight = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":71
+  /* "skgarden/mondrian/tree/_splitter.pyx":74
  *         self.sample_weight = NULL
  * 
  *         self.random_state = random_state             # <<<<<<<<<<<<<<
@@ -2381,7 +2591,7 @@
   __Pyx_DECREF(__pyx_v_self->random_state);
   __pyx_v_self->random_state = __pyx_v_random_state;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":48
+  /* "skgarden/mondrian/tree/_splitter.pyx":51
  *     """
  * 
  *     def __cinit__(self, Criterion criterion, object random_state):             # <<<<<<<<<<<<<<
@@ -2395,7 +2605,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":73
+/* "skgarden/mondrian/tree/_splitter.pyx":76
  *         self.random_state = random_state
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -2418,7 +2628,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__dealloc__", 0);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":76
+  /* "skgarden/mondrian/tree/_splitter.pyx":79
  *         """Destructor."""
  * 
  *         free(self.samples)             # <<<<<<<<<<<<<<
@@ -2427,7 +2637,7 @@
  */
   free(__pyx_v_self->samples);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":77
+  /* "skgarden/mondrian/tree/_splitter.pyx":80
  * 
  *         free(self.samples)
  *         free(self.features)             # <<<<<<<<<<<<<<
@@ -2436,7 +2646,7 @@
  */
   free(__pyx_v_self->features);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":78
+  /* "skgarden/mondrian/tree/_splitter.pyx":81
  *         free(self.samples)
  *         free(self.features)
  *         free(self.constant_features)             # <<<<<<<<<<<<<<
@@ -2445,7 +2655,7 @@
  */
   free(__pyx_v_self->constant_features);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":79
+  /* "skgarden/mondrian/tree/_splitter.pyx":82
  *         free(self.features)
  *         free(self.constant_features)
  *         free(self.feature_values)             # <<<<<<<<<<<<<<
@@ -2454,7 +2664,7 @@
  */
   free(__pyx_v_self->feature_values);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":73
+  /* "skgarden/mondrian/tree/_splitter.pyx":76
  *         self.random_state = random_state
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -2466,7 +2676,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":81
+/* "skgarden/mondrian/tree/_splitter.pyx":84
  *         free(self.feature_values)
  * 
  *     def __getstate__(self):             # <<<<<<<<<<<<<<
@@ -2493,7 +2703,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__getstate__", 0);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":82
+  /* "skgarden/mondrian/tree/_splitter.pyx":85
  * 
  *     def __getstate__(self):
  *         return {}             # <<<<<<<<<<<<<<
@@ -2501,13 +2711,13 @@
  *     def __setstate__(self, d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":81
+  /* "skgarden/mondrian/tree/_splitter.pyx":84
  *         free(self.feature_values)
  * 
  *     def __getstate__(self):             # <<<<<<<<<<<<<<
@@ -2526,7 +2736,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":84
+/* "skgarden/mondrian/tree/_splitter.pyx":87
  *         return {}
  * 
  *     def __setstate__(self, d):             # <<<<<<<<<<<<<<
@@ -2559,7 +2769,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":87
+/* "skgarden/mondrian/tree/_splitter.pyx":90
  *         pass
  * 
  *     cdef int init(self,             # <<<<<<<<<<<<<<
@@ -2600,20 +2810,20 @@
   __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 87, __pyx_L1_error)
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 90, __pyx_L1_error)
   }
   __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_y.diminfo[1].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_y.diminfo[1].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[1];
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":113
+  /* "skgarden/mondrian/tree/_splitter.pyx":116
  *         """
  * 
  *         self.rand_r_state = self.random_state.randint(0, RAND_R_MAX)             # <<<<<<<<<<<<<<
  *         cdef SIZE_t n_samples = X.shape[0]
  * 
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->random_state, __pyx_n_s_randint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->random_state, __pyx_n_s_randint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __pyx_t_4 = NULL;
   __pyx_t_5 = 0;
@@ -2630,7 +2840,7 @@
   #if CYTHON_FAST_PYCALL
   if (PyFunction_Check(__pyx_t_2)) {
     PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_3};
-    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
     __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
@@ -2639,14 +2849,14 @@
   #if CYTHON_FAST_PYCCALL
   if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
     PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_3};
-    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
     __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   } else
   #endif
   {
-    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L1_error)
+    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 116, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_6);
     if (__pyx_t_4) {
       __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
@@ -2657,42 +2867,42 @@
     __Pyx_GIVEREF(__pyx_t_3);
     PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
     __pyx_t_3 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
   }
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_7 = __Pyx_PyInt_As_npy_uint32(__pyx_t_1); if (unlikely((__pyx_t_7 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
+  __pyx_t_7 = __Pyx_PyInt_As_npy_uint32(__pyx_t_1); if (unlikely((__pyx_t_7 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __pyx_v_self->rand_r_state = __pyx_t_7;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":114
+  /* "skgarden/mondrian/tree/_splitter.pyx":117
  * 
  *         self.rand_r_state = self.random_state.randint(0, RAND_R_MAX)
  *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
  * 
  *         # Create a new array which will be used to store nonzero
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_v_n_samples = __pyx_t_8;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":118
+  /* "skgarden/mondrian/tree/_splitter.pyx":121
  *         # Create a new array which will be used to store nonzero
  *         # samples from the feature of interest
  *         cdef SIZE_t* samples = safe_realloc(&self.samples, n_samples)             # <<<<<<<<<<<<<<
  * 
  *         cdef SIZE_t i, j
  */
-  __pyx_t_9 = __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->samples), __pyx_v_n_samples); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L1_error)
+  __pyx_t_9 = __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->samples), __pyx_v_n_samples); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L1_error)
   __pyx_v_samples = __pyx_t_9;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":121
+  /* "skgarden/mondrian/tree/_splitter.pyx":124
  * 
  *         cdef SIZE_t i, j
  *         cdef double weighted_n_samples = 0.0             # <<<<<<<<<<<<<<
@@ -2701,7 +2911,7 @@
  */
   __pyx_v_weighted_n_samples = 0.0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":122
+  /* "skgarden/mondrian/tree/_splitter.pyx":125
  *         cdef SIZE_t i, j
  *         cdef double weighted_n_samples = 0.0
  *         j = 0             # <<<<<<<<<<<<<<
@@ -2710,7 +2920,7 @@
  */
   __pyx_v_j = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":124
+  /* "skgarden/mondrian/tree/_splitter.pyx":127
  *         j = 0
  * 
  *         for i in range(n_samples):             # <<<<<<<<<<<<<<
@@ -2721,7 +2931,7 @@
   for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
     __pyx_v_i = __pyx_t_10;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":126
+    /* "skgarden/mondrian/tree/_splitter.pyx":129
  *         for i in range(n_samples):
  *             # Only work with positively weighted samples
  *             if sample_weight == NULL or sample_weight[i] != 0.0:             # <<<<<<<<<<<<<<
@@ -2739,7 +2949,7 @@
     __pyx_L6_bool_binop_done:;
     if (__pyx_t_11) {
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":127
+      /* "skgarden/mondrian/tree/_splitter.pyx":130
  *             # Only work with positively weighted samples
  *             if sample_weight == NULL or sample_weight[i] != 0.0:
  *                 samples[j] = i             # <<<<<<<<<<<<<<
@@ -2748,7 +2958,7 @@
  */
       (__pyx_v_samples[__pyx_v_j]) = __pyx_v_i;
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":128
+      /* "skgarden/mondrian/tree/_splitter.pyx":131
  *             if sample_weight == NULL or sample_weight[i] != 0.0:
  *                 samples[j] = i
  *                 j += 1             # <<<<<<<<<<<<<<
@@ -2757,7 +2967,7 @@
  */
       __pyx_v_j = (__pyx_v_j + 1);
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":126
+      /* "skgarden/mondrian/tree/_splitter.pyx":129
  *         for i in range(n_samples):
  *             # Only work with positively weighted samples
  *             if sample_weight == NULL or sample_weight[i] != 0.0:             # <<<<<<<<<<<<<<
@@ -2766,7 +2976,7 @@
  */
     }
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":130
+    /* "skgarden/mondrian/tree/_splitter.pyx":133
  *                 j += 1
  * 
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -2776,7 +2986,7 @@
     __pyx_t_11 = ((__pyx_v_sample_weight != NULL) != 0);
     if (__pyx_t_11) {
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":131
+      /* "skgarden/mondrian/tree/_splitter.pyx":134
  * 
  *             if sample_weight != NULL:
  *                 weighted_n_samples += sample_weight[i]             # <<<<<<<<<<<<<<
@@ -2785,7 +2995,7 @@
  */
       __pyx_v_weighted_n_samples = (__pyx_v_weighted_n_samples + (__pyx_v_sample_weight[__pyx_v_i]));
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":130
+      /* "skgarden/mondrian/tree/_splitter.pyx":133
  *                 j += 1
  * 
  *             if sample_weight != NULL:             # <<<<<<<<<<<<<<
@@ -2795,7 +3005,7 @@
       goto __pyx_L8;
     }
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":133
+    /* "skgarden/mondrian/tree/_splitter.pyx":136
  *                 weighted_n_samples += sample_weight[i]
  *             else:
  *                 weighted_n_samples += 1.0             # <<<<<<<<<<<<<<
@@ -2808,7 +3018,7 @@
     __pyx_L8:;
   }
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":136
+  /* "skgarden/mondrian/tree/_splitter.pyx":139
  * 
  *         # Number of samples is number of positively weighted samples
  *         self.n_samples = j             # <<<<<<<<<<<<<<
@@ -2817,7 +3027,7 @@
  */
   __pyx_v_self->n_samples = __pyx_v_j;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":137
+  /* "skgarden/mondrian/tree/_splitter.pyx":140
  *         # Number of samples is number of positively weighted samples
  *         self.n_samples = j
  *         self.weighted_n_samples = weighted_n_samples             # <<<<<<<<<<<<<<
@@ -2826,33 +3036,33 @@
  */
   __pyx_v_self->weighted_n_samples = __pyx_v_weighted_n_samples;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":139
+  /* "skgarden/mondrian/tree/_splitter.pyx":142
  *         self.weighted_n_samples = weighted_n_samples
  * 
  *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
  *         cdef SIZE_t* features = safe_realloc(&self.features, n_features)
  * 
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __pyx_v_n_features = __pyx_t_8;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":140
+  /* "skgarden/mondrian/tree/_splitter.pyx":143
  * 
  *         cdef SIZE_t n_features = X.shape[1]
  *         cdef SIZE_t* features = safe_realloc(&self.features, n_features)             # <<<<<<<<<<<<<<
  * 
  *         for i in range(n_features):
  */
-  __pyx_t_9 = __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->features), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
+  __pyx_t_9 = __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->features), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
   __pyx_v_features = __pyx_t_9;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":142
+  /* "skgarden/mondrian/tree/_splitter.pyx":145
  *         cdef SIZE_t* features = safe_realloc(&self.features, n_features)
  * 
  *         for i in range(n_features):             # <<<<<<<<<<<<<<
@@ -2863,7 +3073,7 @@
   for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_8; __pyx_t_10+=1) {
     __pyx_v_i = __pyx_t_10;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":143
+    /* "skgarden/mondrian/tree/_splitter.pyx":146
  * 
  *         for i in range(n_features):
  *             features[i] = i             # <<<<<<<<<<<<<<
@@ -2873,7 +3083,7 @@
     (__pyx_v_features[__pyx_v_i]) = __pyx_v_i;
   }
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":145
+  /* "skgarden/mondrian/tree/_splitter.pyx":148
  *             features[i] = i
  * 
  *         self.n_features = n_features             # <<<<<<<<<<<<<<
@@ -2882,25 +3092,25 @@
  */
   __pyx_v_self->n_features = __pyx_v_n_features;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":147
+  /* "skgarden/mondrian/tree/_splitter.pyx":150
  *         self.n_features = n_features
  * 
  *         safe_realloc(&self.feature_values, n_samples)             # <<<<<<<<<<<<<<
  *         safe_realloc(&self.constant_features, n_features)
  * 
  */
-  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->feature_values), __pyx_v_n_samples); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
+  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->feature_values), __pyx_v_n_samples); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":148
+  /* "skgarden/mondrian/tree/_splitter.pyx":151
  * 
  *         safe_realloc(&self.feature_values, n_samples)
  *         safe_realloc(&self.constant_features, n_features)             # <<<<<<<<<<<<<<
  * 
  *         self.y = <DOUBLE_t*> y.data
  */
-  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->constant_features), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
+  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->constant_features), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":150
+  /* "skgarden/mondrian/tree/_splitter.pyx":153
  *         safe_realloc(&self.constant_features, n_features)
  * 
  *         self.y = <DOUBLE_t*> y.data             # <<<<<<<<<<<<<<
@@ -2909,20 +3119,20 @@
  */
   __pyx_v_self->y = ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t *)__pyx_v_y->data);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":151
+  /* "skgarden/mondrian/tree/_splitter.pyx":154
  * 
  *         self.y = <DOUBLE_t*> y.data
  *         self.y_stride = <SIZE_t> y.strides[0] / <SIZE_t> y.itemsize             # <<<<<<<<<<<<<<
  * 
  *         self.sample_weight = sample_weight
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __pyx_v_self->y_stride = (((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t)(__pyx_v_y->strides[0])) / ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t)__pyx_t_8));
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":153
+  /* "skgarden/mondrian/tree/_splitter.pyx":156
  *         self.y_stride = <SIZE_t> y.strides[0] / <SIZE_t> y.itemsize
  * 
  *         self.sample_weight = sample_weight             # <<<<<<<<<<<<<<
@@ -2931,7 +3141,7 @@
  */
   __pyx_v_self->sample_weight = __pyx_v_sample_weight;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":154
+  /* "skgarden/mondrian/tree/_splitter.pyx":157
  * 
  *         self.sample_weight = sample_weight
  *         return 0             # <<<<<<<<<<<<<<
@@ -2941,7 +3151,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":87
+  /* "skgarden/mondrian/tree/_splitter.pyx":90
  *         pass
  * 
  *     cdef int init(self,             # <<<<<<<<<<<<<<
@@ -2972,7 +3182,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":156
+/* "skgarden/mondrian/tree/_splitter.pyx":159
  *         return 0
  * 
  *     cdef int node_reset(self, SIZE_t start, SIZE_t end,             # <<<<<<<<<<<<<<
@@ -2985,7 +3195,7 @@
   int __pyx_t_1;
   double __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":173
+  /* "skgarden/mondrian/tree/_splitter.pyx":176
  *         """
  * 
  *         self.start = start             # <<<<<<<<<<<<<<
@@ -2994,7 +3204,7 @@
  */
   __pyx_v_self->start = __pyx_v_start;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":174
+  /* "skgarden/mondrian/tree/_splitter.pyx":177
  * 
  *         self.start = start
  *         self.end = end             # <<<<<<<<<<<<<<
@@ -3003,16 +3213,16 @@
  */
   __pyx_v_self->end = __pyx_v_end;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":176
+  /* "skgarden/mondrian/tree/_splitter.pyx":179
  *         self.end = end
  * 
  *         self.criterion.init(self.y,             # <<<<<<<<<<<<<<
  *                             self.y_stride,
  *                             self.sample_weight,
  */
-  __pyx_t_1 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->criterion->__pyx_vtab)->init(__pyx_v_self->criterion, __pyx_v_self->y, __pyx_v_self->y_stride, __pyx_v_self->sample_weight, __pyx_v_self->weighted_n_samples, __pyx_v_self->samples, __pyx_v_start, __pyx_v_end); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 176, __pyx_L1_error)
+  __pyx_t_1 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->criterion->__pyx_vtab)->init(__pyx_v_self->criterion, __pyx_v_self->y, __pyx_v_self->y_stride, __pyx_v_self->sample_weight, __pyx_v_self->weighted_n_samples, __pyx_v_self->samples, __pyx_v_start, __pyx_v_end); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 179, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":184
+  /* "skgarden/mondrian/tree/_splitter.pyx":187
  *                             end)
  * 
  *         weighted_n_node_samples[0] = self.criterion.weighted_n_node_samples             # <<<<<<<<<<<<<<
@@ -3022,7 +3232,7 @@
   __pyx_t_2 = __pyx_v_self->criterion->weighted_n_node_samples;
   (__pyx_v_weighted_n_node_samples[0]) = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":185
+  /* "skgarden/mondrian/tree/_splitter.pyx":188
  * 
  *         weighted_n_node_samples[0] = self.criterion.weighted_n_node_samples
  *         return 0             # <<<<<<<<<<<<<<
@@ -3032,7 +3242,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":156
+  /* "skgarden/mondrian/tree/_splitter.pyx":159
  *         return 0
  * 
  *     cdef int node_reset(self, SIZE_t start, SIZE_t end,             # <<<<<<<<<<<<<<
@@ -3044,11 +3254,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.Splitter.node_reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -3056,7 +3266,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":187
+/* "skgarden/mondrian/tree/_splitter.pyx":190
  *         return 0
  * 
  *     cdef int node_split(self, double impurity, SplitRecord* split,             # <<<<<<<<<<<<<<
@@ -3072,7 +3282,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":199
+/* "skgarden/mondrian/tree/_splitter.pyx":202
  *         pass
  * 
  *     cdef void node_value(self, double* dest) nogil:             # <<<<<<<<<<<<<<
@@ -3082,7 +3292,7 @@
 
 static void __pyx_f_8skgarden_8mondrian_4tree_9_splitter_8Splitter_node_value(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self, double *__pyx_v_dest) {
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":202
+  /* "skgarden/mondrian/tree/_splitter.pyx":205
  *         """Copy the value of node samples[start:end] into dest."""
  * 
  *         self.criterion.node_value(dest)             # <<<<<<<<<<<<<<
@@ -3091,7 +3301,7 @@
  */
   ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->criterion->__pyx_vtab)->node_value(__pyx_v_self->criterion, __pyx_v_dest);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":199
+  /* "skgarden/mondrian/tree/_splitter.pyx":202
  *         pass
  * 
  *     cdef void node_value(self, double* dest) nogil:             # <<<<<<<<<<<<<<
@@ -3102,7 +3312,7 @@
   /* function exit code */
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":204
+/* "skgarden/mondrian/tree/_splitter.pyx":207
  *         self.criterion.node_value(dest)
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -3113,7 +3323,7 @@
 static double __pyx_f_8skgarden_8mondrian_4tree_9_splitter_8Splitter_node_impurity(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self) {
   double __pyx_r;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":207
+  /* "skgarden/mondrian/tree/_splitter.pyx":210
  *         """Return the impurity of the current node."""
  * 
  *         return self.criterion.node_impurity()             # <<<<<<<<<<<<<<
@@ -3123,7 +3333,7 @@
   __pyx_r = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->criterion->__pyx_vtab)->node_impurity(__pyx_v_self->criterion);
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":204
+  /* "skgarden/mondrian/tree/_splitter.pyx":207
  *         self.criterion.node_value(dest)
  * 
  *     cdef double node_impurity(self) nogil:             # <<<<<<<<<<<<<<
@@ -3136,7 +3346,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":209
+/* "skgarden/mondrian/tree/_splitter.pyx":212
  *         return self.criterion.node_impurity()
  * 
  *     cdef void set_bounds(self) nogil:             # <<<<<<<<<<<<<<
@@ -3204,7 +3414,7 @@
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__set__", 0);
-  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion))))) __PYX_ERR(1, 42, __pyx_L1_error)
+  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion))))) __PYX_ERR(2, 42, __pyx_L1_error)
   __pyx_t_1 = __pyx_v_value;
   __Pyx_INCREF(__pyx_t_1);
   __Pyx_GIVEREF(__pyx_t_1);
@@ -3281,7 +3491,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__get__", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -3316,7 +3526,7 @@
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_1;
   __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 43, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 43, __pyx_L1_error)
   __pyx_v_self->max_features = __pyx_t_1;
 
   /* function exit code */
@@ -3330,7 +3540,114 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":223
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_8__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
+
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 2, __pyx_L1_error)
+
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.Splitter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_10__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_8Splitter_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 4, __pyx_L1_error)
+
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.Splitter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_splitter.pyx":226
  *     cdef SIZE_t* sample_mask
  * 
  *     def __cinit__(self, Criterion criterion, object random_state):             # <<<<<<<<<<<<<<
@@ -3354,7 +3671,9 @@
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -3363,14 +3682,15 @@
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_criterion)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_random_state)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 223, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 226, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 223, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 226, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
       goto __pyx_L5_argtuple_error;
@@ -3383,13 +3703,13 @@
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 223, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 226, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.BaseDenseSplitter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return -1;
   __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_criterion), __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion, 1, "criterion", 0))) __PYX_ERR(0, 223, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_criterion), __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion, 1, "criterion", 0))) __PYX_ERR(0, 226, __pyx_L1_error)
   __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *)__pyx_v_self), __pyx_v_criterion, __pyx_v_random_state);
 
   /* function exit code */
@@ -3406,7 +3726,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__cinit__", 0);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":225
+  /* "skgarden/mondrian/tree/_splitter.pyx":228
  *     def __cinit__(self, Criterion criterion, object random_state):
  * 
  *         self.X = NULL             # <<<<<<<<<<<<<<
@@ -3415,7 +3735,7 @@
  */
   __pyx_v_self->X = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":226
+  /* "skgarden/mondrian/tree/_splitter.pyx":229
  * 
  *         self.X = NULL
  *         self.X_sample_stride = 0             # <<<<<<<<<<<<<<
@@ -3424,7 +3744,7 @@
  */
   __pyx_v_self->X_sample_stride = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":227
+  /* "skgarden/mondrian/tree/_splitter.pyx":230
  *         self.X = NULL
  *         self.X_sample_stride = 0
  *         self.X_feature_stride = 0             # <<<<<<<<<<<<<<
@@ -3433,7 +3753,7 @@
  */
   __pyx_v_self->X_feature_stride = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":228
+  /* "skgarden/mondrian/tree/_splitter.pyx":231
  *         self.X_sample_stride = 0
  *         self.X_feature_stride = 0
  *         self.X_idx_sorted_ptr = NULL             # <<<<<<<<<<<<<<
@@ -3442,7 +3762,7 @@
  */
   __pyx_v_self->X_idx_sorted_ptr = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":229
+  /* "skgarden/mondrian/tree/_splitter.pyx":232
  *         self.X_feature_stride = 0
  *         self.X_idx_sorted_ptr = NULL
  *         self.X_idx_sorted_stride = 0             # <<<<<<<<<<<<<<
@@ -3451,7 +3771,7 @@
  */
   __pyx_v_self->X_idx_sorted_stride = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":230
+  /* "skgarden/mondrian/tree/_splitter.pyx":233
  *         self.X_idx_sorted_ptr = NULL
  *         self.X_idx_sorted_stride = 0
  *         self.sample_mask = NULL             # <<<<<<<<<<<<<<
@@ -3460,7 +3780,7 @@
  */
   __pyx_v_self->sample_mask = NULL;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":223
+  /* "skgarden/mondrian/tree/_splitter.pyx":226
  *     cdef SIZE_t* sample_mask
  * 
  *     def __cinit__(self, Criterion criterion, object random_state):             # <<<<<<<<<<<<<<
@@ -3474,7 +3794,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":232
+/* "skgarden/mondrian/tree/_splitter.pyx":235
  *         self.sample_mask = NULL
  * 
  *     cdef int init(self,             # <<<<<<<<<<<<<<
@@ -3502,33 +3822,33 @@
   __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 232, __pyx_L1_error)
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 235, __pyx_L1_error)
   }
   __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_y.diminfo[1].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_y.diminfo[1].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[1];
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":244
+  /* "skgarden/mondrian/tree/_splitter.pyx":247
  * 
  *         # Call parent init
  *         Splitter.init(self, X, y, sample_weight)             # <<<<<<<<<<<<<<
  * 
  *         # Initialize X
  */
-  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter->init(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_self), __pyx_v_X, ((PyArrayObject *)__pyx_v_y), __pyx_v_sample_weight, NULL); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 244, __pyx_L1_error)
+  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter->init(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_self), __pyx_v_X, ((PyArrayObject *)__pyx_v_y), __pyx_v_sample_weight, NULL); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 247, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":247
+  /* "skgarden/mondrian/tree/_splitter.pyx":250
  * 
  *         # Initialize X
  *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
  * 
  *         self.X = <DTYPE_t*> X_ndarray.data
  */
-  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 247, __pyx_L1_error)
+  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 250, __pyx_L1_error)
   __pyx_t_2 = __pyx_v_X;
   __Pyx_INCREF(__pyx_t_2);
   __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_2);
   __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":249
+  /* "skgarden/mondrian/tree/_splitter.pyx":252
  *         cdef np.ndarray X_ndarray = X
  * 
  *         self.X = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
@@ -3537,47 +3857,47 @@
  */
   __pyx_v_self->X = ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":250
+  /* "skgarden/mondrian/tree/_splitter.pyx":253
  * 
  *         self.X = <DTYPE_t*> X_ndarray.data
  *         self.X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         self.X_feature_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         return 0
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_5 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_5 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   __pyx_v_self->X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t)__pyx_t_4) / ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t)__pyx_t_5));
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":251
+  /* "skgarden/mondrian/tree/_splitter.pyx":254
  *         self.X = <DTYPE_t*> X_ndarray.data
  *         self.X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  *         self.X_feature_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         return 0
  * 
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_5 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 251, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_5 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 251, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_v_self->X_feature_stride = (((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t)__pyx_t_5) / ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t)__pyx_t_4));
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":252
+  /* "skgarden/mondrian/tree/_splitter.pyx":255
  *         self.X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  *         self.X_feature_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         return 0             # <<<<<<<<<<<<<<
@@ -3587,7 +3907,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":232
+  /* "skgarden/mondrian/tree/_splitter.pyx":235
  *         self.sample_mask = NULL
  * 
  *     cdef int init(self,             # <<<<<<<<<<<<<<
@@ -3616,17 +3936,124 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":258
- *     """Splitter that samples a tree from a mondrian process."""
- * 
- *     def __dealloc__(self):             # <<<<<<<<<<<<<<
- *         free(self.lower_bounds)
- *         free(self.upper_bounds)
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
  */
 
 /* Python wrapper */
-static void __pyx_pw_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
-static void __pyx_pw_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_1__dealloc__(PyObject *__pyx_v_self) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_2__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
+
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 2, __pyx_L1_error)
+
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.BaseDenseSplitter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_4__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 4, __pyx_L1_error)
+
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.BaseDenseSplitter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_splitter.pyx":261
+ *     """Splitter that samples a tree from a mondrian process."""
+ * 
+ *     def __dealloc__(self):             # <<<<<<<<<<<<<<
+ *         free(self.lower_bounds)
+ *         free(self.upper_bounds)
+ */
+
+/* Python wrapper */
+static void __pyx_pw_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
+static void __pyx_pw_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_1__dealloc__(PyObject *__pyx_v_self) {
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
   __pyx_pf_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter___dealloc__(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter *)__pyx_v_self));
@@ -3639,7 +4066,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__dealloc__", 0);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":259
+  /* "skgarden/mondrian/tree/_splitter.pyx":262
  * 
  *     def __dealloc__(self):
  *         free(self.lower_bounds)             # <<<<<<<<<<<<<<
@@ -3648,7 +4075,7 @@
  */
   free(__pyx_v_self->__pyx_base.__pyx_base.lower_bounds);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":260
+  /* "skgarden/mondrian/tree/_splitter.pyx":263
  *     def __dealloc__(self):
  *         free(self.lower_bounds)
  *         free(self.upper_bounds)             # <<<<<<<<<<<<<<
@@ -3657,7 +4084,7 @@
  */
   free(__pyx_v_self->__pyx_base.__pyx_base.upper_bounds);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":258
+  /* "skgarden/mondrian/tree/_splitter.pyx":261
  *     """Splitter that samples a tree from a mondrian process."""
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -3669,7 +4096,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":262
+/* "skgarden/mondrian/tree/_splitter.pyx":265
  *         free(self.upper_bounds)
  * 
  *     def __reduce__(self):             # <<<<<<<<<<<<<<
@@ -3699,7 +4126,7 @@
   PyObject *__pyx_t_4 = NULL;
   __Pyx_RefNannySetupContext("__reduce__", 0);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":263
+  /* "skgarden/mondrian/tree/_splitter.pyx":266
  * 
  *     def __reduce__(self):
  *         return (MondrianSplitter, (self.criterion,             # <<<<<<<<<<<<<<
@@ -3708,14 +4135,14 @@
  */
   __Pyx_XDECREF(__pyx_r);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":264
+  /* "skgarden/mondrian/tree/_splitter.pyx":267
  *     def __reduce__(self):
  *         return (MondrianSplitter, (self.criterion,
  *                                    self.random_state), self.__getstate__())             # <<<<<<<<<<<<<<
  * 
  *     cdef void set_bounds(self) nogil:
  */
-  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
+  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.criterion));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.criterion));
@@ -3723,7 +4150,7 @@
   __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.random_state);
   __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.random_state);
   PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->__pyx_base.__pyx_base.random_state);
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __pyx_t_4 = NULL;
   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
@@ -3736,22 +4163,22 @@
     }
   }
   if (__pyx_t_4) {
-    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   } else {
-    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
   }
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":263
+  /* "skgarden/mondrian/tree/_splitter.pyx":266
  * 
  *     def __reduce__(self):
  *         return (MondrianSplitter, (self.criterion,             # <<<<<<<<<<<<<<
  *                                    self.random_state), self.__getstate__())
  * 
  */
-  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
+  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_INCREF(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter));
   __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter));
@@ -3766,7 +4193,7 @@
   __pyx_t_3 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":262
+  /* "skgarden/mondrian/tree/_splitter.pyx":265
  *         free(self.upper_bounds)
  * 
  *     def __reduce__(self):             # <<<<<<<<<<<<<<
@@ -3788,7 +4215,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":266
+/* "skgarden/mondrian/tree/_splitter.pyx":269
  *                                    self.random_state), self.__getstate__())
  * 
  *     cdef void set_bounds(self) nogil:             # <<<<<<<<<<<<<<
@@ -3817,7 +4244,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_6;
   int __pyx_t_7;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":268
+  /* "skgarden/mondrian/tree/_splitter.pyx":271
  *     cdef void set_bounds(self) nogil:
  *         """Sets lower bounds and upper bounds of every feature."""
  *         cdef SIZE_t n_features = self.n_features             # <<<<<<<<<<<<<<
@@ -3827,25 +4254,25 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.n_features;
   __pyx_v_n_features = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":270
+  /* "skgarden/mondrian/tree/_splitter.pyx":273
  *         cdef SIZE_t n_features = self.n_features
  * 
  *         safe_realloc(&self.lower_bounds, n_features)             # <<<<<<<<<<<<<<
  *         safe_realloc(&self.upper_bounds, n_features)
  *         cdef DTYPE_t upper_bound
  */
-  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->__pyx_base.__pyx_base.lower_bounds), __pyx_v_n_features); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 270, __pyx_L1_error)
+  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->__pyx_base.__pyx_base.lower_bounds), __pyx_v_n_features); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 273, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":271
+  /* "skgarden/mondrian/tree/_splitter.pyx":274
  * 
  *         safe_realloc(&self.lower_bounds, n_features)
  *         safe_realloc(&self.upper_bounds, n_features)             # <<<<<<<<<<<<<<
  *         cdef DTYPE_t upper_bound
  *         cdef DTYPE_t lower_bound
  */
-  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->__pyx_base.__pyx_base.upper_bounds), __pyx_v_n_features); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 271, __pyx_L1_error)
+  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->__pyx_base.__pyx_base.upper_bounds), __pyx_v_n_features); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 274, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":274
+  /* "skgarden/mondrian/tree/_splitter.pyx":277
  *         cdef DTYPE_t upper_bound
  *         cdef DTYPE_t lower_bound
  *         cdef DTYPE_t* X = self.X             # <<<<<<<<<<<<<<
@@ -3855,7 +4282,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.X;
   __pyx_v_X = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":276
+  /* "skgarden/mondrian/tree/_splitter.pyx":279
  *         cdef DTYPE_t* X = self.X
  * 
  *         cdef SIZE_t* samples = self.samples             # <<<<<<<<<<<<<<
@@ -3865,7 +4292,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base.samples;
   __pyx_v_samples = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":277
+  /* "skgarden/mondrian/tree/_splitter.pyx":280
  * 
  *         cdef SIZE_t* samples = self.samples
  *         cdef SIZE_t X_sample_stride = self.X_sample_stride             # <<<<<<<<<<<<<<
@@ -3875,7 +4302,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.X_sample_stride;
   __pyx_v_X_sample_stride = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":278
+  /* "skgarden/mondrian/tree/_splitter.pyx":281
  *         cdef SIZE_t* samples = self.samples
  *         cdef SIZE_t X_sample_stride = self.X_sample_stride
  *         cdef SIZE_t X_feature_stride = self.X_feature_stride             # <<<<<<<<<<<<<<
@@ -3885,7 +4312,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.X_feature_stride;
   __pyx_v_X_feature_stride = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":282
+  /* "skgarden/mondrian/tree/_splitter.pyx":285
  *         cdef DTYPE_t current_f
  *         cdef SIZE_t p
  *         cdef SIZE_t start = self.start             # <<<<<<<<<<<<<<
@@ -3895,7 +4322,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.start;
   __pyx_v_start = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":283
+  /* "skgarden/mondrian/tree/_splitter.pyx":286
  *         cdef SIZE_t p
  *         cdef SIZE_t start = self.start
  *         cdef SIZE_t end = self.end             # <<<<<<<<<<<<<<
@@ -3905,7 +4332,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.end;
   __pyx_v_end = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":285
+  /* "skgarden/mondrian/tree/_splitter.pyx":288
  *         cdef SIZE_t end = self.end
  * 
  *         for f_j in range(n_features):             # <<<<<<<<<<<<<<
@@ -3916,7 +4343,7 @@
   for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
     __pyx_v_f_j = __pyx_t_4;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":286
+    /* "skgarden/mondrian/tree/_splitter.pyx":289
  * 
  *         for f_j in range(n_features):
  *             upper_bound = -INFINITY             # <<<<<<<<<<<<<<
@@ -3925,7 +4352,7 @@
  */
     __pyx_v_upper_bound = (-__pyx_v_8skgarden_8mondrian_4tree_9_splitter_INFINITY);
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":287
+    /* "skgarden/mondrian/tree/_splitter.pyx":290
  *         for f_j in range(n_features):
  *             upper_bound = -INFINITY
  *             lower_bound = INFINITY             # <<<<<<<<<<<<<<
@@ -3934,7 +4361,7 @@
  */
     __pyx_v_lower_bound = __pyx_v_8skgarden_8mondrian_4tree_9_splitter_INFINITY;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":289
+    /* "skgarden/mondrian/tree/_splitter.pyx":292
  *             lower_bound = INFINITY
  * 
  *             for p in range(start, end):             # <<<<<<<<<<<<<<
@@ -3945,7 +4372,7 @@
     for (__pyx_t_6 = __pyx_v_start; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
       __pyx_v_p = __pyx_t_6;
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":290
+      /* "skgarden/mondrian/tree/_splitter.pyx":293
  * 
  *             for p in range(start, end):
  *                 current_f = X[samples[p]*X_sample_stride + f_j*X_feature_stride]             # <<<<<<<<<<<<<<
@@ -3954,7 +4381,7 @@
  */
       __pyx_v_current_f = (__pyx_v_X[(((__pyx_v_samples[__pyx_v_p]) * __pyx_v_X_sample_stride) + (__pyx_v_f_j * __pyx_v_X_feature_stride))]);
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":291
+      /* "skgarden/mondrian/tree/_splitter.pyx":294
  *             for p in range(start, end):
  *                 current_f = X[samples[p]*X_sample_stride + f_j*X_feature_stride]
  *                 if current_f <= lower_bound:             # <<<<<<<<<<<<<<
@@ -3964,7 +4391,7 @@
       __pyx_t_7 = ((__pyx_v_current_f <= __pyx_v_lower_bound) != 0);
       if (__pyx_t_7) {
 
-        /* "skgarden/mondrian/tree/_splitter.pyx":292
+        /* "skgarden/mondrian/tree/_splitter.pyx":295
  *                 current_f = X[samples[p]*X_sample_stride + f_j*X_feature_stride]
  *                 if current_f <= lower_bound:
  *                     lower_bound = current_f             # <<<<<<<<<<<<<<
@@ -3973,7 +4400,7 @@
  */
         __pyx_v_lower_bound = __pyx_v_current_f;
 
-        /* "skgarden/mondrian/tree/_splitter.pyx":291
+        /* "skgarden/mondrian/tree/_splitter.pyx":294
  *             for p in range(start, end):
  *                 current_f = X[samples[p]*X_sample_stride + f_j*X_feature_stride]
  *                 if current_f <= lower_bound:             # <<<<<<<<<<<<<<
@@ -3982,7 +4409,7 @@
  */
       }
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":293
+      /* "skgarden/mondrian/tree/_splitter.pyx":296
  *                 if current_f <= lower_bound:
  *                     lower_bound = current_f
  *                 if current_f > upper_bound:             # <<<<<<<<<<<<<<
@@ -3992,7 +4419,7 @@
       __pyx_t_7 = ((__pyx_v_current_f > __pyx_v_upper_bound) != 0);
       if (__pyx_t_7) {
 
-        /* "skgarden/mondrian/tree/_splitter.pyx":294
+        /* "skgarden/mondrian/tree/_splitter.pyx":297
  *                     lower_bound = current_f
  *                 if current_f > upper_bound:
  *                     upper_bound = current_f             # <<<<<<<<<<<<<<
@@ -4001,7 +4428,7 @@
  */
         __pyx_v_upper_bound = __pyx_v_current_f;
 
-        /* "skgarden/mondrian/tree/_splitter.pyx":293
+        /* "skgarden/mondrian/tree/_splitter.pyx":296
  *                 if current_f <= lower_bound:
  *                     lower_bound = current_f
  *                 if current_f > upper_bound:             # <<<<<<<<<<<<<<
@@ -4011,7 +4438,7 @@
       }
     }
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":295
+    /* "skgarden/mondrian/tree/_splitter.pyx":298
  *                 if current_f > upper_bound:
  *                     upper_bound = current_f
  *             self.upper_bounds[f_j] = upper_bound             # <<<<<<<<<<<<<<
@@ -4020,7 +4447,7 @@
  */
     (__pyx_v_self->__pyx_base.__pyx_base.upper_bounds[__pyx_v_f_j]) = __pyx_v_upper_bound;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":296
+    /* "skgarden/mondrian/tree/_splitter.pyx":299
  *                     upper_bound = current_f
  *             self.upper_bounds[f_j] = upper_bound
  *             self.lower_bounds[f_j] = lower_bound             # <<<<<<<<<<<<<<
@@ -4030,7 +4457,7 @@
     (__pyx_v_self->__pyx_base.__pyx_base.lower_bounds[__pyx_v_f_j]) = __pyx_v_lower_bound;
   }
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":266
+  /* "skgarden/mondrian/tree/_splitter.pyx":269
  *                                    self.random_state), self.__getstate__())
  * 
  *     cdef void set_bounds(self) nogil:             # <<<<<<<<<<<<<<
@@ -4041,11 +4468,11 @@
   /* function exit code */
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_WriteUnraisable("skgarden.mondrian.tree._splitter.MondrianSplitter.set_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
+  __Pyx_WriteUnraisable("skgarden.mondrian.tree._splitter.MondrianSplitter.set_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
   __pyx_L0:;
 }
 
-/* "skgarden/mondrian/tree/_splitter.pyx":298
+/* "skgarden/mondrian/tree/_splitter.pyx":301
  *             self.lower_bounds[f_j] = lower_bound
  * 
  *     cdef int node_split(self, double impurity, SplitRecord* split,             # <<<<<<<<<<<<<<
@@ -4072,19 +4499,16 @@
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t __pyx_v_rate;
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t __pyx_v_upper_bound;
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t __pyx_v_lower_bound;
-  __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t *__pyx_v_cum_diff;
-  __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t __pyx_v_search;
+  __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t *__pyx_v_pvals;
   int __pyx_r;
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t *__pyx_t_1;
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_2;
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t *__pyx_t_3;
   __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_4;
   int __pyx_t_5;
-  __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_6;
-  int __pyx_t_7;
-  int __pyx_t_8;
+  int __pyx_t_6;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":326
+  /* "skgarden/mondrian/tree/_splitter.pyx":329
  *           http://www.gatsby.ucl.ac.uk/~balaji/balaji-phd-thesis.pdf
  *         """
  *         cdef SIZE_t* samples = self.samples             # <<<<<<<<<<<<<<
@@ -4094,7 +4518,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.samples;
   __pyx_v_samples = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":327
+  /* "skgarden/mondrian/tree/_splitter.pyx":330
  *         """
  *         cdef SIZE_t* samples = self.samples
  *         cdef SIZE_t start = self.start             # <<<<<<<<<<<<<<
@@ -4104,7 +4528,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.__pyx_base.start;
   __pyx_v_start = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":328
+  /* "skgarden/mondrian/tree/_splitter.pyx":331
  *         cdef SIZE_t* samples = self.samples
  *         cdef SIZE_t start = self.start
  *         cdef SIZE_t end = self.end             # <<<<<<<<<<<<<<
@@ -4114,7 +4538,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.__pyx_base.end;
   __pyx_v_end = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":330
+  /* "skgarden/mondrian/tree/_splitter.pyx":333
  *         cdef SIZE_t end = self.end
  * 
  *         cdef SIZE_t* features = self.features             # <<<<<<<<<<<<<<
@@ -4124,7 +4548,7 @@
   __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.features;
   __pyx_v_features = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":331
+  /* "skgarden/mondrian/tree/_splitter.pyx":334
  * 
  *         cdef SIZE_t* features = self.features
  *         cdef SIZE_t n_features = self.n_features             # <<<<<<<<<<<<<<
@@ -4134,7 +4558,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.__pyx_base.n_features;
   __pyx_v_n_features = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":333
+  /* "skgarden/mondrian/tree/_splitter.pyx":336
  *         cdef SIZE_t n_features = self.n_features
  * 
  *         cdef DTYPE_t* X = self.X             # <<<<<<<<<<<<<<
@@ -4144,7 +4568,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.X;
   __pyx_v_X = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":334
+  /* "skgarden/mondrian/tree/_splitter.pyx":337
  * 
  *         cdef DTYPE_t* X = self.X
  *         cdef DTYPE_t* Xf = self.feature_values             # <<<<<<<<<<<<<<
@@ -4154,7 +4578,7 @@
   __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base.feature_values;
   __pyx_v_Xf = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":336
+  /* "skgarden/mondrian/tree/_splitter.pyx":339
  *         cdef DTYPE_t* Xf = self.feature_values
  * 
  *         cdef SIZE_t X_sample_stride = self.X_sample_stride             # <<<<<<<<<<<<<<
@@ -4164,7 +4588,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.X_sample_stride;
   __pyx_v_X_sample_stride = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":337
+  /* "skgarden/mondrian/tree/_splitter.pyx":340
  * 
  *         cdef SIZE_t X_sample_stride = self.X_sample_stride
  *         cdef SIZE_t X_feature_stride = self.X_feature_stride             # <<<<<<<<<<<<<<
@@ -4174,7 +4598,7 @@
   __pyx_t_2 = __pyx_v_self->__pyx_base.X_feature_stride;
   __pyx_v_X_feature_stride = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":338
+  /* "skgarden/mondrian/tree/_splitter.pyx":341
  *         cdef SIZE_t X_sample_stride = self.X_sample_stride
  *         cdef SIZE_t X_feature_stride = self.X_feature_stride
  *         cdef UINT32_t* random_state = &self.rand_r_state             # <<<<<<<<<<<<<<
@@ -4183,7 +4607,7 @@
  */
   __pyx_v_random_state = (&__pyx_v_self->__pyx_base.__pyx_base.rand_r_state);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":345
+  /* "skgarden/mondrian/tree/_splitter.pyx":348
  *         cdef SIZE_t feature_stride
  *         cdef SIZE_t partition_end
  *         cdef DTYPE_t rate = 0.0             # <<<<<<<<<<<<<<
@@ -4192,16 +4616,16 @@
  */
   __pyx_v_rate = 0.0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":348
+  /* "skgarden/mondrian/tree/_splitter.pyx":351
  *         cdef DTYPE_t upper_bound
  *         cdef DTYPE_t lower_bound
- *         cdef DTYPE_t* cum_diff = <DTYPE_t*> malloc(n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* pvals = <DTYPE_t*> malloc(n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
  *         cdef DTYPE_t search
  * 
  */
-  __pyx_v_cum_diff = ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t *)malloc((__pyx_v_n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t)))));
+  __pyx_v_pvals = ((__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t *)malloc((__pyx_v_n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_9_splitter_DTYPE_t)))));
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":351
+  /* "skgarden/mondrian/tree/_splitter.pyx":354
  *         cdef DTYPE_t search
  * 
  *         self.set_bounds()             # <<<<<<<<<<<<<<
@@ -4210,7 +4634,7 @@
  */
   ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.set_bounds(((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":353
+  /* "skgarden/mondrian/tree/_splitter.pyx":356
  *         self.set_bounds()
  *         # Sample E from sum(u_{d} - l_{d})
  *         for f_j in range(n_features):             # <<<<<<<<<<<<<<
@@ -4221,190 +4645,62 @@
   for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
     __pyx_v_f_j = __pyx_t_4;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":354
+    /* "skgarden/mondrian/tree/_splitter.pyx":357
  *         # Sample E from sum(u_{d} - l_{d})
  *         for f_j in range(n_features):
  *             upper_bound = self.upper_bounds[f_j]             # <<<<<<<<<<<<<<
  *             lower_bound = self.lower_bounds[f_j]
- *             cum_diff[f_j] = upper_bound - lower_bound
+ *             pvals[f_j] = upper_bound - lower_bound
  */
     __pyx_v_upper_bound = (__pyx_v_self->__pyx_base.__pyx_base.upper_bounds[__pyx_v_f_j]);
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":355
+    /* "skgarden/mondrian/tree/_splitter.pyx":358
  *         for f_j in range(n_features):
  *             upper_bound = self.upper_bounds[f_j]
  *             lower_bound = self.lower_bounds[f_j]             # <<<<<<<<<<<<<<
- *             cum_diff[f_j] = upper_bound - lower_bound
- * 
+ *             pvals[f_j] = upper_bound - lower_bound
+ *             rate += (upper_bound - lower_bound)
  */
     __pyx_v_lower_bound = (__pyx_v_self->__pyx_base.__pyx_base.lower_bounds[__pyx_v_f_j]);
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":356
+    /* "skgarden/mondrian/tree/_splitter.pyx":359
  *             upper_bound = self.upper_bounds[f_j]
  *             lower_bound = self.lower_bounds[f_j]
- *             cum_diff[f_j] = upper_bound - lower_bound             # <<<<<<<<<<<<<<
- * 
- *             if f_j != 0:
- */
-    (__pyx_v_cum_diff[__pyx_v_f_j]) = (__pyx_v_upper_bound - __pyx_v_lower_bound);
-
-    /* "skgarden/mondrian/tree/_splitter.pyx":358
- *             cum_diff[f_j] = upper_bound - lower_bound
- * 
- *             if f_j != 0:             # <<<<<<<<<<<<<<
- *                 cum_diff[f_j] += cum_diff[f_j - 1]
- *             rate += (upper_bound - lower_bound)
- */
-    __pyx_t_5 = ((__pyx_v_f_j != 0) != 0);
-    if (__pyx_t_5) {
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":359
- * 
- *             if f_j != 0:
- *                 cum_diff[f_j] += cum_diff[f_j - 1]             # <<<<<<<<<<<<<<
+ *             pvals[f_j] = upper_bound - lower_bound             # <<<<<<<<<<<<<<
  *             rate += (upper_bound - lower_bound)
  * 
  */
-      __pyx_t_6 = __pyx_v_f_j;
-      (__pyx_v_cum_diff[__pyx_t_6]) = ((__pyx_v_cum_diff[__pyx_t_6]) + (__pyx_v_cum_diff[(__pyx_v_f_j - 1)]));
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":358
- *             cum_diff[f_j] = upper_bound - lower_bound
- * 
- *             if f_j != 0:             # <<<<<<<<<<<<<<
- *                 cum_diff[f_j] += cum_diff[f_j - 1]
- *             rate += (upper_bound - lower_bound)
- */
-    }
+    (__pyx_v_pvals[__pyx_v_f_j]) = (__pyx_v_upper_bound - __pyx_v_lower_bound);
 
     /* "skgarden/mondrian/tree/_splitter.pyx":360
- *             if f_j != 0:
- *                 cum_diff[f_j] += cum_diff[f_j - 1]
+ *             lower_bound = self.lower_bounds[f_j]
+ *             pvals[f_j] = upper_bound - lower_bound
  *             rate += (upper_bound - lower_bound)             # <<<<<<<<<<<<<<
  * 
- *         # Sample time of split to be -ln(U) / rate.
+ *         split.E = rand_exponential(rate, random_state)
  */
     __pyx_v_rate = (__pyx_v_rate + (__pyx_v_upper_bound - __pyx_v_lower_bound));
   }
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":363
- * 
- *         # Sample time of split to be -ln(U) / rate.
- *         split.E = -ln(rand_uniform(0.0, 1.0, random_state)) / rate             # <<<<<<<<<<<<<<
- * 
- *         # Sample dimension delta with a probability proportional to (u_d - l_d)
- */
-  __pyx_v_split->E = ((-log(__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(0.0, 1.0, __pyx_v_random_state))) / __pyx_v_rate);
-
-  /* "skgarden/mondrian/tree/_splitter.pyx":366
+  /* "skgarden/mondrian/tree/_splitter.pyx":362
+ *             rate += (upper_bound - lower_bound)
  * 
+ *         split.E = rand_exponential(rate, random_state)             # <<<<<<<<<<<<<<
  *         # Sample dimension delta with a probability proportional to (u_d - l_d)
- *         search = rand_uniform(0.0, cum_diff[n_features-1], random_state)             # <<<<<<<<<<<<<<
- *         for f_j in range(n_features):
- *             if f_j == 0:
+ *         split.feature = rand_multinomial(pvals, n_features, random_state)
  */
-  __pyx_v_search = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(0.0, (__pyx_v_cum_diff[(__pyx_v_n_features - 1)]), __pyx_v_random_state);
+  __pyx_v_split->E = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential(__pyx_v_rate, __pyx_v_random_state);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":367
+  /* "skgarden/mondrian/tree/_splitter.pyx":364
+ *         split.E = rand_exponential(rate, random_state)
  *         # Sample dimension delta with a probability proportional to (u_d - l_d)
- *         search = rand_uniform(0.0, cum_diff[n_features-1], random_state)
- *         for f_j in range(n_features):             # <<<<<<<<<<<<<<
- *             if f_j == 0:
- *                 lower_bound = 0.0
- */
-  __pyx_t_2 = __pyx_v_n_features;
-  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
-    __pyx_v_f_j = __pyx_t_4;
-
-    /* "skgarden/mondrian/tree/_splitter.pyx":368
- *         search = rand_uniform(0.0, cum_diff[n_features-1], random_state)
- *         for f_j in range(n_features):
- *             if f_j == 0:             # <<<<<<<<<<<<<<
- *                 lower_bound = 0.0
- *             else:
- */
-    __pyx_t_5 = ((__pyx_v_f_j == 0) != 0);
-    if (__pyx_t_5) {
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":369
- *         for f_j in range(n_features):
- *             if f_j == 0:
- *                 lower_bound = 0.0             # <<<<<<<<<<<<<<
- *             else:
- *                 lower_bound = cum_diff[f_j - 1]
- */
-      __pyx_v_lower_bound = 0.0;
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":368
- *         search = rand_uniform(0.0, cum_diff[n_features-1], random_state)
- *         for f_j in range(n_features):
- *             if f_j == 0:             # <<<<<<<<<<<<<<
- *                 lower_bound = 0.0
- *             else:
- */
-      goto __pyx_L8;
-    }
-
-    /* "skgarden/mondrian/tree/_splitter.pyx":371
- *                 lower_bound = 0.0
- *             else:
- *                 lower_bound = cum_diff[f_j - 1]             # <<<<<<<<<<<<<<
- *             if cum_diff[f_j] >= search and lower_bound < search:
- *                 split.feature = f_j
- */
-    /*else*/ {
-      __pyx_v_lower_bound = (__pyx_v_cum_diff[(__pyx_v_f_j - 1)]);
-    }
-    __pyx_L8:;
-
-    /* "skgarden/mondrian/tree/_splitter.pyx":372
- *             else:
- *                 lower_bound = cum_diff[f_j - 1]
- *             if cum_diff[f_j] >= search and lower_bound < search:             # <<<<<<<<<<<<<<
- *                 split.feature = f_j
- *                 break
- */
-    __pyx_t_7 = (((__pyx_v_cum_diff[__pyx_v_f_j]) >= __pyx_v_search) != 0);
-    if (__pyx_t_7) {
-    } else {
-      __pyx_t_5 = __pyx_t_7;
-      goto __pyx_L10_bool_binop_done;
-    }
-    __pyx_t_7 = ((__pyx_v_lower_bound < __pyx_v_search) != 0);
-    __pyx_t_5 = __pyx_t_7;
-    __pyx_L10_bool_binop_done:;
-    if (__pyx_t_5) {
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":373
- *                 lower_bound = cum_diff[f_j - 1]
- *             if cum_diff[f_j] >= search and lower_bound < search:
- *                 split.feature = f_j             # <<<<<<<<<<<<<<
- *                 break
- * 
- */
-      __pyx_v_split->feature = __pyx_v_f_j;
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":374
- *             if cum_diff[f_j] >= search and lower_bound < search:
- *                 split.feature = f_j
- *                 break             # <<<<<<<<<<<<<<
+ *         split.feature = rand_multinomial(pvals, n_features, random_state)             # <<<<<<<<<<<<<<
  * 
  *         # Sample location xi uniformly between (l_d[delta], u_d[delta])
  */
-      goto __pyx_L7_break;
-
-      /* "skgarden/mondrian/tree/_splitter.pyx":372
- *             else:
- *                 lower_bound = cum_diff[f_j - 1]
- *             if cum_diff[f_j] >= search and lower_bound < search:             # <<<<<<<<<<<<<<
- *                 split.feature = f_j
- *                 break
- */
-    }
-  }
-  __pyx_L7_break:;
+  __pyx_v_split->feature = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial(__pyx_v_pvals, __pyx_v_n_features, __pyx_v_random_state);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":377
+  /* "skgarden/mondrian/tree/_splitter.pyx":367
  * 
  *         # Sample location xi uniformly between (l_d[delta], u_d[delta])
  *         split.threshold = rand_uniform(             # <<<<<<<<<<<<<<
@@ -4413,7 +4709,7 @@
  */
   __pyx_v_split->threshold = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform((__pyx_v_self->__pyx_base.__pyx_base.lower_bounds[__pyx_v_split->feature]), (__pyx_v_self->__pyx_base.__pyx_base.upper_bounds[__pyx_v_split->feature]), __pyx_v_random_state);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":383
+  /* "skgarden/mondrian/tree/_splitter.pyx":373
  * 
  *         # Reorganize into samples[start:best.pos] + samples[best.pos:end]
  *         feature_stride = X_feature_stride * split.feature             # <<<<<<<<<<<<<<
@@ -4422,7 +4718,7 @@
  */
   __pyx_v_feature_stride = (__pyx_v_X_feature_stride * __pyx_v_split->feature);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":384
+  /* "skgarden/mondrian/tree/_splitter.pyx":374
  *         # Reorganize into samples[start:best.pos] + samples[best.pos:end]
  *         feature_stride = X_feature_stride * split.feature
  *         partition_end = end             # <<<<<<<<<<<<<<
@@ -4431,7 +4727,7 @@
  */
   __pyx_v_partition_end = __pyx_v_end;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":385
+  /* "skgarden/mondrian/tree/_splitter.pyx":375
  *         feature_stride = X_feature_stride * split.feature
  *         partition_end = end
  *         p = start             # <<<<<<<<<<<<<<
@@ -4440,7 +4736,7 @@
  */
   __pyx_v_p = __pyx_v_start;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":386
+  /* "skgarden/mondrian/tree/_splitter.pyx":376
  *         partition_end = end
  *         p = start
  *         while p < partition_end:             # <<<<<<<<<<<<<<
@@ -4451,7 +4747,7 @@
     __pyx_t_5 = ((__pyx_v_p < __pyx_v_partition_end) != 0);
     if (!__pyx_t_5) break;
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":387
+    /* "skgarden/mondrian/tree/_splitter.pyx":377
  *         p = start
  *         while p < partition_end:
  *             if X[X_sample_stride * samples[p] + feature_stride] <= split.threshold:             # <<<<<<<<<<<<<<
@@ -4461,7 +4757,7 @@
     __pyx_t_5 = (((__pyx_v_X[((__pyx_v_X_sample_stride * (__pyx_v_samples[__pyx_v_p])) + __pyx_v_feature_stride)]) <= __pyx_v_split->threshold) != 0);
     if (__pyx_t_5) {
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":388
+      /* "skgarden/mondrian/tree/_splitter.pyx":378
  *         while p < partition_end:
  *             if X[X_sample_stride * samples[p] + feature_stride] <= split.threshold:
  *                 p += 1             # <<<<<<<<<<<<<<
@@ -4470,17 +4766,17 @@
  */
       __pyx_v_p = (__pyx_v_p + 1);
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":387
+      /* "skgarden/mondrian/tree/_splitter.pyx":377
  *         p = start
  *         while p < partition_end:
  *             if X[X_sample_stride * samples[p] + feature_stride] <= split.threshold:             # <<<<<<<<<<<<<<
  *                 p += 1
  *             else:
  */
-      goto __pyx_L14;
+      goto __pyx_L7;
     }
 
-    /* "skgarden/mondrian/tree/_splitter.pyx":390
+    /* "skgarden/mondrian/tree/_splitter.pyx":380
  *                 p += 1
  *             else:
  *                 partition_end -= 1             # <<<<<<<<<<<<<<
@@ -4490,7 +4786,7 @@
     /*else*/ {
       __pyx_v_partition_end = (__pyx_v_partition_end - 1);
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":391
+      /* "skgarden/mondrian/tree/_splitter.pyx":381
  *             else:
  *                 partition_end -= 1
  *                 tmp = samples[partition_end]             # <<<<<<<<<<<<<<
@@ -4499,7 +4795,7 @@
  */
       __pyx_v_tmp = (__pyx_v_samples[__pyx_v_partition_end]);
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":392
+      /* "skgarden/mondrian/tree/_splitter.pyx":382
  *                 partition_end -= 1
  *                 tmp = samples[partition_end]
  *                 samples[partition_end] = samples[p]             # <<<<<<<<<<<<<<
@@ -4508,7 +4804,7 @@
  */
       (__pyx_v_samples[__pyx_v_partition_end]) = (__pyx_v_samples[__pyx_v_p]);
 
-      /* "skgarden/mondrian/tree/_splitter.pyx":393
+      /* "skgarden/mondrian/tree/_splitter.pyx":383
  *                 tmp = samples[partition_end]
  *                 samples[partition_end] = samples[p]
  *                 samples[p] = tmp             # <<<<<<<<<<<<<<
@@ -4517,10 +4813,10 @@
  */
       (__pyx_v_samples[__pyx_v_p]) = __pyx_v_tmp;
     }
-    __pyx_L14:;
+    __pyx_L7:;
   }
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":395
+  /* "skgarden/mondrian/tree/_splitter.pyx":385
  *                 samples[p] = tmp
  * 
  *         split.pos = p             # <<<<<<<<<<<<<<
@@ -4529,50 +4825,50 @@
  */
   __pyx_v_split->pos = __pyx_v_p;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":396
+  /* "skgarden/mondrian/tree/_splitter.pyx":386
  * 
  *         split.pos = p
  *         self.criterion.reset()             # <<<<<<<<<<<<<<
  *         self.criterion.update(split.pos)
  *         self.criterion.children_impurity(&split.impurity_left,
  */
-  __pyx_t_8 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->__pyx_base.__pyx_base.criterion->__pyx_vtab)->reset(__pyx_v_self->__pyx_base.__pyx_base.criterion); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 396, __pyx_L1_error)
+  __pyx_t_6 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->__pyx_base.__pyx_base.criterion->__pyx_vtab)->reset(__pyx_v_self->__pyx_base.__pyx_base.criterion); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 386, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":397
+  /* "skgarden/mondrian/tree/_splitter.pyx":387
  *         split.pos = p
  *         self.criterion.reset()
  *         self.criterion.update(split.pos)             # <<<<<<<<<<<<<<
  *         self.criterion.children_impurity(&split.impurity_left,
  *                                          &split.impurity_right)
  */
-  __pyx_t_8 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->__pyx_base.__pyx_base.criterion->__pyx_vtab)->update(__pyx_v_self->__pyx_base.__pyx_base.criterion, __pyx_v_split->pos); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 397, __pyx_L1_error)
+  __pyx_t_6 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->__pyx_base.__pyx_base.criterion->__pyx_vtab)->update(__pyx_v_self->__pyx_base.__pyx_base.criterion, __pyx_v_split->pos); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 387, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":398
+  /* "skgarden/mondrian/tree/_splitter.pyx":388
  *         self.criterion.reset()
  *         self.criterion.update(split.pos)
  *         self.criterion.children_impurity(&split.impurity_left,             # <<<<<<<<<<<<<<
  *                                          &split.impurity_right)
- *         free(cum_diff)
+ *         free(pvals)
  */
   ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_self->__pyx_base.__pyx_base.criterion->__pyx_vtab)->children_impurity(__pyx_v_self->__pyx_base.__pyx_base.criterion, (&__pyx_v_split->impurity_left), (&__pyx_v_split->impurity_right));
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":400
+  /* "skgarden/mondrian/tree/_splitter.pyx":390
  *         self.criterion.children_impurity(&split.impurity_left,
  *                                          &split.impurity_right)
- *         free(cum_diff)             # <<<<<<<<<<<<<<
+ *         free(pvals)             # <<<<<<<<<<<<<<
  *         return 0
  */
-  free(__pyx_v_cum_diff);
+  free(__pyx_v_pvals);
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":401
+  /* "skgarden/mondrian/tree/_splitter.pyx":391
  *                                          &split.impurity_right)
- *         free(cum_diff)
+ *         free(pvals)
  *         return 0             # <<<<<<<<<<<<<<
  */
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":298
+  /* "skgarden/mondrian/tree/_splitter.pyx":301
  *             self.lower_bounds[f_j] = lower_bound
  * 
  *     cdef int node_split(self, double impurity, SplitRecord* split,             # <<<<<<<<<<<<<<
@@ -4584,11 +4880,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._splitter.MondrianSplitter.node_split", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -4596,7 +4892,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -4643,7 +4939,7 @@
     __Pyx_GIVEREF(__pyx_v_info->obj);
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":203
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
  *             # of flags
  * 
  *             if info == NULL: return             # <<<<<<<<<<<<<<
@@ -4656,7 +4952,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":206
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
  * 
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -4665,7 +4961,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":207
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":224
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -4674,7 +4970,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":209
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
  * 
  *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
@@ -4683,7 +4979,7 @@
  */
   __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -4693,7 +4989,7 @@
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":212
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  *                 copy_shape = 1             # <<<<<<<<<<<<<<
@@ -4702,7 +4998,7 @@
  */
     __pyx_v_copy_shape = 1;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -4712,7 +5008,7 @@
     goto __pyx_L4;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":214
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
  *                 copy_shape = 1
  *             else:
  *                 copy_shape = 0             # <<<<<<<<<<<<<<
@@ -4724,7 +5020,7 @@
   }
   __pyx_L4:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -4738,7 +5034,7 @@
     goto __pyx_L6_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":217
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":234
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -4749,7 +5045,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L6_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -4758,20 +5054,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 218, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 235, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(2, 218, __pyx_L1_error)
+    __PYX_ERR(3, 235, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -4780,7 +5076,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -4794,7 +5090,7 @@
     goto __pyx_L9_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":221
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":238
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -4805,7 +5101,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L9_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -4814,20 +5110,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 222, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 239, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(2, 222, __pyx_L1_error)
+    __PYX_ERR(3, 239, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -4836,7 +5132,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":224
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
  * 
  *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
@@ -4845,7 +5141,7 @@
  */
   __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":225
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
  * 
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim             # <<<<<<<<<<<<<<
@@ -4854,7 +5150,7 @@
  */
   __pyx_v_info->ndim = __pyx_v_ndim;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -4864,26 +5160,26 @@
   __pyx_t_1 = (__pyx_v_copy_shape != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":229
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
  *                 # Allocate new buffer for strides and shape info.
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  */
-    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));
+    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":230
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  */
     __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":231
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):             # <<<<<<<<<<<<<<
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
@@ -4893,7 +5189,7 @@
     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
       __pyx_v_i = __pyx_t_5;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":232
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
@@ -4902,7 +5198,7 @@
  */
       (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":233
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
@@ -4912,7 +5208,7 @@
       (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -4922,7 +5218,7 @@
     goto __pyx_L11;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":235
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":252
  *                     info.shape[i] = PyArray_DIMS(self)[i]
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
@@ -4932,7 +5228,7 @@
   /*else*/ {
     __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":236
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
@@ -4943,7 +5239,7 @@
   }
   __pyx_L11:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":237
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
@@ -4952,7 +5248,7 @@
  */
   __pyx_v_info->suboffsets = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":238
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
@@ -4961,7 +5257,7 @@
  */
   __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":239
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)
  *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
@@ -4970,7 +5266,7 @@
  */
   __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":242
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
  * 
  *             cdef int t
  *             cdef char* f = NULL             # <<<<<<<<<<<<<<
@@ -4979,7 +5275,7 @@
  */
   __pyx_v_f = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":243
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
  *             cdef int t
  *             cdef char* f = NULL
  *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
@@ -4991,7 +5287,7 @@
   __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
   __pyx_t_3 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":246
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
  *             cdef int offset
  * 
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
@@ -5000,7 +5296,7 @@
  */
   __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -5018,7 +5314,7 @@
   __pyx_L15_bool_binop_done:;
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":250
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
  *             if not hasfields and not copy_shape:
  *                 # do not call releasebuffer
  *                 info.obj = None             # <<<<<<<<<<<<<<
@@ -5031,7 +5327,7 @@
     __Pyx_DECREF(__pyx_v_info->obj);
     __pyx_v_info->obj = Py_None;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -5041,7 +5337,7 @@
     goto __pyx_L14;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":253
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
  *             else:
  *                 # need to call releasebuffer
  *                 info.obj = self             # <<<<<<<<<<<<<<
@@ -5057,7 +5353,7 @@
   }
   __pyx_L14:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -5067,7 +5363,7 @@
   __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":256
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
  * 
  *             if not hasfields:
  *                 t = descr.type_num             # <<<<<<<<<<<<<<
@@ -5077,7 +5373,7 @@
     __pyx_t_4 = __pyx_v_descr->type_num;
     __pyx_v_t = __pyx_t_4;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5097,7 +5393,7 @@
     }
     __pyx_L20_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":258
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -5114,7 +5410,7 @@
     __pyx_t_1 = __pyx_t_2;
     __pyx_L19_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5123,20 +5419,20 @@
  */
     if (__pyx_t_1) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 259, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 276, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(2, 259, __pyx_L1_error)
+      __PYX_ERR(3, 276, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5145,7 +5441,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":260
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
@@ -5157,7 +5453,7 @@
       __pyx_v_f = ((char *)"b");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":261
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
@@ -5168,7 +5464,7 @@
       __pyx_v_f = ((char *)"B");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":262
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
@@ -5179,7 +5475,7 @@
       __pyx_v_f = ((char *)"h");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":263
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
@@ -5190,7 +5486,7 @@
       __pyx_v_f = ((char *)"H");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":264
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":281
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
@@ -5201,7 +5497,7 @@
       __pyx_v_f = ((char *)"i");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":265
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
@@ -5212,7 +5508,7 @@
       __pyx_v_f = ((char *)"I");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":266
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
@@ -5223,7 +5519,7 @@
       __pyx_v_f = ((char *)"l");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":267
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
@@ -5234,7 +5530,7 @@
       __pyx_v_f = ((char *)"L");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":268
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
@@ -5245,7 +5541,7 @@
       __pyx_v_f = ((char *)"q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":269
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
@@ -5256,7 +5552,7 @@
       __pyx_v_f = ((char *)"Q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":270
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
@@ -5267,7 +5563,7 @@
       __pyx_v_f = ((char *)"f");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":271
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
@@ -5278,7 +5574,7 @@
       __pyx_v_f = ((char *)"d");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":272
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
@@ -5289,7 +5585,7 @@
       __pyx_v_f = ((char *)"g");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":273
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
@@ -5300,7 +5596,7 @@
       __pyx_v_f = ((char *)"Zf");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":274
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
@@ -5311,7 +5607,7 @@
       __pyx_v_f = ((char *)"Zd");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":275
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
@@ -5322,7 +5618,7 @@
       __pyx_v_f = ((char *)"Zg");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":276
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
  *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
@@ -5334,33 +5630,33 @@
       break;
       default:
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":278
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
  *                 elif t == NPY_OBJECT:      f = "O"
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
  *                 info.format = f
  *                 return
  */
-      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_GIVEREF(__pyx_t_6);
       PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
       __pyx_t_6 = 0;
-      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       __Pyx_Raise(__pyx_t_6, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __PYX_ERR(2, 278, __pyx_L1_error)
+      __PYX_ERR(3, 295, __pyx_L1_error)
       break;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":279
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f             # <<<<<<<<<<<<<<
@@ -5369,17 +5665,17 @@
  */
     __pyx_v_info->format = __pyx_v_f;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":280
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f
  *                 return             # <<<<<<<<<<<<<<
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  */
     __pyx_r = 0;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -5388,27 +5684,27 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":282
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":299
  *                 return
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  */
   /*else*/ {
-    __pyx_v_info->format = ((char *)malloc(0xFF));
+    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":283
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":300
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,
  */
     (__pyx_v_info->format[0]) = '^';
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":284
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":301
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0             # <<<<<<<<<<<<<<
  *                 f = _util_dtypestring(descr, info.format + 1,
@@ -5416,17 +5712,17 @@
  */
     __pyx_v_offset = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":285
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  */
-    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(2, 285, __pyx_L1_error)
+    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(3, 302, __pyx_L1_error)
     __pyx_v_f = __pyx_t_7;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":288
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":305
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
@@ -5436,7 +5732,7 @@
     (__pyx_v_f[0]) = '\x00';
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -5468,12 +5764,12 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
 /* Python wrapper */
@@ -5492,75 +5788,75 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("__releasebuffer__", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":292
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":309
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  */
-    free(__pyx_v_info->format);
+    PyObject_Free(__pyx_v_info->format);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":294
- *                 stdlib.free(info.format)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":311
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
  *                 # info.shape was stored after info.strides in the same block
  * 
  */
-    free(__pyx_v_info->strides);
+    PyObject_Free(__pyx_v_info->strides);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -5574,7 +5870,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":771
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":789
  * 
  * cdef inline object PyArray_MultiIterNew1(a):
  *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
@@ -5582,13 +5878,13 @@
  * cdef inline object PyArray_MultiIterNew2(a, b):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 771, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 789, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -5607,7 +5903,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -5621,7 +5917,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":774
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
@@ -5629,13 +5925,13 @@
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 774, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 792, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -5654,7 +5950,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -5668,7 +5964,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":777
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
@@ -5676,13 +5972,13 @@
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 795, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -5701,7 +5997,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -5715,7 +6011,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":780
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
@@ -5723,13 +6019,13 @@
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 798, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -5748,7 +6044,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -5762,21 +6058,21 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":783
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
  * 
- * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 801, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -5795,9 +6091,83 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
+ *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
+  if (__pyx_t_1) {
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
+ *     else:
+ *         return ()
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
+    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
+    goto __pyx_L0;
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
+ *         return <tuple>d.subarray.shape
+ *     else:
+ *         return ()             # <<<<<<<<<<<<<<
+ * 
+ * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(__pyx_empty_tuple);
+    __pyx_r = __pyx_empty_tuple;
+    goto __pyx_L0;
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
  * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
+ * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
  *     # string. The new location in the format string is returned.
@@ -5824,7 +6194,7 @@
   char *__pyx_t_9;
   __Pyx_RefNannySetupContext("_util_dtypestring", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":790
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
  * 
  *     cdef dtype child
  *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -5833,7 +6203,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":791
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
  *     cdef dtype child
  *     cdef int endian_detector = 1
  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -5842,7 +6212,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -5851,21 +6221,21 @@
  */
   if (unlikely(__pyx_v_descr->names == Py_None)) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
-    __PYX_ERR(2, 794, __pyx_L1_error)
+    __PYX_ERR(3, 818, __pyx_L1_error)
   }
   __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
   for (;;) {
     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 794, __pyx_L1_error)
+    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 818, __pyx_L1_error)
     #else
-    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 794, __pyx_L1_error)
+    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 818, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     #endif
     __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":795
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":819
  * 
  *     for childname in descr.names:
  *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
@@ -5874,15 +6244,15 @@
  */
     if (unlikely(__pyx_v_descr->fields == Py_None)) {
       PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
-      __PYX_ERR(2, 795, __pyx_L1_error)
+      __PYX_ERR(3, 819, __pyx_L1_error)
     }
-    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 795, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 819, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
-    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 795, __pyx_L1_error)
+    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(3, 819, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":796
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
  *     for childname in descr.names:
  *         fields = descr.fields[childname]
  *         child, new_offset = fields             # <<<<<<<<<<<<<<
@@ -5899,7 +6269,7 @@
       if (unlikely(size != 2)) {
         if (size > 2) __Pyx_RaiseTooManyValuesError(2);
         else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
-        __PYX_ERR(2, 796, __pyx_L1_error)
+        __PYX_ERR(3, 820, __pyx_L1_error)
       }
       #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
       __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
@@ -5907,51 +6277,51 @@
       __Pyx_INCREF(__pyx_t_3);
       __Pyx_INCREF(__pyx_t_4);
       #else
-      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 796, __pyx_L1_error)
+      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 796, __pyx_L1_error)
+      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       #endif
     } else {
-      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 796, __pyx_L1_error)
+      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(3, 820, __pyx_L1_error)
     }
-    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 796, __pyx_L1_error)
+    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(3, 820, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
     __pyx_t_3 = 0;
     __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
     __pyx_t_4 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  */
-    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 798, __pyx_L1_error)
+    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 798, __pyx_L1_error)
+    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 798, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 822, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 799, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 823, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(2, 799, __pyx_L1_error)
+      __PYX_ERR(3, 823, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
@@ -5960,7 +6330,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5980,7 +6350,7 @@
     }
     __pyx_L8_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":802
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -5997,7 +6367,7 @@
     __pyx_t_6 = __pyx_t_7;
     __pyx_L7_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6006,20 +6376,20 @@
  */
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 803, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 827, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(2, 803, __pyx_L1_error)
+      __PYX_ERR(3, 827, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6028,7 +6398,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":813
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
  * 
  *         # Output padding bytes
  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
@@ -6036,15 +6406,15 @@
  *             f += 1
  */
     while (1) {
-      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 813, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 837, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 813, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 813, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (!__pyx_t_6) break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":814
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
  *         # Output padding bytes
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
@@ -6053,7 +6423,7 @@
  */
       (__pyx_v_f[0]) = 0x78;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":815
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte
  *             f += 1             # <<<<<<<<<<<<<<
@@ -6062,7 +6432,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":816
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
  *             f[0] = 120 # "x"; pad byte
  *             f += 1
  *             offset[0] += 1             # <<<<<<<<<<<<<<
@@ -6073,7 +6443,7 @@
       (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":818
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
  *             offset[0] += 1
  * 
  *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
@@ -6083,7 +6453,7 @@
     __pyx_t_8 = 0;
     (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -6093,19 +6463,19 @@
     __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":821
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
  * 
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num             # <<<<<<<<<<<<<<
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")
  */
-      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 821, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 845, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
       __pyx_t_4 = 0;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -6115,20 +6485,20 @@
       __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
       if (__pyx_t_6) {
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 823, __pyx_L1_error)
+        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 847, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_Raise(__pyx_t_4, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-        __PYX_ERR(2, 823, __pyx_L1_error)
+        __PYX_ERR(3, 847, __pyx_L1_error)
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -6137,252 +6507,252 @@
  */
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":826
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 826, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 850, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 826, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 826, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 98;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":827
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 851, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 827, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 827, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":828
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 828, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 852, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 828, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 828, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x68;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":829
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 829, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 853, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 829, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 829, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 72;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":830
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":854
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 830, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 854, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 830, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 830, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x69;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":831
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 831, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 855, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 831, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 831, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 73;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":832
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 856, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 832, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 832, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x6C;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":833
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":857
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 833, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 857, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 833, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 833, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 76;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":834
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 858, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 834, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 834, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x71;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":835
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":859
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 835, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 859, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 835, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 835, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 81;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":836
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 836, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 860, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 836, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 836, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":837
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 861, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x64;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":838
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":862
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 862, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x67;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":839
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":863
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 863, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -6391,18 +6761,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":840
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":864
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 864, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -6411,18 +6781,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":841
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":865
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 865, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -6431,25 +6801,25 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":842
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":866
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 866, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 79;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":844
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":868
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
@@ -6457,23 +6827,23 @@
  *         else:
  */
       /*else*/ {
-        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
+        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
-        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
+        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_GIVEREF(__pyx_t_3);
         PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
         __pyx_t_3 = 0;
-        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_Raise(__pyx_t_3, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-        __PYX_ERR(2, 844, __pyx_L1_error)
+        __PYX_ERR(3, 868, __pyx_L1_error)
       }
       __pyx_L15:;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":845
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":869
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *             f += 1             # <<<<<<<<<<<<<<
@@ -6482,7 +6852,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -6492,7 +6862,7 @@
       goto __pyx_L13;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":849
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":873
  *             # Cython ignores struct boundary information ("T{...}"),
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
@@ -6500,12 +6870,12 @@
  * 
  */
     /*else*/ {
-      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(2, 849, __pyx_L1_error)
+      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(3, 873, __pyx_L1_error)
       __pyx_v_f = __pyx_t_9;
     }
     __pyx_L13:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -6515,7 +6885,7 @@
   }
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":850
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":874
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)
  *     return f             # <<<<<<<<<<<<<<
@@ -6525,8 +6895,8 @@
   __pyx_r = __pyx_v_f;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
  * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
@@ -6550,7 +6920,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -6565,7 +6935,7 @@
   int __pyx_t_2;
   __Pyx_RefNannySetupContext("set_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -6576,7 +6946,7 @@
   __pyx_t_2 = (__pyx_t_1 != 0);
   if (__pyx_t_2) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":969
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":993
  *      cdef PyObject* baseptr
  *      if base is None:
  *          baseptr = NULL             # <<<<<<<<<<<<<<
@@ -6585,7 +6955,7 @@
  */
     __pyx_v_baseptr = NULL;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -6595,7 +6965,7 @@
     goto __pyx_L3;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":971
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
  *          baseptr = NULL
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
@@ -6605,7 +6975,7 @@
   /*else*/ {
     Py_INCREF(__pyx_v_base);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":972
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
@@ -6616,7 +6986,7 @@
   }
   __pyx_L3:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":973
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
@@ -6625,7 +6995,7 @@
  */
   Py_XDECREF(__pyx_v_arr->base);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":974
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)
  *      arr.base = baseptr             # <<<<<<<<<<<<<<
@@ -6634,7 +7004,7 @@
  */
   __pyx_v_arr->base = __pyx_v_baseptr;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -6646,7 +7016,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -6660,7 +7030,7 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("get_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -6670,7 +7040,7 @@
   __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":978
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:
  *         return None             # <<<<<<<<<<<<<<
@@ -6682,7 +7052,7 @@
     __pyx_r = Py_None;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -6691,7 +7061,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":980
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
  *         return None
  *     else:
  *         return <object>arr.base             # <<<<<<<<<<<<<<
@@ -6705,7 +7075,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -6720,7 +7090,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -6741,7 +7111,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_array", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -6757,16 +7127,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":987
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
  * cdef inline int import_array() except -1:
  *     try:
  *         _import_array()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")
  */
-      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 987, __pyx_L3_error)
+      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1011, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -6777,11 +7147,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":988
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
  *     try:
  *         _import_array()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -6791,44 +7160,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1012, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1013, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(2, 989, __pyx_L5_except_error)
+      __PYX_ERR(3, 1013, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_array()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -6851,7 +7219,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -6872,7 +7240,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_umath", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -6888,16 +7256,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":993
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1017
  * cdef inline int import_umath() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 993, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1017, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -6908,11 +7276,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":994
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1018
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -6922,44 +7289,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1018, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1019, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(2, 995, __pyx_L5_except_error)
+      __PYX_ERR(3, 1019, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -6982,7 +7348,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -7003,7 +7369,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_ufunc", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7019,16 +7385,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":999
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1023
  * cdef inline int import_ufunc() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 999, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1023, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7039,11 +7405,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1000
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1024
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -7052,42 +7417,41 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1024, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1025, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(2, 1001, __pyx_L5_except_error)
+      __PYX_ERR(3, 1025, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -7133,8 +7497,8 @@
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_9_splitter_Splitter(PyObject *o) {
   struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *p = (struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)o;
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -7156,7 +7520,7 @@
   int e;
   struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *p = (struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)o;
   if (p->criterion) {
-    e = (*v)(((PyObject*)p->criterion), a); if (e) return e;
+    e = (*v)(((PyObject *)p->criterion), a); if (e) return e;
   }
   if (p->random_state) {
     e = (*v)(p->random_state, a); if (e) return e;
@@ -7206,6 +7570,8 @@
 static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_9_splitter_Splitter[] = {
   {"__getstate__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_5__getstate__, METH_NOARGS, 0},
   {"__setstate__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_7__setstate__, METH_O, 0},
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_9__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_8Splitter_11__setstate_cython__, METH_O, 0},
   {0, 0, 0, 0}
 };
 
@@ -7290,8 +7656,8 @@
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter(PyObject *o) {
   struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *p = (struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *)o;
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -7306,7 +7672,7 @@
   struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *p = (struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter *)o;
   e = __pyx_tp_traverse_8skgarden_8mondrian_4tree_9_splitter_Splitter(o, v, a); if (e) return e;
   if (p->X_idx_sorted) {
-    e = (*v)(((PyObject*)p->X_idx_sorted), a); if (e) return e;
+    e = (*v)(((PyObject *)p->X_idx_sorted), a); if (e) return e;
   }
   return 0;
 }
@@ -7322,6 +7688,8 @@
 }
 
 static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter[] = {
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_3__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_5__setstate_cython__, METH_O, 0},
   {0, 0, 0, 0}
 };
 
@@ -7394,8 +7762,8 @@
 }
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter(PyObject *o) {
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -7480,17 +7848,31 @@
 };
 
 #if PY_MAJOR_VERSION >= 3
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
+static int __pyx_pymod_exec__splitter(PyObject* module); /*proto*/
+static PyModuleDef_Slot __pyx_moduledef_slots[] = {
+  {Py_mod_create, (void*)__pyx_pymod_create},
+  {Py_mod_exec, (void*)__pyx_pymod_exec__splitter},
+  {0, NULL}
+};
+#endif
+
 static struct PyModuleDef __pyx_moduledef = {
-  #if PY_VERSION_HEX < 0x03020000
-    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
-  #else
     PyModuleDef_HEAD_INIT,
-  #endif
     "_splitter",
     0, /* m_doc */
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    0, /* m_size */
+  #else
     -1, /* m_size */
+  #endif
     __pyx_methods /* m_methods */,
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    __pyx_moduledef_slots, /* m_slots */
+  #else
     NULL, /* m_reload */
+  #endif
     NULL, /* m_traverse */
     NULL, /* m_clear */
     NULL /* m_free */
@@ -7503,7 +7885,9 @@
   {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
   {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
   {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
+  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
+  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
   {&__pyx_n_s_criterion, __pyx_k_criterion, sizeof(__pyx_k_criterion), 0, 0, 1, 1},
   {&__pyx_n_s_csc_matrix, __pyx_k_csc_matrix, sizeof(__pyx_k_csc_matrix), 0, 0, 1, 1},
   {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
@@ -7511,8 +7895,10 @@
   {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
   {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
+  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
   {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
   {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
+  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
   {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
   {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
   {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
@@ -7521,7 +7907,12 @@
   {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
   {&__pyx_n_s_random_state, __pyx_k_random_state, sizeof(__pyx_k_random_state), 0, 0, 1, 1},
   {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
   {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
   {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
   {&__pyx_n_s_strides, __pyx_k_strides, sizeof(__pyx_k_strides), 0, 0, 1, 1},
   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
@@ -7529,10 +7920,11 @@
   {0, 0, 0, 0, 0, 0, 0}
 };
 static int __Pyx_InitCachedBuiltins(void) {
-  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 124, __pyx_L1_error)
-  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 218, __pyx_L1_error)
-  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 799, __pyx_L1_error)
-  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
+  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 127, __pyx_L1_error)
+  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
+  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(3, 235, __pyx_L1_error)
+  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(3, 823, __pyx_L1_error)
+  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 1013, __pyx_L1_error)
   return 0;
   __pyx_L1_error:;
   return -1;
@@ -7542,102 +7934,140 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
- *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
- *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
- *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
- * 
- *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) __PYX_ERR(2, 218, __pyx_L1_error)
+  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple_);
   __Pyx_GIVEREF(__pyx_tuple_);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
- *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
- *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
- *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
- * 
- *             info.buf = PyArray_DATA(self)
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
  */
-  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(2, 222, __pyx_L1_error)
+  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__2);
   __Pyx_GIVEREF(__pyx_tuple__2);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
- *                 if ((descr.byteorder == c'>' and little_endian) or
- *                     (descr.byteorder == c'<' and not little_endian)):
- *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
- *                 if   t == NPY_BYTE:        f = "b"
- *                 elif t == NPY_UBYTE:       f = "B"
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 259, __pyx_L1_error)
+  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple__3);
   __Pyx_GIVEREF(__pyx_tuple__3);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__4);
+  __Pyx_GIVEREF(__pyx_tuple__4);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
+ *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
+ *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
+ *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
+ * 
+ *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
+ */
+  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(3, 235, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__5);
+  __Pyx_GIVEREF(__pyx_tuple__5);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
+ *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
+ *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
+ *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
+ * 
+ *             info.buf = PyArray_DATA(self)
+ */
+  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(3, 239, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__6);
+  __Pyx_GIVEREF(__pyx_tuple__6);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
+ *                 if ((descr.byteorder == c'>' and little_endian) or
+ *                     (descr.byteorder == c'<' and not little_endian)):
+ *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
+ *                 if   t == NPY_BYTE:        f = "b"
+ *                 elif t == NPY_UBYTE:       f = "B"
+ */
+  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(3, 276, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__7);
+  __Pyx_GIVEREF(__pyx_tuple__7);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 799, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__4);
-  __Pyx_GIVEREF(__pyx_tuple__4);
+  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(3, 823, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__8);
+  __Pyx_GIVEREF(__pyx_tuple__8);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 803, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__5);
-  __Pyx_GIVEREF(__pyx_tuple__5);
+  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(3, 827, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__9);
+  __Pyx_GIVEREF(__pyx_tuple__9);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 823, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__6);
-  __Pyx_GIVEREF(__pyx_tuple__6);
+  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(3, 847, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__10);
+  __Pyx_GIVEREF(__pyx_tuple__10);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 989, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__7);
-  __Pyx_GIVEREF(__pyx_tuple__7);
+  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(3, 1013, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__11);
+  __Pyx_GIVEREF(__pyx_tuple__11);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 995, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__8);
-  __Pyx_GIVEREF(__pyx_tuple__8);
+  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 1019, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__12);
+  __Pyx_GIVEREF(__pyx_tuple__12);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 1001, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__9);
-  __Pyx_GIVEREF(__pyx_tuple__9);
+  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(3, 1025, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__13);
+  __Pyx_GIVEREF(__pyx_tuple__13);
   __Pyx_RefNannyFinishContext();
   return 0;
   __pyx_L1_error:;
@@ -7659,6 +8089,47 @@
 #else
 PyMODINIT_FUNC PyInit__splitter(void); /*proto*/
 PyMODINIT_FUNC PyInit__splitter(void)
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+{
+  return PyModuleDef_Init(&__pyx_moduledef);
+}
+static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
+    PyObject *value = PyObject_GetAttrString(spec, from_name);
+    int result = 0;
+    if (likely(value)) {
+        result = PyDict_SetItemString(moddict, to_name, value);
+        Py_DECREF(value);
+    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Clear();
+    } else {
+        result = -1;
+    }
+    return result;
+}
+static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
+    PyObject *module = NULL, *moddict, *modname;
+    if (__pyx_m)
+        return __Pyx_NewRef(__pyx_m);
+    modname = PyObject_GetAttrString(spec, "name");
+    if (unlikely(!modname)) goto bad;
+    module = PyModule_NewObject(modname);
+    Py_DECREF(modname);
+    if (unlikely(!module)) goto bad;
+    moddict = PyModule_GetDict(module);
+    if (unlikely(!moddict)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
+    return module;
+bad:
+    Py_XDECREF(module);
+    return NULL;
+}
+
+
+static int __pyx_pymod_exec__splitter(PyObject *__pyx_pyinit_module)
+#endif
 #endif
 {
   PyObject *__pyx_t_1 = NULL;
@@ -7667,6 +8138,9 @@
   PyObject *__pyx_t_4 = NULL;
   double __pyx_t_5;
   __Pyx_RefNannyDeclarations
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
+  #endif
   #if CYTHON_REFNANNY
   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
   if (!__Pyx_RefNanny) {
@@ -7693,6 +8167,9 @@
   #ifdef __Pyx_Generator_USED
   if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
+  #ifdef __Pyx_AsyncGen_USED
+  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   #ifdef __Pyx_StopAsyncIteration_USED
   if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
@@ -7704,15 +8181,21 @@
   #endif
   #endif
   /*--- Module creation code ---*/
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  __pyx_m = __pyx_pyinit_module;
+  Py_INCREF(__pyx_m);
+  #else
   #if PY_MAJOR_VERSION < 3
   __pyx_m = Py_InitModule4("_splitter", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
   #else
   __pyx_m = PyModule_Create(&__pyx_moduledef);
   #endif
   if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
   Py_INCREF(__pyx_d);
   __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
   #if CYTHON_COMPILING_IN_PYPY
   Py_INCREF(__pyx_b);
   #endif
@@ -7748,29 +8231,31 @@
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_Splitter.node_value = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *, double *))__pyx_f_8skgarden_8mondrian_4tree_9_splitter_8Splitter_node_value;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_Splitter.node_impurity = (double (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *))__pyx_f_8skgarden_8mondrian_4tree_9_splitter_8Splitter_node_impurity;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_Splitter.set_bounds = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *))__pyx_f_8skgarden_8mondrian_4tree_9_splitter_8Splitter_set_bounds;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "Splitter", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "Splitter", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = &__pyx_type_8skgarden_8mondrian_4tree_9_splitter_Splitter;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter = &__pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter.__pyx_base.init = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *, PyObject *, PyArrayObject *, __pyx_t_8skgarden_8mondrian_4tree_9_splitter_DOUBLE_t *, struct __pyx_opt_args_8skgarden_8mondrian_4tree_9_splitter_8Splitter_init *__pyx_optional_args))__pyx_f_8skgarden_8mondrian_4tree_9_splitter_17BaseDenseSplitter_init;
   __pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "BaseDenseSplitter", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "BaseDenseSplitter", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter = &__pyx_type_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter = &__pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.__pyx_base.__pyx_base.node_split = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *, double, struct __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SplitRecord *, __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t *))__pyx_f_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_node_split;
   __pyx_vtable_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.__pyx_base.__pyx_base.set_bounds = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *))__pyx_f_8skgarden_8mondrian_4tree_9_splitter_16MondrianSplitter_set_bounds;
   __pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_BaseDenseSplitter;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "MondrianSplitter", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "MondrianSplitter", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter = &__pyx_type_8skgarden_8mondrian_4tree_9_splitter_MondrianSplitter;
   /*--- Type import code ---*/
   __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
@@ -7779,25 +8264,27 @@
   #else
   sizeof(PyHeapTypeObject),
   #endif
-  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
-  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 155, __pyx_L1_error)
-  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 168, __pyx_L1_error)
-  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 172, __pyx_L1_error)
-  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 181, __pyx_L1_error)
-  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 861, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = __Pyx_ImportType("skgarden.mondrian.tree._criterion", "Criterion", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(4, 21, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(4, 21, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = __Pyx_ImportType("skgarden.mondrian.tree._tree", "Tree", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(5, 41, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(5, 41, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = __Pyx_ImportType("skgarden.mondrian.tree._tree", "TreeBuilder", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(5, 91, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(5, 91, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = __Pyx_ImportType("skgarden.mondrian.tree._utils", "Stack", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(6, 74, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(6, 74, __pyx_L1_error)
+  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(4, 9, __pyx_L1_error)
+  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(3, 163, __pyx_L1_error)
+  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(3, 185, __pyx_L1_error)
+  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(3, 189, __pyx_L1_error)
+  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(3, 198, __pyx_L1_error)
+  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(3, 885, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = __Pyx_ImportType("skgarden.mondrian.tree._criterion", "Criterion", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(5, 21, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(5, 21, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = __Pyx_ImportType("skgarden.mondrian.tree._tree", "Tree", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(6, 41, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(6, 41, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = __Pyx_ImportType("skgarden.mondrian.tree._tree", "TreeBuilder", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(6, 104, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(6, 104, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = __Pyx_ImportType("skgarden.mondrian.tree._utils", "Stack", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(7, 78, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(7, 78, __pyx_L1_error)
   /*--- Variable import code ---*/
   /*--- Function import code ---*/
   __pyx_t_1 = __Pyx_ImportModule("skgarden.mondrian.tree._utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "rand_int", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_int, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "rand_uniform", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform, "double (double, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "rand_multinomial", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "rand_exponential", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential, "double (__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "log", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_log, "double (double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_0safe_realloc", (void (**)(void))&__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_1safe_realloc", (void (**)(void))&__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
@@ -7832,7 +8319,7 @@
  * 
  * from scipy.sparse import csc_matrix
  */
-  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 29, __pyx_L1_error)
+  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 29, __pyx_L1_error)
 
   /* "skgarden/mondrian/tree/_splitter.pyx":31
  * np.import_array()
@@ -7855,19 +8342,19 @@
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_splitter.pyx":39
- * from ._utils cimport safe_realloc
+  /* "skgarden/mondrian/tree/_splitter.pyx":42
+ * 
  * 
  * cdef double INFINITY = np.inf             # <<<<<<<<<<<<<<
  * 
  * cdef class Splitter:
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 39, __pyx_L1_error)
+  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_v_8skgarden_8mondrian_4tree_9_splitter_INFINITY = __pyx_t_5;
 
@@ -7876,12 +8363,12 @@
  * # cython: boundscheck=False
  * # cython: wraparound=False
  */
-  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -7898,7 +8385,7 @@
   __Pyx_XDECREF(__pyx_t_4);
   if (__pyx_m) {
     if (__pyx_d) {
-      __Pyx_AddTraceback("init skgarden.mondrian.tree._splitter", __pyx_clineno, __pyx_lineno, __pyx_filename);
+      __Pyx_AddTraceback("init skgarden.mondrian.tree._splitter", 0, __pyx_lineno, __pyx_filename);
     }
     Py_DECREF(__pyx_m); __pyx_m = 0;
   } else if (!PyErr_Occurred()) {
@@ -7906,10 +8393,12 @@
   }
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
-  #if PY_MAJOR_VERSION < 3
-  return;
-  #else
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  return (__pyx_m != NULL) ? 0 : -1;
+  #elif PY_MAJOR_VERSION >= 3
   return __pyx_m;
+  #else
+  return;
   #endif
 }
 
@@ -8088,37 +8577,38 @@
 }
 
 /* ArgTypeTest */
-static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
-    PyErr_Format(PyExc_TypeError,
-        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
-        name, type->tp_name, Py_TYPE(obj)->tp_name);
-}
-static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
-    const char *name, int exact)
+static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
 {
     if (unlikely(!type)) {
         PyErr_SetString(PyExc_SystemError, "Missing type object");
         return 0;
     }
-    if (none_allowed && obj == Py_None) return 1;
     else if (exact) {
-        if (likely(Py_TYPE(obj) == type)) return 1;
         #if PY_MAJOR_VERSION == 2
-        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
+        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
         #endif
     }
     else {
-        if (likely(PyObject_TypeCheck(obj, type))) return 1;
+        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
     }
-    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
+    PyErr_Format(PyExc_TypeError,
+        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
+        name, type->tp_name, Py_TYPE(obj)->tp_name);
     return 0;
 }
 
-/* BufferFormatCheck */
-static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
-  unsigned int n = 1;
-  return *(unsigned char*)(&n) != 0;
+/* IsLittleEndian */
+static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
+{
+  union {
+    uint32_t u32;
+    uint8_t u8[4];
+  } S;
+  S.u32 = 0x01020304;
+  return S.u8[0] == 4;
 }
+
+/* BufferFormatCheck */
 static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                               __Pyx_BufFmt_StackElem* stack,
                               __Pyx_TypeInfo* type) {
@@ -8440,7 +8930,7 @@
   ctx->is_complex = 0;
   return 0;
 }
-static CYTHON_INLINE PyObject *
+static PyObject *
 __pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
 {
     const char *ts = *tsp;
@@ -8505,7 +8995,7 @@
         ++ts;
         break;
       case '<':
-        if (!__Pyx_IsLittleEndian()) {
+        if (!__Pyx_Is_Little_Endian()) {
           PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
           return NULL;
         }
@@ -8514,7 +9004,7 @@
         break;
       case '>':
       case '!':
-        if (__Pyx_IsLittleEndian()) {
+        if (__Pyx_Is_Little_Endian()) {
           PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
           return NULL;
         }
@@ -8617,24 +9107,30 @@
     }
   }
 }
-static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
+
+/* BufferGetAndValidate */
+  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
+  if (unlikely(info->buf == NULL)) return;
+  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
+  __Pyx_ReleaseBuffer(info);
+}
+static void __Pyx_ZeroBuffer(Py_buffer* buf) {
   buf->buf = NULL;
   buf->obj = NULL;
   buf->strides = __Pyx_zeros;
   buf->shape = __Pyx_zeros;
   buf->suboffsets = __Pyx_minusones;
 }
-static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
+static int __Pyx__GetBufferAndValidate(
         Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
         int nd, int cast, __Pyx_BufFmt_StackElem* stack)
 {
-  if (obj == Py_None || obj == NULL) {
+  buf->buf = NULL;
+  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
     __Pyx_ZeroBuffer(buf);
-    return 0;
+    return -1;
   }
-  buf->buf = NULL;
-  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
-  if (buf->ndim != nd) {
+  if (unlikely(buf->ndim != nd)) {
     PyErr_Format(PyExc_ValueError,
                  "Buffer has wrong number of dimensions (expected %d, got %d)",
                  nd, buf->ndim);
@@ -8645,7 +9141,7 @@
     __Pyx_BufFmt_Init(&ctx, stack, dtype);
     if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
   }
-  if ((unsigned)buf->itemsize != dtype->size) {
+  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
     PyErr_Format(PyExc_ValueError,
       "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
       buf->itemsize, (buf->itemsize > 1) ? "s" : "",
@@ -8655,14 +9151,9 @@
   if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
   return 0;
 fail:;
-  __Pyx_ZeroBuffer(buf);
+  __Pyx_SafeReleaseBuffer(buf);
   return -1;
 }
-static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
-  if (info->buf == NULL) return;
-  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
-  __Pyx_ReleaseBuffer(info);
-}
 
 /* PyFunctionFastCall */
   #if CYTHON_FAST_PYCALL
@@ -8670,7 +9161,7 @@
 static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                                PyObject *globals) {
     PyFrameObject *f;
-    PyThreadState *tstate = PyThreadState_GET();
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
     PyObject **fastlocals;
     Py_ssize_t i;
     PyObject *result;
@@ -8781,8 +9272,8 @@
     Py_LeaveRecursiveCall();
     return result;
 }
-#endif  // CPython < 3.6
-#endif  // CYTHON_FAST_PYCALL
+#endif
+#endif
 
 /* PyCFunctionFastCall */
   #if CYTHON_FAST_PYCCALL
@@ -8790,17 +9281,22 @@
     PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
     PyCFunction meth = PyCFunction_GET_FUNCTION(func);
     PyObject *self = PyCFunction_GET_SELF(func);
+    int flags = PyCFunction_GET_FLAGS(func);
     assert(PyCFunction_Check(func));
-    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
+    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
     assert(nargs >= 0);
     assert(nargs == 0 || args != NULL);
     /* _PyCFunction_FastCallDict() must not be called with an exception set,
        because it may clear it (directly or indirectly) and so the
        caller loses its exception */
     assert(!PyErr_Occurred());
-    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
+    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
+        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
+    } else {
+        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
+    }
 }
-#endif  // CYTHON_FAST_PYCCALL
+#endif
 
 /* PyObjectCall */
   #if CYTHON_COMPILING_IN_CPYTHON
@@ -8823,7 +9319,7 @@
 #endif
 
 /* GetItemInt */
-  static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
+  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
     PyObject *r;
     if (!j) return NULL;
     r = PyObject_GetItem(o, j);
@@ -8834,9 +9330,12 @@
                                                               CYTHON_NCP_UNUSED int wraparound,
                                                               CYTHON_NCP_UNUSED int boundscheck) {
 #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
-    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
-        PyObject *r = PyList_GET_ITEM(o, i);
+    Py_ssize_t wrapped_i = i;
+    if (wraparound & unlikely(i < 0)) {
+        wrapped_i += PyList_GET_SIZE(o);
+    }
+    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
+        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
         Py_INCREF(r);
         return r;
     }
@@ -8849,9 +9348,12 @@
                                                               CYTHON_NCP_UNUSED int wraparound,
                                                               CYTHON_NCP_UNUSED int boundscheck) {
 #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
-    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
-        PyObject *r = PyTuple_GET_ITEM(o, i);
+    Py_ssize_t wrapped_i = i;
+    if (wraparound & unlikely(i < 0)) {
+        wrapped_i += PyTuple_GET_SIZE(o);
+    }
+    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
+        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
         Py_INCREF(r);
         return r;
     }
@@ -8933,142 +9435,15 @@
         PyErr_SetString(PyExc_SystemError, "Missing type object");
         return 0;
     }
-    if (likely(PyObject_TypeCheck(obj, type)))
+    if (likely(__Pyx_TypeCheck(obj, type)))
         return 1;
     PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                  Py_TYPE(obj)->tp_name, type->tp_name);
     return 0;
 }
 
-/* PyObjectCallMethO */
-  #if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
-    PyObject *self, *result;
-    PyCFunction cfunc;
-    cfunc = PyCFunction_GET_FUNCTION(func);
-    self = PyCFunction_GET_SELF(func);
-    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
-        return NULL;
-    result = cfunc(self, arg);
-    Py_LeaveRecursiveCall();
-    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
-        PyErr_SetString(
-            PyExc_SystemError,
-            "NULL result without error in PyObject_Call");
-    }
-    return result;
-}
-#endif
-
-/* PyObjectCallOneArg */
-  #if CYTHON_COMPILING_IN_CPYTHON
-static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
-    PyObject *result;
-    PyObject *args = PyTuple_New(1);
-    if (unlikely(!args)) return NULL;
-    Py_INCREF(arg);
-    PyTuple_SET_ITEM(args, 0, arg);
-    result = __Pyx_PyObject_Call(func, args, NULL);
-    Py_DECREF(args);
-    return result;
-}
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
-#if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(func)) {
-        return __Pyx_PyFunction_FastCall(func, &arg, 1);
-    }
-#endif
-#ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
-#else
-    if (likely(PyCFunction_Check(func))) {
-#endif
-        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
-            return __Pyx_PyObject_CallMethO(func, arg);
-#if CYTHON_FAST_PYCCALL
-        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
-            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
-#endif
-        }
-    }
-    return __Pyx__PyObject_CallOneArg(func, arg);
-}
-#else
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
-    PyObject *result;
-    PyObject *args = PyTuple_Pack(1, arg);
-    if (unlikely(!args)) return NULL;
-    result = __Pyx_PyObject_Call(func, args, NULL);
-    Py_DECREF(args);
-    return result;
-}
-#endif
-
-/* PyObjectCallNoArg */
-    #if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
-#if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(func)) {
-        return __Pyx_PyFunction_FastCall(func, NULL, 0);
-    }
-#endif
-#ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
-#else
-    if (likely(PyCFunction_Check(func))) {
-#endif
-        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
-            return __Pyx_PyObject_CallMethO(func, NULL);
-        }
-    }
-    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
-}
-#endif
-
-/* WriteUnraisableException */
-      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
-                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
-                                  int full_traceback, CYTHON_UNUSED int nogil) {
-    PyObject *old_exc, *old_val, *old_tb;
-    PyObject *ctx;
-    __Pyx_PyThreadState_declare
-#ifdef WITH_THREAD
-    PyGILState_STATE state;
-    if (nogil)
-        state = PyGILState_Ensure();
-#ifdef _MSC_VER
-    else state = (PyGILState_STATE)-1;
-#endif
-#endif
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
-    if (full_traceback) {
-        Py_XINCREF(old_exc);
-        Py_XINCREF(old_val);
-        Py_XINCREF(old_tb);
-        __Pyx_ErrRestore(old_exc, old_val, old_tb);
-        PyErr_PrintEx(1);
-    }
-    #if PY_MAJOR_VERSION < 3
-    ctx = PyString_FromString(name);
-    #else
-    ctx = PyUnicode_FromString(name);
-    #endif
-    __Pyx_ErrRestore(old_exc, old_val, old_tb);
-    if (!ctx) {
-        PyErr_WriteUnraisable(Py_None);
-    } else {
-        PyErr_WriteUnraisable(ctx);
-        Py_DECREF(ctx);
-    }
-#ifdef WITH_THREAD
-    if (nogil)
-        PyGILState_Release(state);
-#endif
-}
-
 /* RaiseException */
-      #if PY_MAJOR_VERSION < 3
+  #if PY_MAJOR_VERSION < 3
 static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                         CYTHON_UNUSED PyObject *cause) {
     __Pyx_PyThreadState_declare
@@ -9183,11 +9558,7 @@
             "raise: exception class must be a subclass of BaseException");
         goto bad;
     }
-#if PY_VERSION_HEX >= 0x03030000
     if (cause) {
-#else
-    if (cause && cause != Py_None) {
-#endif
         PyObject *fixed_cause;
         if (cause == Py_None) {
             fixed_cause = NULL;
@@ -9215,7 +9586,7 @@
         PyErr_Restore(tmp_type, tmp_value, tb);
         Py_XDECREF(tmp_tb);
 #else
-        PyThreadState *tstate = PyThreadState_GET();
+        PyThreadState *tstate = __Pyx_PyThreadState_Current;
         PyObject* tmp_tb = tstate->curexc_traceback;
         if (tb != tmp_tb) {
             Py_INCREF(tb);
@@ -9230,42 +9601,180 @@
 }
 #endif
 
+/* PyObjectCallMethO */
+  #if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
+    PyObject *self, *result;
+    PyCFunction cfunc;
+    cfunc = PyCFunction_GET_FUNCTION(func);
+    self = PyCFunction_GET_SELF(func);
+    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
+        return NULL;
+    result = cfunc(self, arg);
+    Py_LeaveRecursiveCall();
+    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
+        PyErr_SetString(
+            PyExc_SystemError,
+            "NULL result without error in PyObject_Call");
+    }
+    return result;
+}
+#endif
+
+/* PyObjectCallOneArg */
+  #if CYTHON_COMPILING_IN_CPYTHON
+static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+    PyObject *result;
+    PyObject *args = PyTuple_New(1);
+    if (unlikely(!args)) return NULL;
+    Py_INCREF(arg);
+    PyTuple_SET_ITEM(args, 0, arg);
+    result = __Pyx_PyObject_Call(func, args, NULL);
+    Py_DECREF(args);
+    return result;
+}
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+#if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(func)) {
+        return __Pyx_PyFunction_FastCall(func, &arg, 1);
+    }
+#endif
+    if (likely(PyCFunction_Check(func))) {
+        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
+            return __Pyx_PyObject_CallMethO(func, arg);
+#if CYTHON_FAST_PYCCALL
+        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
+            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
+#endif
+        }
+    }
+    return __Pyx__PyObject_CallOneArg(func, arg);
+}
+#else
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+    PyObject *result;
+    PyObject *args = PyTuple_Pack(1, arg);
+    if (unlikely(!args)) return NULL;
+    result = __Pyx_PyObject_Call(func, args, NULL);
+    Py_DECREF(args);
+    return result;
+}
+#endif
+
+/* PyObjectCallNoArg */
+  #if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
+#if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(func)) {
+        return __Pyx_PyFunction_FastCall(func, NULL, 0);
+    }
+#endif
+#ifdef __Pyx_CyFunction_USED
+    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
+#else
+    if (likely(PyCFunction_Check(func))) {
+#endif
+        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
+            return __Pyx_PyObject_CallMethO(func, NULL);
+        }
+    }
+    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
+}
+#endif
+
+/* WriteUnraisableException */
+    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
+                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
+                                  int full_traceback, CYTHON_UNUSED int nogil) {
+    PyObject *old_exc, *old_val, *old_tb;
+    PyObject *ctx;
+    __Pyx_PyThreadState_declare
+#ifdef WITH_THREAD
+    PyGILState_STATE state;
+    if (nogil)
+        state = PyGILState_Ensure();
+#ifdef _MSC_VER
+    else state = (PyGILState_STATE)-1;
+#endif
+#endif
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
+    if (full_traceback) {
+        Py_XINCREF(old_exc);
+        Py_XINCREF(old_val);
+        Py_XINCREF(old_tb);
+        __Pyx_ErrRestore(old_exc, old_val, old_tb);
+        PyErr_PrintEx(1);
+    }
+    #if PY_MAJOR_VERSION < 3
+    ctx = PyString_FromString(name);
+    #else
+    ctx = PyUnicode_FromString(name);
+    #endif
+    __Pyx_ErrRestore(old_exc, old_val, old_tb);
+    if (!ctx) {
+        PyErr_WriteUnraisable(Py_None);
+    } else {
+        PyErr_WriteUnraisable(ctx);
+        Py_DECREF(ctx);
+    }
+#ifdef WITH_THREAD
+    if (nogil)
+        PyGILState_Release(state);
+#endif
+}
+
 /* RaiseTooManyValuesToUnpack */
-        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
+    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
     PyErr_Format(PyExc_ValueError,
                  "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
 }
 
 /* RaiseNeedMoreValuesToUnpack */
-        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
+    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
     PyErr_Format(PyExc_ValueError,
                  "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                  index, (index == 1) ? "" : "s");
 }
 
 /* RaiseNoneIterError */
-        static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
+    static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
 }
 
 /* SaveResetException */
-        #if CYTHON_FAST_THREAD_STATE
+    #if CYTHON_FAST_THREAD_STATE
 static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    #if PY_VERSION_HEX >= 0x030700A2
+    *type = tstate->exc_state.exc_type;
+    *value = tstate->exc_state.exc_value;
+    *tb = tstate->exc_state.exc_traceback;
+    #else
     *type = tstate->exc_type;
     *value = tstate->exc_value;
     *tb = tstate->exc_traceback;
+    #endif
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
 }
 static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
     PyObject *tmp_type, *tmp_value, *tmp_tb;
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = type;
+    tstate->exc_state.exc_value = value;
+    tstate->exc_state.exc_traceback = tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = type;
     tstate->exc_value = value;
     tstate->exc_traceback = tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -9273,17 +9782,32 @@
 #endif
 
 /* PyErrExceptionMatches */
-        #if CYTHON_FAST_THREAD_STATE
+    #if CYTHON_FAST_THREAD_STATE
+static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
+    Py_ssize_t i, n;
+    n = PyTuple_GET_SIZE(tuple);
+#if PY_MAJOR_VERSION >= 3
+    for (i=0; i<n; i++) {
+        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
+    }
+#endif
+    for (i=0; i<n; i++) {
+        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
+    }
+    return 0;
+}
 static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
     PyObject *exc_type = tstate->curexc_type;
     if (exc_type == err) return 1;
     if (unlikely(!exc_type)) return 0;
-    return PyErr_GivenExceptionMatches(exc_type, err);
+    if (unlikely(PyTuple_Check(err)))
+        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
+    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
 }
 #endif
 
 /* GetException */
-        #if CYTHON_FAST_THREAD_STATE
+    #if CYTHON_FAST_THREAD_STATE
 static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
 #else
 static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
@@ -9320,12 +9844,21 @@
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_FAST_THREAD_STATE
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = local_type;
+    tstate->exc_state.exc_value = local_value;
+    tstate->exc_state.exc_traceback = local_tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = local_type;
     tstate->exc_value = local_value;
     tstate->exc_traceback = local_tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -9344,7 +9877,7 @@
 }
 
 /* SetVTable */
-          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
+      static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
 #if PY_VERSION_HEX >= 0x02070000
     PyObject *ob = PyCapsule_New(vtable, 0, 0);
 #else
@@ -9361,8 +9894,84 @@
     return -1;
 }
 
+/* SetupReduce */
+      static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
+  int ret;
+  PyObject *name_attr;
+  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
+  if (likely(name_attr)) {
+      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
+  } else {
+      ret = -1;
+  }
+  if (unlikely(ret < 0)) {
+      PyErr_Clear();
+      ret = 0;
+  }
+  Py_XDECREF(name_attr);
+  return ret;
+}
+static int __Pyx_setup_reduce(PyObject* type_obj) {
+    int ret = 0;
+    PyObject *object_reduce = NULL;
+    PyObject *object_reduce_ex = NULL;
+    PyObject *reduce = NULL;
+    PyObject *reduce_ex = NULL;
+    PyObject *reduce_cython = NULL;
+    PyObject *setstate = NULL;
+    PyObject *setstate_cython = NULL;
+#if CYTHON_USE_PYTYPE_LOOKUP
+    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
+#else
+    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
+#endif
+#if CYTHON_USE_PYTYPE_LOOKUP
+    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#else
+    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#endif
+    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
+    if (reduce_ex == object_reduce_ex) {
+#if CYTHON_USE_PYTYPE_LOOKUP
+        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#else
+        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#endif
+        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
+        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
+            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
+            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
+            if (!setstate) PyErr_Clear();
+            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
+                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
+                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
+                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
+            }
+            PyType_Modified((PyTypeObject*)type_obj);
+        }
+    }
+    goto GOOD;
+BAD:
+    if (!PyErr_Occurred())
+        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
+    ret = -1;
+GOOD:
+#if !CYTHON_USE_PYTYPE_LOOKUP
+    Py_XDECREF(object_reduce);
+    Py_XDECREF(object_reduce_ex);
+#endif
+    Py_XDECREF(reduce);
+    Py_XDECREF(reduce_ex);
+    Py_XDECREF(reduce_cython);
+    Py_XDECREF(setstate);
+    Py_XDECREF(setstate_cython);
+    return ret;
+}
+
 /* GetVTable */
-          static void* __Pyx_GetVtable(PyObject *dict) {
+      static void* __Pyx_GetVtable(PyObject *dict) {
     void* ptr;
     PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
     if (!ob)
@@ -9382,13 +9991,13 @@
 }
 
 /* Import */
-          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
+      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
     PyObject *empty_list = 0;
     PyObject *module = 0;
     PyObject *global_dict = 0;
     PyObject *empty_dict = 0;
     PyObject *list;
-    #if PY_VERSION_HEX < 0x03030000
+    #if PY_MAJOR_VERSION < 3
     PyObject *py_import;
     py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
     if (!py_import)
@@ -9412,17 +10021,8 @@
         #if PY_MAJOR_VERSION >= 3
         if (level == -1) {
             if (strchr(__Pyx_MODULE_NAME, '.')) {
-                #if PY_VERSION_HEX < 0x03030000
-                PyObject *py_level = PyInt_FromLong(1);
-                if (!py_level)
-                    goto bad;
-                module = PyObject_CallFunctionObjArgs(py_import,
-                    name, global_dict, empty_dict, list, py_level, NULL);
-                Py_DECREF(py_level);
-                #else
                 module = PyImport_ImportModuleLevelObject(
                     name, global_dict, empty_dict, list, 1);
-                #endif
                 if (!module) {
                     if (!PyErr_ExceptionMatches(PyExc_ImportError))
                         goto bad;
@@ -9433,7 +10033,7 @@
         }
         #endif
         if (!module) {
-            #if PY_VERSION_HEX < 0x03030000
+            #if PY_MAJOR_VERSION < 3
             PyObject *py_level = PyInt_FromLong(level);
             if (!py_level)
                 goto bad;
@@ -9447,7 +10047,7 @@
         }
     }
 bad:
-    #if PY_VERSION_HEX < 0x03030000
+    #if PY_MAJOR_VERSION < 3
     Py_XDECREF(py_import);
     #endif
     Py_XDECREF(empty_list);
@@ -9456,7 +10056,7 @@
 }
 
 /* ImportFrom */
-          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
+      static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
     PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
     if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
         PyErr_Format(PyExc_ImportError,
@@ -9470,7 +10070,7 @@
 }
 
 /* GetModuleGlobalName */
-          static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
+      static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
     PyObject *result;
 #if !CYTHON_AVOID_BORROWED_REFS
     result = PyDict_GetItem(__pyx_d, name);
@@ -9487,8 +10087,45 @@
     return result;
 }
 
+/* CLineInTraceback */
+        #ifndef CYTHON_CLINE_IN_TRACEBACK
+static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
+    PyObject *use_cline;
+    PyObject *ptype, *pvalue, *ptraceback;
+#if CYTHON_COMPILING_IN_CPYTHON
+    PyObject **cython_runtime_dict;
+#endif
+    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
+#if CYTHON_COMPILING_IN_CPYTHON
+    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
+    if (likely(cython_runtime_dict)) {
+      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
+    } else
+#endif
+    {
+      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
+      if (use_cline_obj) {
+        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
+        Py_DECREF(use_cline_obj);
+      } else {
+        PyErr_Clear();
+        use_cline = NULL;
+      }
+    }
+    if (!use_cline) {
+        c_line = 0;
+        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
+    }
+    else if (PyObject_Not(use_cline) != 0) {
+        c_line = 0;
+    }
+    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
+    return c_line;
+}
+#endif
+
 /* CodeObjectCache */
-            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
+        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
     int start = 0, mid = 0, end = count - 1;
     if (end >= 0 && code_line > entries[end].code_line) {
         return count;
@@ -9568,7 +10205,7 @@
 }
 
 /* AddTraceback */
-            #include "compile.h"
+        #include "compile.h"
 #include "frameobject.h"
 #include "traceback.h"
 static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
@@ -9627,18 +10264,22 @@
                                int py_line, const char *filename) {
     PyCodeObject *py_code = 0;
     PyFrameObject *py_frame = 0;
-    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    if (c_line) {
+        c_line = __Pyx_CLineForTraceback(tstate, c_line);
+    }
+    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
     if (!py_code) {
         py_code = __Pyx_CreateCodeObjectForTraceback(
             funcname, c_line, py_line, filename);
         if (!py_code) goto bad;
-        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
+        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
     }
     py_frame = PyFrame_New(
-        PyThreadState_GET(), /*PyThreadState *tstate,*/
-        py_code,             /*PyCodeObject *code,*/
-        __pyx_d,      /*PyObject *globals,*/
-        0                    /*PyObject *locals*/
+        tstate,            /*PyThreadState *tstate,*/
+        py_code,           /*PyCodeObject *code,*/
+        __pyx_d,    /*PyObject *globals,*/
+        0                  /*PyObject *locals*/
     );
     if (!py_frame) goto bad;
     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
@@ -9651,7 +10292,7 @@
 #if PY_MAJOR_VERSION < 3
 static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
     if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
-        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
+        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
     PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
     return -1;
 }
@@ -9662,15 +10303,16 @@
         PyBuffer_Release(view);
         return;
     }
-        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
-    Py_DECREF(obj);
+    if ((0)) {}
+        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
     view->obj = NULL;
+    Py_DECREF(obj);
 }
 #endif
 
 
-            /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
+        /* CIntToPy */
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -9701,7 +10343,7 @@
 }
 
 /* CIntFromPyVerify */
-            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
+        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
 #define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
@@ -9723,7 +10365,7 @@
     }
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -9754,7 +10396,7 @@
 }
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -9785,7 +10427,7 @@
 }
 
 /* None */
-            static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
+        static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
   int err;
   #ifdef WITH_THREAD
   PyGILState_STATE _save = PyGILState_Ensure();
@@ -9798,7 +10440,7 @@
 }
 
 /* Declarations */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
       return ::std::complex< float >(x, y);
@@ -9818,7 +10460,7 @@
 #endif
 
 /* Arithmetic */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -9953,7 +10595,7 @@
 #endif
 
 /* Declarations */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
       return ::std::complex< double >(x, y);
@@ -9973,7 +10615,7 @@
 #endif
 
 /* Arithmetic */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -10108,7 +10750,7 @@
 #endif
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
     const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -10139,7 +10781,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *x) {
+        static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *x) {
     const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -10328,7 +10970,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
+        static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -10517,7 +11159,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
+        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -10706,7 +11348,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
+        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -10894,8 +11536,80 @@
     return (long) -1;
 }
 
+/* FastTypeChecks */
+        #if CYTHON_COMPILING_IN_CPYTHON
+static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
+    while (a) {
+        a = a->tp_base;
+        if (a == b)
+            return 1;
+    }
+    return b == &PyBaseObject_Type;
+}
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
+    PyObject *mro;
+    if (a == b) return 1;
+    mro = a->tp_mro;
+    if (likely(mro)) {
+        Py_ssize_t i, n;
+        n = PyTuple_GET_SIZE(mro);
+        for (i = 0; i < n; i++) {
+            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
+                return 1;
+        }
+        return 0;
+    }
+    return __Pyx_InBases(a, b);
+}
+#if PY_MAJOR_VERSION == 2
+static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
+    PyObject *exception, *value, *tb;
+    int res;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&exception, &value, &tb);
+    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
+    if (unlikely(res == -1)) {
+        PyErr_WriteUnraisable(err);
+        res = 0;
+    }
+    if (!res) {
+        res = PyObject_IsSubclass(err, exc_type2);
+        if (unlikely(res == -1)) {
+            PyErr_WriteUnraisable(err);
+            res = 0;
+        }
+    }
+    __Pyx_ErrRestore(exception, value, tb);
+    return res;
+}
+#else
+static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
+    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
+    if (!res) {
+        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
+    }
+    return res;
+}
+#endif
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
+    if (likely(err == exc_type)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
+    }
+    return PyErr_GivenExceptionMatches(err, exc_type);
+}
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
+    if (likely(err == exc_type1 || err == exc_type2)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
+    }
+    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
+}
+#endif
+
 /* CheckBinaryVersion */
-            static int __Pyx_check_binary_version(void) {
+        static int __Pyx_check_binary_version(void) {
     char ctversion[4], rtversion[4];
     PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
     PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
@@ -10911,7 +11625,7 @@
 }
 
 /* ModuleImport */
-            #ifndef __PYX_HAVE_RT_ImportModule
+        #ifndef __PYX_HAVE_RT_ImportModule
 #define __PYX_HAVE_RT_ImportModule
 static PyObject *__Pyx_ImportModule(const char *name) {
     PyObject *py_name = 0;
@@ -10929,7 +11643,7 @@
 #endif
 
 /* TypeImport */
-            #ifndef __PYX_HAVE_RT_ImportType
+        #ifndef __PYX_HAVE_RT_ImportType
 #define __PYX_HAVE_RT_ImportType
 static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
     size_t size, int strict)
@@ -10994,7 +11708,7 @@
 #endif
 
 /* FunctionImport */
-            #ifndef __PYX_HAVE_RT_ImportFunction
+        #ifndef __PYX_HAVE_RT_ImportFunction
 #define __PYX_HAVE_RT_ImportFunction
 static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
     PyObject *d = 0;
@@ -11048,7 +11762,7 @@
 #endif
 
 /* InitStrings */
-            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
     while (t->p) {
         #if PY_MAJOR_VERSION < 3
         if (t->is_unicode) {
@@ -11073,6 +11787,8 @@
         #endif
         if (!*t->p)
             return -1;
+        if (PyObject_Hash(*t->p) == -1)
+            PyErr_Clear();
         ++t;
     }
     return 0;
@@ -11081,50 +11797,57 @@
 static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
     return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
     Py_ssize_t ignore;
     return __Pyx_PyObject_AsStringAndSize(o, &ignore);
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
-#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
-    if (
-#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-            __Pyx_sys_getdefaultencoding_not_ascii &&
-#endif
-            PyUnicode_Check(o)) {
-#if PY_VERSION_HEX < 0x03030000
-        char* defenc_c;
-        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
-        if (!defenc) return NULL;
-        defenc_c = PyBytes_AS_STRING(defenc);
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+#if !CYTHON_PEP393_ENABLED
+static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    char* defenc_c;
+    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
+    if (!defenc) return NULL;
+    defenc_c = PyBytes_AS_STRING(defenc);
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        {
-            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
-            char* c;
-            for (c = defenc_c; c < end; c++) {
-                if ((unsigned char) (*c) >= 128) {
-                    PyUnicode_AsASCIIString(o);
-                    return NULL;
-                }
+    {
+        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
+        char* c;
+        for (c = defenc_c; c < end; c++) {
+            if ((unsigned char) (*c) >= 128) {
+                PyUnicode_AsASCIIString(o);
+                return NULL;
             }
         }
+    }
 #endif
-        *length = PyBytes_GET_SIZE(defenc);
-        return defenc_c;
+    *length = PyBytes_GET_SIZE(defenc);
+    return defenc_c;
+}
 #else
-        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
+static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        if (PyUnicode_IS_ASCII(o)) {
-            *length = PyUnicode_GET_LENGTH(o);
-            return PyUnicode_AsUTF8(o);
-        } else {
-            PyUnicode_AsASCIIString(o);
-            return NULL;
-        }
+    if (likely(PyUnicode_IS_ASCII(o))) {
+        *length = PyUnicode_GET_LENGTH(o);
+        return PyUnicode_AsUTF8(o);
+    } else {
+        PyUnicode_AsASCIIString(o);
+        return NULL;
+    }
 #else
-        return PyUnicode_AsUTF8AndSize(o, length);
+    return PyUnicode_AsUTF8AndSize(o, length);
+#endif
+}
+#endif
 #endif
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+    if (
+#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
+            __Pyx_sys_getdefaultencoding_not_ascii &&
 #endif
+            PyUnicode_Check(o)) {
+        return __Pyx_PyUnicode_AsStringAndSize(o, length);
     } else
 #endif
 #if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
@@ -11148,6 +11871,26 @@
    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
    else return PyObject_IsTrue(x);
 }
+static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
+#if PY_MAJOR_VERSION >= 3
+    if (PyLong_Check(result)) {
+        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
+                "__int__ returned non-int (type %.200s).  "
+                "The ability to return an instance of a strict subclass of int "
+                "is deprecated, and may be removed in a future version of Python.",
+                Py_TYPE(result)->tp_name)) {
+            Py_DECREF(result);
+            return NULL;
+        }
+        return result;
+    }
+#endif
+    PyErr_Format(PyExc_TypeError,
+                 "__%.4s__ returned non-%.4s (type %.200s)",
+                 type_name, type_name, Py_TYPE(result)->tp_name);
+    Py_DECREF(result);
+    return NULL;
+}
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
 #if CYTHON_USE_TYPE_SLOTS
   PyNumberMethods *m;
@@ -11155,9 +11898,9 @@
   const char *name = NULL;
   PyObject *res = NULL;
 #if PY_MAJOR_VERSION < 3
-  if (PyInt_Check(x) || PyLong_Check(x))
+  if (likely(PyInt_Check(x) || PyLong_Check(x)))
 #else
-  if (PyLong_Check(x))
+  if (likely(PyLong_Check(x)))
 #endif
     return __Pyx_NewRef(x);
 #if CYTHON_USE_TYPE_SLOTS
@@ -11165,32 +11908,30 @@
   #if PY_MAJOR_VERSION < 3
   if (m && m->nb_int) {
     name = "int";
-    res = PyNumber_Int(x);
+    res = m->nb_int(x);
   }
   else if (m && m->nb_long) {
     name = "long";
-    res = PyNumber_Long(x);
+    res = m->nb_long(x);
   }
   #else
-  if (m && m->nb_int) {
+  if (likely(m && m->nb_int)) {
     name = "int";
-    res = PyNumber_Long(x);
+    res = m->nb_int(x);
   }
   #endif
 #else
-  res = PyNumber_Int(x);
+  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
+    res = PyNumber_Int(x);
+  }
 #endif
-  if (res) {
+  if (likely(res)) {
 #if PY_MAJOR_VERSION < 3
-    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
 #else
-    if (!PyLong_Check(res)) {
+    if (unlikely(!PyLong_CheckExact(res))) {
 #endif
-      PyErr_Format(PyExc_TypeError,
-                   "__%.4s__ returned non-%.4s (type %.200s)",
-                   name, name, Py_TYPE(res)->tp_name);
-      Py_DECREF(res);
-      return NULL;
+        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
     }
   }
   else if (!PyErr_Occurred()) {
diff -ruN orig/skgarden/mondrian/tree/_splitter.pyx new/skgarden/mondrian/tree/_splitter.pyx
--- orig/skgarden/mondrian/tree/_splitter.pyx	2017-06-07 04:33:08.000000000 -0700
+++ new/skgarden/mondrian/tree/_splitter.pyx	2017-12-27 11:16:05.000000000 -0800
@@ -31,11 +31,14 @@
 from scipy.sparse import csc_matrix
 
 from ._utils cimport log
+from ._utils cimport rand_exponential
 from ._utils cimport rand_int
+from ._utils cimport rand_multinomial
 from ._utils cimport rand_uniform
 from ._utils cimport RAND_R_MAX
 from ._utils cimport safe_realloc
 
+
 cdef double INFINITY = np.inf
 
 cdef class Splitter:
@@ -345,7 +348,7 @@
         cdef DTYPE_t rate = 0.0
         cdef DTYPE_t upper_bound
         cdef DTYPE_t lower_bound
-        cdef DTYPE_t* cum_diff = <DTYPE_t*> malloc(n_features * sizeof(DTYPE_t))
+        cdef DTYPE_t* pvals = <DTYPE_t*> malloc(n_features * sizeof(DTYPE_t))
         cdef DTYPE_t search
 
         self.set_bounds()
@@ -353,25 +356,12 @@
         for f_j in range(n_features):
             upper_bound = self.upper_bounds[f_j]
             lower_bound = self.lower_bounds[f_j]
-            cum_diff[f_j] = upper_bound - lower_bound
-
-            if f_j != 0:
-                cum_diff[f_j] += cum_diff[f_j - 1]
+            pvals[f_j] = upper_bound - lower_bound
             rate += (upper_bound - lower_bound)
 
-        # Sample time of split to be -ln(U) / rate.
-        split.E = -ln(rand_uniform(0.0, 1.0, random_state)) / rate
-
+        split.E = rand_exponential(rate, random_state)
         # Sample dimension delta with a probability proportional to (u_d - l_d)
-        search = rand_uniform(0.0, cum_diff[n_features-1], random_state)
-        for f_j in range(n_features):
-            if f_j == 0:
-                lower_bound = 0.0
-            else:
-                lower_bound = cum_diff[f_j - 1]
-            if cum_diff[f_j] >= search and lower_bound < search:
-                split.feature = f_j
-                break
+        split.feature = rand_multinomial(pvals, n_features, random_state)
 
         # Sample location xi uniformly between (l_d[delta], u_d[delta])
         split.threshold = rand_uniform(
@@ -397,5 +387,5 @@
         self.criterion.update(split.pos)
         self.criterion.children_impurity(&split.impurity_left,
                                          &split.impurity_right)
-        free(cum_diff)
+        free(pvals)
         return 0
diff -ruN orig/skgarden/mondrian/tree/_tree.c new/skgarden/mondrian/tree/_tree.c
--- orig/skgarden/mondrian/tree/_tree.c	2017-06-07 04:58:59.000000000 -0700
+++ new/skgarden/mondrian/tree/_tree.c	2017-12-27 11:16:28.000000000 -0800
@@ -1,20 +1,24 @@
-/* Generated by Cython 0.25.2 */
+/* Generated by Cython 0.27.3 */
 
 /* BEGIN: Cython Metadata
 {
     "distutils": {
         "depends": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/arrayobject.h",
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/ufuncobject.h"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h"
         ],
         "extra_compile_args": [
             "-O3"
         ],
         "include_dirs": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include"
         ],
         "libraries": [
             "m"
+        ],
+        "name": "skgarden.mondrian.tree._tree",
+        "sources": [
+            "skgarden/mondrian/tree/_tree.pyx"
         ]
     },
     "module_name": "skgarden.mondrian.tree._tree"
@@ -25,10 +29,11 @@
 #include "Python.h"
 #ifndef Py_PYTHON_H
     #error Python headers needed to compile C extensions, please install development version of Python.
-#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
-    #error Cython requires Python 2.6+ or Python 3.2+.
+#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
+    #error Cython requires Python 2.6+ or Python 3.3+.
 #else
-#define CYTHON_ABI "0_25_2"
+#define CYTHON_ABI "0_27_3"
+#define CYTHON_FUTURE_DIVISION 0
 #include <stddef.h>
 #ifndef offsetof
   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
@@ -50,8 +55,9 @@
 #ifndef DL_EXPORT
   #define DL_EXPORT(t) t
 #endif
+#define __PYX_COMMA ,
 #ifndef HAVE_LONG_LONG
-  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
+  #if PY_VERSION_HEX >= 0x02070000
     #define HAVE_LONG_LONG
   #endif
 #endif
@@ -67,8 +73,14 @@
   #define CYTHON_COMPILING_IN_CPYTHON 0
   #undef CYTHON_USE_TYPE_SLOTS
   #define CYTHON_USE_TYPE_SLOTS 0
-  #undef CYTHON_USE_ASYNC_SLOTS
-  #define CYTHON_USE_ASYNC_SLOTS 0
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #if PY_VERSION_HEX < 0x03050000
+    #undef CYTHON_USE_ASYNC_SLOTS
+    #define CYTHON_USE_ASYNC_SLOTS 0
+  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
+    #define CYTHON_USE_ASYNC_SLOTS 1
+  #endif
   #undef CYTHON_USE_PYLIST_INTERNALS
   #define CYTHON_USE_PYLIST_INTERNALS 0
   #undef CYTHON_USE_UNICODE_INTERNALS
@@ -87,6 +99,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #elif defined(PYSTON_VERSION)
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 1
@@ -94,6 +110,8 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
   #undef CYTHON_USE_ASYNC_SLOTS
   #define CYTHON_USE_ASYNC_SLOTS 0
   #undef CYTHON_USE_PYLIST_INTERNALS
@@ -118,6 +136,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #else
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 0
@@ -125,6 +147,12 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #if PY_VERSION_HEX < 0x02070000
+    #undef CYTHON_USE_PYTYPE_LOOKUP
+    #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
+    #define CYTHON_USE_PYTYPE_LOOKUP 1
+  #endif
   #if PY_MAJOR_VERSION < 3
     #undef CYTHON_USE_ASYNC_SLOTS
     #define CYTHON_USE_ASYNC_SLOTS 0
@@ -164,6 +192,12 @@
   #ifndef CYTHON_FAST_PYCALL
     #define CYTHON_FAST_PYCALL 1
   #endif
+  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
+    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
+  #endif
+  #ifndef CYTHON_USE_TP_FINALIZE
+    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
+  #endif
 #endif
 #if !defined(CYTHON_FAST_PYCCALL)
 #define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
@@ -202,19 +236,44 @@
 #ifndef Py_TPFLAGS_HAVE_FINALIZE
   #define Py_TPFLAGS_HAVE_FINALIZE 0
 #endif
-#ifndef METH_FASTCALL
-  #define METH_FASTCALL 0x80
-  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
-                                              Py_ssize_t nargs, PyObject *kwnames);
+#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
+  #ifndef METH_FASTCALL
+     #define METH_FASTCALL 0x80
+  #endif
+  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
+  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
+                                                          Py_ssize_t nargs, PyObject *kwnames);
 #else
   #define __Pyx_PyCFunctionFast _PyCFunctionFast
+  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
 #endif
 #if CYTHON_FAST_PYCCALL
 #define __Pyx_PyFastCFunction_Check(func)\
-    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
+    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
 #else
 #define __Pyx_PyFastCFunction_Check(func) 0
 #endif
+#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#elif PY_VERSION_HEX >= 0x03060000
+  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
+#elif PY_VERSION_HEX >= 0x03000000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#else
+  #define __Pyx_PyThreadState_Current _PyThreadState_Current
+#endif
+#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
+#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
+#else
+#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
+#endif
+#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
+#endif
 #if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
   #define CYTHON_PEP393_ENABLED 1
   #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
@@ -298,7 +357,6 @@
 #ifndef PySet_CheckExact
   #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
 #endif
-#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
 #define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
 #if PY_MAJOR_VERSION >= 3
   #define PyIntObject                  PyLongObject
@@ -338,20 +396,28 @@
 #else
   #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
 #endif
+#ifndef __has_attribute
+  #define __has_attribute(x) 0
+#endif
+#ifndef __has_cpp_attribute
+  #define __has_cpp_attribute(x) 0
+#endif
 #if CYTHON_USE_ASYNC_SLOTS
   #if PY_VERSION_HEX >= 0x030500B1
     #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
     #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
   #else
+    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
+  #endif
+#else
+  #define __Pyx_PyType_AsAsync(obj) NULL
+#endif
+#ifndef __Pyx_PyAsyncMethodsStruct
     typedef struct {
         unaryfunc am_await;
         unaryfunc am_aiter;
         unaryfunc am_anext;
     } __Pyx_PyAsyncMethodsStruct;
-    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
-  #endif
-#else
-  #define __Pyx_PyType_AsAsync(obj) NULL
 #endif
 #ifndef CYTHON_RESTRICT
   #if defined(__GNUC__)
@@ -392,6 +458,43 @@
 # endif
 #endif
 #define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
+#ifdef _MSC_VER
+    #ifndef _MSC_STDINT_H_
+        #if _MSC_VER < 1300
+           typedef unsigned char     uint8_t;
+           typedef unsigned int      uint32_t;
+        #else
+           typedef unsigned __int8   uint8_t;
+           typedef unsigned __int32  uint32_t;
+        #endif
+    #endif
+#else
+   #include <stdint.h>
+#endif
+#ifndef CYTHON_FALLTHROUGH
+  #if defined(__cplusplus) && __cplusplus >= 201103L
+    #if __has_cpp_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH [[fallthrough]]
+    #elif __has_cpp_attribute(clang::fallthrough)
+      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
+    #elif __has_cpp_attribute(gnu::fallthrough)
+      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
+    #endif
+  #endif
+  #ifndef CYTHON_FALLTHROUGH
+    #if __has_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
+    #else
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+  #if defined(__clang__ ) && defined(__apple_build_version__)
+    #if __apple_build_version__ < 7000000
+      #undef  CYTHON_FALLTHROUGH
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+#endif
 
 #ifndef CYTHON_INLINE
   #if defined(__clang__)
@@ -432,14 +535,6 @@
   __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
 }
 
-#if PY_MAJOR_VERSION >= 3
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
-#else
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
-#endif
-
 #ifndef __PYX_EXTERN_C
   #ifdef __cplusplus
     #define __PYX_EXTERN_C extern "C"
@@ -452,16 +547,16 @@
 #define __PYX_HAVE_API__skgarden__mondrian__tree___tree
 #include <string.h>
 #include <stdio.h>
-#include <stdlib.h>
 #include "numpy/arrayobject.h"
 #include "numpy/ufuncobject.h"
 #include <math.h>
+#include <stdlib.h>
 #include "pythread.h"
 #ifdef _OPENMP
 #include <omp.h>
 #endif /* _OPENMP */
 
-#ifdef PYREX_WITHOUT_ASSERTIONS
+#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
 #define CYTHON_WITHOUT_ASSERTIONS
 #endif
 
@@ -492,8 +587,8 @@
     #define __Pyx_sst_abs(value) abs(value)
 #elif SIZEOF_LONG >= SIZEOF_SIZE_T
     #define __Pyx_sst_abs(value) labs(value)
-#elif defined (_MSC_VER) && defined (_M_X64)
-    #define __Pyx_sst_abs(value) _abs64(value)
+#elif defined (_MSC_VER)
+    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
 #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
     #define __Pyx_sst_abs(value) llabs(value)
 #elif defined (__GNUC__)
@@ -501,8 +596,8 @@
 #else
     #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
 #endif
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
 #define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
 #define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
 #define __Pyx_PyBytes_FromString        PyBytes_FromString
@@ -515,23 +610,27 @@
     #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
 #endif
-#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
-#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
 #define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
 #define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
 #define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
 #define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
 #define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
-#if PY_MAJOR_VERSION < 3
-static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
-{
+static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
     const Py_UNICODE *u_end = u;
     while (*u_end++) ;
     return (size_t)(u_end - u - 1);
 }
-#else
-#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
-#endif
 #define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
 #define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
 #define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
@@ -540,6 +639,8 @@
 #define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
 static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
+#define __Pyx_PySequence_Tuple(obj)\
+    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
 static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
 static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
 #if CYTHON_ASSUME_SAFE_MACROS
@@ -638,10 +739,12 @@
   #define likely(x)   (x)
   #define unlikely(x) (x)
 #endif /* __GNUC__ */
+static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
 
-static PyObject *__pyx_m;
+static PyObject *__pyx_m = NULL;
 static PyObject *__pyx_d;
 static PyObject *__pyx_b;
+static PyObject *__pyx_cython_runtime;
 static PyObject *__pyx_empty_tuple;
 static PyObject *__pyx_empty_bytes;
 static PyObject *__pyx_empty_unicode;
@@ -675,6 +778,7 @@
 
 static const char *__pyx_f[] = {
   "skgarden/mondrian/tree/_tree.pyx",
+  "stringsource",
   "skgarden/mondrian/tree/_tree.pxd",
   "__init__.pxd",
   "type.pxd",
@@ -684,6 +788,18 @@
   "skgarden/mondrian/tree/_splitter.pxd",
   "skgarden/mondrian/tree/_utils.pxd",
 };
+/* NoFastGil.proto */
+#define __Pyx_PyGILState_Ensure PyGILState_Ensure
+#define __Pyx_PyGILState_Release PyGILState_Release
+#define __Pyx_FastGIL_Remember()
+#define __Pyx_FastGIL_Forget()
+#define __Pyx_FastGilFuncInit()
+
+/* ForceInitThreads.proto */
+#ifndef __PYX_FORCE_INIT_THREADS
+  #define __PYX_FORCE_INIT_THREADS 0
+#endif
+
 /* BufferFormatStructs.proto */
 #define IS_UNSIGNED(type) (((type) -1) > 0)
 struct __Pyx_StructField_;
@@ -721,7 +837,7 @@
 } __Pyx_BufFmt_Context;
 
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":725
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":743
  * # in Cython to enable them only on the right systems.
  * 
  * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
@@ -730,7 +846,7 @@
  */
 typedef npy_int8 __pyx_t_5numpy_int8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":726
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
  * 
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
@@ -739,7 +855,7 @@
  */
 typedef npy_int16 __pyx_t_5numpy_int16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":727
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
@@ -748,7 +864,7 @@
  */
 typedef npy_int32 __pyx_t_5numpy_int32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":728
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":746
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t
  * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
@@ -757,7 +873,7 @@
  */
 typedef npy_int64 __pyx_t_5numpy_int64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":732
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":750
  * #ctypedef npy_int128     int128_t
  * 
  * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
@@ -766,7 +882,7 @@
  */
 typedef npy_uint8 __pyx_t_5numpy_uint8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":733
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
  * 
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
@@ -775,7 +891,7 @@
  */
 typedef npy_uint16 __pyx_t_5numpy_uint16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":734
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":752
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
@@ -784,7 +900,7 @@
  */
 typedef npy_uint32 __pyx_t_5numpy_uint32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":735
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t
  * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
@@ -793,7 +909,7 @@
  */
 typedef npy_uint64 __pyx_t_5numpy_uint64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":739
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":757
  * #ctypedef npy_uint128    uint128_t
  * 
  * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
@@ -802,7 +918,7 @@
  */
 typedef npy_float32 __pyx_t_5numpy_float32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":740
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
  * 
  * ctypedef npy_float32    float32_t
  * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
@@ -811,7 +927,7 @@
  */
 typedef npy_float64 __pyx_t_5numpy_float64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":749
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
  * # The int types are mapped a bit surprising --
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
@@ -820,7 +936,7 @@
  */
 typedef npy_long __pyx_t_5numpy_int_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":750
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
@@ -829,7 +945,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_long_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":751
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t
  * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
@@ -838,7 +954,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_longlong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":753
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
  * ctypedef npy_longlong   longlong_t
  * 
  * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
@@ -847,7 +963,7 @@
  */
 typedef npy_ulong __pyx_t_5numpy_uint_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":754
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":772
  * 
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
@@ -856,7 +972,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":755
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t
  * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
@@ -865,7 +981,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":757
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
  * ctypedef npy_ulonglong  ulonglong_t
  * 
  * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
@@ -874,7 +990,7 @@
  */
 typedef npy_intp __pyx_t_5numpy_intp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":758
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
  * 
  * ctypedef npy_intp       intp_t
  * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
@@ -883,7 +999,7 @@
  */
 typedef npy_uintp __pyx_t_5numpy_uintp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":760
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
  * ctypedef npy_uintp      uintp_t
  * 
  * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
@@ -892,7 +1008,7 @@
  */
 typedef npy_double __pyx_t_5numpy_float_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":761
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
  * 
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
@@ -901,7 +1017,7 @@
  */
 typedef npy_double __pyx_t_5numpy_double_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":762
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t
  * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
@@ -1120,9 +1236,10 @@
 struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack;
 struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree;
 struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
+struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder;
 struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":764
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
  * ctypedef npy_longdouble longdouble_t
  * 
  * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
@@ -1131,7 +1248,7 @@
  */
 typedef npy_cfloat __pyx_t_5numpy_cfloat_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":765
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
  * 
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
@@ -1140,7 +1257,7 @@
  */
 typedef npy_cdouble __pyx_t_5numpy_cdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":766
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t
  * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
@@ -1149,7 +1266,7 @@
  */
 typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":768
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":786
  * ctypedef npy_clongdouble clongdouble_t
  * 
  * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
@@ -1201,7 +1318,7 @@
   __pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX = 0x7FFFFFFF
 };
 
-/* "_utils.pxd":65
+/* "_utils.pxd":69
  * 
  * # A record on the stack for depth-first tree growing
  * cdef struct StackRecord:             # <<<<<<<<<<<<<<
@@ -1220,7 +1337,9 @@
 struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict;
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build;
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build;
 
 /* "skgarden/mondrian/tree/_tree.pxd":25
@@ -1244,7 +1363,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t variance;
 };
 
-/* "skgarden/mondrian/tree/_tree.pxd":70
+/* "skgarden/mondrian/tree/_tree.pxd":71
  *                           double E) nogil except -1
  *     cdef int _resize(self, SIZE_t capacity) nogil except -1
  *     cdef int _resize_c(self, SIZE_t capacity=*) nogil except -1             # <<<<<<<<<<<<<<
@@ -1256,7 +1375,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t capacity;
 };
 
-/* "skgarden/mondrian/tree/_tree.pxd":75
+/* "skgarden/mondrian/tree/_tree.pxd":76
  *     cdef np.ndarray _get_node_ndarray(self)
  * 
  *     cpdef tuple predict(self, object X, bint return_std=*, bint is_regression=*)             # <<<<<<<<<<<<<<
@@ -1269,8 +1388,21 @@
   int is_regression;
 };
 
-/* "skgarden/mondrian/tree/_tree.pxd":106
- *     cdef SIZE_t max_depth           # Maximal tree depth
+/* "skgarden/mondrian/tree/_tree.pxd":88
+ *                      SIZE_t X_f_stride, SIZE_t y_stride, UINT32_t random_state,
+ *                      SIZE_t min_samples_split)
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,             # <<<<<<<<<<<<<<
+ *                                   SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+ *                                   DTYPE_t tau, SIZE_t n_node_samples,
+ */
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes {
+  int __pyx_n;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t child_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t y_start;
+};
+
+/* "skgarden/mondrian/tree/_tree.pxd":120
+ *     cdef object random_state
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
  *                 np.ndarray sample_weight=*,
@@ -1282,7 +1414,20 @@
   PyArrayObject *X_idx_sorted;
 };
 
-/* "skgarden/mondrian/tree/_tree.pyx":141
+/* "skgarden/mondrian/tree/_tree.pyx":137
+ *         self.random_state = random_state
+ * 
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
+ */
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build {
+  int __pyx_n;
+  PyArrayObject *sample_weight;
+  PyArrayObject *X_idx_sorted;
+};
+
+/* "skgarden/mondrian/tree/_tree.pyx":184
  *         self.max_depth = max_depth
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
@@ -1357,7 +1502,7 @@
 };
 
 
-/* "_utils.pxd":74
+/* "_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1393,10 +1538,11 @@
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *nodes;
   double *value;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t value_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t root;
 };
 
 
-/* "skgarden/mondrian/tree/_tree.pxd":91
+/* "skgarden/mondrian/tree/_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1411,10 +1557,23 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t min_samples_leaf;
   double min_weight_leaf;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t max_depth;
+  PyObject *random_state;
+};
+
+
+/* "skgarden/mondrian/tree/_tree.pyx":128
+ *         return X, y, sample_weight
+ * 
+ * cdef class PartialFitTreeBuilder(TreeBuilder):             # <<<<<<<<<<<<<<
+ *     """Build a decision tree incrementally."""
+ * 
+ */
+struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder {
+  struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder __pyx_base;
 };
 
 
-/* "skgarden/mondrian/tree/_tree.pyx":132
+/* "skgarden/mondrian/tree/_tree.pyx":175
  * # Depth first builder ---------------------------------------------------------
  * 
  * cdef class DepthFirstTreeBuilder(TreeBuilder):             # <<<<<<<<<<<<<<
@@ -1445,6 +1604,7 @@
   void (*node_value)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *);
   double (*impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double);
   double (*proxy_impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
+  int (*is_pure)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion;
 
@@ -1468,7 +1628,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter;
 
 
-/* "_utils.pxd":74
+/* "_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1484,7 +1644,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack;
 
 
-/* "skgarden/mondrian/tree/_tree.pyx":271
+/* "skgarden/mondrian/tree/_tree.pyx":315
  * # =============================================================================
  * 
  * cdef class Tree:             # <<<<<<<<<<<<<<
@@ -1501,20 +1661,21 @@
   PyObject *(*predict)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args);
   PyArrayObject *(*apply)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyArrayObject *(*_apply_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyArrayObject *(*_apply_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyObject *(*_decision_path_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyObject *(*_decision_path_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*weighted_decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
+  void (*_init)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*extend)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*set_node_attributes)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args);
+  void (*update_node_extent)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*_update_node_info)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree;
 static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_sparse_csr(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_sparse_csr(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
 
 
-/* "skgarden/mondrian/tree/_tree.pyx":92
+/* "skgarden/mondrian/tree/_tree.pyx":101
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1530,7 +1691,21 @@
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder__check_input(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *, PyObject *, PyArrayObject *, PyArrayObject *);
 
 
-/* "skgarden/mondrian/tree/_tree.pyx":132
+/* "skgarden/mondrian/tree/_tree.pyx":128
+ *         return X, y, sample_weight
+ * 
+ * cdef class PartialFitTreeBuilder(TreeBuilder):             # <<<<<<<<<<<<<<
+ *     """Build a decision tree incrementally."""
+ * 
+ */
+
+struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder {
+  struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder __pyx_base;
+};
+static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder;
+
+
+/* "skgarden/mondrian/tree/_tree.pyx":175
  * # Depth first builder ---------------------------------------------------------
  * 
  * cdef class DepthFirstTreeBuilder(TreeBuilder):             # <<<<<<<<<<<<<<
@@ -1664,74 +1839,66 @@
     const char* function_name);
 
 /* ArgTypeTest.proto */
-static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
-    const char *name, int exact);
+#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
+    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
+        __Pyx__ArgTypeTest(obj, type, name, exact))
+static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);
 
 /* GetModuleGlobalName.proto */
 static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);
 
-/* PyObjectCallMethO.proto */
-#if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
-#endif
-
-/* PyObjectCallOneArg.proto */
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);
-
-/* PyObjectCallNoArg.proto */
-#if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
-#else
-#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
-#endif
+/* ExtTypeTest.proto */
+static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);
 
-/* PyObjectSetAttrStr.proto */
-#if CYTHON_USE_TYPE_SLOTS
-#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
-static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
-    PyTypeObject* tp = Py_TYPE(obj);
-    if (likely(tp->tp_setattro))
-        return tp->tp_setattro(obj, attr_name, value);
-#if PY_MAJOR_VERSION < 3
-    if (likely(tp->tp_setattr))
-        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
-#endif
-    return PyObject_SetAttr(obj, attr_name, value);
-}
+/* PyErrExceptionMatches.proto */
+#if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
+static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
 #else
-#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
-#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
+#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
 #endif
 
 /* PyThreadStateGet.proto */
 #if CYTHON_FAST_THREAD_STATE
 #define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
-#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
+#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
+#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
 #else
 #define __Pyx_PyThreadState_declare
 #define __Pyx_PyThreadState_assign
+#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
 #endif
 
 /* PyErrFetchRestore.proto */
 #if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
 static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
 static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
+#else
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
+#endif
 #else
+#define __Pyx_PyErr_Clear() PyErr_Clear()
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
+#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
 #endif
 
-/* RaiseException.proto */
-static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
+/* GetAttr.proto */
+static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);
 
-/* ExtTypeTest.proto */
-static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);
+/* GetAttr3.proto */
+static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);
 
 /* RaiseTooManyValuesToUnpack.proto */
 static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);
@@ -1745,33 +1912,6 @@
 /* UnpackItemEndCheck.proto */
 static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);
 
-/* ForceInitThreads.proto */
-#ifndef __PYX_FORCE_INIT_THREADS
-  #define __PYX_FORCE_INIT_THREADS 0
-#endif
-
-/* SliceObject.proto */
-static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
-        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
-        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
-        int has_cstart, int has_cstop, int wraparound);
-
-/* BufferFormatCheck.proto */
-static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
-    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
-static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
-static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
-static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
-                              __Pyx_BufFmt_StackElem* stack,
-                              __Pyx_TypeInfo* type); // PROTO
-
-#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
-/* PySequenceContains.proto */
-static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
-    int result = PySequence_Contains(seq, item);
-    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
-}
-
 /* GetItemInt.proto */
 #define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
     (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
@@ -1790,14 +1930,80 @@
     (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
 static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                               int wraparound, int boundscheck);
-static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
+static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
 static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                      int is_list, int wraparound, int boundscheck);
 
+/* RaiseException.proto */
+static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
+
+/* SliceObject.proto */
+static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
+        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
+        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
+        int has_cstart, int has_cstop, int wraparound);
+
+/* PyObjectCallMethO.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
+#endif
+
+/* PyObjectCallOneArg.proto */
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);
+
+/* PyObjectCallNoArg.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
+#else
+#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
+#endif
+
+/* IsLittleEndian.proto */
+static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);
+
+/* BufferFormatCheck.proto */
+static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
+static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
+                              __Pyx_BufFmt_StackElem* stack,
+                              __Pyx_TypeInfo* type);
+
+/* BufferGetAndValidate.proto */
+#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
+    ((obj == Py_None || obj == NULL) ?\
+    (__Pyx_ZeroBuffer(buf), 0) :\
+    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
+static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
+    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
+static void __Pyx_ZeroBuffer(Py_buffer* buf);
+static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
+static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
+static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
+
+#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
+/* PySequenceContains.proto */
+static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
+    int result = PySequence_Contains(seq, item);
+    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
+}
+
+/* WriteUnraisableException.proto */
+static void __Pyx_WriteUnraisable(const char *name, int clineno,
+                                  int lineno, const char *filename,
+                                  int full_traceback, int nogil);
+
 #define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
 /* BufferFallbackError.proto */
 static void __Pyx_RaiseBufferFallbackError(void);
 
+/* Import.proto */
+static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);
+
+/* ImportFrom.proto */
+static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);
+
+/* HasAttr.proto */
+static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
+
 /* DictGetItem.proto */
 #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
 static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
@@ -1833,14 +2039,6 @@
 #define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
 #endif
 
-/* PyErrExceptionMatches.proto */
-#if CYTHON_FAST_THREAD_STATE
-#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
-static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
-#else
-#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
-#endif
-
 /* GetException.proto */
 #if CYTHON_FAST_THREAD_STATE
 #define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
@@ -1852,14 +2050,18 @@
 /* SetVTable.proto */
 static int __Pyx_SetVtable(PyObject *dict, void *vtable);
 
+/* SetupReduce.proto */
+static int __Pyx_setup_reduce(PyObject* type_obj);
+
 /* GetVTable.proto */
 static void* __Pyx_GetVtable(PyObject *dict);
 
-/* Import.proto */
-static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);
-
-/* ImportFrom.proto */
-static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);
+/* CLineInTraceback.proto */
+#ifdef CYTHON_CLINE_IN_TRACEBACK
+#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
+#else
+static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
+#endif
 
 /* CodeObjectCache.proto */
 typedef struct {
@@ -1880,6 +2082,9 @@
 static void __Pyx_AddTraceback(const char *funcname, int c_line,
                                int py_line, const char *filename);
 
+/* CIntToPy.proto */
+static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);
+
 /* BufferStructDeclare.proto */
 typedef struct {
   Py_ssize_t shape, strides, suboffsets;
@@ -1903,16 +2108,6 @@
 #endif
 
 
-/* None.proto */
-static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
-static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};
-
-/* None.proto */
-static CYTHON_INLINE long __Pyx_pow_long(long, long);
-
-/* CIntToPy.proto */
-static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);
-
 /* CIntToPy.proto */
 static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);
 
@@ -1920,10 +2115,10 @@
 static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);
 
 /* None.proto */
-static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void); /* proto */
+static CYTHON_INLINE long __Pyx_pow_long(long, long);
 
-/* CIntToPy.proto */
-static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value);
+/* None.proto */
+static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void); /* proto */
 
 /* RealImag.proto */
 #if CYTHON_CCOMPLEX
@@ -2033,10 +2228,22 @@
 static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);
 
 /* CIntFromPy.proto */
-static CYTHON_INLINE npy_int32 __Pyx_PyInt_As_npy_int32(PyObject *);
+static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);
 
 /* CIntFromPy.proto */
-static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);
+static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *);
+
+/* FastTypeChecks.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
+#else
+#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
+#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
+#endif
 
 /* CheckBinaryVersion.proto */
 static int __Pyx_check_binary_version(void);
@@ -2064,18 +2271,22 @@
 
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, CYTHON_UNUSED PyObject *__pyx_v_X, CYTHON_UNUSED PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build *__pyx_optional_args); /* proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder__check_input(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight); /* proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build *__pyx_optional_args); /* proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build *__pyx_optional_args); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__resize(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_capacity); /* proto*/
 static int __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c *__pyx_optional_args); /* proto*/
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_update_node_extent(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_ind, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_child_ind, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride); /* proto*/
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__update_node_info(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent_id, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_child_id, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_y_start); /* proto*/
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_ind, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_left_child, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_right_child, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_feature, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_threshold, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_tau, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_weighted_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_impurity, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_variance, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args); /* proto*/
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__init(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride); /* proto*/
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_extend(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_y_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t __pyx_v_random_state, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split); /* proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__add_node(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent, int __pyx_v_is_left, int __pyx_v_is_leaf, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_feature, double __pyx_v_threshold, double __pyx_v_impurity, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples, double __pyx_v_weighted_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_lower_bounds, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_upper_bounds, double __pyx_v_E); /* proto*/
 static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_apply(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch); /* proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_predict(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args); /* proto*/
 static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X); /* proto*/
-static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_sparse_csr(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X); /* proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch); /* proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_weighted_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch); /* proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X); /* proto*/
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_sparse_csr(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X); /* proto*/
 static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__get_value_ndarray(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto*/
 static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__get_node_ndarray(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto*/
 
@@ -2162,8 +2373,6 @@
 
 /* Module declarations from 'cpython.ref' */
 
-/* Module declarations from 'libc.stdlib' */
-
 /* Module declarations from 'numpy' */
 
 /* Module declarations from 'numpy' */
@@ -2183,9 +2392,14 @@
 
 /* Module declarations from 'libc.math' */
 
+/* Module declarations from 'libc.stdlib' */
+
 /* Module declarations from 'skgarden.mondrian.tree._utils' */
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = 0;
 static PyArrayObject *(*__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t); /*proto*/
+static double (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform)(double, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
+static __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
+static double (*__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(*__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t); /*proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(*__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc)(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t); /*proto*/
 static unsigned char *(*__pyx_fuse_2__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc)(unsigned char **, size_t); /*proto*/
@@ -2198,6 +2412,7 @@
 /* Module declarations from 'skgarden.mondrian.tree._tree' */
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = 0;
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = 0;
+static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder = 0;
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder = 0;
 static double __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY;
 static int __pyx_v_8skgarden_8mondrian_4tree_5_tree_IS_FIRST;
@@ -2207,17 +2422,21 @@
 static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF;
 static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED;
 static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_8skgarden_8mondrian_4tree_5_tree_INITIAL_STACK_SIZE;
+static CYTHON_INLINE double __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax(double, double); /*proto*/
+static CYTHON_INLINE double __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmin(double, double); /*proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder__set_state(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *, PyObject *); /*proto*/
 static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t = { "SIZE_t", NULL, sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t), 0 };
 static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t = { "DOUBLE_t", NULL, sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t), { 0 }, 0, 'R', 0, 0 };
 static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t = { "DTYPE_t", NULL, sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t), { 0 }, 0, 'R', 0, 0 };
-static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t = { "INT32_t", NULL, sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t), 0 };
 #define __Pyx_MODULE_NAME "skgarden.mondrian.tree._tree"
+extern int __pyx_module_is_main_skgarden__mondrian__tree___tree;
 int __pyx_module_is_main_skgarden__mondrian__tree___tree = 0;
 
 /* Implementation of 'skgarden.mondrian.tree._tree' */
-static PyObject *__pyx_builtin_ValueError;
-static PyObject *__pyx_builtin_MemoryError;
 static PyObject *__pyx_builtin_range;
+static PyObject *__pyx_builtin_TypeError;
+static PyObject *__pyx_builtin_MemoryError;
+static PyObject *__pyx_builtin_ValueError;
 static PyObject *__pyx_builtin_RuntimeError;
 static PyObject *__pyx_builtin_ImportError;
 static const char __pyx_k_C[] = "C";
@@ -2226,12 +2445,15 @@
 static const char __pyx_k_np[] = "np";
 static const char __pyx_k_inf[] = "inf";
 static const char __pyx_k_max[] = "max";
+static const char __pyx_k_new[] = "__new__";
 static const char __pyx_k_tau[] = "tau";
-static const char __pyx_k_data[] = "data";
+static const char __pyx_k_dict[] = "__dict__";
 static const char __pyx_k_intp[] = "intp";
 static const char __pyx_k_main[] = "__main__";
+static const char __pyx_k_name[] = "__name__";
 static const char __pyx_k_ndim[] = "ndim";
 static const char __pyx_k_ones[] = "ones";
+static const char __pyx_k_root[] = "root";
 static const char __pyx_k_test[] = "__test__";
 static const char __pyx_k_tree[] = "tree";
 static const char __pyx_k_DTYPE[] = "DTYPE";
@@ -2239,7 +2461,6 @@
 static const char __pyx_k_build[] = "build";
 static const char __pyx_k_dtype[] = "dtype";
 static const char __pyx_k_flags[] = "flags";
-static const char __pyx_k_int32[] = "int32";
 static const char __pyx_k_names[] = "names";
 static const char __pyx_k_nodes[] = "nodes";
 static const char __pyx_k_numpy[] = "numpy";
@@ -2247,73 +2468,87 @@
 static const char __pyx_k_range[] = "range";
 static const char __pyx_k_ravel[] = "ravel";
 static const char __pyx_k_shape[] = "shape";
-static const char __pyx_k_tocsc[] = "tocsc";
 static const char __pyx_k_zeros[] = "zeros";
 static const char __pyx_k_DOUBLE[] = "DOUBLE";
 static const char __pyx_k_import[] = "__import__";
-static const char __pyx_k_indptr[] = "indptr";
+static const char __pyx_k_pickle[] = "pickle";
+static const char __pyx_k_reduce[] = "__reduce__";
+static const char __pyx_k_update[] = "update";
 static const char __pyx_k_values[] = "values";
 static const char __pyx_k_asarray[] = "asarray";
 static const char __pyx_k_feature[] = "feature";
 static const char __pyx_k_float32[] = "float32";
 static const char __pyx_k_float64[] = "float64";
 static const char __pyx_k_formats[] = "formats";
-static const char __pyx_k_indices[] = "indices";
 static const char __pyx_k_offsets[] = "offsets";
 static const char __pyx_k_predict[] = "predict";
+static const char __pyx_k_randint[] = "randint";
 static const char __pyx_k_strides[] = "strides";
 static const char __pyx_k_getstate[] = "__getstate__";
 static const char __pyx_k_impurity[] = "impurity";
-static const char __pyx_k_issparse[] = "issparse";
 static const char __pyx_k_itemsize[] = "itemsize";
+static const char __pyx_k_pyx_type[] = "__pyx_type";
+static const char __pyx_k_setstate[] = "__setstate__";
 static const char __pyx_k_splitter[] = "splitter";
 static const char __pyx_k_variance[] = "variance";
 static const char __pyx_k_TREE_LEAF[] = "TREE_LEAF";
+static const char __pyx_k_TypeError[] = "TypeError";
 static const char __pyx_k_max_depth[] = "max_depth";
 static const char __pyx_k_n_classes[] = "n_classes";
 static const char __pyx_k_n_outputs[] = "n_outputs";
+static const char __pyx_k_pyx_state[] = "__pyx_state";
+static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
 static const char __pyx_k_threshold[] = "threshold";
 static const char __pyx_k_NODE_DTYPE[] = "NODE_DTYPE";
 static const char __pyx_k_ValueError[] = "ValueError";
 static const char __pyx_k_contiguous[] = "contiguous";
-static const char __pyx_k_csc_matrix[] = "csc_matrix";
 static const char __pyx_k_csr_matrix[] = "csr_matrix";
 static const char __pyx_k_left_child[] = "left_child";
 static const char __pyx_k_n_features[] = "n_features";
 static const char __pyx_k_node_count[] = "node_count";
+static const char __pyx_k_pyx_result[] = "__pyx_result";
 static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
 static const char __pyx_k_return_std[] = "return_std";
 static const char __pyx_k_ImportError[] = "ImportError";
 static const char __pyx_k_MemoryError[] = "MemoryError";
+static const char __pyx_k_PickleError[] = "PickleError";
 static const char __pyx_k_right_child[] = "right_child";
 static const char __pyx_k_RuntimeError[] = "RuntimeError";
 static const char __pyx_k_X_idx_sorted[] = "X_idx_sorted";
 static const char __pyx_k_c_contiguous[] = "c_contiguous";
+static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
+static const char __pyx_k_random_state[] = "random_state";
 static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
-static const char __pyx_k_sort_indices[] = "sort_indices";
+static const char __pyx_k_stringsource[] = "stringsource";
 static const char __pyx_k_decision_path[] = "decision_path";
 static const char __pyx_k_is_regression[] = "is_regression";
+static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
 static const char __pyx_k_sample_weight[] = "sample_weight";
 static const char __pyx_k_TREE_UNDEFINED[] = "TREE_UNDEFINED";
 static const char __pyx_k_asfortranarray[] = "asfortranarray";
 static const char __pyx_k_n_node_samples[] = "n_node_samples";
+static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
+static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
 static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
 static const char __pyx_k_min_samples_split[] = "min_samples_split";
+static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
 static const char __pyx_k_resizing_tree_to_d[] = "resizing tree to %d";
 static const char __pyx_k_weighted_decision_path[] = "weighted_decision_path";
 static const char __pyx_k_weighted_n_node_samples[] = "weighted_n_node_samples";
+static const char __pyx_k_pyx_unpickle_TreeBuilder[] = "__pyx_unpickle_TreeBuilder";
 static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
+static const char __pyx_k_skgarden_mondrian_tree__tree[] = "skgarden.mondrian.tree._tree";
 static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
 static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
 static const char __pyx_k_Did_not_recognise_loaded_array_l[] = "Did not recognise loaded array layout";
 static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
-static const char __pyx_k_No_support_for_np_int64_index_ba[] = "No support for np.int64 index based sparse matrices";
+static const char __pyx_k_Incompatible_checksums_s_vs_0xed[] = "Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))";
 static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
 static const char __pyx_k_X_dtype_should_be_np_float32_got[] = "X.dtype should be np.float32, got %s";
-static const char __pyx_k_X_should_be_in_csr_matrix_format[] = "X should be in csr_matrix format, got %s";
 static const char __pyx_k_X_should_be_in_np_ndarray_format[] = "X should be in np.ndarray format, got %s";
 static const char __pyx_k_You_have_loaded_Tree_version_whi[] = "You have loaded Tree version which cannot be imported";
 static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
+static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
 static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
 static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
 static PyObject *__pyx_n_s_C;
@@ -2323,18 +2558,19 @@
 static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
 static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
 static PyObject *__pyx_n_s_ImportError;
+static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xed;
 static PyObject *__pyx_n_s_MemoryError;
 static PyObject *__pyx_n_s_NODE_DTYPE;
-static PyObject *__pyx_kp_s_No_support_for_np_int64_index_ba;
 static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
+static PyObject *__pyx_n_s_PickleError;
 static PyObject *__pyx_n_s_RuntimeError;
 static PyObject *__pyx_n_s_TREE_LEAF;
 static PyObject *__pyx_n_s_TREE_UNDEFINED;
+static PyObject *__pyx_n_s_TypeError;
 static PyObject *__pyx_n_s_ValueError;
 static PyObject *__pyx_n_s_X;
 static PyObject *__pyx_kp_s_X_dtype_should_be_np_float32_got;
 static PyObject *__pyx_n_s_X_idx_sorted;
-static PyObject *__pyx_kp_s_X_should_be_in_csr_matrix_format;
 static PyObject *__pyx_kp_s_X_should_be_in_np_ndarray_format;
 static PyObject *__pyx_kp_s_You_have_loaded_Tree_version_whi;
 static PyObject *__pyx_n_s_apply;
@@ -2343,11 +2579,11 @@
 static PyObject *__pyx_n_s_asfortranarray;
 static PyObject *__pyx_n_s_build;
 static PyObject *__pyx_n_s_c_contiguous;
+static PyObject *__pyx_n_s_cline_in_traceback;
 static PyObject *__pyx_n_s_contiguous;
-static PyObject *__pyx_n_s_csc_matrix;
 static PyObject *__pyx_n_s_csr_matrix;
-static PyObject *__pyx_n_s_data;
 static PyObject *__pyx_n_s_decision_path;
+static PyObject *__pyx_n_s_dict;
 static PyObject *__pyx_n_s_dtype;
 static PyObject *__pyx_n_s_feature;
 static PyObject *__pyx_n_s_flags;
@@ -2357,13 +2593,9 @@
 static PyObject *__pyx_n_s_getstate;
 static PyObject *__pyx_n_s_import;
 static PyObject *__pyx_n_s_impurity;
-static PyObject *__pyx_n_s_indices;
-static PyObject *__pyx_n_s_indptr;
 static PyObject *__pyx_n_s_inf;
-static PyObject *__pyx_n_s_int32;
 static PyObject *__pyx_n_s_intp;
 static PyObject *__pyx_n_s_is_regression;
-static PyObject *__pyx_n_s_issparse;
 static PyObject *__pyx_n_s_itemsize;
 static PyObject *__pyx_n_s_left_child;
 static PyObject *__pyx_n_s_main;
@@ -2374,10 +2606,13 @@
 static PyObject *__pyx_n_s_n_features;
 static PyObject *__pyx_n_s_n_node_samples;
 static PyObject *__pyx_n_s_n_outputs;
+static PyObject *__pyx_n_s_name;
 static PyObject *__pyx_n_s_names;
 static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
 static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
 static PyObject *__pyx_n_s_ndim;
+static PyObject *__pyx_n_s_new;
+static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
 static PyObject *__pyx_n_s_node_count;
 static PyObject *__pyx_n_s_nodes;
 static PyObject *__pyx_n_s_np;
@@ -2387,25 +2622,41 @@
 static PyObject *__pyx_n_s_offsets;
 static PyObject *__pyx_n_s_ones;
 static PyObject *__pyx_n_s_order;
+static PyObject *__pyx_n_s_pickle;
 static PyObject *__pyx_n_s_predict;
+static PyObject *__pyx_n_s_pyx_PickleError;
+static PyObject *__pyx_n_s_pyx_checksum;
+static PyObject *__pyx_n_s_pyx_result;
+static PyObject *__pyx_n_s_pyx_state;
+static PyObject *__pyx_n_s_pyx_type;
+static PyObject *__pyx_n_s_pyx_unpickle_TreeBuilder;
 static PyObject *__pyx_n_s_pyx_vtable;
+static PyObject *__pyx_n_s_randint;
+static PyObject *__pyx_n_s_random_state;
 static PyObject *__pyx_n_s_range;
 static PyObject *__pyx_n_s_ravel;
+static PyObject *__pyx_n_s_reduce;
+static PyObject *__pyx_n_s_reduce_cython;
+static PyObject *__pyx_n_s_reduce_ex;
 static PyObject *__pyx_kp_s_resizing_tree_to_d;
 static PyObject *__pyx_n_s_return_std;
 static PyObject *__pyx_n_s_right_child;
+static PyObject *__pyx_n_s_root;
 static PyObject *__pyx_n_s_sample_weight;
 static PyObject *__pyx_n_s_scipy_sparse;
+static PyObject *__pyx_n_s_setstate;
+static PyObject *__pyx_n_s_setstate_cython;
 static PyObject *__pyx_n_s_shape;
-static PyObject *__pyx_n_s_sort_indices;
+static PyObject *__pyx_n_s_skgarden_mondrian_tree__tree;
 static PyObject *__pyx_n_s_splitter;
 static PyObject *__pyx_n_s_strides;
+static PyObject *__pyx_kp_s_stringsource;
 static PyObject *__pyx_n_s_tau;
 static PyObject *__pyx_n_s_test;
 static PyObject *__pyx_n_s_threshold;
-static PyObject *__pyx_n_s_tocsc;
 static PyObject *__pyx_n_s_tree;
 static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
+static PyObject *__pyx_n_s_update;
 static PyObject *__pyx_n_s_values;
 static PyObject *__pyx_n_s_variance;
 static PyObject *__pyx_n_s_weighted_decision_path;
@@ -2413,8 +2664,16 @@
 static PyObject *__pyx_n_s_y;
 static PyObject *__pyx_n_s_zeros;
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight, PyArrayObject *__pyx_v_X_idx_sorted); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_2__reduce_cython__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_4__setstate_cython__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
+static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth, PyObject *__pyx_v_random_state); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_2build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight, PyArrayObject *__pyx_v_X_idx_sorted); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight, PyArrayObject *__pyx_v_X_idx_sorted); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
@@ -2427,6 +2686,7 @@
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4root___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, int __pyx_v_n_features, PyArrayObject *__pyx_v_n_classes, int __pyx_v_n_outputs); /* proto */
 static void __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_2__dealloc__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
@@ -2448,24 +2708,27 @@
 static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_10node_count_2__set__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_2__set__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
 static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
 static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
 static PyObject *__pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_Tree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
 static PyObject *__pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_TreeBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
+static PyObject *__pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
 static PyObject *__pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
 static PyObject *__pyx_int_0;
 static PyObject *__pyx_int_1;
+static PyObject *__pyx_int_249227508;
 static PyObject *__pyx_int_neg_1;
 static PyObject *__pyx_int_neg_2;
-static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_k__4;
+static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_k__7;
 static PyObject *__pyx_tuple_;
-static PyObject *__pyx_slice__5;
-static PyObject *__pyx_slice__6;
+static PyObject *__pyx_slice__8;
+static PyObject *__pyx_slice__9;
 static PyObject *__pyx_tuple__2;
 static PyObject *__pyx_tuple__3;
-static PyObject *__pyx_tuple__7;
-static PyObject *__pyx_tuple__8;
-static PyObject *__pyx_tuple__9;
+static PyObject *__pyx_tuple__4;
+static PyObject *__pyx_tuple__5;
+static PyObject *__pyx_tuple__6;
 static PyObject *__pyx_tuple__10;
 static PyObject *__pyx_tuple__11;
 static PyObject *__pyx_tuple__12;
@@ -2473,19 +2736,104 @@
 static PyObject *__pyx_tuple__14;
 static PyObject *__pyx_tuple__15;
 static PyObject *__pyx_tuple__16;
+static PyObject *__pyx_tuple__17;
+static PyObject *__pyx_tuple__18;
+static PyObject *__pyx_tuple__19;
+static PyObject *__pyx_tuple__20;
+static PyObject *__pyx_codeobj__21;
 
-/* "skgarden/mondrian/tree/_tree.pyx":95
- *     """Interface for different tree building strategies."""
+/* "skgarden/mondrian/tree/_tree.pyx":89
+ * })
  * 
- *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
- *                 np.ndarray sample_weight=None,
+ * cdef inline double fmax(double left, double right) nogil:             # <<<<<<<<<<<<<<
+ *     return left if left > right else right
+ * 
+ */
+
+static CYTHON_INLINE double __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax(double __pyx_v_left, double __pyx_v_right) {
+  double __pyx_r;
+  double __pyx_t_1;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":90
+ * 
+ * cdef inline double fmax(double left, double right) nogil:
+ *     return left if left > right else right             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  if (((__pyx_v_left > __pyx_v_right) != 0)) {
+    __pyx_t_1 = __pyx_v_left;
+  } else {
+    __pyx_t_1 = __pyx_v_right;
+  }
+  __pyx_r = __pyx_t_1;
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":89
+ * })
+ * 
+ * cdef inline double fmax(double left, double right) nogil:             # <<<<<<<<<<<<<<
+ *     return left if left > right else right
+ * 
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":93
+ * 
+ * 
+ * cdef inline double fmin(double left, double right) nogil:             # <<<<<<<<<<<<<<
+ *     return left if left < right else right
+ * 
+ */
+
+static CYTHON_INLINE double __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmin(double __pyx_v_left, double __pyx_v_right) {
+  double __pyx_r;
+  double __pyx_t_1;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":94
+ * 
+ * cdef inline double fmin(double left, double right) nogil:
+ *     return left if left < right else right             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  if (((__pyx_v_left < __pyx_v_right) != 0)) {
+    __pyx_t_1 = __pyx_v_left;
+  } else {
+    __pyx_t_1 = __pyx_v_right;
+  }
+  __pyx_r = __pyx_t_1;
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":93
+ * 
+ * 
+ * cdef inline double fmin(double left, double right) nogil:             # <<<<<<<<<<<<<<
+ *     return left if left < right else right
+ * 
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":104
+ *     """Interface for different tree building strategies."""
+ * 
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
  *                 np.ndarray X_idx_sorted=None):
  */
 
 static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_1build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
 static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, CYTHON_UNUSED PyObject *__pyx_v_X, CYTHON_UNUSED PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build *__pyx_optional_args) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":96
+  /* "skgarden/mondrian/tree/_tree.pyx":105
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,
  *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
@@ -2494,7 +2842,7 @@
  */
   PyArrayObject *__pyx_v_sample_weight = ((PyArrayObject *)Py_None);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":97
+  /* "skgarden/mondrian/tree/_tree.pyx":106
  *     cpdef build(self, Tree tree, object X, np.ndarray y,
  *                 np.ndarray sample_weight=None,
  *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
@@ -2520,7 +2868,7 @@
     }
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":95
+  /* "skgarden/mondrian/tree/_tree.pyx":104
  *     """Interface for different tree building strategies."""
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
@@ -2531,7 +2879,7 @@
   if (unlikely(__pyx_skip_dispatch)) ;
   /* Check if overridden in Python */
   else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
     if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_1build)) {
       __Pyx_XDECREF(__pyx_r);
@@ -2551,7 +2899,7 @@
       #if CYTHON_FAST_PYCALL
       if (PyFunction_Check(__pyx_t_3)) {
         PyObject *__pyx_temp[6] = {__pyx_t_4, ((PyObject *)__pyx_v_tree), __pyx_v_X, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_sample_weight), ((PyObject *)__pyx_v_X_idx_sorted)};
-        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_GOTREF(__pyx_t_2);
       } else
@@ -2559,13 +2907,13 @@
       #if CYTHON_FAST_PYCCALL
       if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
         PyObject *__pyx_temp[6] = {__pyx_t_4, ((PyObject *)__pyx_v_tree), __pyx_v_X, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_sample_weight), ((PyObject *)__pyx_v_X_idx_sorted)};
-        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_GOTREF(__pyx_t_2);
       } else
       #endif
       {
-        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 95, __pyx_L1_error)
+        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_6);
         if (__pyx_t_4) {
           __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
@@ -2585,7 +2933,7 @@
         __Pyx_INCREF(((PyObject *)__pyx_v_X_idx_sorted));
         __Pyx_GIVEREF(((PyObject *)__pyx_v_X_idx_sorted));
         PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, ((PyObject *)__pyx_v_X_idx_sorted));
-        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_2);
         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
       }
@@ -2598,7 +2946,7 @@
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":98
+  /* "skgarden/mondrian/tree/_tree.pyx":107
  *                 np.ndarray sample_weight=None,
  *                 np.ndarray X_idx_sorted=None):
  *         """Build a decision tree from the training set (X, y)."""             # <<<<<<<<<<<<<<
@@ -2623,7 +2971,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":95
+/* "skgarden/mondrian/tree/_tree.pyx":104
  *     """Interface for different tree building strategies."""
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
@@ -2647,7 +2995,7 @@
     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_X,&__pyx_n_s_y,&__pyx_n_s_sample_weight,&__pyx_n_s_X_idx_sorted,0};
     PyObject* values[5] = {0,0,0,0,0};
 
-    /* "skgarden/mondrian/tree/_tree.pyx":96
+    /* "skgarden/mondrian/tree/_tree.pyx":105
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,
  *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
@@ -2656,7 +3004,7 @@
  */
     values[3] = (PyObject *)((PyArrayObject *)Py_None);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":97
+    /* "skgarden/mondrian/tree/_tree.pyx":106
  *     cpdef build(self, Tree tree, object X, np.ndarray y,
  *                 np.ndarray sample_weight=None,
  *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
@@ -2669,10 +3017,15 @@
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -2681,21 +3034,25 @@
         case  0:
         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 1); __PYX_ERR(0, 95, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 1); __PYX_ERR(0, 104, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 2); __PYX_ERR(0, 95, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 2); __PYX_ERR(0, 104, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  3:
         if (kw_args > 0) {
           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_weight);
           if (value) { values[3] = value; kw_args--; }
         }
+        CYTHON_FALLTHROUGH;
         case  4:
         if (kw_args > 0) {
           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X_idx_sorted);
@@ -2703,12 +3060,14 @@
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 95, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
       }
     } else {
       switch (PyTuple_GET_SIZE(__pyx_args)) {
         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
         values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
@@ -2724,19 +3083,19 @@
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 95, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("skgarden.mondrian.tree._tree.TreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return NULL;
   __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree, 1, "tree", 0))) __PYX_ERR(0, 95, __pyx_L1_error)
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 95, __pyx_L1_error)
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sample_weight), __pyx_ptype_5numpy_ndarray, 1, "sample_weight", 0))) __PYX_ERR(0, 96, __pyx_L1_error)
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X_idx_sorted), __pyx_ptype_5numpy_ndarray, 1, "X_idx_sorted", 0))) __PYX_ERR(0, 97, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree, 1, "tree", 0))) __PYX_ERR(0, 104, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 104, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sample_weight), __pyx_ptype_5numpy_ndarray, 1, "sample_weight", 0))) __PYX_ERR(0, 105, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X_idx_sorted), __pyx_ptype_5numpy_ndarray, 1, "X_idx_sorted", 0))) __PYX_ERR(0, 106, __pyx_L1_error)
   __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight, __pyx_v_X_idx_sorted);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":95
+  /* "skgarden/mondrian/tree/_tree.pyx":104
  *     """Interface for different tree building strategies."""
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
@@ -2763,7 +3122,7 @@
   __pyx_t_2.__pyx_n = 2;
   __pyx_t_2.sample_weight = __pyx_v_sample_weight;
   __pyx_t_2.X_idx_sorted = __pyx_v_X_idx_sorted;
-  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->build(__pyx_v_self, __pyx_v_tree, __pyx_v_X, __pyx_v_y, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
+  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->build(__pyx_v_self, __pyx_v_tree, __pyx_v_X, __pyx_v_y, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -2780,7 +3139,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":101
+/* "skgarden/mondrian/tree/_tree.pyx":110
  *         pass
  * 
  *     cdef inline _check_input(self, object X, np.ndarray y,             # <<<<<<<<<<<<<<
@@ -2794,8 +3153,8 @@
   PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  int __pyx_t_5;
+  int __pyx_t_4;
+  PyObject *__pyx_t_5 = NULL;
   int __pyx_t_6;
   int __pyx_t_7;
   __Pyx_RefNannySetupContext("_check_input", 0);
@@ -2803,387 +3162,130 @@
   __Pyx_INCREF((PyObject *)__pyx_v_y);
   __Pyx_INCREF((PyObject *)__pyx_v_sample_weight);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":104
- *                              np.ndarray sample_weight):
- *         """Check input dtype, layout and format"""
- *         if issparse(X):             # <<<<<<<<<<<<<<
- *             X = X.tocsc()
- *             X.sort_indices()
- */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_issparse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = NULL;
-  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
-    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
-    if (likely(__pyx_t_3)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-      __Pyx_INCREF(__pyx_t_3);
-      __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_2, function);
-    }
-  }
-  if (!__pyx_t_3) {
-    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-  } else {
-    #if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_X};
-      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    #if CYTHON_FAST_PYCCALL
-    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_X};
-      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    {
-      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_4);
-      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
-      __Pyx_INCREF(__pyx_v_X);
-      __Pyx_GIVEREF(__pyx_v_X);
-      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_X);
-      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_1);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    }
-  }
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 104, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (__pyx_t_5) {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":105
- *         """Check input dtype, layout and format"""
- *         if issparse(X):
- *             X = X.tocsc()             # <<<<<<<<<<<<<<
- *             X.sort_indices()
- * 
- */
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_tocsc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_4 = NULL;
-    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
-      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
-      if (likely(__pyx_t_4)) {
-        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-        __Pyx_INCREF(__pyx_t_4);
-        __Pyx_INCREF(function);
-        __Pyx_DECREF_SET(__pyx_t_2, function);
-      }
-    }
-    if (__pyx_t_4) {
-      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    } else {
-      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
-    }
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_1);
-    __pyx_t_1 = 0;
-
-    /* "skgarden/mondrian/tree/_tree.pyx":106
- *         if issparse(X):
- *             X = X.tocsc()
- *             X.sort_indices()             # <<<<<<<<<<<<<<
- * 
- *             if X.data.dtype != DTYPE:
- */
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_sort_indices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_4 = NULL;
-    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
-      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
-      if (likely(__pyx_t_4)) {
-        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-        __Pyx_INCREF(__pyx_t_4);
-        __Pyx_INCREF(function);
-        __Pyx_DECREF_SET(__pyx_t_2, function);
-      }
-    }
-    if (__pyx_t_4) {
-      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    } else {
-      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
-    }
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-    /* "skgarden/mondrian/tree/_tree.pyx":108
- *             X.sort_indices()
- * 
- *             if X.data.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *                 X.data = np.ascontiguousarray(X.data, dtype=DTYPE)
- * 
- */
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    if (__pyx_t_5) {
-
-      /* "skgarden/mondrian/tree/_tree.pyx":109
- * 
- *             if X.data.dtype != DTYPE:
- *                 X.data = np.ascontiguousarray(X.data, dtype=DTYPE)             # <<<<<<<<<<<<<<
- * 
- *             if X.indices.dtype != np.int32 or X.indptr.dtype != np.int32:
- */
-      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_1);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_2);
-      __Pyx_GIVEREF(__pyx_t_4);
-      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
-      __pyx_t_4 = 0;
-      __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_3);
-      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_3);
-      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      if (__Pyx_PyObject_SetAttrStr(__pyx_v_X, __pyx_n_s_data, __pyx_t_3) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-
-      /* "skgarden/mondrian/tree/_tree.pyx":108
- *             X.sort_indices()
- * 
- *             if X.data.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *                 X.data = np.ascontiguousarray(X.data, dtype=DTYPE)
- * 
- */
-    }
-
-    /* "skgarden/mondrian/tree/_tree.pyx":111
- *                 X.data = np.ascontiguousarray(X.data, dtype=DTYPE)
- * 
- *             if X.indices.dtype != np.int32 or X.indptr.dtype != np.int32:             # <<<<<<<<<<<<<<
- *                 raise ValueError("No support for np.int64 index based "
- *                                  "sparse matrices")
- */
-    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    if (!__pyx_t_6) {
-    } else {
-      __pyx_t_5 = __pyx_t_6;
-      goto __pyx_L6_bool_binop_done;
-    }
-    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_indptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_5 = __pyx_t_6;
-    __pyx_L6_bool_binop_done:;
-    if (__pyx_t_5) {
-
-      /* "skgarden/mondrian/tree/_tree.pyx":112
- * 
- *             if X.indices.dtype != np.int32 or X.indptr.dtype != np.int32:
- *                 raise ValueError("No support for np.int64 index based "             # <<<<<<<<<<<<<<
- *                                  "sparse matrices")
- * 
- */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_3);
-      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(0, 112, __pyx_L1_error)
-
-      /* "skgarden/mondrian/tree/_tree.pyx":111
- *                 X.data = np.ascontiguousarray(X.data, dtype=DTYPE)
- * 
- *             if X.indices.dtype != np.int32 or X.indptr.dtype != np.int32:             # <<<<<<<<<<<<<<
- *                 raise ValueError("No support for np.int64 index based "
- *                                  "sparse matrices")
- */
-    }
-
-    /* "skgarden/mondrian/tree/_tree.pyx":104
+  /* "skgarden/mondrian/tree/_tree.pyx":113
  *                              np.ndarray sample_weight):
  *         """Check input dtype, layout and format"""
- *         if issparse(X):             # <<<<<<<<<<<<<<
- *             X = X.tocsc()
- *             X.sort_indices()
- */
-    goto __pyx_L3;
-  }
-
-  /* "skgarden/mondrian/tree/_tree.pyx":115
- *                                  "sparse matrices")
- * 
- *         elif X.dtype != DTYPE:             # <<<<<<<<<<<<<<
+ *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
  *             # since we have to copy we will make it fortran for efficiency
  *             X = np.asfortranarray(X, dtype=DTYPE)
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 115, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (__pyx_t_5) {
+  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (__pyx_t_4) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":117
- *         elif X.dtype != DTYPE:
+    /* "skgarden/mondrian/tree/_tree.pyx":115
+ *         if X.dtype != DTYPE:
  *             # since we have to copy we will make it fortran for efficiency
  *             X = np.asfortranarray(X, dtype=DTYPE)             # <<<<<<<<<<<<<<
  * 
  *         if y.dtype != DOUBLE or not y.flags.contiguous:
  */
-    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asfortranarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asfortranarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
     __Pyx_INCREF(__pyx_v_X);
     __Pyx_GIVEREF(__pyx_v_X);
-    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_X);
-    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
+    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_X);
+    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
-    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_1);
-    __pyx_t_1 = 0;
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_5);
+    __pyx_t_5 = 0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":115
- *                                  "sparse matrices")
- * 
- *         elif X.dtype != DTYPE:             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":113
+ *                              np.ndarray sample_weight):
+ *         """Check input dtype, layout and format"""
+ *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
  *             # since we have to copy we will make it fortran for efficiency
  *             X = np.asfortranarray(X, dtype=DTYPE)
  */
   }
-  __pyx_L3:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":119
+  /* "skgarden/mondrian/tree/_tree.pyx":117
  *             X = np.asfortranarray(X, dtype=DTYPE)
  * 
  *         if y.dtype != DOUBLE or not y.flags.contiguous:             # <<<<<<<<<<<<<<
  *             y = np.ascontiguousarray(y, dtype=DOUBLE)
  * 
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
+  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   if (!__pyx_t_6) {
   } else {
-    __pyx_t_5 = __pyx_t_6;
-    goto __pyx_L9_bool_binop_done;
+    __pyx_t_4 = __pyx_t_6;
+    goto __pyx_L5_bool_binop_done;
   }
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_contiguous); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_contiguous); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __pyx_t_7 = ((!__pyx_t_6) != 0);
-  __pyx_t_5 = __pyx_t_7;
-  __pyx_L9_bool_binop_done:;
-  if (__pyx_t_5) {
+  __pyx_t_4 = __pyx_t_7;
+  __pyx_L5_bool_binop_done:;
+  if (__pyx_t_4) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":120
+    /* "skgarden/mondrian/tree/_tree.pyx":118
  * 
  *         if y.dtype != DOUBLE or not y.flags.contiguous:
  *             y = np.ascontiguousarray(y, dtype=DOUBLE)             # <<<<<<<<<<<<<<
  * 
  *         if (sample_weight is not None and
  */
-    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
     __Pyx_INCREF(((PyObject *)__pyx_v_y));
     __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
-    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_y));
-    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
+    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_y));
+    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 120, __pyx_L1_error)
-    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_4));
-    __pyx_t_4 = 0;
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 118, __pyx_L1_error)
+    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_2));
+    __pyx_t_2 = 0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":119
+    /* "skgarden/mondrian/tree/_tree.pyx":117
  *             X = np.asfortranarray(X, dtype=DTYPE)
  * 
  *         if y.dtype != DOUBLE or not y.flags.contiguous:             # <<<<<<<<<<<<<<
@@ -3192,7 +3294,7 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":122
+  /* "skgarden/mondrian/tree/_tree.pyx":120
  *             y = np.ascontiguousarray(y, dtype=DOUBLE)
  * 
  *         if (sample_weight is not None and             # <<<<<<<<<<<<<<
@@ -3203,93 +3305,93 @@
   __pyx_t_6 = (__pyx_t_7 != 0);
   if (__pyx_t_6) {
   } else {
-    __pyx_t_5 = __pyx_t_6;
-    goto __pyx_L12_bool_binop_done;
+    __pyx_t_4 = __pyx_t_6;
+    goto __pyx_L8_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":123
+  /* "skgarden/mondrian/tree/_tree.pyx":121
  * 
  *         if (sample_weight is not None and
  *             (sample_weight.dtype != DOUBLE or             # <<<<<<<<<<<<<<
  *             not sample_weight.flags.contiguous)):
  *                 sample_weight = np.asarray(sample_weight, dtype=DOUBLE,
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sample_weight), __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sample_weight), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   if (!__pyx_t_6) {
   } else {
-    __pyx_t_5 = __pyx_t_6;
-    goto __pyx_L12_bool_binop_done;
+    __pyx_t_4 = __pyx_t_6;
+    goto __pyx_L8_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":124
+  /* "skgarden/mondrian/tree/_tree.pyx":122
  *         if (sample_weight is not None and
  *             (sample_weight.dtype != DOUBLE or
  *             not sample_weight.flags.contiguous)):             # <<<<<<<<<<<<<<
  *                 sample_weight = np.asarray(sample_weight, dtype=DOUBLE,
  *                                            order="C")
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sample_weight), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_contiguous); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sample_weight), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_contiguous); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
   __pyx_t_7 = ((!__pyx_t_6) != 0);
-  __pyx_t_5 = __pyx_t_7;
-  __pyx_L12_bool_binop_done:;
+  __pyx_t_4 = __pyx_t_7;
+  __pyx_L8_bool_binop_done:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":122
+  /* "skgarden/mondrian/tree/_tree.pyx":120
  *             y = np.ascontiguousarray(y, dtype=DOUBLE)
  * 
  *         if (sample_weight is not None and             # <<<<<<<<<<<<<<
  *             (sample_weight.dtype != DOUBLE or
  *             not sample_weight.flags.contiguous)):
  */
-  if (__pyx_t_5) {
+  if (__pyx_t_4) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":125
+    /* "skgarden/mondrian/tree/_tree.pyx":123
  *             (sample_weight.dtype != DOUBLE or
  *             not sample_weight.flags.contiguous)):
  *                 sample_weight = np.asarray(sample_weight, dtype=DOUBLE,             # <<<<<<<<<<<<<<
  *                                            order="C")
  * 
  */
-    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
     __Pyx_INCREF(((PyObject *)__pyx_v_sample_weight));
     __Pyx_GIVEREF(((PyObject *)__pyx_v_sample_weight));
-    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_sample_weight));
-    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
-    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
+    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_sample_weight));
+    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 125, __pyx_L1_error)
-    __Pyx_DECREF_SET(__pyx_v_sample_weight, ((PyArrayObject *)__pyx_t_2));
-    __pyx_t_2 = 0;
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 123, __pyx_L1_error)
+    __Pyx_DECREF_SET(__pyx_v_sample_weight, ((PyArrayObject *)__pyx_t_3));
+    __pyx_t_3 = 0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":122
+    /* "skgarden/mondrian/tree/_tree.pyx":120
  *             y = np.ascontiguousarray(y, dtype=DOUBLE)
  * 
  *         if (sample_weight is not None and             # <<<<<<<<<<<<<<
@@ -3298,30 +3400,30 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":128
+  /* "skgarden/mondrian/tree/_tree.pyx":126
  *                                            order="C")
  * 
  *         return X, y, sample_weight             # <<<<<<<<<<<<<<
  * 
- * # Depth first builder ---------------------------------------------------------
+ * cdef class PartialFitTreeBuilder(TreeBuilder):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
   __Pyx_INCREF(__pyx_v_X);
   __Pyx_GIVEREF(__pyx_v_X);
-  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_X);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_X);
   __Pyx_INCREF(((PyObject *)__pyx_v_y));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
-  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_y));
+  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_y));
   __Pyx_INCREF(((PyObject *)__pyx_v_sample_weight));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_sample_weight));
-  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_sample_weight));
-  __pyx_r = __pyx_t_2;
-  __pyx_t_2 = 0;
+  PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_sample_weight));
+  __pyx_r = __pyx_t_3;
+  __pyx_t_3 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":101
+  /* "skgarden/mondrian/tree/_tree.pyx":110
  *         pass
  * 
  *     cdef inline _check_input(self, object X, np.ndarray y,             # <<<<<<<<<<<<<<
@@ -3334,7 +3436,7 @@
   __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
   __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
   __Pyx_AddTraceback("skgarden.mondrian.tree._tree.TreeBuilder._check_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   __pyx_L0:;
@@ -3346,54 +3448,384 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":135
- *     """Build a decision tree in depth-first fashion."""
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     cdef bint use_setstate
+ *     state = (self.max_depth, self.min_samples_leaf, self.min_samples_split, self.min_weight_leaf, self.random_state, self.splitter)
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_2__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_2__reduce_cython__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self) {
+  int __pyx_v_use_setstate;
+  PyObject *__pyx_v_state = NULL;
+  PyObject *__pyx_v__dict = NULL;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  int __pyx_t_6;
+  int __pyx_t_7;
+  int __pyx_t_8;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
+
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     cdef bint use_setstate
+ *     state = (self.max_depth, self.min_samples_leaf, self.min_samples_split, self.min_weight_leaf, self.random_state, self.splitter)             # <<<<<<<<<<<<<<
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:
+ */
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->min_samples_leaf); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->min_samples_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->min_weight_leaf); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_2);
+  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_4);
+  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
+  __Pyx_INCREF(__pyx_v_self->random_state);
+  __Pyx_GIVEREF(__pyx_v_self->random_state);
+  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_self->random_state);
+  __Pyx_INCREF(((PyObject *)__pyx_v_self->splitter));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->splitter));
+  PyTuple_SET_ITEM(__pyx_t_5, 5, ((PyObject *)__pyx_v_self->splitter));
+  __pyx_t_1 = 0;
+  __pyx_t_2 = 0;
+  __pyx_t_3 = 0;
+  __pyx_t_4 = 0;
+  __pyx_v_state = ((PyObject*)__pyx_t_5);
+  __pyx_t_5 = 0;
+
+  /* "(tree fragment)":4
+ *     cdef bint use_setstate
+ *     state = (self.max_depth, self.min_samples_leaf, self.min_samples_split, self.min_weight_leaf, self.random_state, self.splitter)
+ *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
+ *     if _dict is not None:
+ *         state += (_dict,)
+ */
+  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_v__dict = __pyx_t_5;
+  __pyx_t_5 = 0;
+
+  /* "(tree fragment)":5
+ *     state = (self.max_depth, self.min_samples_leaf, self.min_samples_split, self.min_weight_leaf, self.random_state, self.splitter)
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:             # <<<<<<<<<<<<<<
+ *         state += (_dict,)
+ *         use_setstate = True
+ */
+  __pyx_t_6 = (__pyx_v__dict != Py_None);
+  __pyx_t_7 = (__pyx_t_6 != 0);
+  if (__pyx_t_7) {
+
+    /* "(tree fragment)":6
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:
+ *         state += (_dict,)             # <<<<<<<<<<<<<<
+ *         use_setstate = True
+ *     else:
+ */
+    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_INCREF(__pyx_v__dict);
+    __Pyx_GIVEREF(__pyx_v__dict);
+    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
+    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
+    __pyx_t_4 = 0;
+
+    /* "(tree fragment)":7
+ *     if _dict is not None:
+ *         state += (_dict,)
+ *         use_setstate = True             # <<<<<<<<<<<<<<
+ *     else:
+ *         use_setstate = self.random_state is not None or self.splitter is not None
+ */
+    __pyx_v_use_setstate = 1;
+
+    /* "(tree fragment)":5
+ *     state = (self.max_depth, self.min_samples_leaf, self.min_samples_split, self.min_weight_leaf, self.random_state, self.splitter)
+ *     _dict = getattr(self, '__dict__', None)
+ *     if _dict is not None:             # <<<<<<<<<<<<<<
+ *         state += (_dict,)
+ *         use_setstate = True
+ */
+    goto __pyx_L3;
+  }
+
+  /* "(tree fragment)":9
+ *         use_setstate = True
+ *     else:
+ *         use_setstate = self.random_state is not None or self.splitter is not None             # <<<<<<<<<<<<<<
+ *     if use_setstate:
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, None), state
+ */
+  /*else*/ {
+    __pyx_t_6 = (__pyx_v_self->random_state != Py_None);
+    __pyx_t_8 = (__pyx_t_6 != 0);
+    if (!__pyx_t_8) {
+    } else {
+      __pyx_t_7 = __pyx_t_8;
+      goto __pyx_L4_bool_binop_done;
+    }
+    __pyx_t_8 = (((PyObject *)__pyx_v_self->splitter) != Py_None);
+    __pyx_t_6 = (__pyx_t_8 != 0);
+    __pyx_t_7 = __pyx_t_6;
+    __pyx_L4_bool_binop_done:;
+    __pyx_v_use_setstate = __pyx_t_7;
+  }
+  __pyx_L3:;
+
+  /* "(tree fragment)":10
+ *     else:
+ *         use_setstate = self.random_state is not None or self.splitter is not None
+ *     if use_setstate:             # <<<<<<<<<<<<<<
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, None), state
+ *     else:
+ */
+  __pyx_t_7 = (__pyx_v_use_setstate != 0);
+  if (__pyx_t_7) {
+
+    /* "(tree fragment)":11
+ *         use_setstate = self.random_state is not None or self.splitter is not None
+ *     if use_setstate:
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, None), state             # <<<<<<<<<<<<<<
+ *     else:
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, state)
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_TreeBuilder); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 11, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_INCREF(__pyx_int_249227508);
+    __Pyx_GIVEREF(__pyx_int_249227508);
+    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_249227508);
+    __Pyx_INCREF(Py_None);
+    __Pyx_GIVEREF(Py_None);
+    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
+    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 11, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_GIVEREF(__pyx_t_4);
+    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
+    __Pyx_GIVEREF(__pyx_t_5);
+    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
+    __Pyx_INCREF(__pyx_v_state);
+    __Pyx_GIVEREF(__pyx_v_state);
+    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
+    __pyx_t_4 = 0;
+    __pyx_t_5 = 0;
+    __pyx_r = __pyx_t_3;
+    __pyx_t_3 = 0;
+    goto __pyx_L0;
+
+    /* "(tree fragment)":10
+ *     else:
+ *         use_setstate = self.random_state is not None or self.splitter is not None
+ *     if use_setstate:             # <<<<<<<<<<<<<<
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, None), state
+ *     else:
+ */
+  }
+
+  /* "(tree fragment)":13
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, None), state
+ *     else:
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, state)             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     __pyx_unpickle_TreeBuilder__set_state(self, __pyx_state)
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_TreeBuilder); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
+    __Pyx_INCREF(__pyx_int_249227508);
+    __Pyx_GIVEREF(__pyx_int_249227508);
+    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_249227508);
+    __Pyx_INCREF(__pyx_v_state);
+    __Pyx_GIVEREF(__pyx_v_state);
+    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
+    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_GIVEREF(__pyx_t_3);
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
+    __Pyx_GIVEREF(__pyx_t_5);
+    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
+    __pyx_t_3 = 0;
+    __pyx_t_5 = 0;
+    __pyx_r = __pyx_t_4;
+    __pyx_t_4 = 0;
+    goto __pyx_L0;
+  }
+
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     cdef bint use_setstate
+ *     state = (self.max_depth, self.min_samples_leaf, self.min_samples_split, self.min_weight_leaf, self.random_state, self.splitter)
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.TreeBuilder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v_state);
+  __Pyx_XDECREF(__pyx_v__dict);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":14
+ *     else:
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, state)
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_unpickle_TreeBuilder__set_state(self, __pyx_state)
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_4__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_4__setstate_cython__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
+
+  /* "(tree fragment)":15
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, state)
+ * def __setstate_cython__(self, __pyx_state):
+ *     __pyx_unpickle_TreeBuilder__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
+ */
+  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
+  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+
+  /* "(tree fragment)":14
+ *     else:
+ *         return __pyx_unpickle_TreeBuilder, (type(self), 0xedae8f4, state)
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_unpickle_TreeBuilder__set_state(self, __pyx_state)
+ */
+
+  /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.TreeBuilder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":131
+ *     """Build a decision tree incrementally."""
  * 
- *     def __cinit__(self, Splitter splitter, SIZE_t min_samples_split,             # <<<<<<<<<<<<<<
- *                   SIZE_t max_depth):
- *         self.splitter = splitter
+ *     def __cinit__(self, SIZE_t min_samples_split, SIZE_t max_depth,             # <<<<<<<<<<<<<<
+ *                   object random_state):
+ *         self.min_samples_split = min_samples_split
  */
 
 /* Python wrapper */
-static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
-  struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter = 0;
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth;
+  PyObject *__pyx_v_random_state = 0;
   int __pyx_r;
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
   {
-    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_splitter,&__pyx_n_s_min_samples_split,&__pyx_n_s_max_depth,0};
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_samples_split,&__pyx_n_s_max_depth,&__pyx_n_s_random_state,0};
     PyObject* values[3] = {0,0,0};
     if (unlikely(__pyx_kwds)) {
       Py_ssize_t kw_args;
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
       kw_args = PyDict_Size(__pyx_kwds);
       switch (pos_args) {
         case  0:
-        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_splitter)) != 0)) kw_args--;
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_samples_split)) != 0)) kw_args--;
         else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
         case  1:
-        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_samples_split)) != 0)) kw_args--;
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_depth)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 135, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 131, __pyx_L3_error)
         }
+        CYTHON_FALLTHROUGH;
         case  2:
-        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_depth)) != 0)) kw_args--;
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_random_state)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 135, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 131, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 135, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
       goto __pyx_L5_argtuple_error;
@@ -3402,72 +3834,67 @@
       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
     }
-    __pyx_v_splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)values[0]);
-    __pyx_v_min_samples_split = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_min_samples_split == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L3_error)
-    __pyx_v_max_depth = __Pyx_PyInt_As_Py_intptr_t(values[2]); if (unlikely((__pyx_v_max_depth == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L3_error)
+    __pyx_v_min_samples_split = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_min_samples_split == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
+    __pyx_v_max_depth = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_max_depth == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
+    __pyx_v_random_state = values[2];
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 135, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 131, __pyx_L3_error)
   __pyx_L3_error:;
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.PartialFitTreeBuilder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
   return -1;
   __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_splitter), __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter, 1, "splitter", 0))) __PYX_ERR(0, 135, __pyx_L1_error)
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *)__pyx_v_self), __pyx_v_splitter, __pyx_v_min_samples_split, __pyx_v_max_depth);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *)__pyx_v_self), __pyx_v_min_samples_split, __pyx_v_max_depth, __pyx_v_random_state);
 
   /* function exit code */
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __pyx_r = -1;
-  __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth) {
+static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth, PyObject *__pyx_v_random_state) {
   int __pyx_r;
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__cinit__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":137
- *     def __cinit__(self, Splitter splitter, SIZE_t min_samples_split,
- *                   SIZE_t max_depth):
- *         self.splitter = splitter             # <<<<<<<<<<<<<<
- *         self.min_samples_split = min_samples_split
- *         self.max_depth = max_depth
- */
-  __Pyx_INCREF(((PyObject *)__pyx_v_splitter));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_splitter));
-  __Pyx_GOTREF(__pyx_v_self->__pyx_base.splitter);
-  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.splitter));
-  __pyx_v_self->__pyx_base.splitter = __pyx_v_splitter;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":138
- *                   SIZE_t max_depth):
- *         self.splitter = splitter
+  /* "skgarden/mondrian/tree/_tree.pyx":133
+ *     def __cinit__(self, SIZE_t min_samples_split, SIZE_t max_depth,
+ *                   object random_state):
  *         self.min_samples_split = min_samples_split             # <<<<<<<<<<<<<<
  *         self.max_depth = max_depth
- * 
+ *         self.random_state = random_state
  */
   __pyx_v_self->__pyx_base.min_samples_split = __pyx_v_min_samples_split;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":139
- *         self.splitter = splitter
+  /* "skgarden/mondrian/tree/_tree.pyx":134
+ *                   object random_state):
  *         self.min_samples_split = min_samples_split
  *         self.max_depth = max_depth             # <<<<<<<<<<<<<<
+ *         self.random_state = random_state
  * 
- *     cpdef build(self, Tree tree, object X, np.ndarray y,
  */
   __pyx_v_self->__pyx_base.max_depth = __pyx_v_max_depth;
 
   /* "skgarden/mondrian/tree/_tree.pyx":135
- *     """Build a decision tree in depth-first fashion."""
+ *         self.min_samples_split = min_samples_split
+ *         self.max_depth = max_depth
+ *         self.random_state = random_state             # <<<<<<<<<<<<<<
  * 
- *     def __cinit__(self, Splitter splitter, SIZE_t min_samples_split,             # <<<<<<<<<<<<<<
- *                   SIZE_t max_depth):
- *         self.splitter = splitter
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ */
+  __Pyx_INCREF(__pyx_v_random_state);
+  __Pyx_GIVEREF(__pyx_v_random_state);
+  __Pyx_GOTREF(__pyx_v_self->__pyx_base.random_state);
+  __Pyx_DECREF(__pyx_v_self->__pyx_base.random_state);
+  __pyx_v_self->__pyx_base.random_state = __pyx_v_random_state;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":131
+ *     """Build a decision tree incrementally."""
+ * 
+ *     def __cinit__(self, SIZE_t min_samples_split, SIZE_t max_depth,             # <<<<<<<<<<<<<<
+ *                   object random_state):
+ *         self.min_samples_split = min_samples_split
  */
 
   /* function exit code */
@@ -3476,57 +3903,45 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":141
- *         self.max_depth = max_depth
+/* "skgarden/mondrian/tree/_tree.pyx":137
+ *         self.random_state = random_state
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
  *                 np.ndarray sample_weight=None,
  *                 np.ndarray X_idx_sorted=None):
  */
 
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build *__pyx_optional_args) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build *__pyx_optional_args) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":142
+  /* "skgarden/mondrian/tree/_tree.pyx":138
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,
  *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
  *                 np.ndarray X_idx_sorted=None):
- *         """Build a decision tree from the training set (X, y)."""
+ *         X, y, sample_weight = self._check_input(X, y, None)
  */
   PyArrayObject *__pyx_v_sample_weight = ((PyArrayObject *)Py_None);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":143
+  /* "skgarden/mondrian/tree/_tree.pyx":139
  *     cpdef build(self, Tree tree, object X, np.ndarray y,
  *                 np.ndarray sample_weight=None,
  *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
- *         """Build a decision tree from the training set (X, y)."""
+ *         X, y, sample_weight = self._check_input(X, y, None)
  * 
  */
   PyArrayObject *__pyx_v_X_idx_sorted = ((PyArrayObject *)Py_None);
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_sample_weight_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t __pyx_v_rand_r_state;
+  int __pyx_v_n_samples;
   int __pyx_v_init_capacity;
-  struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split;
+  PyArrayObject *__pyx_v_X_ndarray = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_s_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_y_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_sample_ind;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_start;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_end;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_depth;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent;
-  int __pyx_v_is_left;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples;
-  CYTHON_UNUSED double __pyx_v_weighted_n_samples;
-  double __pyx_v_weighted_n_node_samples;
-  struct __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SplitRecord __pyx_v_split;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_id;
-  double __pyx_v_impurity;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_constant_features;
-  int __pyx_v_is_leaf;
-  int __pyx_v_first;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth_seen;
-  int __pyx_v_rc;
-  struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_stack = 0;
-  struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord __pyx_v_stack_record;
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
@@ -3536,14 +3951,9 @@
   int __pyx_t_5;
   PyObject *__pyx_t_6 = NULL;
   PyObject *(*__pyx_t_7)(PyObject *);
-  int __pyx_t_8;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t __pyx_t_8;
   int __pyx_t_9;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_10;
-  struct __pyx_opt_args_8skgarden_8mondrian_4tree_9_splitter_8Splitter_init __pyx_t_11;
-  __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_12;
-  double __pyx_t_13;
-  __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_t_14;
-  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_15;
   __Pyx_RefNannySetupContext("build", 0);
   if (__pyx_optional_args) {
     if (__pyx_optional_args->__pyx_n > 0) {
@@ -3557,8 +3967,8 @@
   __Pyx_INCREF((PyObject *)__pyx_v_y);
   __Pyx_INCREF((PyObject *)__pyx_v_sample_weight);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":141
- *         self.max_depth = max_depth
+  /* "skgarden/mondrian/tree/_tree.pyx":137
+ *         self.random_state = random_state
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
  *                 np.ndarray sample_weight=None,
@@ -3568,9 +3978,9 @@
   if (unlikely(__pyx_skip_dispatch)) ;
   /* Check if overridden in Python */
   else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
-    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build)) {
+    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_3build)) {
       __Pyx_XDECREF(__pyx_r);
       __Pyx_INCREF(__pyx_t_1);
       __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
@@ -3588,7 +3998,7 @@
       #if CYTHON_FAST_PYCALL
       if (PyFunction_Check(__pyx_t_3)) {
         PyObject *__pyx_temp[6] = {__pyx_t_4, ((PyObject *)__pyx_v_tree), __pyx_v_X, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_sample_weight), ((PyObject *)__pyx_v_X_idx_sorted)};
-        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_GOTREF(__pyx_t_2);
       } else
@@ -3596,13 +4006,13 @@
       #if CYTHON_FAST_PYCCALL
       if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
         PyObject *__pyx_temp[6] = {__pyx_t_4, ((PyObject *)__pyx_v_tree), __pyx_v_X, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_sample_weight), ((PyObject *)__pyx_v_X_idx_sorted)};
-        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
         __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_GOTREF(__pyx_t_2);
       } else
       #endif
       {
-        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 141, __pyx_L1_error)
+        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_6);
         if (__pyx_t_4) {
           __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
@@ -3622,7 +4032,7 @@
         __Pyx_INCREF(((PyObject *)__pyx_v_X_idx_sorted));
         __Pyx_GIVEREF(((PyObject *)__pyx_v_X_idx_sorted));
         PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, ((PyObject *)__pyx_v_X_idx_sorted));
-        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_2);
         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
       }
@@ -3635,14 +4045,14 @@
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":147
- * 
- *         # check input
- *         X, y, sample_weight = self._check_input(X, y, sample_weight)             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":140
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
+ *         X, y, sample_weight = self._check_input(X, y, None)             # <<<<<<<<<<<<<<
  * 
- *         cdef DOUBLE_t* sample_weight_ptr = NULL
+ *         cdef UINT32_t rand_r_state = self.random_state.randint(0, RAND_R_MAX)
  */
-  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder__check_input(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
+  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder__check_input(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_X, __pyx_v_y, ((PyArrayObject *)Py_None)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
     PyObject* sequence = __pyx_t_1;
@@ -3654,7 +4064,7 @@
     if (unlikely(size != 3)) {
       if (size > 3) __Pyx_RaiseTooManyValuesError(3);
       else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
-      __PYX_ERR(0, 147, __pyx_L1_error)
+      __PYX_ERR(0, 140, __pyx_L1_error)
     }
     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
     if (likely(PyTuple_CheckExact(sequence))) {
@@ -3670,17 +4080,17 @@
     __Pyx_INCREF(__pyx_t_3);
     __Pyx_INCREF(__pyx_t_6);
     #else
-    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
+    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
+    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
+    __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_6);
     #endif
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   } else {
     Py_ssize_t index = -1;
-    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
+    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
     __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext;
@@ -3690,7 +4100,7 @@
     __Pyx_GOTREF(__pyx_t_3);
     index = 2; __pyx_t_6 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_6)) goto __pyx_L3_unpacking_failed;
     __Pyx_GOTREF(__pyx_t_6);
-    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_4), 3) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
+    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_4), 3) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
     __pyx_t_7 = NULL;
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
     goto __pyx_L4_unpacking_done;
@@ -3698,11 +4108,11 @@
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
     __pyx_t_7 = NULL;
     if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
-    __PYX_ERR(0, 147, __pyx_L1_error)
+    __PYX_ERR(0, 140, __pyx_L1_error)
     __pyx_L4_unpacking_done:;
   }
-  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 147, __pyx_L1_error)
-  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 147, __pyx_L1_error)
+  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 140, __pyx_L1_error)
+  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 140, __pyx_L1_error)
   __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_2);
   __pyx_t_2 = 0;
   __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_3));
@@ -3710,1661 +4120,1968 @@
   __Pyx_DECREF_SET(__pyx_v_sample_weight, ((PyArrayObject *)__pyx_t_6));
   __pyx_t_6 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":149
- *         X, y, sample_weight = self._check_input(X, y, sample_weight)
- * 
- *         cdef DOUBLE_t* sample_weight_ptr = NULL             # <<<<<<<<<<<<<<
- *         if sample_weight is not None:
- *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data
- */
-  __pyx_v_sample_weight_ptr = NULL;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":150
- * 
- *         cdef DOUBLE_t* sample_weight_ptr = NULL
- *         if sample_weight is not None:             # <<<<<<<<<<<<<<
- *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data
+  /* "skgarden/mondrian/tree/_tree.pyx":142
+ *         X, y, sample_weight = self._check_input(X, y, None)
  * 
- */
-  __pyx_t_8 = (((PyObject *)__pyx_v_sample_weight) != Py_None);
-  __pyx_t_9 = (__pyx_t_8 != 0);
-  if (__pyx_t_9) {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":151
- *         cdef DOUBLE_t* sample_weight_ptr = NULL
- *         if sample_weight is not None:
- *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data             # <<<<<<<<<<<<<<
+ *         cdef UINT32_t rand_r_state = self.random_state.randint(0, RAND_R_MAX)             # <<<<<<<<<<<<<<
+ *         cdef int n_samples = X.shape[0]
  * 
- *         # Initial capacity
  */
-    __pyx_v_sample_weight_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *)__pyx_v_sample_weight->data);
+  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base.random_state, __pyx_n_s_randint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 142, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_2 = NULL;
+  __pyx_t_5 = 0;
+  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
+    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
+    if (likely(__pyx_t_2)) {
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
+      __Pyx_INCREF(__pyx_t_2);
+      __Pyx_INCREF(function);
+      __Pyx_DECREF_SET(__pyx_t_6, function);
+      __pyx_t_5 = 1;
+    }
+  }
+  #if CYTHON_FAST_PYCALL
+  if (PyFunction_Check(__pyx_t_6)) {
+    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_int_0, __pyx_t_3};
+    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
+    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  } else
+  #endif
+  #if CYTHON_FAST_PYCCALL
+  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
+    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_int_0, __pyx_t_3};
+    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
+    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  } else
+  #endif
+  {
+    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    if (__pyx_t_2) {
+      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
+    }
+    __Pyx_INCREF(__pyx_int_0);
+    __Pyx_GIVEREF(__pyx_int_0);
+    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_int_0);
+    __Pyx_GIVEREF(__pyx_t_3);
+    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_t_3);
+    __pyx_t_3 = 0;
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  }
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_8 = __Pyx_PyInt_As_npy_uint32(__pyx_t_1); if (unlikely((__pyx_t_8 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_rand_r_state = __pyx_t_8;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":150
+  /* "skgarden/mondrian/tree/_tree.pyx":143
  * 
- *         cdef DOUBLE_t* sample_weight_ptr = NULL
- *         if sample_weight is not None:             # <<<<<<<<<<<<<<
- *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data
+ *         cdef UINT32_t rand_r_state = self.random_state.randint(0, RAND_R_MAX)
+ *         cdef int n_samples = X.shape[0]             # <<<<<<<<<<<<<<
  * 
+ *         # Allocate memory for tree.
  */
-  }
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_v_n_samples = __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":156
+  /* "skgarden/mondrian/tree/_tree.pyx":147
+ *         # Allocate memory for tree.
  *         cdef int init_capacity
- * 
  *         if tree.max_depth <= 10:             # <<<<<<<<<<<<<<
  *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
- *         else:
+ *             tree._resize(init_capacity)
  */
   __pyx_t_9 = ((__pyx_v_tree->max_depth <= 10) != 0);
   if (__pyx_t_9) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":157
- * 
+    /* "skgarden/mondrian/tree/_tree.pyx":148
+ *         cdef int init_capacity
  *         if tree.max_depth <= 10:
  *             init_capacity = (2 ** (tree.max_depth + 1)) - 1             # <<<<<<<<<<<<<<
- *         else:
- *             init_capacity = 2047
+ *             tree._resize(init_capacity)
+ * 
  */
     __pyx_v_init_capacity = (__Pyx_pow_long(2, (__pyx_v_tree->max_depth + 1)) - 1);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":156
- *         cdef int init_capacity
+    /* "skgarden/mondrian/tree/_tree.pyx":149
+ *         if tree.max_depth <= 10:
+ *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
+ *             tree._resize(init_capacity)             # <<<<<<<<<<<<<<
  * 
+ *         cdef np.ndarray X_ndarray = X
+ */
+    __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_resize(__pyx_v_tree, __pyx_v_init_capacity); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 149, __pyx_L1_error)
+
+    /* "skgarden/mondrian/tree/_tree.pyx":147
+ *         # Allocate memory for tree.
+ *         cdef int init_capacity
  *         if tree.max_depth <= 10:             # <<<<<<<<<<<<<<
  *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
- *         else:
+ *             tree._resize(init_capacity)
  */
-    goto __pyx_L6;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":159
- *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
- *         else:
- *             init_capacity = 2047             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":151
+ *             tree._resize(init_capacity)
  * 
- *         tree._resize(init_capacity)
+ *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef DOUBLE_t* y_ptr = <DOUBLE_t*> y.data
  */
-  /*else*/ {
-    __pyx_v_init_capacity = 0x7FF;
-  }
-  __pyx_L6:;
+  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 151, __pyx_L1_error)
+  __pyx_t_6 = __pyx_v_X;
+  __Pyx_INCREF(__pyx_t_6);
+  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_6);
+  __pyx_t_6 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":161
- *             init_capacity = 2047
+  /* "skgarden/mondrian/tree/_tree.pyx":152
  * 
- *         tree._resize(init_capacity)             # <<<<<<<<<<<<<<
- * 
- *         # Parameters
+ *         cdef np.ndarray X_ndarray = X
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
+ *         cdef DOUBLE_t* y_ptr = <DOUBLE_t*> y.data
+ *         cdef SIZE_t X_f_stride = X.strides[1] / X.itemsize
  */
-  __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_resize(__pyx_v_tree, __pyx_v_init_capacity); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 161, __pyx_L1_error)
+  __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":164
- * 
- *         # Parameters
- *         cdef Splitter splitter = self.splitter             # <<<<<<<<<<<<<<
- *         cdef SIZE_t max_depth = self.max_depth
- *         cdef SIZE_t min_samples_split = self.min_samples_split
+  /* "skgarden/mondrian/tree/_tree.pyx":153
+ *         cdef np.ndarray X_ndarray = X
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef DOUBLE_t* y_ptr = <DOUBLE_t*> y.data             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t X_f_stride = X.strides[1] / X.itemsize
+ *         cdef SIZE_t X_s_stride = X.strides[0] / X.itemsize
  */
-  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.splitter);
-  __Pyx_INCREF(__pyx_t_1);
-  __pyx_v_splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_t_1);
-  __pyx_t_1 = 0;
+  __pyx_v_y_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *)__pyx_v_y->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":165
- *         # Parameters
- *         cdef Splitter splitter = self.splitter
- *         cdef SIZE_t max_depth = self.max_depth             # <<<<<<<<<<<<<<
- *         cdef SIZE_t min_samples_split = self.min_samples_split
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":154
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef DOUBLE_t* y_ptr = <DOUBLE_t*> y.data
+ *         cdef SIZE_t X_f_stride = X.strides[1] / X.itemsize             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t X_s_stride = X.strides[0] / X.itemsize
+ *         cdef SIZE_t y_stride = y.strides[0] / y.itemsize
  */
-  __pyx_t_10 = __pyx_v_self->__pyx_base.max_depth;
-  __pyx_v_max_depth = __pyx_t_10;
+  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_10 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_10 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_v_X_f_stride = __pyx_t_10;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":166
- *         cdef Splitter splitter = self.splitter
- *         cdef SIZE_t max_depth = self.max_depth
- *         cdef SIZE_t min_samples_split = self.min_samples_split             # <<<<<<<<<<<<<<
- * 
- *         # Recursive partition (without actual recursion)
+  /* "skgarden/mondrian/tree/_tree.pyx":155
+ *         cdef DOUBLE_t* y_ptr = <DOUBLE_t*> y.data
+ *         cdef SIZE_t X_f_stride = X.strides[1] / X.itemsize
+ *         cdef SIZE_t X_s_stride = X.strides[0] / X.itemsize             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t y_stride = y.strides[0] / y.itemsize
+ *         cdef SIZE_t sample_ind
  */
-  __pyx_t_10 = __pyx_v_self->__pyx_base.min_samples_split;
-  __pyx_v_min_samples_split = __pyx_t_10;
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_10 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_X_s_stride = __pyx_t_10;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":169
- * 
- *         # Recursive partition (without actual recursion)
- *         splitter.init(X, y, sample_weight_ptr, X_idx_sorted)             # <<<<<<<<<<<<<<
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":156
+ *         cdef SIZE_t X_f_stride = X.strides[1] / X.itemsize
+ *         cdef SIZE_t X_s_stride = X.strides[0] / X.itemsize
+ *         cdef SIZE_t y_stride = y.strides[0] / y.itemsize             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t sample_ind
  *         cdef SIZE_t start
  */
-  __pyx_t_11.__pyx_n = 1;
-  __pyx_t_11.X_idx_sorted = __pyx_v_X_idx_sorted;
-  __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->init(__pyx_v_splitter, __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight_ptr, &__pyx_t_11); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 169, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_y->strides[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 156, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 156, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_10 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_6); if (unlikely((__pyx_t_10 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_v_y_stride = __pyx_t_10;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":176
- *         cdef SIZE_t parent
- *         cdef bint is_left
- *         cdef SIZE_t n_node_samples = splitter.n_samples             # <<<<<<<<<<<<<<
- *         cdef double weighted_n_samples = splitter.weighted_n_samples
- *         cdef double weighted_n_node_samples
+  /* "skgarden/mondrian/tree/_tree.pyx":161
+ * 
+ *         # Initialize the tree when the first sample is inserted.
+ *         if tree.node_count == 0:             # <<<<<<<<<<<<<<
+ *             tree._init(X_ptr, y_ptr, X_f_stride)
+ *             start = 1
  */
-  __pyx_t_12 = __pyx_v_splitter->n_samples;
-  __pyx_v_n_node_samples = __pyx_t_12;
+  __pyx_t_9 = ((__pyx_v_tree->node_count == 0) != 0);
+  if (__pyx_t_9) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":177
- *         cdef bint is_left
- *         cdef SIZE_t n_node_samples = splitter.n_samples
- *         cdef double weighted_n_samples = splitter.weighted_n_samples             # <<<<<<<<<<<<<<
- *         cdef double weighted_n_node_samples
- *         cdef SplitRecord split
+    /* "skgarden/mondrian/tree/_tree.pyx":162
+ *         # Initialize the tree when the first sample is inserted.
+ *         if tree.node_count == 0:
+ *             tree._init(X_ptr, y_ptr, X_f_stride)             # <<<<<<<<<<<<<<
+ *             start = 1
+ *         else:
  */
-  __pyx_t_13 = __pyx_v_splitter->weighted_n_samples;
-  __pyx_v_weighted_n_samples = __pyx_t_13;
+    ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_init(__pyx_v_tree, __pyx_v_X_ptr, __pyx_v_y_ptr, __pyx_v_X_f_stride);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":183
- * 
- *         cdef double threshold
- *         cdef double impurity = INFINITY             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_constant_features
- *         cdef bint is_leaf
+    /* "skgarden/mondrian/tree/_tree.pyx":163
+ *         if tree.node_count == 0:
+ *             tree._init(X_ptr, y_ptr, X_f_stride)
+ *             start = 1             # <<<<<<<<<<<<<<
+ *         else:
+ *             start = 0
  */
-  __pyx_v_impurity = __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY;
+    __pyx_v_start = 1;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":186
- *         cdef SIZE_t n_constant_features
- *         cdef bint is_leaf
- *         cdef bint first = 1             # <<<<<<<<<<<<<<
- *         cdef SIZE_t max_depth_seen = -1
- *         cdef int rc = 0
+    /* "skgarden/mondrian/tree/_tree.pyx":161
+ * 
+ *         # Initialize the tree when the first sample is inserted.
+ *         if tree.node_count == 0:             # <<<<<<<<<<<<<<
+ *             tree._init(X_ptr, y_ptr, X_f_stride)
+ *             start = 1
  */
-  __pyx_v_first = 1;
+    goto __pyx_L6;
+  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":187
- *         cdef bint is_leaf
- *         cdef bint first = 1
- *         cdef SIZE_t max_depth_seen = -1             # <<<<<<<<<<<<<<
- *         cdef int rc = 0
+  /* "skgarden/mondrian/tree/_tree.pyx":165
+ *             start = 1
+ *         else:
+ *             start = 0             # <<<<<<<<<<<<<<
  * 
+ *         for sample_ind in range(start, n_samples):
  */
-  __pyx_v_max_depth_seen = -1;
+  /*else*/ {
+    __pyx_v_start = 0;
+  }
+  __pyx_L6:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":188
- *         cdef bint first = 1
- *         cdef SIZE_t max_depth_seen = -1
- *         cdef int rc = 0             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":167
+ *             start = 0
  * 
- *         cdef Stack stack = Stack(INITIAL_STACK_SIZE)
+ *         for sample_ind in range(start, n_samples):             # <<<<<<<<<<<<<<
+ *             tree.extend(X_ptr, y_ptr, sample_ind*X_s_stride,
+ *                         X_f_stride,
  */
-  __pyx_v_rc = 0;
+  __pyx_t_5 = __pyx_v_n_samples;
+  for (__pyx_t_10 = __pyx_v_start; __pyx_t_10 < __pyx_t_5; __pyx_t_10+=1) {
+    __pyx_v_sample_ind = __pyx_t_10;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":190
- *         cdef int rc = 0
- * 
- *         cdef Stack stack = Stack(INITIAL_STACK_SIZE)             # <<<<<<<<<<<<<<
- *         cdef StackRecord stack_record
+    /* "skgarden/mondrian/tree/_tree.pyx":168
  * 
+ *         for sample_ind in range(start, n_samples):
+ *             tree.extend(X_ptr, y_ptr, sample_ind*X_s_stride,             # <<<<<<<<<<<<<<
+ *                         X_f_stride,
+ *                         sample_ind*y_stride, rand_r_state,
  */
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_8skgarden_8mondrian_4tree_5_tree_INITIAL_STACK_SIZE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_GIVEREF(__pyx_t_1);
-  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
-  __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_v_stack = ((struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_t_1);
-  __pyx_t_1 = 0;
+    ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->extend(__pyx_v_tree, __pyx_v_X_ptr, __pyx_v_y_ptr, (__pyx_v_sample_ind * __pyx_v_X_s_stride), __pyx_v_X_f_stride, (__pyx_v_sample_ind * __pyx_v_y_stride), __pyx_v_rand_r_state, __pyx_v_self->__pyx_base.min_samples_split);
+  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":193
- *         cdef StackRecord stack_record
+  /* "skgarden/mondrian/tree/_tree.pyx":137
+ *         self.random_state = random_state
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             # push root node onto stack
- *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
  */
-  {
-      #ifdef WITH_THREAD
-      PyThreadState *_save;
-      Py_UNBLOCK_THREADS
-      #endif
-      /*try:*/ {
 
-        /* "skgarden/mondrian/tree/_tree.pyx":195
- *         with nogil:
- *             # push root node onto stack
- *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)             # <<<<<<<<<<<<<<
- *             if rc == -1:
- *                 # got return code -1 - out-of-memory
- */
-        __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->push(__pyx_v_stack, 0, __pyx_v_n_node_samples, 0, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED, 0, __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY, 0); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 195, __pyx_L8_error)
-        __pyx_v_rc = __pyx_t_5;
+  /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.PartialFitTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = 0;
+  __pyx_L0:;
+  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
+  __Pyx_XDECREF(__pyx_v_X);
+  __Pyx_XDECREF((PyObject *)__pyx_v_y);
+  __Pyx_XDECREF((PyObject *)__pyx_v_sample_weight);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-        /* "skgarden/mondrian/tree/_tree.pyx":196
- *             # push root node onto stack
- *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
- *             if rc == -1:             # <<<<<<<<<<<<<<
- *                 # got return code -1 - out-of-memory
- *                 with gil:
- */
-        __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
-        if (__pyx_t_9) {
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree = 0;
+  PyObject *__pyx_v_X = 0;
+  PyArrayObject *__pyx_v_y = 0;
+  PyArrayObject *__pyx_v_sample_weight = 0;
+  PyArrayObject *__pyx_v_X_idx_sorted = 0;
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("build (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_X,&__pyx_n_s_y,&__pyx_n_s_sample_weight,&__pyx_n_s_X_idx_sorted,0};
+    PyObject* values[5] = {0,0,0,0,0};
 
-          /* "skgarden/mondrian/tree/_tree.pyx":198
- *             if rc == -1:
- *                 # got return code -1 - out-of-memory
- *                 with gil:             # <<<<<<<<<<<<<<
- *                     raise MemoryError()
+    /* "skgarden/mondrian/tree/_tree.pyx":138
  * 
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
+ *                 np.ndarray X_idx_sorted=None):
+ *         X, y, sample_weight = self._check_input(X, y, None)
  */
-          {
-              #ifdef WITH_THREAD
-              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
-              #endif
-              /*try:*/ {
+    values[3] = (PyObject *)((PyArrayObject *)Py_None);
 
-                /* "skgarden/mondrian/tree/_tree.pyx":199
- *                 # got return code -1 - out-of-memory
- *                 with gil:
- *                     raise MemoryError()             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":139
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
+ *         X, y, sample_weight = self._check_input(X, y, None)
  * 
- *             while not stack.is_empty():
  */
-                PyErr_NoMemory(); __PYX_ERR(0, 199, __pyx_L12_error)
-              }
+    values[4] = (PyObject *)((PyArrayObject *)Py_None);
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 1); __PYX_ERR(0, 137, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 2); __PYX_ERR(0, 137, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  3:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_weight);
+          if (value) { values[3] = value; kw_args--; }
+        }
+        CYTHON_FALLTHROUGH;
+        case  4:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X_idx_sorted);
+          if (value) { values[4] = value; kw_args--; }
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 137, __pyx_L3_error)
+      }
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+    }
+    __pyx_v_tree = ((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)values[0]);
+    __pyx_v_X = values[1];
+    __pyx_v_y = ((PyArrayObject *)values[2]);
+    __pyx_v_sample_weight = ((PyArrayObject *)values[3]);
+    __pyx_v_X_idx_sorted = ((PyArrayObject *)values[4]);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 137, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.PartialFitTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree, 1, "tree", 0))) __PYX_ERR(0, 137, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 137, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sample_weight), __pyx_ptype_5numpy_ndarray, 1, "sample_weight", 0))) __PYX_ERR(0, 138, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X_idx_sorted), __pyx_ptype_5numpy_ndarray, 1, "X_idx_sorted", 0))) __PYX_ERR(0, 139, __pyx_L1_error)
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_2build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight, __pyx_v_X_idx_sorted);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":198
- *             if rc == -1:
- *                 # got return code -1 - out-of-memory
- *                 with gil:             # <<<<<<<<<<<<<<
- *                     raise MemoryError()
+  /* "skgarden/mondrian/tree/_tree.pyx":137
+ *         self.random_state = random_state
  * 
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
  */
-              /*finally:*/ {
-                __pyx_L12_error: {
-                  #ifdef WITH_THREAD
-                  PyGILState_Release(__pyx_gilstate_save);
-                  #endif
-                  goto __pyx_L8_error;
-                }
-              }
-          }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":196
- *             # push root node onto stack
- *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
- *             if rc == -1:             # <<<<<<<<<<<<<<
- *                 # got return code -1 - out-of-memory
- *                 with gil:
- */
-        }
+  /* function exit code */
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-        /* "skgarden/mondrian/tree/_tree.pyx":201
- *                     raise MemoryError()
- * 
- *             while not stack.is_empty():             # <<<<<<<<<<<<<<
- *                 stack.pop(&stack_record)
- * 
- */
-        while (1) {
-          __pyx_t_9 = ((!(((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->is_empty(__pyx_v_stack) != 0)) != 0);
-          if (!__pyx_t_9) break;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_2build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight, PyArrayObject *__pyx_v_X_idx_sorted) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build __pyx_t_2;
+  __Pyx_RefNannySetupContext("build", 0);
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_2.__pyx_n = 2;
+  __pyx_t_2.sample_weight = __pyx_v_sample_weight;
+  __pyx_t_2.X_idx_sorted = __pyx_v_X_idx_sorted;
+  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder->__pyx_base.build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":202
- * 
- *             while not stack.is_empty():
- *                 stack.pop(&stack_record)             # <<<<<<<<<<<<<<
- * 
- *                 start = stack_record.start
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.PartialFitTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
  */
-          ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->pop(__pyx_v_stack, (&__pyx_v_stack_record));
 
-          /* "skgarden/mondrian/tree/_tree.pyx":204
- *                 stack.pop(&stack_record)
- * 
- *                 start = stack_record.start             # <<<<<<<<<<<<<<
- *                 end = stack_record.end
- *                 depth = stack_record.depth
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_4__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
+
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-          __pyx_t_14 = __pyx_v_stack_record.start;
-          __pyx_v_start = __pyx_t_14;
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 2, __pyx_L1_error)
 
-          /* "skgarden/mondrian/tree/_tree.pyx":205
- * 
- *                 start = stack_record.start
- *                 end = stack_record.end             # <<<<<<<<<<<<<<
- *                 depth = stack_record.depth
- *                 parent = stack_record.parent
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
  */
-          __pyx_t_14 = __pyx_v_stack_record.end;
-          __pyx_v_end = __pyx_t_14;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":206
- *                 start = stack_record.start
- *                 end = stack_record.end
- *                 depth = stack_record.depth             # <<<<<<<<<<<<<<
- *                 parent = stack_record.parent
- *                 is_left = stack_record.is_left
- */
-          __pyx_t_14 = __pyx_v_stack_record.depth;
-          __pyx_v_depth = __pyx_t_14;
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.PartialFitTreeBuilder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-          /* "skgarden/mondrian/tree/_tree.pyx":207
- *                 end = stack_record.end
- *                 depth = stack_record.depth
- *                 parent = stack_record.parent             # <<<<<<<<<<<<<<
- *                 is_left = stack_record.is_left
- *                 impurity = stack_record.impurity
+/* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-          __pyx_t_14 = __pyx_v_stack_record.parent;
-          __pyx_v_parent = __pyx_t_14;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":208
- *                 depth = stack_record.depth
- *                 parent = stack_record.parent
- *                 is_left = stack_record.is_left             # <<<<<<<<<<<<<<
- *                 impurity = stack_record.impurity
- *                 n_constant_features = stack_record.n_constant_features
- */
-          __pyx_t_9 = __pyx_v_stack_record.is_left;
-          __pyx_v_is_left = __pyx_t_9;
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_6__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
 
-          /* "skgarden/mondrian/tree/_tree.pyx":209
- *                 parent = stack_record.parent
- *                 is_left = stack_record.is_left
- *                 impurity = stack_record.impurity             # <<<<<<<<<<<<<<
- *                 n_constant_features = stack_record.n_constant_features
- * 
- */
-          __pyx_t_13 = __pyx_v_stack_record.impurity;
-          __pyx_v_impurity = __pyx_t_13;
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-          /* "skgarden/mondrian/tree/_tree.pyx":210
- *                 is_left = stack_record.is_left
- *                 impurity = stack_record.impurity
- *                 n_constant_features = stack_record.n_constant_features             # <<<<<<<<<<<<<<
- * 
- *                 n_node_samples = end - start
- */
-          __pyx_t_14 = __pyx_v_stack_record.n_constant_features;
-          __pyx_v_n_constant_features = __pyx_t_14;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
 
-          /* "skgarden/mondrian/tree/_tree.pyx":212
- *                 n_constant_features = stack_record.n_constant_features
- * 
- *                 n_node_samples = end - start             # <<<<<<<<<<<<<<
- *                 splitter.node_reset(start, end, &weighted_n_node_samples)
- * 
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
  */
-          __pyx_v_n_node_samples = (__pyx_v_end - __pyx_v_start);
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 4, __pyx_L1_error)
 
-          /* "skgarden/mondrian/tree/_tree.pyx":213
- * 
- *                 n_node_samples = end - start
- *                 splitter.node_reset(start, end, &weighted_n_node_samples)             # <<<<<<<<<<<<<<
- * 
- *                 is_leaf = (depth >= max_depth or
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-          __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_reset(__pyx_v_splitter, __pyx_v_start, __pyx_v_end, (&__pyx_v_weighted_n_node_samples)); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 213, __pyx_L8_error)
 
-          /* "skgarden/mondrian/tree/_tree.pyx":215
- *                 splitter.node_reset(start, end, &weighted_n_node_samples)
- * 
- *                 is_leaf = (depth >= max_depth or             # <<<<<<<<<<<<<<
- *                            n_node_samples < min_samples_split)
- * 
- */
-          __pyx_t_8 = ((__pyx_v_depth >= __pyx_v_max_depth) != 0);
-          if (!__pyx_t_8) {
-          } else {
-            __pyx_t_9 = __pyx_t_8;
-            goto __pyx_L16_bool_binop_done;
-          }
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.PartialFitTreeBuilder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-          /* "skgarden/mondrian/tree/_tree.pyx":216
- * 
- *                 is_leaf = (depth >= max_depth or
- *                            n_node_samples < min_samples_split)             # <<<<<<<<<<<<<<
+/* "skgarden/mondrian/tree/_tree.pyx":178
+ *     """Build a decision tree in depth-first fashion."""
  * 
- *                 if first:
+ *     def __cinit__(self, Splitter splitter, SIZE_t min_samples_split,             # <<<<<<<<<<<<<<
+ *                   SIZE_t max_depth):
+ *         self.splitter = splitter
  */
-          __pyx_t_8 = ((__pyx_v_n_node_samples < __pyx_v_min_samples_split) != 0);
-          __pyx_t_9 = __pyx_t_8;
-          __pyx_L16_bool_binop_done:;
-          __pyx_v_is_leaf = __pyx_t_9;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":218
- *                            n_node_samples < min_samples_split)
- * 
- *                 if first:             # <<<<<<<<<<<<<<
- *                     impurity = splitter.node_impurity()
- *                     first = 0
+/* Python wrapper */
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth;
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_splitter,&__pyx_n_s_min_samples_split,&__pyx_n_s_max_depth,0};
+    PyObject* values[3] = {0,0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_splitter)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_samples_split)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 178, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_depth)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 178, __pyx_L3_error)
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 178, __pyx_L3_error)
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+    }
+    __pyx_v_splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)values[0]);
+    __pyx_v_min_samples_split = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_min_samples_split == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L3_error)
+    __pyx_v_max_depth = __Pyx_PyInt_As_Py_intptr_t(values[2]); if (unlikely((__pyx_v_max_depth == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 178, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return -1;
+  __pyx_L4_argument_unpacking_done:;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_splitter), __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter, 1, "splitter", 0))) __PYX_ERR(0, 178, __pyx_L1_error)
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *)__pyx_v_self), __pyx_v_splitter, __pyx_v_min_samples_split, __pyx_v_max_depth);
+
+  /* function exit code */
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __pyx_r = -1;
+  __pyx_L0:;
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth) {
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__cinit__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":180
+ *     def __cinit__(self, Splitter splitter, SIZE_t min_samples_split,
+ *                   SIZE_t max_depth):
+ *         self.splitter = splitter             # <<<<<<<<<<<<<<
+ *         self.min_samples_split = min_samples_split
+ *         self.max_depth = max_depth
  */
-          __pyx_t_9 = (__pyx_v_first != 0);
-          if (__pyx_t_9) {
+  __Pyx_INCREF(((PyObject *)__pyx_v_splitter));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_splitter));
+  __Pyx_GOTREF(__pyx_v_self->__pyx_base.splitter);
+  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.splitter));
+  __pyx_v_self->__pyx_base.splitter = __pyx_v_splitter;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":219
- * 
- *                 if first:
- *                     impurity = splitter.node_impurity()             # <<<<<<<<<<<<<<
- *                     first = 0
+  /* "skgarden/mondrian/tree/_tree.pyx":181
+ *                   SIZE_t max_depth):
+ *         self.splitter = splitter
+ *         self.min_samples_split = min_samples_split             # <<<<<<<<<<<<<<
+ *         self.max_depth = max_depth
  * 
  */
-            __pyx_v_impurity = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_impurity(__pyx_v_splitter);
+  __pyx_v_self->__pyx_base.min_samples_split = __pyx_v_min_samples_split;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":220
- *                 if first:
- *                     impurity = splitter.node_impurity()
- *                     first = 0             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":182
+ *         self.splitter = splitter
+ *         self.min_samples_split = min_samples_split
+ *         self.max_depth = max_depth             # <<<<<<<<<<<<<<
  * 
- *                 if not is_leaf:
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
  */
-            __pyx_v_first = 0;
+  __pyx_v_self->__pyx_base.max_depth = __pyx_v_max_depth;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":218
- *                            n_node_samples < min_samples_split)
+  /* "skgarden/mondrian/tree/_tree.pyx":178
+ *     """Build a decision tree in depth-first fashion."""
  * 
- *                 if first:             # <<<<<<<<<<<<<<
- *                     impurity = splitter.node_impurity()
- *                     first = 0
+ *     def __cinit__(self, Splitter splitter, SIZE_t min_samples_split,             # <<<<<<<<<<<<<<
+ *                   SIZE_t max_depth):
+ *         self.splitter = splitter
  */
-          }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":222
- *                     first = 0
+  /* function exit code */
+  __pyx_r = 0;
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":184
+ *         self.max_depth = max_depth
  * 
- *                 if not is_leaf:             # <<<<<<<<<<<<<<
- *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
- *                     is_leaf = is_leaf or (split.pos >= end)
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
  */
-          __pyx_t_9 = ((!(__pyx_v_is_leaf != 0)) != 0);
-          if (__pyx_t_9) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":223
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build *__pyx_optional_args) {
+
+  /* "skgarden/mondrian/tree/_tree.pyx":185
  * 
- *                 if not is_leaf:
- *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)             # <<<<<<<<<<<<<<
- *                     is_leaf = is_leaf or (split.pos >= end)
- *                 else:
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
+ *                 np.ndarray X_idx_sorted=None):
+ *         """Build a decision tree from the training set (X, y)."""
  */
-            __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_split(__pyx_v_splitter, __pyx_v_impurity, (&__pyx_v_split), (&__pyx_v_n_constant_features)); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 223, __pyx_L8_error)
-            __pyx_v_is_leaf = __pyx_t_5;
+  PyArrayObject *__pyx_v_sample_weight = ((PyArrayObject *)Py_None);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":224
- *                 if not is_leaf:
- *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
- *                     is_leaf = is_leaf or (split.pos >= end)             # <<<<<<<<<<<<<<
- *                 else:
- *                     splitter.set_bounds()
+  /* "skgarden/mondrian/tree/_tree.pyx":186
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
+ *         """Build a decision tree from the training set (X, y)."""
+ * 
  */
-            __pyx_t_8 = (__pyx_v_is_leaf != 0);
-            if (!__pyx_t_8) {
-            } else {
-              __pyx_t_9 = __pyx_t_8;
-              goto __pyx_L20_bool_binop_done;
-            }
-            __pyx_t_8 = ((__pyx_v_split.pos >= __pyx_v_end) != 0);
-            __pyx_t_9 = __pyx_t_8;
-            __pyx_L20_bool_binop_done:;
-            __pyx_v_is_leaf = __pyx_t_9;
+  PyArrayObject *__pyx_v_X_idx_sorted = ((PyArrayObject *)Py_None);
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_sample_weight_ptr;
+  int __pyx_v_init_capacity;
+  struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *__pyx_v_splitter = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_start;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_end;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_depth;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent;
+  int __pyx_v_is_left;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples;
+  CYTHON_UNUSED double __pyx_v_weighted_n_samples;
+  double __pyx_v_weighted_n_node_samples;
+  struct __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SplitRecord __pyx_v_split;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_id;
+  double __pyx_v_impurity;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_constant_features;
+  int __pyx_v_is_leaf;
+  int __pyx_v_first;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_max_depth_seen;
+  int __pyx_v_rc;
+  struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_stack = 0;
+  struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord __pyx_v_stack_record;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  int __pyx_t_5;
+  PyObject *__pyx_t_6 = NULL;
+  PyObject *(*__pyx_t_7)(PyObject *);
+  int __pyx_t_8;
+  int __pyx_t_9;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_10;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_9_splitter_8Splitter_init __pyx_t_11;
+  __pyx_t_8skgarden_8mondrian_4tree_9_splitter_SIZE_t __pyx_t_12;
+  double __pyx_t_13;
+  __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_t_14;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_15;
+  __Pyx_RefNannySetupContext("build", 0);
+  if (__pyx_optional_args) {
+    if (__pyx_optional_args->__pyx_n > 0) {
+      __pyx_v_sample_weight = __pyx_optional_args->sample_weight;
+      if (__pyx_optional_args->__pyx_n > 1) {
+        __pyx_v_X_idx_sorted = __pyx_optional_args->X_idx_sorted;
+      }
+    }
+  }
+  __Pyx_INCREF(__pyx_v_X);
+  __Pyx_INCREF((PyObject *)__pyx_v_y);
+  __Pyx_INCREF((PyObject *)__pyx_v_sample_weight);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":222
- *                     first = 0
+  /* "skgarden/mondrian/tree/_tree.pyx":184
+ *         self.max_depth = max_depth
  * 
- *                 if not is_leaf:             # <<<<<<<<<<<<<<
- *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
- *                     is_leaf = is_leaf or (split.pos >= end)
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
  */
-            goto __pyx_L19;
-          }
+  /* Check if called by wrapper */
+  if (unlikely(__pyx_skip_dispatch)) ;
+  /* Check if overridden in Python */
+  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build)) {
+      __Pyx_XDECREF(__pyx_r);
+      __Pyx_INCREF(__pyx_t_1);
+      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
+      __pyx_t_5 = 0;
+      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
+        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
+        if (likely(__pyx_t_4)) {
+          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
+          __Pyx_INCREF(__pyx_t_4);
+          __Pyx_INCREF(function);
+          __Pyx_DECREF_SET(__pyx_t_3, function);
+          __pyx_t_5 = 1;
+        }
+      }
+      #if CYTHON_FAST_PYCALL
+      if (PyFunction_Check(__pyx_t_3)) {
+        PyObject *__pyx_temp[6] = {__pyx_t_4, ((PyObject *)__pyx_v_tree), __pyx_v_X, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_sample_weight), ((PyObject *)__pyx_v_X_idx_sorted)};
+        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+        __Pyx_GOTREF(__pyx_t_2);
+      } else
+      #endif
+      #if CYTHON_FAST_PYCCALL
+      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
+        PyObject *__pyx_temp[6] = {__pyx_t_4, ((PyObject *)__pyx_v_tree), __pyx_v_X, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_sample_weight), ((PyObject *)__pyx_v_X_idx_sorted)};
+        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+        __Pyx_GOTREF(__pyx_t_2);
+      } else
+      #endif
+      {
+        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 184, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_6);
+        if (__pyx_t_4) {
+          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
+        }
+        __Pyx_INCREF(((PyObject *)__pyx_v_tree));
+        __Pyx_GIVEREF(((PyObject *)__pyx_v_tree));
+        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_tree));
+        __Pyx_INCREF(__pyx_v_X);
+        __Pyx_GIVEREF(__pyx_v_X);
+        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_X);
+        __Pyx_INCREF(((PyObject *)__pyx_v_y));
+        __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
+        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_y));
+        __Pyx_INCREF(((PyObject *)__pyx_v_sample_weight));
+        __Pyx_GIVEREF(((PyObject *)__pyx_v_sample_weight));
+        PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, ((PyObject *)__pyx_v_sample_weight));
+        __Pyx_INCREF(((PyObject *)__pyx_v_X_idx_sorted));
+        __Pyx_GIVEREF(((PyObject *)__pyx_v_X_idx_sorted));
+        PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, ((PyObject *)__pyx_v_X_idx_sorted));
+        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_2);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      }
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __pyx_r = __pyx_t_2;
+      __pyx_t_2 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      goto __pyx_L0;
+    }
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":226
- *                     is_leaf = is_leaf or (split.pos >= end)
- *                 else:
- *                     splitter.set_bounds()             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":190
  * 
- *                 node_id = tree._add_node(parent, is_left, is_leaf, split.feature,
- */
-          /*else*/ {
-            ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->set_bounds(__pyx_v_splitter);
-          }
-          __pyx_L19:;
-
-          /* "skgarden/mondrian/tree/_tree.pyx":228
- *                     splitter.set_bounds()
+ *         # check input
+ *         X, y, sample_weight = self._check_input(X, y, sample_weight)             # <<<<<<<<<<<<<<
  * 
- *                 node_id = tree._add_node(parent, is_left, is_leaf, split.feature,             # <<<<<<<<<<<<<<
- *                                          split.threshold, impurity, n_node_samples,
- *                                          weighted_n_node_samples,
+ *         cdef DOUBLE_t* sample_weight_ptr = NULL
  */
-          __pyx_t_10 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_add_node(__pyx_v_tree, __pyx_v_parent, __pyx_v_is_left, __pyx_v_is_leaf, __pyx_v_split.feature, __pyx_v_split.threshold, __pyx_v_impurity, __pyx_v_n_node_samples, __pyx_v_weighted_n_node_samples, __pyx_v_splitter->lower_bounds, __pyx_v_splitter->upper_bounds, __pyx_v_split.E); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 228, __pyx_L8_error)
-          __pyx_v_node_id = __pyx_t_10;
+  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder__check_input(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
+    PyObject* sequence = __pyx_t_1;
+    #if !CYTHON_COMPILING_IN_PYPY
+    Py_ssize_t size = Py_SIZE(sequence);
+    #else
+    Py_ssize_t size = PySequence_Size(sequence);
+    #endif
+    if (unlikely(size != 3)) {
+      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
+      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
+      __PYX_ERR(0, 190, __pyx_L1_error)
+    }
+    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
+    if (likely(PyTuple_CheckExact(sequence))) {
+      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
+      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
+      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
+    } else {
+      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
+      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
+      __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
+    }
+    __Pyx_INCREF(__pyx_t_2);
+    __Pyx_INCREF(__pyx_t_3);
+    __Pyx_INCREF(__pyx_t_6);
+    #else
+    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_6);
+    #endif
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  } else {
+    Py_ssize_t index = -1;
+    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext;
+    index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
+    __Pyx_GOTREF(__pyx_t_2);
+    index = 1; __pyx_t_3 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
+    __Pyx_GOTREF(__pyx_t_3);
+    index = 2; __pyx_t_6 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_6)) goto __pyx_L3_unpacking_failed;
+    __Pyx_GOTREF(__pyx_t_6);
+    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_4), 3) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
+    __pyx_t_7 = NULL;
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    goto __pyx_L4_unpacking_done;
+    __pyx_L3_unpacking_failed:;
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __pyx_t_7 = NULL;
+    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
+    __PYX_ERR(0, 190, __pyx_L1_error)
+    __pyx_L4_unpacking_done:;
+  }
+  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 190, __pyx_L1_error)
+  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 190, __pyx_L1_error)
+  __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_2);
+  __pyx_t_2 = 0;
+  __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_3));
+  __pyx_t_3 = 0;
+  __Pyx_DECREF_SET(__pyx_v_sample_weight, ((PyArrayObject *)__pyx_t_6));
+  __pyx_t_6 = 0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":235
- *                                          split.E)
+  /* "skgarden/mondrian/tree/_tree.pyx":192
+ *         X, y, sample_weight = self._check_input(X, y, sample_weight)
  * 
- *                 if node_id == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
- *                     rc = -1
- *                     break
+ *         cdef DOUBLE_t* sample_weight_ptr = NULL             # <<<<<<<<<<<<<<
+ *         if sample_weight is not None:
+ *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data
  */
-          __pyx_t_9 = ((__pyx_v_node_id == ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L)) != 0);
-          if (__pyx_t_9) {
+  __pyx_v_sample_weight_ptr = NULL;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":236
+  /* "skgarden/mondrian/tree/_tree.pyx":193
  * 
- *                 if node_id == <SIZE_t>(-1):
- *                     rc = -1             # <<<<<<<<<<<<<<
- *                     break
+ *         cdef DOUBLE_t* sample_weight_ptr = NULL
+ *         if sample_weight is not None:             # <<<<<<<<<<<<<<
+ *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data
  * 
  */
-            __pyx_v_rc = -1;
+  __pyx_t_8 = (((PyObject *)__pyx_v_sample_weight) != Py_None);
+  __pyx_t_9 = (__pyx_t_8 != 0);
+  if (__pyx_t_9) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":237
- *                 if node_id == <SIZE_t>(-1):
- *                     rc = -1
- *                     break             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":194
+ *         cdef DOUBLE_t* sample_weight_ptr = NULL
+ *         if sample_weight is not None:
+ *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data             # <<<<<<<<<<<<<<
  * 
- *                 # Store value for all nodes, to facilitate tree/model
+ *         # Initial capacity
  */
-            goto __pyx_L15_break;
+    __pyx_v_sample_weight_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *)__pyx_v_sample_weight->data);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":235
- *                                          split.E)
+    /* "skgarden/mondrian/tree/_tree.pyx":193
+ * 
+ *         cdef DOUBLE_t* sample_weight_ptr = NULL
+ *         if sample_weight is not None:             # <<<<<<<<<<<<<<
+ *             sample_weight_ptr = <DOUBLE_t*> sample_weight.data
  * 
- *                 if node_id == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
- *                     rc = -1
- *                     break
  */
-          }
+  }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":241
- *                 # Store value for all nodes, to facilitate tree/model
- *                 # inspection and interpretation
- *                 splitter.node_value(tree.value + node_id * tree.value_stride)             # <<<<<<<<<<<<<<
- * 
- *                 if not is_leaf:
+  /* "skgarden/mondrian/tree/_tree.pyx":198
+ *         # Initial capacity
+ *         cdef int init_capacity
+ *         if tree.max_depth <= 10:             # <<<<<<<<<<<<<<
+ *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
+ *         else:
  */
-          ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_value(__pyx_v_splitter, (__pyx_v_tree->value + (__pyx_v_node_id * __pyx_v_tree->value_stride)));
+  __pyx_t_9 = ((__pyx_v_tree->max_depth <= 10) != 0);
+  if (__pyx_t_9) {
 
-          /* "skgarden/mondrian/tree/_tree.pyx":243
- *                 splitter.node_value(tree.value + node_id * tree.value_stride)
- * 
- *                 if not is_leaf:             # <<<<<<<<<<<<<<
- *                     # Push right child on stack
- *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
+    /* "skgarden/mondrian/tree/_tree.pyx":199
+ *         cdef int init_capacity
+ *         if tree.max_depth <= 10:
+ *             init_capacity = (2 ** (tree.max_depth + 1)) - 1             # <<<<<<<<<<<<<<
+ *         else:
+ *             init_capacity = 2047
  */
-          __pyx_t_9 = ((!(__pyx_v_is_leaf != 0)) != 0);
-          if (__pyx_t_9) {
+    __pyx_v_init_capacity = (__Pyx_pow_long(2, (__pyx_v_tree->max_depth + 1)) - 1);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":245
- *                 if not is_leaf:
- *                     # Push right child on stack
- *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,             # <<<<<<<<<<<<<<
- *                                     split.impurity_right, n_constant_features)
- *                     if rc == -1:
+    /* "skgarden/mondrian/tree/_tree.pyx":198
+ *         # Initial capacity
+ *         cdef int init_capacity
+ *         if tree.max_depth <= 10:             # <<<<<<<<<<<<<<
+ *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
+ *         else:
  */
-            __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->push(__pyx_v_stack, __pyx_v_split.pos, __pyx_v_end, (__pyx_v_depth + 1), __pyx_v_node_id, 0, __pyx_v_split.impurity_right, __pyx_v_n_constant_features); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 245, __pyx_L8_error)
-            __pyx_v_rc = __pyx_t_5;
+    goto __pyx_L6;
+  }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":247
- *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
- *                                     split.impurity_right, n_constant_features)
- *                     if rc == -1:             # <<<<<<<<<<<<<<
- *                         break
+  /* "skgarden/mondrian/tree/_tree.pyx":201
+ *             init_capacity = (2 ** (tree.max_depth + 1)) - 1
+ *         else:
+ *             init_capacity = 2047             # <<<<<<<<<<<<<<
+ *         tree._resize(init_capacity)
  * 
  */
-            __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
-            if (__pyx_t_9) {
+  /*else*/ {
+    __pyx_v_init_capacity = 0x7FF;
+  }
+  __pyx_L6:;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":248
- *                                     split.impurity_right, n_constant_features)
- *                     if rc == -1:
- *                         break             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":202
+ *         else:
+ *             init_capacity = 2047
+ *         tree._resize(init_capacity)             # <<<<<<<<<<<<<<
  * 
- *                     # Push left child on stack
+ *         # Parameters
  */
-              goto __pyx_L15_break;
+  __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_resize(__pyx_v_tree, __pyx_v_init_capacity); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 202, __pyx_L1_error)
 
-              /* "skgarden/mondrian/tree/_tree.pyx":247
- *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
- *                                     split.impurity_right, n_constant_features)
- *                     if rc == -1:             # <<<<<<<<<<<<<<
- *                         break
+  /* "skgarden/mondrian/tree/_tree.pyx":205
  * 
+ *         # Parameters
+ *         cdef Splitter splitter = self.splitter             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t max_depth = self.max_depth
+ *         cdef SIZE_t min_samples_split = self.min_samples_split
  */
-            }
+  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.splitter);
+  __Pyx_INCREF(__pyx_t_1);
+  __pyx_v_splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_t_1);
+  __pyx_t_1 = 0;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":251
+  /* "skgarden/mondrian/tree/_tree.pyx":206
+ *         # Parameters
+ *         cdef Splitter splitter = self.splitter
+ *         cdef SIZE_t max_depth = self.max_depth             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t min_samples_split = self.min_samples_split
  * 
- *                     # Push left child on stack
- *                     rc = stack.push(start, split.pos, depth + 1, node_id, 1,             # <<<<<<<<<<<<<<
- *                                     split.impurity_left, n_constant_features)
- *                     if rc == -1:
  */
-            __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->push(__pyx_v_stack, __pyx_v_start, __pyx_v_split.pos, (__pyx_v_depth + 1), __pyx_v_node_id, 1, __pyx_v_split.impurity_left, __pyx_v_n_constant_features); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 251, __pyx_L8_error)
-            __pyx_v_rc = __pyx_t_5;
+  __pyx_t_10 = __pyx_v_self->__pyx_base.max_depth;
+  __pyx_v_max_depth = __pyx_t_10;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":253
- *                     rc = stack.push(start, split.pos, depth + 1, node_id, 1,
- *                                     split.impurity_left, n_constant_features)
- *                     if rc == -1:             # <<<<<<<<<<<<<<
- *                         break
+  /* "skgarden/mondrian/tree/_tree.pyx":207
+ *         cdef Splitter splitter = self.splitter
+ *         cdef SIZE_t max_depth = self.max_depth
+ *         cdef SIZE_t min_samples_split = self.min_samples_split             # <<<<<<<<<<<<<<
  * 
+ *         # Recursive partition (without actual recursion)
  */
-            __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
-            if (__pyx_t_9) {
+  __pyx_t_10 = __pyx_v_self->__pyx_base.min_samples_split;
+  __pyx_v_min_samples_split = __pyx_t_10;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":254
- *                                     split.impurity_left, n_constant_features)
- *                     if rc == -1:
- *                         break             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":210
  * 
- *                 if depth > max_depth_seen:
- */
-              goto __pyx_L15_break;
-
-              /* "skgarden/mondrian/tree/_tree.pyx":253
- *                     rc = stack.push(start, split.pos, depth + 1, node_id, 1,
- *                                     split.impurity_left, n_constant_features)
- *                     if rc == -1:             # <<<<<<<<<<<<<<
- *                         break
+ *         # Recursive partition (without actual recursion)
+ *         splitter.init(X, y, sample_weight_ptr, X_idx_sorted)             # <<<<<<<<<<<<<<
  * 
+ *         cdef SIZE_t start
  */
-            }
+  __pyx_t_11.__pyx_n = 1;
+  __pyx_t_11.X_idx_sorted = __pyx_v_X_idx_sorted;
+  __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->init(__pyx_v_splitter, __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight_ptr, &__pyx_t_11); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 210, __pyx_L1_error)
 
-            /* "skgarden/mondrian/tree/_tree.pyx":243
- *                 splitter.node_value(tree.value + node_id * tree.value_stride)
- * 
- *                 if not is_leaf:             # <<<<<<<<<<<<<<
- *                     # Push right child on stack
- *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
+  /* "skgarden/mondrian/tree/_tree.pyx":217
+ *         cdef SIZE_t parent
+ *         cdef bint is_left
+ *         cdef SIZE_t n_node_samples = splitter.n_samples             # <<<<<<<<<<<<<<
+ *         cdef double weighted_n_samples = splitter.weighted_n_samples
+ *         cdef double weighted_n_node_samples
  */
-          }
+  __pyx_t_12 = __pyx_v_splitter->n_samples;
+  __pyx_v_n_node_samples = __pyx_t_12;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":256
- *                         break
- * 
- *                 if depth > max_depth_seen:             # <<<<<<<<<<<<<<
- *                     max_depth_seen = depth
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":218
+ *         cdef bint is_left
+ *         cdef SIZE_t n_node_samples = splitter.n_samples
+ *         cdef double weighted_n_samples = splitter.weighted_n_samples             # <<<<<<<<<<<<<<
+ *         cdef double weighted_n_node_samples
+ *         cdef SplitRecord split
  */
-          __pyx_t_9 = ((__pyx_v_depth > __pyx_v_max_depth_seen) != 0);
-          if (__pyx_t_9) {
+  __pyx_t_13 = __pyx_v_splitter->weighted_n_samples;
+  __pyx_v_weighted_n_samples = __pyx_t_13;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":257
- * 
- *                 if depth > max_depth_seen:
- *                     max_depth_seen = depth             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":224
  * 
- *             if rc >= 0:
+ *         cdef double threshold
+ *         cdef double impurity = INFINITY             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t n_constant_features
+ *         cdef bint is_leaf
  */
-            __pyx_v_max_depth_seen = __pyx_v_depth;
+  __pyx_v_impurity = __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":256
- *                         break
- * 
- *                 if depth > max_depth_seen:             # <<<<<<<<<<<<<<
- *                     max_depth_seen = depth
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":227
+ *         cdef SIZE_t n_constant_features
+ *         cdef bint is_leaf
+ *         cdef bint first = 1             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t max_depth_seen = -1
+ *         cdef int rc = 0
  */
-          }
-        }
-        __pyx_L15_break:;
+  __pyx_v_first = 1;
 
-        /* "skgarden/mondrian/tree/_tree.pyx":259
- *                     max_depth_seen = depth
- * 
- *             if rc >= 0:             # <<<<<<<<<<<<<<
- *                 rc = tree._resize_c(tree.node_count)
+  /* "skgarden/mondrian/tree/_tree.pyx":228
+ *         cdef bint is_leaf
+ *         cdef bint first = 1
+ *         cdef SIZE_t max_depth_seen = -1             # <<<<<<<<<<<<<<
+ *         cdef int rc = 0
  * 
  */
-        __pyx_t_9 = ((__pyx_v_rc >= 0) != 0);
-        if (__pyx_t_9) {
+  __pyx_v_max_depth_seen = -1;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":260
- * 
- *             if rc >= 0:
- *                 rc = tree._resize_c(tree.node_count)             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":229
+ *         cdef bint first = 1
+ *         cdef SIZE_t max_depth_seen = -1
+ *         cdef int rc = 0             # <<<<<<<<<<<<<<
  * 
- *             if rc >= 0:
+ *         cdef Stack stack = Stack(INITIAL_STACK_SIZE)
  */
-          __pyx_t_15.__pyx_n = 1;
-          __pyx_t_15.capacity = __pyx_v_tree->node_count;
-          __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_resize_c(__pyx_v_tree, &__pyx_t_15); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 260, __pyx_L8_error)
-          __pyx_v_rc = __pyx_t_5;
+  __pyx_v_rc = 0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":259
- *                     max_depth_seen = depth
- * 
- *             if rc >= 0:             # <<<<<<<<<<<<<<
- *                 rc = tree._resize_c(tree.node_count)
+  /* "skgarden/mondrian/tree/_tree.pyx":231
+ *         cdef int rc = 0
  * 
- */
-        }
-
-        /* "skgarden/mondrian/tree/_tree.pyx":262
- *                 rc = tree._resize_c(tree.node_count)
+ *         cdef Stack stack = Stack(INITIAL_STACK_SIZE)             # <<<<<<<<<<<<<<
+ *         cdef StackRecord stack_record
  * 
- *             if rc >= 0:             # <<<<<<<<<<<<<<
- *                 tree.max_depth = max_depth_seen
- *         if rc == -1:
  */
-        __pyx_t_9 = ((__pyx_v_rc >= 0) != 0);
-        if (__pyx_t_9) {
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_8skgarden_8mondrian_4tree_5_tree_INITIAL_STACK_SIZE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 231, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+  __pyx_t_1 = 0;
+  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_v_stack = ((struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_t_1);
+  __pyx_t_1 = 0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":263
+  /* "skgarden/mondrian/tree/_tree.pyx":234
+ *         cdef StackRecord stack_record
  * 
- *             if rc >= 0:
- *                 tree.max_depth = max_depth_seen             # <<<<<<<<<<<<<<
- *         if rc == -1:
- *             raise MemoryError()
+ *         with nogil:             # <<<<<<<<<<<<<<
+ *             # push root node onto stack
+ *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
  */
-          __pyx_v_tree->max_depth = __pyx_v_max_depth_seen;
+  {
+      #ifdef WITH_THREAD
+      PyThreadState *_save;
+      Py_UNBLOCK_THREADS
+      __Pyx_FastGIL_Remember();
+      #endif
+      /*try:*/ {
 
-          /* "skgarden/mondrian/tree/_tree.pyx":262
- *                 rc = tree._resize_c(tree.node_count)
- * 
- *             if rc >= 0:             # <<<<<<<<<<<<<<
- *                 tree.max_depth = max_depth_seen
- *         if rc == -1:
+        /* "skgarden/mondrian/tree/_tree.pyx":236
+ *         with nogil:
+ *             # push root node onto stack
+ *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)             # <<<<<<<<<<<<<<
+ *             if rc == -1:
+ *                 # got return code -1 - out-of-memory
  */
-        }
-      }
+        __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->push(__pyx_v_stack, 0, __pyx_v_n_node_samples, 0, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED, 0, __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY, 0); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 236, __pyx_L8_error)
+        __pyx_v_rc = __pyx_t_5;
 
-      /* "skgarden/mondrian/tree/_tree.pyx":193
- *         cdef StackRecord stack_record
- * 
- *         with nogil:             # <<<<<<<<<<<<<<
+        /* "skgarden/mondrian/tree/_tree.pyx":237
  *             # push root node onto stack
  *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
+ *             if rc == -1:             # <<<<<<<<<<<<<<
+ *                 # got return code -1 - out-of-memory
+ *                 with gil:
+ */
+        __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
+        if (__pyx_t_9) {
+
+          /* "skgarden/mondrian/tree/_tree.pyx":239
+ *             if rc == -1:
+ *                 # got return code -1 - out-of-memory
+ *                 with gil:             # <<<<<<<<<<<<<<
+ *                     raise MemoryError()
+ * 
+ */
+          {
+              #ifdef WITH_THREAD
+              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+              #endif
+              /*try:*/ {
+
+                /* "skgarden/mondrian/tree/_tree.pyx":240
+ *                 # got return code -1 - out-of-memory
+ *                 with gil:
+ *                     raise MemoryError()             # <<<<<<<<<<<<<<
+ * 
+ *             while not stack.is_empty():
+ */
+                PyErr_NoMemory(); __PYX_ERR(0, 240, __pyx_L12_error)
+              }
+
+              /* "skgarden/mondrian/tree/_tree.pyx":239
+ *             if rc == -1:
+ *                 # got return code -1 - out-of-memory
+ *                 with gil:             # <<<<<<<<<<<<<<
+ *                     raise MemoryError()
+ * 
+ */
+              /*finally:*/ {
+                __pyx_L12_error: {
+                  #ifdef WITH_THREAD
+                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
+                  #endif
+                  goto __pyx_L8_error;
+                }
+              }
+          }
+
+          /* "skgarden/mondrian/tree/_tree.pyx":237
+ *             # push root node onto stack
+ *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
+ *             if rc == -1:             # <<<<<<<<<<<<<<
+ *                 # got return code -1 - out-of-memory
+ *                 with gil:
  */
-      /*finally:*/ {
-        /*normal exit:*/{
-          #ifdef WITH_THREAD
-          Py_BLOCK_THREADS
-          #endif
-          goto __pyx_L9;
-        }
-        __pyx_L8_error: {
-          #ifdef WITH_THREAD
-          Py_BLOCK_THREADS
-          #endif
-          goto __pyx_L1_error;
         }
-        __pyx_L9:;
-      }
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":264
- *             if rc >= 0:
- *                 tree.max_depth = max_depth_seen
- *         if rc == -1:             # <<<<<<<<<<<<<<
- *             raise MemoryError()
+        /* "skgarden/mondrian/tree/_tree.pyx":242
+ *                     raise MemoryError()
+ * 
+ *             while not stack.is_empty():             # <<<<<<<<<<<<<<
+ *                 stack.pop(&stack_record)
  * 
  */
-  __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
-  if (__pyx_t_9) {
+        while (1) {
+          __pyx_t_9 = ((!(((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->is_empty(__pyx_v_stack) != 0)) != 0);
+          if (!__pyx_t_9) break;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":265
- *                 tree.max_depth = max_depth_seen
- *         if rc == -1:
- *             raise MemoryError()             # <<<<<<<<<<<<<<
+          /* "skgarden/mondrian/tree/_tree.pyx":243
  * 
- * # =============================================================================
+ *             while not stack.is_empty():
+ *                 stack.pop(&stack_record)             # <<<<<<<<<<<<<<
+ * 
+ *                 start = stack_record.start
  */
-    PyErr_NoMemory(); __PYX_ERR(0, 265, __pyx_L1_error)
+          ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->pop(__pyx_v_stack, (&__pyx_v_stack_record));
 
-    /* "skgarden/mondrian/tree/_tree.pyx":264
- *             if rc >= 0:
- *                 tree.max_depth = max_depth_seen
- *         if rc == -1:             # <<<<<<<<<<<<<<
- *             raise MemoryError()
+          /* "skgarden/mondrian/tree/_tree.pyx":245
+ *                 stack.pop(&stack_record)
  * 
+ *                 start = stack_record.start             # <<<<<<<<<<<<<<
+ *                 end = stack_record.end
+ *                 depth = stack_record.depth
  */
-  }
+          __pyx_t_14 = __pyx_v_stack_record.start;
+          __pyx_v_start = __pyx_t_14;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":141
- *         self.max_depth = max_depth
+          /* "skgarden/mondrian/tree/_tree.pyx":246
  * 
- *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
- *                 np.ndarray sample_weight=None,
- *                 np.ndarray X_idx_sorted=None):
+ *                 start = stack_record.start
+ *                 end = stack_record.end             # <<<<<<<<<<<<<<
+ *                 depth = stack_record.depth
+ *                 parent = stack_record.parent
  */
+          __pyx_t_14 = __pyx_v_stack_record.end;
+          __pyx_v_end = __pyx_t_14;
 
-  /* function exit code */
-  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XDECREF((PyObject *)__pyx_v_splitter);
-  __Pyx_XDECREF((PyObject *)__pyx_v_stack);
-  __Pyx_XDECREF(__pyx_v_X);
-  __Pyx_XDECREF((PyObject *)__pyx_v_y);
-  __Pyx_XDECREF((PyObject *)__pyx_v_sample_weight);
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+          /* "skgarden/mondrian/tree/_tree.pyx":247
+ *                 start = stack_record.start
+ *                 end = stack_record.end
+ *                 depth = stack_record.depth             # <<<<<<<<<<<<<<
+ *                 parent = stack_record.parent
+ *                 is_left = stack_record.is_left
+ */
+          __pyx_t_14 = __pyx_v_stack_record.depth;
+          __pyx_v_depth = __pyx_t_14;
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build[] = "Build a decision tree from the training set (X, y).";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
-  struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree = 0;
-  PyObject *__pyx_v_X = 0;
-  PyArrayObject *__pyx_v_y = 0;
-  PyArrayObject *__pyx_v_sample_weight = 0;
-  PyArrayObject *__pyx_v_X_idx_sorted = 0;
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("build (wrapper)", 0);
-  {
-    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_X,&__pyx_n_s_y,&__pyx_n_s_sample_weight,&__pyx_n_s_X_idx_sorted,0};
-    PyObject* values[5] = {0,0,0,0,0};
+          /* "skgarden/mondrian/tree/_tree.pyx":248
+ *                 end = stack_record.end
+ *                 depth = stack_record.depth
+ *                 parent = stack_record.parent             # <<<<<<<<<<<<<<
+ *                 is_left = stack_record.is_left
+ *                 impurity = stack_record.impurity
+ */
+          __pyx_t_14 = __pyx_v_stack_record.parent;
+          __pyx_v_parent = __pyx_t_14;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":249
+ *                 depth = stack_record.depth
+ *                 parent = stack_record.parent
+ *                 is_left = stack_record.is_left             # <<<<<<<<<<<<<<
+ *                 impurity = stack_record.impurity
+ *                 n_constant_features = stack_record.n_constant_features
+ */
+          __pyx_t_9 = __pyx_v_stack_record.is_left;
+          __pyx_v_is_left = __pyx_t_9;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":142
+          /* "skgarden/mondrian/tree/_tree.pyx":250
+ *                 parent = stack_record.parent
+ *                 is_left = stack_record.is_left
+ *                 impurity = stack_record.impurity             # <<<<<<<<<<<<<<
+ *                 n_constant_features = stack_record.n_constant_features
  * 
- *     cpdef build(self, Tree tree, object X, np.ndarray y,
- *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
- *                 np.ndarray X_idx_sorted=None):
- *         """Build a decision tree from the training set (X, y)."""
  */
-    values[3] = (PyObject *)((PyArrayObject *)Py_None);
+          __pyx_t_13 = __pyx_v_stack_record.impurity;
+          __pyx_v_impurity = __pyx_t_13;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":143
- *     cpdef build(self, Tree tree, object X, np.ndarray y,
- *                 np.ndarray sample_weight=None,
- *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
- *         """Build a decision tree from the training set (X, y)."""
+          /* "skgarden/mondrian/tree/_tree.pyx":251
+ *                 is_left = stack_record.is_left
+ *                 impurity = stack_record.impurity
+ *                 n_constant_features = stack_record.n_constant_features             # <<<<<<<<<<<<<<
  * 
+ *                 n_node_samples = end - start
  */
-    values[4] = (PyObject *)((PyArrayObject *)Py_None);
-    if (unlikely(__pyx_kwds)) {
-      Py_ssize_t kw_args;
-      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
-      switch (pos_args) {
-        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
-        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
-        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-        case  0: break;
-        default: goto __pyx_L5_argtuple_error;
-      }
-      kw_args = PyDict_Size(__pyx_kwds);
-      switch (pos_args) {
-        case  0:
-        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
-        else goto __pyx_L5_argtuple_error;
-        case  1:
-        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
-        else {
-          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 1); __PYX_ERR(0, 141, __pyx_L3_error)
-        }
-        case  2:
-        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
-        else {
-          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 2); __PYX_ERR(0, 141, __pyx_L3_error)
-        }
-        case  3:
-        if (kw_args > 0) {
-          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_weight);
-          if (value) { values[3] = value; kw_args--; }
-        }
-        case  4:
-        if (kw_args > 0) {
-          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X_idx_sorted);
-          if (value) { values[4] = value; kw_args--; }
-        }
-      }
-      if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 141, __pyx_L3_error)
-      }
-    } else {
-      switch (PyTuple_GET_SIZE(__pyx_args)) {
-        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
-        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
-        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-        break;
-        default: goto __pyx_L5_argtuple_error;
-      }
-    }
-    __pyx_v_tree = ((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)values[0]);
-    __pyx_v_X = values[1];
-    __pyx_v_y = ((PyArrayObject *)values[2]);
-    __pyx_v_sample_weight = ((PyArrayObject *)values[3]);
-    __pyx_v_X_idx_sorted = ((PyArrayObject *)values[4]);
-  }
-  goto __pyx_L4_argument_unpacking_done;
-  __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 141, __pyx_L3_error)
-  __pyx_L3_error:;
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __Pyx_RefNannyFinishContext();
-  return NULL;
-  __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree, 1, "tree", 0))) __PYX_ERR(0, 141, __pyx_L1_error)
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 141, __pyx_L1_error)
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sample_weight), __pyx_ptype_5numpy_ndarray, 1, "sample_weight", 0))) __PYX_ERR(0, 142, __pyx_L1_error)
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X_idx_sorted), __pyx_ptype_5numpy_ndarray, 1, "X_idx_sorted", 0))) __PYX_ERR(0, 143, __pyx_L1_error)
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight, __pyx_v_X_idx_sorted);
+          __pyx_t_14 = __pyx_v_stack_record.n_constant_features;
+          __pyx_v_n_constant_features = __pyx_t_14;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":141
- *         self.max_depth = max_depth
+          /* "skgarden/mondrian/tree/_tree.pyx":253
+ *                 n_constant_features = stack_record.n_constant_features
+ * 
+ *                 n_node_samples = end - start             # <<<<<<<<<<<<<<
+ *                 splitter.node_reset(start, end, &weighted_n_node_samples)
  * 
- *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
- *                 np.ndarray sample_weight=None,
- *                 np.ndarray X_idx_sorted=None):
  */
+          __pyx_v_n_node_samples = (__pyx_v_end - __pyx_v_start);
 
-  /* function exit code */
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight, PyArrayObject *__pyx_v_X_idx_sorted) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build __pyx_t_2;
-  __Pyx_RefNannySetupContext("build", 0);
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2.__pyx_n = 2;
-  __pyx_t_2.sample_weight = __pyx_v_sample_weight;
-  __pyx_t_2.X_idx_sorted = __pyx_v_X_idx_sorted;
-  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder->__pyx_base.build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":330
- *     # (i.e. through `_resize` or `__setstate__`)
- *     property n_classes:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)
+          /* "skgarden/mondrian/tree/_tree.pyx":254
  * 
- */
-
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":331
- *     property n_classes:
- *         def __get__(self):
- *             return sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)             # <<<<<<<<<<<<<<
+ *                 n_node_samples = end - start
+ *                 splitter.node_reset(start, end, &weighted_n_node_samples)             # <<<<<<<<<<<<<<
  * 
- *     property children_left:
+ *                 if first:
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray(__pyx_v_self->n_classes, __pyx_v_self->n_outputs)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+          __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_reset(__pyx_v_splitter, __pyx_v_start, __pyx_v_end, (&__pyx_v_weighted_n_node_samples)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 254, __pyx_L8_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":330
- *     # (i.e. through `_resize` or `__setstate__`)
- *     property n_classes:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)
+          /* "skgarden/mondrian/tree/_tree.pyx":256
+ *                 splitter.node_reset(start, end, &weighted_n_node_samples)
  * 
+ *                 if first:             # <<<<<<<<<<<<<<
+ *                     impurity = splitter.node_impurity()
+ *                     first = 0
  */
+          __pyx_t_9 = (__pyx_v_first != 0);
+          if (__pyx_t_9) {
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.n_classes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":334
+            /* "skgarden/mondrian/tree/_tree.pyx":257
  * 
- *     property children_left:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['left_child'][:self.node_count]
+ *                 if first:
+ *                     impurity = splitter.node_impurity()             # <<<<<<<<<<<<<<
+ *                     first = 0
  * 
  */
+            __pyx_v_impurity = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_impurity(__pyx_v_splitter);
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+            /* "skgarden/mondrian/tree/_tree.pyx":258
+ *                 if first:
+ *                     impurity = splitter.node_impurity()
+ *                     first = 0             # <<<<<<<<<<<<<<
+ * 
+ *                 is_leaf = (depth >= max_depth or
+ */
+            __pyx_v_first = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":335
- *     property children_left:
- *         def __get__(self):
- *             return self._get_node_ndarray()['left_child'][:self.node_count]             # <<<<<<<<<<<<<<
+            /* "skgarden/mondrian/tree/_tree.pyx":256
+ *                 splitter.node_reset(start, end, &weighted_n_node_samples)
  * 
- *     property children_right:
+ *                 if first:             # <<<<<<<<<<<<<<
+ *                     impurity = splitter.node_impurity()
+ *                     first = 0
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_left_child); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+          }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":334
+          /* "skgarden/mondrian/tree/_tree.pyx":260
+ *                     first = 0
  * 
- *     property children_left:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['left_child'][:self.node_count]
+ *                 is_leaf = (depth >= max_depth or             # <<<<<<<<<<<<<<
+ *                            n_node_samples < min_samples_split)
  * 
  */
+          __pyx_t_8 = ((__pyx_v_depth >= __pyx_v_max_depth) != 0);
+          if (!__pyx_t_8) {
+          } else {
+            __pyx_t_9 = __pyx_t_8;
+            goto __pyx_L17_bool_binop_done;
+          }
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.children_left.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":338
+          /* "skgarden/mondrian/tree/_tree.pyx":261
  * 
- *     property children_right:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['right_child'][:self.node_count]
+ *                 is_leaf = (depth >= max_depth or
+ *                            n_node_samples < min_samples_split)             # <<<<<<<<<<<<<<
  * 
+ *                 if not is_leaf:
  */
+          __pyx_t_8 = ((__pyx_v_n_node_samples < __pyx_v_min_samples_split) != 0);
+          __pyx_t_9 = __pyx_t_8;
+          __pyx_L17_bool_binop_done:;
+          __pyx_v_is_leaf = __pyx_t_9;
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":339
- *     property children_right:
- *         def __get__(self):
- *             return self._get_node_ndarray()['right_child'][:self.node_count]             # <<<<<<<<<<<<<<
+          /* "skgarden/mondrian/tree/_tree.pyx":263
+ *                            n_node_samples < min_samples_split)
  * 
- *     property feature:
+ *                 if not is_leaf:             # <<<<<<<<<<<<<<
+ *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
+ *                     is_leaf = is_leaf or (split.pos >= end)
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_right_child); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+          __pyx_t_9 = ((!(__pyx_v_is_leaf != 0)) != 0);
+          if (__pyx_t_9) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":338
- * 
- *     property children_right:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['right_child'][:self.node_count]
+            /* "skgarden/mondrian/tree/_tree.pyx":264
  * 
+ *                 if not is_leaf:
+ *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)             # <<<<<<<<<<<<<<
+ *                     is_leaf = is_leaf or (split.pos >= end)
+ *                 else:
  */
+            __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_split(__pyx_v_splitter, __pyx_v_impurity, (&__pyx_v_split), (&__pyx_v_n_constant_features)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 264, __pyx_L8_error)
+            __pyx_v_is_leaf = __pyx_t_5;
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.children_right.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+            /* "skgarden/mondrian/tree/_tree.pyx":265
+ *                 if not is_leaf:
+ *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
+ *                     is_leaf = is_leaf or (split.pos >= end)             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     splitter.set_bounds()
+ */
+            __pyx_t_8 = (__pyx_v_is_leaf != 0);
+            if (!__pyx_t_8) {
+            } else {
+              __pyx_t_9 = __pyx_t_8;
+              goto __pyx_L20_bool_binop_done;
+            }
+            __pyx_t_8 = ((__pyx_v_split.pos >= __pyx_v_end) != 0);
+            __pyx_t_9 = __pyx_t_8;
+            __pyx_L20_bool_binop_done:;
+            __pyx_v_is_leaf = __pyx_t_9;
 
-/* "skgarden/mondrian/tree/_tree.pyx":342
- * 
- *     property feature:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['feature'][:self.node_count]
+            /* "skgarden/mondrian/tree/_tree.pyx":263
+ *                            n_node_samples < min_samples_split)
  * 
+ *                 if not is_leaf:             # <<<<<<<<<<<<<<
+ *                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
+ *                     is_leaf = is_leaf or (split.pos >= end)
  */
+            goto __pyx_L19;
+          }
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":343
- *     property feature:
- *         def __get__(self):
- *             return self._get_node_ndarray()['feature'][:self.node_count]             # <<<<<<<<<<<<<<
+          /* "skgarden/mondrian/tree/_tree.pyx":267
+ *                     is_leaf = is_leaf or (split.pos >= end)
+ *                 else:
+ *                     splitter.set_bounds()             # <<<<<<<<<<<<<<
  * 
- *     property threshold:
+ *                 # Check if the node is pure.
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+          /*else*/ {
+            ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->set_bounds(__pyx_v_splitter);
+          }
+          __pyx_L19:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":342
+          /* "skgarden/mondrian/tree/_tree.pyx":270
  * 
- *     property feature:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['feature'][:self.node_count]
+ *                 # Check if the node is pure.
+ *                 is_leaf = is_leaf or splitter.criterion.is_pure()             # <<<<<<<<<<<<<<
  * 
+ *                 node_id = tree._add_node(parent, is_left, is_leaf, split.feature,
  */
+          __pyx_t_8 = (__pyx_v_is_leaf != 0);
+          if (!__pyx_t_8) {
+          } else {
+            __pyx_t_9 = __pyx_t_8;
+            goto __pyx_L22_bool_binop_done;
+          }
+          __pyx_t_8 = (((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *)__pyx_v_splitter->criterion->__pyx_vtab)->is_pure(__pyx_v_splitter->criterion) != 0);
+          __pyx_t_9 = __pyx_t_8;
+          __pyx_L22_bool_binop_done:;
+          __pyx_v_is_leaf = __pyx_t_9;
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.feature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":346
- * 
- *     property threshold:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['threshold'][:self.node_count]
+          /* "skgarden/mondrian/tree/_tree.pyx":272
+ *                 is_leaf = is_leaf or splitter.criterion.is_pure()
  * 
+ *                 node_id = tree._add_node(parent, is_left, is_leaf, split.feature,             # <<<<<<<<<<<<<<
+ *                                          split.threshold, impurity, n_node_samples,
+ *                                          weighted_n_node_samples,
  */
+          __pyx_t_10 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_add_node(__pyx_v_tree, __pyx_v_parent, __pyx_v_is_left, __pyx_v_is_leaf, __pyx_v_split.feature, __pyx_v_split.threshold, __pyx_v_impurity, __pyx_v_n_node_samples, __pyx_v_weighted_n_node_samples, __pyx_v_splitter->lower_bounds, __pyx_v_splitter->upper_bounds, __pyx_v_split.E); if (unlikely(__pyx_t_10 == ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1))) __PYX_ERR(0, 272, __pyx_L8_error)
+          __pyx_v_node_id = __pyx_t_10;
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":347
- *     property threshold:
- *         def __get__(self):
- *             return self._get_node_ndarray()['threshold'][:self.node_count]             # <<<<<<<<<<<<<<
+          /* "skgarden/mondrian/tree/_tree.pyx":279
+ *                                          split.E)
  * 
- *     property impurity:
+ *                 if node_id == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
+ *                     rc = -1
+ *                     break
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_threshold); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+          __pyx_t_9 = ((__pyx_v_node_id == ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L)) != 0);
+          if (__pyx_t_9) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":346
+            /* "skgarden/mondrian/tree/_tree.pyx":280
  * 
- *     property threshold:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['threshold'][:self.node_count]
+ *                 if node_id == <SIZE_t>(-1):
+ *                     rc = -1             # <<<<<<<<<<<<<<
+ *                     break
  * 
  */
+            __pyx_v_rc = -1;
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":350
+            /* "skgarden/mondrian/tree/_tree.pyx":281
+ *                 if node_id == <SIZE_t>(-1):
+ *                     rc = -1
+ *                     break             # <<<<<<<<<<<<<<
  * 
- *     property impurity:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['impurity'][:self.node_count]
+ *                 # Store value for all nodes, to facilitate tree/model
+ */
+            goto __pyx_L15_break;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":279
+ *                                          split.E)
  * 
+ *                 if node_id == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
+ *                     rc = -1
+ *                     break
  */
+          }
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+          /* "skgarden/mondrian/tree/_tree.pyx":285
+ *                 # Store value for all nodes, to facilitate tree/model
+ *                 # inspection and interpretation
+ *                 splitter.node_value(tree.value + node_id * tree.value_stride)             # <<<<<<<<<<<<<<
+ * 
+ *                 if not is_leaf:
+ */
+          ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_v_splitter->__pyx_vtab)->node_value(__pyx_v_splitter, (__pyx_v_tree->value + (__pyx_v_node_id * __pyx_v_tree->value_stride)));
 
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+          /* "skgarden/mondrian/tree/_tree.pyx":287
+ *                 splitter.node_value(tree.value + node_id * tree.value_stride)
+ * 
+ *                 if not is_leaf:             # <<<<<<<<<<<<<<
+ *                     # Push right child on stack
+ *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
+ */
+          __pyx_t_9 = ((!(__pyx_v_is_leaf != 0)) != 0);
+          if (__pyx_t_9) {
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+            /* "skgarden/mondrian/tree/_tree.pyx":289
+ *                 if not is_leaf:
+ *                     # Push right child on stack
+ *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,             # <<<<<<<<<<<<<<
+ *                                     split.impurity_right, n_constant_features)
+ *                     if rc == -1:
+ */
+            __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->push(__pyx_v_stack, __pyx_v_split.pos, __pyx_v_end, (__pyx_v_depth + 1), __pyx_v_node_id, 0, __pyx_v_split.impurity_right, __pyx_v_n_constant_features); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 289, __pyx_L8_error)
+            __pyx_v_rc = __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":351
- *     property impurity:
- *         def __get__(self):
- *             return self._get_node_ndarray()['impurity'][:self.node_count]             # <<<<<<<<<<<<<<
+            /* "skgarden/mondrian/tree/_tree.pyx":291
+ *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
+ *                                     split.impurity_right, n_constant_features)
+ *                     if rc == -1:             # <<<<<<<<<<<<<<
+ *                         break
  * 
- *     property n_node_samples:
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_impurity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+            __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
+            if (__pyx_t_9) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":350
- * 
- *     property impurity:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['impurity'][:self.node_count]
+              /* "skgarden/mondrian/tree/_tree.pyx":292
+ *                                     split.impurity_right, n_constant_features)
+ *                     if rc == -1:
+ *                         break             # <<<<<<<<<<<<<<
  * 
+ *                     # Push left child on stack
  */
+              goto __pyx_L15_break;
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.impurity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+              /* "skgarden/mondrian/tree/_tree.pyx":291
+ *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
+ *                                     split.impurity_right, n_constant_features)
+ *                     if rc == -1:             # <<<<<<<<<<<<<<
+ *                         break
+ * 
+ */
+            }
 
-/* "skgarden/mondrian/tree/_tree.pyx":354
+            /* "skgarden/mondrian/tree/_tree.pyx":295
  * 
- *     property n_node_samples:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['n_node_samples'][:self.node_count]
+ *                     # Push left child on stack
+ *                     rc = stack.push(start, split.pos, depth + 1, node_id, 1,             # <<<<<<<<<<<<<<
+ *                                     split.impurity_left, n_constant_features)
+ *                     if rc == -1:
+ */
+            __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_stack->__pyx_vtab)->push(__pyx_v_stack, __pyx_v_start, __pyx_v_split.pos, (__pyx_v_depth + 1), __pyx_v_node_id, 1, __pyx_v_split.impurity_left, __pyx_v_n_constant_features); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 295, __pyx_L8_error)
+            __pyx_v_rc = __pyx_t_5;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":297
+ *                     rc = stack.push(start, split.pos, depth + 1, node_id, 1,
+ *                                     split.impurity_left, n_constant_features)
+ *                     if rc == -1:             # <<<<<<<<<<<<<<
+ *                         break
  * 
  */
+            __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
+            if (__pyx_t_9) {
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+              /* "skgarden/mondrian/tree/_tree.pyx":298
+ *                                     split.impurity_left, n_constant_features)
+ *                     if rc == -1:
+ *                         break             # <<<<<<<<<<<<<<
+ * 
+ *                 if depth > max_depth_seen:
+ */
+              goto __pyx_L15_break;
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+              /* "skgarden/mondrian/tree/_tree.pyx":297
+ *                     rc = stack.push(start, split.pos, depth + 1, node_id, 1,
+ *                                     split.impurity_left, n_constant_features)
+ *                     if rc == -1:             # <<<<<<<<<<<<<<
+ *                         break
+ * 
+ */
+            }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":355
- *     property n_node_samples:
- *         def __get__(self):
- *             return self._get_node_ndarray()['n_node_samples'][:self.node_count]             # <<<<<<<<<<<<<<
+            /* "skgarden/mondrian/tree/_tree.pyx":287
+ *                 splitter.node_value(tree.value + node_id * tree.value_stride)
  * 
- *     property weighted_n_node_samples:
+ *                 if not is_leaf:             # <<<<<<<<<<<<<<
+ *                     # Push right child on stack
+ *                     rc = stack.push(split.pos, end, depth + 1, node_id, 0,
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_n_node_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+          }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":354
+          /* "skgarden/mondrian/tree/_tree.pyx":300
+ *                         break
  * 
- *     property n_node_samples:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['n_node_samples'][:self.node_count]
+ *                 if depth > max_depth_seen:             # <<<<<<<<<<<<<<
+ *                     max_depth_seen = depth
  * 
  */
+          __pyx_t_9 = ((__pyx_v_depth > __pyx_v_max_depth_seen) != 0);
+          if (__pyx_t_9) {
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.n_node_samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":358
+            /* "skgarden/mondrian/tree/_tree.pyx":301
  * 
- *     property weighted_n_node_samples:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['weighted_n_node_samples'][:self.node_count]
+ *                 if depth > max_depth_seen:
+ *                     max_depth_seen = depth             # <<<<<<<<<<<<<<
  * 
+ *             if rc >= 0:
  */
+            __pyx_v_max_depth_seen = __pyx_v_depth;
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+            /* "skgarden/mondrian/tree/_tree.pyx":300
+ *                         break
+ * 
+ *                 if depth > max_depth_seen:             # <<<<<<<<<<<<<<
+ *                     max_depth_seen = depth
+ * 
+ */
+          }
+        }
+        __pyx_L15_break:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":359
- *     property weighted_n_node_samples:
- *         def __get__(self):
- *             return self._get_node_ndarray()['weighted_n_node_samples'][:self.node_count]             # <<<<<<<<<<<<<<
+        /* "skgarden/mondrian/tree/_tree.pyx":303
+ *                     max_depth_seen = depth
+ * 
+ *             if rc >= 0:             # <<<<<<<<<<<<<<
+ *                 rc = tree._resize_c(tree.node_count)
  * 
- *     property value:
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_weighted_n_node_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+        __pyx_t_9 = ((__pyx_v_rc >= 0) != 0);
+        if (__pyx_t_9) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":358
+          /* "skgarden/mondrian/tree/_tree.pyx":304
  * 
- *     property weighted_n_node_samples:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()['weighted_n_node_samples'][:self.node_count]
+ *             if rc >= 0:
+ *                 rc = tree._resize_c(tree.node_count)             # <<<<<<<<<<<<<<
  * 
+ *             if rc >= 0:
  */
+          __pyx_t_15.__pyx_n = 1;
+          __pyx_t_15.capacity = __pyx_v_tree->node_count;
+          __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_tree->__pyx_vtab)->_resize_c(__pyx_v_tree, &__pyx_t_15); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 304, __pyx_L8_error)
+          __pyx_v_rc = __pyx_t_5;
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.weighted_n_node_samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+          /* "skgarden/mondrian/tree/_tree.pyx":303
+ *                     max_depth_seen = depth
+ * 
+ *             if rc >= 0:             # <<<<<<<<<<<<<<
+ *                 rc = tree._resize_c(tree.node_count)
+ * 
+ */
+        }
 
-/* "skgarden/mondrian/tree/_tree.pyx":362
+        /* "skgarden/mondrian/tree/_tree.pyx":306
+ *                 rc = tree._resize_c(tree.node_count)
  * 
- *     property value:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_value_ndarray()[:self.node_count]
+ *             if rc >= 0:             # <<<<<<<<<<<<<<
+ *                 tree.max_depth = max_depth_seen
+ *         if rc == -1:
+ */
+        __pyx_t_9 = ((__pyx_v_rc >= 0) != 0);
+        if (__pyx_t_9) {
+
+          /* "skgarden/mondrian/tree/_tree.pyx":307
  * 
+ *             if rc >= 0:
+ *                 tree.max_depth = max_depth_seen             # <<<<<<<<<<<<<<
+ *         if rc == -1:
+ *             raise MemoryError()
  */
+          __pyx_v_tree->max_depth = __pyx_v_max_depth_seen;
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5value_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_5value___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+          /* "skgarden/mondrian/tree/_tree.pyx":306
+ *                 rc = tree._resize_c(tree.node_count)
+ * 
+ *             if rc >= 0:             # <<<<<<<<<<<<<<
+ *                 tree.max_depth = max_depth_seen
+ *         if rc == -1:
+ */
+        }
+      }
 
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+      /* "skgarden/mondrian/tree/_tree.pyx":234
+ *         cdef StackRecord stack_record
+ * 
+ *         with nogil:             # <<<<<<<<<<<<<<
+ *             # push root node onto stack
+ *             rc = stack.push(0, n_node_samples, 0, _TREE_UNDEFINED, 0, INFINITY, 0)
+ */
+      /*finally:*/ {
+        /*normal exit:*/{
+          #ifdef WITH_THREAD
+          __Pyx_FastGIL_Forget();
+          Py_BLOCK_THREADS
+          #endif
+          goto __pyx_L9;
+        }
+        __pyx_L8_error: {
+          #ifdef WITH_THREAD
+          __Pyx_FastGIL_Forget();
+          Py_BLOCK_THREADS
+          #endif
+          goto __pyx_L1_error;
+        }
+        __pyx_L9:;
+      }
+  }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_5value___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+  /* "skgarden/mondrian/tree/_tree.pyx":308
+ *             if rc >= 0:
+ *                 tree.max_depth = max_depth_seen
+ *         if rc == -1:             # <<<<<<<<<<<<<<
+ *             raise MemoryError()
+ * 
+ */
+  __pyx_t_9 = ((__pyx_v_rc == -1L) != 0);
+  if (__pyx_t_9) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":363
- *     property value:
- *         def __get__(self):
- *             return self._get_value_ndarray()[:self.node_count]             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":309
+ *                 tree.max_depth = max_depth_seen
+ *         if rc == -1:
+ *             raise MemoryError()             # <<<<<<<<<<<<<<
  * 
- *     property tau:
+ * # =============================================================================
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_r = __pyx_t_2;
-  __pyx_t_2 = 0;
-  goto __pyx_L0;
+    PyErr_NoMemory(); __PYX_ERR(0, 309, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":362
+    /* "skgarden/mondrian/tree/_tree.pyx":308
+ *             if rc >= 0:
+ *                 tree.max_depth = max_depth_seen
+ *         if rc == -1:             # <<<<<<<<<<<<<<
+ *             raise MemoryError()
  * 
- *     property value:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_value_ndarray()[:self.node_count]
+ */
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":184
+ *         self.max_depth = max_depth
  * 
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
  */
 
   /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = 0;
+  __pyx_L0:;
+  __Pyx_XDECREF((PyObject *)__pyx_v_splitter);
+  __Pyx_XDECREF((PyObject *)__pyx_v_stack);
+  __Pyx_XDECREF(__pyx_v_X);
+  __Pyx_XDECREF((PyObject *)__pyx_v_y);
+  __Pyx_XDECREF((PyObject *)__pyx_v_sample_weight);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":366
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build[] = "Build a decision tree from the training set (X, y).";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree = 0;
+  PyObject *__pyx_v_X = 0;
+  PyArrayObject *__pyx_v_y = 0;
+  PyArrayObject *__pyx_v_sample_weight = 0;
+  PyArrayObject *__pyx_v_X_idx_sorted = 0;
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("build (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_X,&__pyx_n_s_y,&__pyx_n_s_sample_weight,&__pyx_n_s_X_idx_sorted,0};
+    PyObject* values[5] = {0,0,0,0,0};
+
+    /* "skgarden/mondrian/tree/_tree.pyx":185
  * 
- *     property tau:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()["tau"][:self.node_count]
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ *                 np.ndarray sample_weight=None,             # <<<<<<<<<<<<<<
+ *                 np.ndarray X_idx_sorted=None):
+ *         """Build a decision tree from the training set (X, y)."""
+ */
+    values[3] = (PyObject *)((PyArrayObject *)Py_None);
+
+    /* "skgarden/mondrian/tree/_tree.pyx":186
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):             # <<<<<<<<<<<<<<
+ *         """Build a decision tree from the training set (X, y)."""
  * 
  */
+    values[4] = (PyObject *)((PyArrayObject *)Py_None);
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 1); __PYX_ERR(0, 184, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, 2); __PYX_ERR(0, 184, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  3:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_weight);
+          if (value) { values[3] = value; kw_args--; }
+        }
+        CYTHON_FALLTHROUGH;
+        case  4:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X_idx_sorted);
+          if (value) { values[4] = value; kw_args--; }
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 184, __pyx_L3_error)
+      }
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+        CYTHON_FALLTHROUGH;
+        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+        CYTHON_FALLTHROUGH;
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+    }
+    __pyx_v_tree = ((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)values[0]);
+    __pyx_v_X = values[1];
+    __pyx_v_y = ((PyArrayObject *)values[2]);
+    __pyx_v_sample_weight = ((PyArrayObject *)values[3]);
+    __pyx_v_X_idx_sorted = ((PyArrayObject *)values[4]);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("build", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 184, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree, 1, "tree", 0))) __PYX_ERR(0, 184, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 184, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sample_weight), __pyx_ptype_5numpy_ndarray, 1, "sample_weight", 0))) __PYX_ERR(0, 185, __pyx_L1_error)
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X_idx_sorted), __pyx_ptype_5numpy_ndarray, 1, "X_idx_sorted", 0))) __PYX_ERR(0, 186, __pyx_L1_error)
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, __pyx_v_sample_weight, __pyx_v_X_idx_sorted);
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+  /* "skgarden/mondrian/tree/_tree.pyx":184
+ *         self.max_depth = max_depth
+ * 
+ *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
+ *                 np.ndarray sample_weight=None,
+ *                 np.ndarray X_idx_sorted=None):
+ */
 
   /* function exit code */
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __pyx_r = NULL;
+  __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_tree, PyObject *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_sample_weight, PyArrayObject *__pyx_v_X_idx_sorted) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":367
- *     property tau:
- *         def __get__(self):
- *             return self._get_node_ndarray()["tau"][:self.node_count]             # <<<<<<<<<<<<<<
- * 
- *     property mean:
- */
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build __pyx_t_2;
+  __Pyx_RefNannySetupContext("build", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_tau); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
+  __pyx_t_2.__pyx_n = 2;
+  __pyx_t_2.sample_weight = __pyx_v_sample_weight;
+  __pyx_t_2.X_idx_sorted = __pyx_v_X_idx_sorted;
+  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder->__pyx_base.build(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v_self), __pyx_v_tree, __pyx_v_X, __pyx_v_y, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":366
- * 
- *     property tau:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()["tau"][:self.node_count]
- * 
- */
-
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.tau.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -5372,677 +6089,506 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":370
- * 
- *     property mean:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_value_ndarray()[:self.node_count].ravel()
- * 
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
  */
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean_1__get__(PyObject *__pyx_v_self) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_4__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":371
- *     property mean:
- *         def __get__(self):
- *             return self._get_value_ndarray()[:self.node_count].ravel()             # <<<<<<<<<<<<<<
- * 
- *     property variance:
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ravel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_3 = NULL;
-  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
-    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
-    if (likely(__pyx_t_3)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-      __Pyx_INCREF(__pyx_t_3);
-      __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_2, function);
-    }
-  }
-  if (__pyx_t_3) {
-    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  } else {
-    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
-  }
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 2, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":370
- * 
- *     property mean:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_value_ndarray()[:self.node_count].ravel()
- * 
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
  */
 
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.mean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
-  __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":374
- * 
- *     property variance:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()["variance"][:self.node_count]
- * 
+/* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance_1__get__(PyObject *__pyx_v_self) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_6__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":375
- *     property variance:
- *         def __get__(self):
- *             return self._get_node_ndarray()["variance"][:self.node_count]             # <<<<<<<<<<<<<<
- * 
- *     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
  */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_variance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+  __PYX_ERR(1, 4, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":374
- * 
- *     property variance:
- *         def __get__(self):             # <<<<<<<<<<<<<<
- *             return self._get_node_ndarray()["variance"][:self.node_count]
- * 
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
 
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.variance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.DepthFirstTreeBuilder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
-  __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":377
- *             return self._get_node_ndarray()["variance"][:self.node_count]
+/* "skgarden/mondrian/tree/_tree.pyx":374
+ *     # (i.e. through `_resize` or `__setstate__`)
+ *     property n_classes:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)
  * 
- *     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,             # <<<<<<<<<<<<<<
- *                   int n_outputs):
- *         """Constructor."""
  */
 
 /* Python wrapper */
-static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
-  int __pyx_v_n_features;
-  PyArrayObject *__pyx_v_n_classes = 0;
-  int __pyx_v_n_outputs;
-  int __pyx_r;
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
-  {
-    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_features,&__pyx_n_s_n_classes,&__pyx_n_s_n_outputs,0};
-    PyObject* values[3] = {0,0,0};
-    if (unlikely(__pyx_kwds)) {
-      Py_ssize_t kw_args;
-      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
-      switch (pos_args) {
-        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-        case  0: break;
-        default: goto __pyx_L5_argtuple_error;
-      }
-      kw_args = PyDict_Size(__pyx_kwds);
-      switch (pos_args) {
-        case  0:
-        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_features)) != 0)) kw_args--;
-        else goto __pyx_L5_argtuple_error;
-        case  1:
-        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_classes)) != 0)) kw_args--;
-        else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 377, __pyx_L3_error)
-        }
-        case  2:
-        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_outputs)) != 0)) kw_args--;
-        else {
-          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 377, __pyx_L3_error)
-        }
-      }
-      if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 377, __pyx_L3_error)
-      }
-    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
-      goto __pyx_L5_argtuple_error;
-    } else {
-      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-    }
-    __pyx_v_n_features = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n_features == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
-    __pyx_v_n_classes = ((PyArrayObject *)values[1]);
-    __pyx_v_n_outputs = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_outputs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L3_error)
-  }
-  goto __pyx_L4_argument_unpacking_done;
-  __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 377, __pyx_L3_error)
-  __pyx_L3_error:;
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __Pyx_RefNannyFinishContext();
-  return -1;
-  __pyx_L4_argument_unpacking_done:;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n_classes), __pyx_ptype_5numpy_ndarray, 1, "n_classes", 0))) __PYX_ERR(0, 377, __pyx_L1_error)
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), __pyx_v_n_features, __pyx_v_n_classes, __pyx_v_n_outputs);
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
   /* function exit code */
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __pyx_r = -1;
-  __pyx_L0:;
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, int __pyx_v_n_features, PyArrayObject *__pyx_v_n_classes, int __pyx_v_n_outputs) {
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_k;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_n_classes;
-  __Pyx_Buffer __pyx_pybuffer_n_classes;
-  int __pyx_r;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9n_classes___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_5;
-  int __pyx_t_6;
-  Py_ssize_t __pyx_t_7;
-  __Pyx_RefNannySetupContext("__cinit__", 0);
-  __pyx_pybuffer_n_classes.pybuffer.buf = NULL;
-  __pyx_pybuffer_n_classes.refcount = 0;
-  __pyx_pybuffernd_n_classes.data = NULL;
-  __pyx_pybuffernd_n_classes.rcbuffer = &__pyx_pybuffer_n_classes;
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer, (PyObject*)__pyx_v_n_classes, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 377, __pyx_L1_error)
-  }
-  __pyx_pybuffernd_n_classes.diminfo[0].strides = __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n_classes.diminfo[0].shape = __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.shape[0];
-
-  /* "skgarden/mondrian/tree/_tree.pyx":381
- *         """Constructor."""
- *         # Input/Output layout
- *         self.n_features = n_features             # <<<<<<<<<<<<<<
- *         self.n_outputs = n_outputs
- *         self.n_classes = NULL
- */
-  __pyx_v_self->n_features = __pyx_v_n_features;
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":382
- *         # Input/Output layout
- *         self.n_features = n_features
- *         self.n_outputs = n_outputs             # <<<<<<<<<<<<<<
- *         self.n_classes = NULL
- *         safe_realloc(&self.n_classes, n_outputs)
+  /* "skgarden/mondrian/tree/_tree.pyx":375
+ *     property n_classes:
+ *         def __get__(self):
+ *             return sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)             # <<<<<<<<<<<<<<
+ * 
+ *     property children_left:
  */
-  __pyx_v_self->n_outputs = __pyx_v_n_outputs;
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray(__pyx_v_self->n_classes, __pyx_v_self->n_outputs)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":383
- *         self.n_features = n_features
- *         self.n_outputs = n_outputs
- *         self.n_classes = NULL             # <<<<<<<<<<<<<<
- *         safe_realloc(&self.n_classes, n_outputs)
+  /* "skgarden/mondrian/tree/_tree.pyx":374
+ *     # (i.e. through `_resize` or `__setstate__`)
+ *     property n_classes:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return sizet_ptr_to_ndarray(self.n_classes, self.n_outputs)
  * 
  */
-  __pyx_v_self->n_classes = NULL;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":384
- *         self.n_outputs = n_outputs
- *         self.n_classes = NULL
- *         safe_realloc(&self.n_classes, n_outputs)             # <<<<<<<<<<<<<<
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.n_classes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":378
+ * 
+ *     property children_left:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['left_child'][:self.node_count]
  * 
- *         self.max_n_classes = np.max(n_classes)
  */
-  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->n_classes), __pyx_v_n_outputs); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":386
- *         safe_realloc(&self.n_classes, n_outputs)
- * 
- *         self.max_n_classes = np.max(n_classes)             # <<<<<<<<<<<<<<
- *         self.value_stride = n_outputs * self.max_n_classes
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_13children_left___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":379
+ *     property children_left:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['left_child'][:self.node_count]             # <<<<<<<<<<<<<<
  * 
+ *     property children_right:
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_left_child); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = NULL;
-  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
-    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
-    if (likely(__pyx_t_2)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
-      __Pyx_INCREF(__pyx_t_2);
-      __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_3, function);
-    }
-  }
-  if (!__pyx_t_2) {
-    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_n_classes)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-  } else {
-    #if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(__pyx_t_3)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_n_classes)};
-      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    #if CYTHON_FAST_PYCCALL
-    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_n_classes)};
-      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    {
-      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_4);
-      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
-      __Pyx_INCREF(((PyObject *)__pyx_v_n_classes));
-      __Pyx_GIVEREF(((PyObject *)__pyx_v_n_classes));
-      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_n_classes));
-      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_1);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    }
-  }
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_v_self->max_n_classes = __pyx_t_5;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":387
+  /* "skgarden/mondrian/tree/_tree.pyx":378
  * 
- *         self.max_n_classes = np.max(n_classes)
- *         self.value_stride = n_outputs * self.max_n_classes             # <<<<<<<<<<<<<<
+ *     property children_left:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['left_child'][:self.node_count]
  * 
- *         cdef SIZE_t k
  */
-  __pyx_v_self->value_stride = (__pyx_v_n_outputs * __pyx_v_self->max_n_classes);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":390
- * 
- *         cdef SIZE_t k
- *         for k in range(n_outputs):             # <<<<<<<<<<<<<<
- *             self.n_classes[k] = n_classes[k]
- * 
- */
-  __pyx_t_6 = __pyx_v_n_outputs;
-  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
-    __pyx_v_k = __pyx_t_5;
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.children_left.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":391
- *         cdef SIZE_t k
- *         for k in range(n_outputs):
- *             self.n_classes[k] = n_classes[k]             # <<<<<<<<<<<<<<
+/* "skgarden/mondrian/tree/_tree.pyx":382
+ * 
+ *     property children_right:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['right_child'][:self.node_count]
  * 
- *         # Inner structures
  */
-    __pyx_t_7 = __pyx_v_k;
-    (__pyx_v_self->n_classes[__pyx_v_k]) = (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_n_classes.diminfo[0].strides));
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":394
- * 
- *         # Inner structures
- *         self.max_depth = 0             # <<<<<<<<<<<<<<
- *         self.node_count = 0
- *         self.capacity = 0
- */
-  __pyx_v_self->max_depth = 0;
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":395
- *         # Inner structures
- *         self.max_depth = 0
- *         self.node_count = 0             # <<<<<<<<<<<<<<
- *         self.capacity = 0
- *         self.value = NULL
- */
-  __pyx_v_self->node_count = 0;
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-  /* "skgarden/mondrian/tree/_tree.pyx":396
- *         self.max_depth = 0
- *         self.node_count = 0
- *         self.capacity = 0             # <<<<<<<<<<<<<<
- *         self.value = NULL
- *         self.nodes = NULL
- */
-  __pyx_v_self->capacity = 0;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14children_right___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":397
- *         self.node_count = 0
- *         self.capacity = 0
- *         self.value = NULL             # <<<<<<<<<<<<<<
- *         self.nodes = NULL
+  /* "skgarden/mondrian/tree/_tree.pyx":383
+ *     property children_right:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['right_child'][:self.node_count]             # <<<<<<<<<<<<<<
  * 
+ *     property feature:
  */
-  __pyx_v_self->value = NULL;
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_right_child); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":398
- *         self.capacity = 0
- *         self.value = NULL
- *         self.nodes = NULL             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":382
  * 
- *     def __dealloc__(self):
- */
-  __pyx_v_self->nodes = NULL;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":377
- *             return self._get_node_ndarray()["variance"][:self.node_count]
+ *     property children_right:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['right_child'][:self.node_count]
  * 
- *     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,             # <<<<<<<<<<<<<<
- *                   int n_outputs):
- *         """Constructor."""
  */
 
   /* function exit code */
-  __pyx_r = 0;
-  goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer);
-  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = -1;
-  goto __pyx_L2;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.children_right.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
   __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer);
-  __pyx_L2:;
+  __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":400
- *         self.nodes = NULL
+/* "skgarden/mondrian/tree/_tree.pyx":386
+ * 
+ *     property feature:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['feature'][:self.node_count]
  * 
- *     def __dealloc__(self):             # <<<<<<<<<<<<<<
- *         """Destructor."""
- *         # Free all inner structures
  */
 
 /* Python wrapper */
-static void __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
-static void __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3__dealloc__(PyObject *__pyx_v_self) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
-  __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_2__dealloc__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
+  return __pyx_r;
 }
 
-static void __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_2__dealloc__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_7feature___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__dealloc__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":403
- *         """Destructor."""
- *         # Free all inner structures
- *         free(self.n_classes)             # <<<<<<<<<<<<<<
- *         free(self.value)
- *         free(self.nodes)
- */
-  free(__pyx_v_self->n_classes);
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":404
- *         # Free all inner structures
- *         free(self.n_classes)
- *         free(self.value)             # <<<<<<<<<<<<<<
- *         free(self.nodes)
+  /* "skgarden/mondrian/tree/_tree.pyx":387
+ *     property feature:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['feature'][:self.node_count]             # <<<<<<<<<<<<<<
  * 
+ *     property threshold:
  */
-  free(__pyx_v_self->value);
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":405
- *         free(self.n_classes)
- *         free(self.value)
- *         free(self.nodes)             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":386
  * 
- *     def __reduce__(self):
- */
-  free(__pyx_v_self->nodes);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":400
- *         self.nodes = NULL
+ *     property feature:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['feature'][:self.node_count]
  * 
- *     def __dealloc__(self):             # <<<<<<<<<<<<<<
- *         """Destructor."""
- *         # Free all inner structures
  */
 
   /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.feature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
+  return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":407
- *         free(self.nodes)
+/* "skgarden/mondrian/tree/_tree.pyx":390
+ * 
+ *     property threshold:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['threshold'][:self.node_count]
  * 
- *     def __reduce__(self):             # <<<<<<<<<<<<<<
- *         """Reduce re-implementation, for pickling."""
- *         return (Tree, (self.n_features,
  */
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__[] = "Reduce re-implementation, for pickling.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold_1__get__(PyObject *__pyx_v_self) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_9threshold___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  __Pyx_RefNannySetupContext("__reduce__", 0);
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":409
- *     def __reduce__(self):
- *         """Reduce re-implementation, for pickling."""
- *         return (Tree, (self.n_features,             # <<<<<<<<<<<<<<
- *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
- *                        self.n_outputs), self.__getstate__())
+  /* "skgarden/mondrian/tree/_tree.pyx":391
+ *     property threshold:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['threshold'][:self.node_count]             # <<<<<<<<<<<<<<
+ * 
+ *     property impurity:
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":410
- *         """Reduce re-implementation, for pickling."""
- *         return (Tree, (self.n_features,
- *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),             # <<<<<<<<<<<<<<
- *                        self.n_outputs), self.__getstate__())
- * 
- */
-  __pyx_t_2 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray(__pyx_v_self->n_classes, __pyx_v_self->n_outputs)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_threshold); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":411
- *         return (Tree, (self.n_features,
- *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
- *                        self.n_outputs), self.__getstate__())             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":390
+ * 
+ *     property threshold:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['threshold'][:self.node_count]
  * 
- *     def __getstate__(self):
  */
-  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_outputs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":409
- *     def __reduce__(self):
- *         """Reduce re-implementation, for pickling."""
- *         return (Tree, (self.n_features,             # <<<<<<<<<<<<<<
- *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
- *                        self.n_outputs), self.__getstate__())
- */
-  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 409, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_GIVEREF(__pyx_t_1);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_2);
-  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
-  __Pyx_GIVEREF(__pyx_t_3);
-  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
-  __pyx_t_1 = 0;
-  __pyx_t_2 = 0;
-  __pyx_t_3 = 0;
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-  /* "skgarden/mondrian/tree/_tree.pyx":411
- *         return (Tree, (self.n_features,
- *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
- *                        self.n_outputs), self.__getstate__())             # <<<<<<<<<<<<<<
+/* "skgarden/mondrian/tree/_tree.pyx":394
+ * 
+ *     property impurity:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['impurity'][:self.node_count]
  * 
- *     def __getstate__(self):
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_1 = NULL;
-  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
-    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
-    if (likely(__pyx_t_1)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-      __Pyx_INCREF(__pyx_t_1);
-      __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_2, function);
-    }
-  }
-  if (__pyx_t_1) {
-    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  } else {
-    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
-  }
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":409
- *     def __reduce__(self):
- *         """Reduce re-implementation, for pickling."""
- *         return (Tree, (self.n_features,             # <<<<<<<<<<<<<<
- *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
- *                        self.n_outputs), self.__getstate__())
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8impurity___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":395
+ *     property impurity:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['impurity'][:self.node_count]             # <<<<<<<<<<<<<<
+ * 
+ *     property n_node_samples:
  */
-  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_impurity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_INCREF(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree));
-  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree));
-  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree));
-  __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
-  __Pyx_GIVEREF(__pyx_t_3);
-  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
-  __pyx_t_4 = 0;
-  __pyx_t_3 = 0;
-  __pyx_r = __pyx_t_2;
-  __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":407
- *         free(self.nodes)
+  /* "skgarden/mondrian/tree/_tree.pyx":394
+ * 
+ *     property impurity:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['impurity'][:self.node_count]
  * 
- *     def __reduce__(self):             # <<<<<<<<<<<<<<
- *         """Reduce re-implementation, for pickling."""
- *         return (Tree, (self.n_features,
  */
 
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.impurity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -6050,4117 +6596,3789 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":413
- *                        self.n_outputs), self.__getstate__())
+/* "skgarden/mondrian/tree/_tree.pyx":398
+ * 
+ *     property n_node_samples:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['n_node_samples'][:self.node_count]
  * 
- *     def __getstate__(self):             # <<<<<<<<<<<<<<
- *         """Getstate re-implementation, for pickling."""
- *         d = {}
  */
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_6__getstate__[] = "Getstate re-implementation, for pickling.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples_1__get__(PyObject *__pyx_v_self) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_6__getstate__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_6__getstate__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_v_d = NULL;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14n_node_samples___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  __Pyx_RefNannySetupContext("__getstate__", 0);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":415
- *     def __getstate__(self):
- *         """Getstate re-implementation, for pickling."""
- *         d = {}             # <<<<<<<<<<<<<<
- *         # capacity is infered during the __setstate__ using nodes
- *         d["max_depth"] = self.max_depth
- */
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_v_d = ((PyObject*)__pyx_t_1);
-  __pyx_t_1 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":417
- *         d = {}
- *         # capacity is infered during the __setstate__ using nodes
- *         d["max_depth"] = self.max_depth             # <<<<<<<<<<<<<<
- *         d["node_count"] = self.node_count
- *         d["nodes"] = self._get_node_ndarray()
- */
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_max_depth, __pyx_t_1) < 0)) __PYX_ERR(0, 417, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":418
- *         # capacity is infered during the __setstate__ using nodes
- *         d["max_depth"] = self.max_depth
- *         d["node_count"] = self.node_count             # <<<<<<<<<<<<<<
- *         d["nodes"] = self._get_node_ndarray()
- *         d["values"] = self._get_value_ndarray()
- */
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_node_count, __pyx_t_1) < 0)) __PYX_ERR(0, 418, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":419
- *         d["max_depth"] = self.max_depth
- *         d["node_count"] = self.node_count
- *         d["nodes"] = self._get_node_ndarray()             # <<<<<<<<<<<<<<
- *         d["values"] = self._get_value_ndarray()
- *         return d
- */
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_nodes, __pyx_t_1) < 0)) __PYX_ERR(0, 419, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":420
- *         d["node_count"] = self.node_count
- *         d["nodes"] = self._get_node_ndarray()
- *         d["values"] = self._get_value_ndarray()             # <<<<<<<<<<<<<<
- *         return d
+  /* "skgarden/mondrian/tree/_tree.pyx":399
+ *     property n_node_samples:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['n_node_samples'][:self.node_count]             # <<<<<<<<<<<<<<
  * 
+ *     property weighted_n_node_samples:
  */
-  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_values, __pyx_t_1) < 0)) __PYX_ERR(0, 420, __pyx_L1_error)
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_n_node_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":421
- *         d["nodes"] = self._get_node_ndarray()
- *         d["values"] = self._get_value_ndarray()
- *         return d             # <<<<<<<<<<<<<<
- * 
- *     def __setstate__(self, d):
- */
-  __Pyx_XDECREF(__pyx_r);
-  __Pyx_INCREF(__pyx_v_d);
-  __pyx_r = __pyx_v_d;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":413
- *                        self.n_outputs), self.__getstate__())
+  /* "skgarden/mondrian/tree/_tree.pyx":398
+ * 
+ *     property n_node_samples:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['n_node_samples'][:self.node_count]
  * 
- *     def __getstate__(self):             # <<<<<<<<<<<<<<
- *         """Getstate re-implementation, for pickling."""
- *         d = {}
  */
 
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.n_node_samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
-  __Pyx_XDECREF(__pyx_v_d);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":423
- *         return d
+/* "skgarden/mondrian/tree/_tree.pyx":402
+ * 
+ *     property weighted_n_node_samples:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['weighted_n_node_samples'][:self.node_count]
  * 
- *     def __setstate__(self, d):             # <<<<<<<<<<<<<<
- *         """Setstate re-implementation, for unpickling."""
- *         self.max_depth = d["max_depth"]
  */
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_d); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_8__setstate__[] = "Setstate re-implementation, for unpickling.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples_1__get__(PyObject *__pyx_v_self) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8__setstate__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_d));
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8__setstate__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_d) {
-  PyObject *__pyx_v_node_ndarray = NULL;
-  PyObject *__pyx_v_value_ndarray = NULL;
-  PyObject *__pyx_v_value_shape = NULL;
-  CYTHON_UNUSED void *__pyx_v_nodes;
-  CYTHON_UNUSED void *__pyx_v_value;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_23weighted_n_node_samples___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_2;
-  int __pyx_t_3;
-  int __pyx_t_4;
-  PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  PyObject *__pyx_t_7 = NULL;
-  int __pyx_t_8;
-  int __pyx_t_9;
-  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_10;
-  __Pyx_RefNannySetupContext("__setstate__", 0);
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":425
- *     def __setstate__(self, d):
- *         """Setstate re-implementation, for unpickling."""
- *         self.max_depth = d["max_depth"]             # <<<<<<<<<<<<<<
- *         self.node_count = d["node_count"]
+  /* "skgarden/mondrian/tree/_tree.pyx":403
+ *     property weighted_n_node_samples:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()['weighted_n_node_samples'][:self.node_count]             # <<<<<<<<<<<<<<
  * 
+ *     property value:
  */
-  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_weighted_n_node_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_v_self->max_depth = __pyx_t_2;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":426
- *         """Setstate re-implementation, for unpickling."""
- *         self.max_depth = d["max_depth"]
- *         self.node_count = d["node_count"]             # <<<<<<<<<<<<<<
- * 
- *         if 'nodes' not in d:
- */
-  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_node_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_v_self->node_count = __pyx_t_2;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":428
- *         self.node_count = d["node_count"]
+  /* "skgarden/mondrian/tree/_tree.pyx":402
+ * 
+ *     property weighted_n_node_samples:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()['weighted_n_node_samples'][:self.node_count]
  * 
- *         if 'nodes' not in d:             # <<<<<<<<<<<<<<
- *             raise ValueError('You have loaded Tree version which '
- *                              'cannot be imported')
  */
-  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_nodes, __pyx_v_d, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 428, __pyx_L1_error)
-  __pyx_t_4 = (__pyx_t_3 != 0);
-  if (__pyx_t_4) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":429
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.weighted_n_node_samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":406
  * 
- *         if 'nodes' not in d:
- *             raise ValueError('You have loaded Tree version which '             # <<<<<<<<<<<<<<
- *                              'cannot be imported')
+ *     property value:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_value_ndarray()[:self.node_count]
  * 
  */
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 429, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":428
- *         self.node_count = d["node_count"]
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5value_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_5value___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_5value___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":407
+ *     property value:
+ *         def __get__(self):
+ *             return self._get_value_ndarray()[:self.node_count]             # <<<<<<<<<<<<<<
  * 
- *         if 'nodes' not in d:             # <<<<<<<<<<<<<<
- *             raise ValueError('You have loaded Tree version which '
- *                              'cannot be imported')
+ *     property tau:
  */
-  }
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_r = __pyx_t_2;
+  __pyx_t_2 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":432
- *                              'cannot be imported')
+  /* "skgarden/mondrian/tree/_tree.pyx":406
  * 
- *         node_ndarray = d['nodes']             # <<<<<<<<<<<<<<
- *         value_ndarray = d['values']
+ *     property value:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_value_ndarray()[:self.node_count]
  * 
  */
-  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_v_node_ndarray = __pyx_t_1;
-  __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":433
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":410
  * 
- *         node_ndarray = d['nodes']
- *         value_ndarray = d['values']             # <<<<<<<<<<<<<<
+ *     property tau:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()["tau"][:self.node_count]
  * 
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,
  */
-  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_v_value_ndarray = __pyx_t_1;
-  __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":435
- *         value_ndarray = d['values']
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_3tau___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":411
+ *     property tau:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()["tau"][:self.node_count]             # <<<<<<<<<<<<<<
  * 
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,             # <<<<<<<<<<<<<<
- *                        self.max_n_classes)
- *         if (node_ndarray.ndim != 1 or
+ *     property mean:
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_tau); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":436
+  /* "skgarden/mondrian/tree/_tree.pyx":410
+ * 
+ *     property tau:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()["tau"][:self.node_count]
  * 
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,
- *                        self.max_n_classes)             # <<<<<<<<<<<<<<
- *         if (node_ndarray.ndim != 1 or
- *                 node_ndarray.dtype != NODE_DTYPE or
  */
-  __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_n_classes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 436, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_6);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":435
- *         value_ndarray = d['values']
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.tau.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":414
+ * 
+ *     property mean:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_value_ndarray()[:self.node_count].ravel()
  * 
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,             # <<<<<<<<<<<<<<
- *                        self.max_n_classes)
- *         if (node_ndarray.ndim != 1 or
  */
-  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
-  __Pyx_GIVEREF(__pyx_t_1);
-  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_6);
-  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
-  __pyx_t_5 = 0;
-  __pyx_t_1 = 0;
-  __pyx_t_6 = 0;
-  __pyx_v_value_shape = ((PyObject*)__pyx_t_7);
-  __pyx_t_7 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":437
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,
- *                        self.max_n_classes)
- *         if (node_ndarray.ndim != 1 or             # <<<<<<<<<<<<<<
- *                 node_ndarray.dtype != NODE_DTYPE or
- *                 not node_ndarray.flags.c_contiguous or
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4mean___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":415
+ *     property mean:
+ *         def __get__(self):
+ *             return self._get_value_ndarray()[:self.node_count].ravel()             # <<<<<<<<<<<<<<
+ * 
+ *     property variance:
  */
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 437, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 437, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 437, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  if (!__pyx_t_3) {
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ravel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = NULL;
+  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
+    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
+    if (likely(__pyx_t_3)) {
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
+      __Pyx_INCREF(__pyx_t_3);
+      __Pyx_INCREF(function);
+      __Pyx_DECREF_SET(__pyx_t_2, function);
+    }
+  }
+  if (__pyx_t_3) {
+    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   } else {
-    __pyx_t_4 = __pyx_t_3;
-    goto __pyx_L5_bool_binop_done;
+    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
   }
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":438
- *                        self.max_n_classes)
- *         if (node_ndarray.ndim != 1 or
- *                 node_ndarray.dtype != NODE_DTYPE or             # <<<<<<<<<<<<<<
- *                 not node_ndarray.flags.c_contiguous or
- *                 value_ndarray.shape != value_shape or
+  /* "skgarden/mondrian/tree/_tree.pyx":414
+ * 
+ *     property mean:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_value_ndarray()[:self.node_count].ravel()
+ * 
  */
-  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 438, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_NODE_DTYPE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 438, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 438, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (!__pyx_t_3) {
-  } else {
-    __pyx_t_4 = __pyx_t_3;
-    goto __pyx_L5_bool_binop_done;
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":439
- *         if (node_ndarray.ndim != 1 or
- *                 node_ndarray.dtype != NODE_DTYPE or
- *                 not node_ndarray.flags.c_contiguous or             # <<<<<<<<<<<<<<
- *                 value_ndarray.shape != value_shape or
- *                 not value_ndarray.flags.c_contiguous or
- */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_c_contiguous); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 439, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 439, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __pyx_t_8 = ((!__pyx_t_3) != 0);
-  if (!__pyx_t_8) {
-  } else {
-    __pyx_t_4 = __pyx_t_8;
-    goto __pyx_L5_bool_binop_done;
-  }
-
-  /* "skgarden/mondrian/tree/_tree.pyx":440
- *                 node_ndarray.dtype != NODE_DTYPE or
- *                 not node_ndarray.flags.c_contiguous or
- *                 value_ndarray.shape != value_shape or             # <<<<<<<<<<<<<<
- *                 not value_ndarray.flags.c_contiguous or
- *                 value_ndarray.dtype != np.float64):
- */
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_ndarray, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_v_value_shape, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 440, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (!__pyx_t_8) {
-  } else {
-    __pyx_t_4 = __pyx_t_8;
-    goto __pyx_L5_bool_binop_done;
-  }
-
-  /* "skgarden/mondrian/tree/_tree.pyx":441
- *                 not node_ndarray.flags.c_contiguous or
- *                 value_ndarray.shape != value_shape or
- *                 not value_ndarray.flags.c_contiguous or             # <<<<<<<<<<<<<<
- *                 value_ndarray.dtype != np.float64):
- *             raise ValueError('Did not recognise loaded array layout')
- */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_ndarray, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_c_contiguous); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 441, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 441, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __pyx_t_3 = ((!__pyx_t_8) != 0);
-  if (!__pyx_t_3) {
-  } else {
-    __pyx_t_4 = __pyx_t_3;
-    goto __pyx_L5_bool_binop_done;
-  }
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.mean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-  /* "skgarden/mondrian/tree/_tree.pyx":442
- *                 value_ndarray.shape != value_shape or
- *                 not value_ndarray.flags.c_contiguous or
- *                 value_ndarray.dtype != np.float64):             # <<<<<<<<<<<<<<
- *             raise ValueError('Did not recognise loaded array layout')
+/* "skgarden/mondrian/tree/_tree.pyx":418
+ * 
+ *     property variance:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()["variance"][:self.node_count]
  * 
  */
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_ndarray, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_4 = __pyx_t_3;
-  __pyx_L5_bool_binop_done:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":437
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,
- *                        self.max_n_classes)
- *         if (node_ndarray.ndim != 1 or             # <<<<<<<<<<<<<<
- *                 node_ndarray.dtype != NODE_DTYPE or
- *                 not node_ndarray.flags.c_contiguous or
- */
-  if (__pyx_t_4) {
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
-    /* "skgarden/mondrian/tree/_tree.pyx":443
- *                 not value_ndarray.flags.c_contiguous or
- *                 value_ndarray.dtype != np.float64):
- *             raise ValueError('Did not recognise loaded array layout')             # <<<<<<<<<<<<<<
- * 
- *         self.capacity = node_ndarray.shape[0]
- */
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 443, __pyx_L1_error)
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":437
- *         value_shape = (node_ndarray.shape[0], self.n_outputs,
- *                        self.max_n_classes)
- *         if (node_ndarray.ndim != 1 or             # <<<<<<<<<<<<<<
- *                 node_ndarray.dtype != NODE_DTYPE or
- *                 not node_ndarray.flags.c_contiguous or
- */
-  }
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":445
- *             raise ValueError('Did not recognise loaded array layout')
+  /* "skgarden/mondrian/tree/_tree.pyx":419
+ *     property variance:
+ *         def __get__(self):
+ *             return self._get_node_ndarray()["variance"][:self.node_count]             # <<<<<<<<<<<<<<
  * 
- *         self.capacity = node_ndarray.shape[0]             # <<<<<<<<<<<<<<
- *         if self._resize_c(self.capacity) != 0:
- *             raise MemoryError("resizing tree to %d" % self.capacity)
+ *     property root:
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 445, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_6);
+  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_n_s_variance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_6); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_v_self->capacity = __pyx_t_2;
+  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_v_self->node_count, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":446
+  /* "skgarden/mondrian/tree/_tree.pyx":418
+ * 
+ *     property variance:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self._get_node_ndarray()["variance"][:self.node_count]
  * 
- *         self.capacity = node_ndarray.shape[0]
- *         if self._resize_c(self.capacity) != 0:             # <<<<<<<<<<<<<<
- *             raise MemoryError("resizing tree to %d" % self.capacity)
- *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
  */
-  __pyx_t_10.__pyx_n = 1;
-  __pyx_t_10.capacity = __pyx_v_self->capacity;
-  __pyx_t_9 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, &__pyx_t_10); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 446, __pyx_L1_error)
-  __pyx_t_4 = ((__pyx_t_9 != 0) != 0);
-  if (__pyx_t_4) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":447
- *         self.capacity = node_ndarray.shape[0]
- *         if self._resize_c(self.capacity) != 0:
- *             raise MemoryError("resizing tree to %d" % self.capacity)             # <<<<<<<<<<<<<<
- *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
- *                        self.capacity * sizeof(Node))
- */
-    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->capacity); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 447, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_6);
-    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_resizing_tree_to_d, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 447, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_6);
-    __Pyx_GIVEREF(__pyx_t_1);
-    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
-    __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 447, __pyx_L1_error)
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.variance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":446
+/* "skgarden/mondrian/tree/_tree.pyx":422
+ * 
+ *     property root:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self.root
  * 
- *         self.capacity = node_ndarray.shape[0]
- *         if self._resize_c(self.capacity) != 0:             # <<<<<<<<<<<<<<
- *             raise MemoryError("resizing tree to %d" % self.capacity)
- *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
  */
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":448
- *         if self._resize_c(self.capacity) != 0:
- *             raise MemoryError("resizing tree to %d" % self.capacity)
- *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,             # <<<<<<<<<<<<<<
- *                        self.capacity * sizeof(Node))
- *         value = memcpy(self.value, (<np.ndarray> value_ndarray).data,
- */
-  __pyx_v_nodes = memcpy(__pyx_v_self->nodes, ((PyArrayObject *)__pyx_v_node_ndarray)->data, (__pyx_v_self->capacity * (sizeof(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node))));
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4root_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4root_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4root___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":450
- *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
- *                        self.capacity * sizeof(Node))
- *         value = memcpy(self.value, (<np.ndarray> value_ndarray).data,             # <<<<<<<<<<<<<<
- *                        self.capacity * self.value_stride * sizeof(double))
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4root___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":423
+ *     property root:
+ *         def __get__(self):
+ *             return self.root             # <<<<<<<<<<<<<<
  * 
+ *     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,
  */
-  __pyx_v_value = memcpy(__pyx_v_self->value, ((PyArrayObject *)__pyx_v_value_ndarray)->data, ((__pyx_v_self->capacity * __pyx_v_self->value_stride) * (sizeof(double))));
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":423
- *         return d
+  /* "skgarden/mondrian/tree/_tree.pyx":422
+ * 
+ *     property root:
+ *         def __get__(self):             # <<<<<<<<<<<<<<
+ *             return self.root
  * 
- *     def __setstate__(self, d):             # <<<<<<<<<<<<<<
- *         """Setstate re-implementation, for unpickling."""
- *         self.max_depth = d["max_depth"]
  */
 
   /* function exit code */
-  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
-  goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_XDECREF(__pyx_t_7);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.root.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
-  __Pyx_XDECREF(__pyx_v_node_ndarray);
-  __Pyx_XDECREF(__pyx_v_value_ndarray);
-  __Pyx_XDECREF(__pyx_v_value_shape);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":453
- *                        self.capacity * self.value_stride * sizeof(double))
+/* "skgarden/mondrian/tree/_tree.pyx":425
+ *             return self.root
  * 
- *     cdef int _resize(self, SIZE_t capacity) nogil except -1:             # <<<<<<<<<<<<<<
- *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then
- *            double the size of the inner arrays.
+ *     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,             # <<<<<<<<<<<<<<
+ *                   int n_outputs):
+ *         """Constructor."""
  */
 
-static int __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__resize(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_capacity) {
+/* Python wrapper */
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  int __pyx_v_n_features;
+  PyArrayObject *__pyx_v_n_classes = 0;
+  int __pyx_v_n_outputs;
   int __pyx_r;
   __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_2;
-  int __pyx_t_3;
-  #ifdef WITH_THREAD
-  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
-  #endif
-  __Pyx_RefNannySetupContext("_resize", 0);
-  #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
-  #endif
-
-  /* "skgarden/mondrian/tree/_tree.pyx":454
- * 
- *     cdef int _resize(self, SIZE_t capacity) nogil except -1:
- *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then             # <<<<<<<<<<<<<<
- *            double the size of the inner arrays.
- * 
- */
-  /*try:*/ {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":460
- *         or 0 otherwise.
- *         """
- *         if self._resize_c(capacity) != 0:             # <<<<<<<<<<<<<<
- *             # Acquire gil only if we need to raise
- *             with gil:
- */
-    __pyx_t_2.__pyx_n = 1;
-    __pyx_t_2.capacity = __pyx_v_capacity;
-    __pyx_t_1 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, &__pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 460, __pyx_L4_error)
-    __pyx_t_3 = ((__pyx_t_1 != 0) != 0);
-    if (__pyx_t_3) {
-
-      /* "skgarden/mondrian/tree/_tree.pyx":462
- *         if self._resize_c(capacity) != 0:
- *             # Acquire gil only if we need to raise
- *             with gil:             # <<<<<<<<<<<<<<
- *                 raise MemoryError()
- * 
- */
-      {
-          #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
-          #endif
-          /*try:*/ {
-
-            /* "skgarden/mondrian/tree/_tree.pyx":463
- *             # Acquire gil only if we need to raise
- *             with gil:
- *                 raise MemoryError()             # <<<<<<<<<<<<<<
- * 
- *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
- */
-            PyErr_NoMemory(); __PYX_ERR(0, 463, __pyx_L8_error)
-          }
-
-          /* "skgarden/mondrian/tree/_tree.pyx":462
- *         if self._resize_c(capacity) != 0:
- *             # Acquire gil only if we need to raise
- *             with gil:             # <<<<<<<<<<<<<<
- *                 raise MemoryError()
- * 
- */
-          /*finally:*/ {
-            __pyx_L8_error: {
-              #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
-              #endif
-              goto __pyx_L4_error;
-            }
-          }
+  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_features,&__pyx_n_s_n_classes,&__pyx_n_s_n_outputs,0};
+    PyObject* values[3] = {0,0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
       }
-
-      /* "skgarden/mondrian/tree/_tree.pyx":460
- *         or 0 otherwise.
- *         """
- *         if self._resize_c(capacity) != 0:             # <<<<<<<<<<<<<<
- *             # Acquire gil only if we need to raise
- *             with gil:
- */
-    }
-  }
-
-  /* "skgarden/mondrian/tree/_tree.pyx":454
- * 
- *     cdef int _resize(self, SIZE_t capacity) nogil except -1:
- *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then             # <<<<<<<<<<<<<<
- *            double the size of the inner arrays.
- * 
- */
-  /*finally:*/ {
-    /*normal exit:*/{
-      #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
-      #endif
-      goto __pyx_L5;
-    }
-    __pyx_L4_error: {
-      #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
-      #endif
-      goto __pyx_L1_error;
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_features)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_classes)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 425, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_outputs)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 425, __pyx_L3_error)
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
     }
-    __pyx_L5:;
+    __pyx_v_n_features = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n_features == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L3_error)
+    __pyx_v_n_classes = ((PyArrayObject *)values[1]);
+    __pyx_v_n_outputs = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_outputs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L3_error)
   }
-
-  /* "skgarden/mondrian/tree/_tree.pyx":453
- *                        self.capacity * self.value_stride * sizeof(double))
- * 
- *     cdef int _resize(self, SIZE_t capacity) nogil except -1:             # <<<<<<<<<<<<<<
- *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then
- *            double the size of the inner arrays.
- */
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 425, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return -1;
+  __pyx_L4_argument_unpacking_done:;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n_classes), __pyx_ptype_5numpy_ndarray, 1, "n_classes", 0))) __PYX_ERR(0, 425, __pyx_L1_error)
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree___cinit__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), __pyx_v_n_features, __pyx_v_n_classes, __pyx_v_n_outputs);
 
   /* function exit code */
-  __pyx_r = 0;
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = -1;
   __pyx_L0:;
-  #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
-  #endif
+  __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":467
- *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
- *     # (i.e., older MSVC).
- *     cdef int _resize_c(self, SIZE_t capacity=<SIZE_t>(-1)) nogil except -1:             # <<<<<<<<<<<<<<
- *         """Guts of _resize
- * 
- */
-
-static int __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c *__pyx_optional_args) {
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_capacity = __pyx_k__4;
+static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, int __pyx_v_n_features, PyArrayObject *__pyx_v_n_classes, int __pyx_v_n_outputs) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_k;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_n_classes;
+  __Pyx_Buffer __pyx_pybuffer_n_classes;
   int __pyx_r;
-  int __pyx_t_1;
-  int __pyx_t_2;
-  if (__pyx_optional_args) {
-    if (__pyx_optional_args->__pyx_n > 0) {
-      __pyx_v_capacity = __pyx_optional_args->capacity;
-    }
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_5;
+  int __pyx_t_6;
+  Py_ssize_t __pyx_t_7;
+  __Pyx_RefNannySetupContext("__cinit__", 0);
+  __pyx_pybuffer_n_classes.pybuffer.buf = NULL;
+  __pyx_pybuffer_n_classes.refcount = 0;
+  __pyx_pybuffernd_n_classes.data = NULL;
+  __pyx_pybuffernd_n_classes.rcbuffer = &__pyx_pybuffer_n_classes;
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer, (PyObject*)__pyx_v_n_classes, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 425, __pyx_L1_error)
   }
+  __pyx_pybuffernd_n_classes.diminfo[0].strides = __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n_classes.diminfo[0].shape = __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.shape[0];
 
-  /* "skgarden/mondrian/tree/_tree.pyx":473
- *         or 0 otherwise.
- *         """
- *         if capacity == self.capacity and self.nodes != NULL:             # <<<<<<<<<<<<<<
- *             return 0
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":429
+ *         """Constructor."""
+ *         # Input/Output layout
+ *         self.n_features = n_features             # <<<<<<<<<<<<<<
+ *         self.n_outputs = n_outputs
+ *         self.n_classes = NULL
  */
-  __pyx_t_2 = ((__pyx_v_capacity == __pyx_v_self->capacity) != 0);
-  if (__pyx_t_2) {
-  } else {
-    __pyx_t_1 = __pyx_t_2;
-    goto __pyx_L4_bool_binop_done;
-  }
-  __pyx_t_2 = ((__pyx_v_self->nodes != NULL) != 0);
-  __pyx_t_1 = __pyx_t_2;
-  __pyx_L4_bool_binop_done:;
-  if (__pyx_t_1) {
+  __pyx_v_self->n_features = __pyx_v_n_features;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":474
- *         """
- *         if capacity == self.capacity and self.nodes != NULL:
- *             return 0             # <<<<<<<<<<<<<<
- * 
- *         if capacity == <SIZE_t>(-1):
+  /* "skgarden/mondrian/tree/_tree.pyx":430
+ *         # Input/Output layout
+ *         self.n_features = n_features
+ *         self.n_outputs = n_outputs             # <<<<<<<<<<<<<<
+ *         self.n_classes = NULL
+ *         safe_realloc(&self.n_classes, n_outputs)
  */
-    __pyx_r = 0;
-    goto __pyx_L0;
+  __pyx_v_self->n_outputs = __pyx_v_n_outputs;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":473
- *         or 0 otherwise.
- *         """
- *         if capacity == self.capacity and self.nodes != NULL:             # <<<<<<<<<<<<<<
- *             return 0
+  /* "skgarden/mondrian/tree/_tree.pyx":431
+ *         self.n_features = n_features
+ *         self.n_outputs = n_outputs
+ *         self.n_classes = NULL             # <<<<<<<<<<<<<<
+ *         safe_realloc(&self.n_classes, n_outputs)
  * 
  */
-  }
+  __pyx_v_self->n_classes = NULL;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":476
- *             return 0
+  /* "skgarden/mondrian/tree/_tree.pyx":432
+ *         self.n_outputs = n_outputs
+ *         self.n_classes = NULL
+ *         safe_realloc(&self.n_classes, n_outputs)             # <<<<<<<<<<<<<<
  * 
- *         if capacity == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
- *             if self.capacity == 0:
- *                 capacity = 3  # default initial value
+ *         self.max_n_classes = np.max(n_classes)
  */
-  __pyx_t_1 = ((__pyx_v_capacity == ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L)) != 0);
-  if (__pyx_t_1) {
+  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->n_classes), __pyx_v_n_outputs); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":477
+  /* "skgarden/mondrian/tree/_tree.pyx":434
+ *         safe_realloc(&self.n_classes, n_outputs)
  * 
- *         if capacity == <SIZE_t>(-1):
- *             if self.capacity == 0:             # <<<<<<<<<<<<<<
- *                 capacity = 3  # default initial value
- *             else:
- */
-    __pyx_t_1 = ((__pyx_v_self->capacity == 0) != 0);
-    if (__pyx_t_1) {
-
-      /* "skgarden/mondrian/tree/_tree.pyx":478
- *         if capacity == <SIZE_t>(-1):
- *             if self.capacity == 0:
- *                 capacity = 3  # default initial value             # <<<<<<<<<<<<<<
- *             else:
- *                 capacity = 2 * self.capacity
- */
-      __pyx_v_capacity = 3;
-
-      /* "skgarden/mondrian/tree/_tree.pyx":477
+ *         self.max_n_classes = np.max(n_classes)             # <<<<<<<<<<<<<<
+ *         self.value_stride = n_outputs * self.max_n_classes
  * 
- *         if capacity == <SIZE_t>(-1):
- *             if self.capacity == 0:             # <<<<<<<<<<<<<<
- *                 capacity = 3  # default initial value
- *             else:
  */
-      goto __pyx_L7;
-    }
-
-    /* "skgarden/mondrian/tree/_tree.pyx":480
- *                 capacity = 3  # default initial value
- *             else:
- *                 capacity = 2 * self.capacity             # <<<<<<<<<<<<<<
- * 
- *         safe_realloc(&self.nodes, capacity)
- */
-    /*else*/ {
-      __pyx_v_capacity = (2 * __pyx_v_self->capacity);
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = NULL;
+  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
+    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
+    if (likely(__pyx_t_2)) {
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
+      __Pyx_INCREF(__pyx_t_2);
+      __Pyx_INCREF(function);
+      __Pyx_DECREF_SET(__pyx_t_3, function);
+    }
+  }
+  if (!__pyx_t_2) {
+    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_n_classes)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+  } else {
+    #if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(__pyx_t_3)) {
+      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_n_classes)};
+      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
+      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
+      __Pyx_GOTREF(__pyx_t_1);
+    } else
+    #endif
+    #if CYTHON_FAST_PYCCALL
+    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
+      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_n_classes)};
+      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
+      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
+      __Pyx_GOTREF(__pyx_t_1);
+    } else
+    #endif
+    {
+      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
+      __Pyx_INCREF(((PyObject *)__pyx_v_n_classes));
+      __Pyx_GIVEREF(((PyObject *)__pyx_v_n_classes));
+      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_n_classes));
+      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_1);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
     }
-    __pyx_L7:;
-
-    /* "skgarden/mondrian/tree/_tree.pyx":476
- *             return 0
- * 
- *         if capacity == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
- *             if self.capacity == 0:
- *                 capacity = 3  # default initial value
- */
   }
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_self->max_n_classes = __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":482
- *                 capacity = 2 * self.capacity
+  /* "skgarden/mondrian/tree/_tree.pyx":435
  * 
- *         safe_realloc(&self.nodes, capacity)             # <<<<<<<<<<<<<<
- *         safe_realloc(&self.value, capacity * self.value_stride)
+ *         self.max_n_classes = np.max(n_classes)
+ *         self.value_stride = n_outputs * self.max_n_classes             # <<<<<<<<<<<<<<
  * 
+ *         cdef SIZE_t k
  */
-  __pyx_fuse_5__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->nodes), __pyx_v_capacity); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 482, __pyx_L1_error)
+  __pyx_v_self->value_stride = (__pyx_v_n_outputs * __pyx_v_self->max_n_classes);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":483
+  /* "skgarden/mondrian/tree/_tree.pyx":438
  * 
- *         safe_realloc(&self.nodes, capacity)
- *         safe_realloc(&self.value, capacity * self.value_stride)             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t k
+ *         for k in range(n_outputs):             # <<<<<<<<<<<<<<
+ *             self.n_classes[k] = n_classes[k]
  * 
- *         # value memory is initialised to 0 to enable classifier argmax
  */
-  __pyx_fuse_3__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->value), (__pyx_v_capacity * __pyx_v_self->value_stride)); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 483, __pyx_L1_error)
+  __pyx_t_6 = __pyx_v_n_outputs;
+  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
+    __pyx_v_k = __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":486
+    /* "skgarden/mondrian/tree/_tree.pyx":439
+ *         cdef SIZE_t k
+ *         for k in range(n_outputs):
+ *             self.n_classes[k] = n_classes[k]             # <<<<<<<<<<<<<<
  * 
- *         # value memory is initialised to 0 to enable classifier argmax
- *         if capacity > self.capacity:             # <<<<<<<<<<<<<<
- *             memset(<void*>(self.value + self.capacity * self.value_stride), 0,
- *                    (capacity - self.capacity) * self.value_stride *
- */
-  __pyx_t_1 = ((__pyx_v_capacity > __pyx_v_self->capacity) != 0);
-  if (__pyx_t_1) {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":487
- *         # value memory is initialised to 0 to enable classifier argmax
- *         if capacity > self.capacity:
- *             memset(<void*>(self.value + self.capacity * self.value_stride), 0,             # <<<<<<<<<<<<<<
- *                    (capacity - self.capacity) * self.value_stride *
- *                    sizeof(double))
+ *         # Inner structures
  */
-    memset(((void *)(__pyx_v_self->value + (__pyx_v_self->capacity * __pyx_v_self->value_stride))), 0, (((__pyx_v_capacity - __pyx_v_self->capacity) * __pyx_v_self->value_stride) * (sizeof(double))));
+    __pyx_t_7 = __pyx_v_k;
+    (__pyx_v_self->n_classes[__pyx_v_k]) = (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_n_classes.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_n_classes.diminfo[0].strides));
+  }
 
-    /* "skgarden/mondrian/tree/_tree.pyx":486
+  /* "skgarden/mondrian/tree/_tree.pyx":442
  * 
- *         # value memory is initialised to 0 to enable classifier argmax
- *         if capacity > self.capacity:             # <<<<<<<<<<<<<<
- *             memset(<void*>(self.value + self.capacity * self.value_stride), 0,
- *                    (capacity - self.capacity) * self.value_stride *
+ *         # Inner structures
+ *         self.max_depth = 0             # <<<<<<<<<<<<<<
+ *         self.node_count = 0
+ *         self.capacity = 0
  */
-  }
+  __pyx_v_self->max_depth = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":492
- * 
- *         # if capacity smaller than node_count, adjust the counter
- *         if capacity < self.node_count:             # <<<<<<<<<<<<<<
- *             self.node_count = capacity
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":443
+ *         # Inner structures
+ *         self.max_depth = 0
+ *         self.node_count = 0             # <<<<<<<<<<<<<<
+ *         self.capacity = 0
+ *         self.value = NULL
  */
-  __pyx_t_1 = ((__pyx_v_capacity < __pyx_v_self->node_count) != 0);
-  if (__pyx_t_1) {
+  __pyx_v_self->node_count = 0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":493
- *         # if capacity smaller than node_count, adjust the counter
- *         if capacity < self.node_count:
- *             self.node_count = capacity             # <<<<<<<<<<<<<<
- * 
- *         self.capacity = capacity
+  /* "skgarden/mondrian/tree/_tree.pyx":444
+ *         self.max_depth = 0
+ *         self.node_count = 0
+ *         self.capacity = 0             # <<<<<<<<<<<<<<
+ *         self.value = NULL
+ *         self.nodes = NULL
  */
-    __pyx_v_self->node_count = __pyx_v_capacity;
+  __pyx_v_self->capacity = 0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":492
- * 
- *         # if capacity smaller than node_count, adjust the counter
- *         if capacity < self.node_count:             # <<<<<<<<<<<<<<
- *             self.node_count = capacity
+  /* "skgarden/mondrian/tree/_tree.pyx":445
+ *         self.node_count = 0
+ *         self.capacity = 0
+ *         self.value = NULL             # <<<<<<<<<<<<<<
+ *         self.nodes = NULL
  * 
  */
-  }
+  __pyx_v_self->value = NULL;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":495
- *             self.node_count = capacity
- * 
- *         self.capacity = capacity             # <<<<<<<<<<<<<<
- *         return 0
+  /* "skgarden/mondrian/tree/_tree.pyx":446
+ *         self.capacity = 0
+ *         self.value = NULL
+ *         self.nodes = NULL             # <<<<<<<<<<<<<<
  * 
+ *         # Used only in partial_fit
  */
-  __pyx_v_self->capacity = __pyx_v_capacity;
+  __pyx_v_self->nodes = NULL;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":496
+  /* "skgarden/mondrian/tree/_tree.pyx":449
  * 
- *         self.capacity = capacity
- *         return 0             # <<<<<<<<<<<<<<
+ *         # Used only in partial_fit
+ *         self.root = 0             # <<<<<<<<<<<<<<
  * 
- *     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,
+ *     def __dealloc__(self):
  */
-  __pyx_r = 0;
-  goto __pyx_L0;
+  __pyx_v_self->root = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":467
- *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
- *     # (i.e., older MSVC).
- *     cdef int _resize_c(self, SIZE_t capacity=<SIZE_t>(-1)) nogil except -1:             # <<<<<<<<<<<<<<
- *         """Guts of _resize
+  /* "skgarden/mondrian/tree/_tree.pyx":425
+ *             return self.root
  * 
+ *     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,             # <<<<<<<<<<<<<<
+ *                   int n_outputs):
+ *         """Constructor."""
  */
 
   /* function exit code */
+  __pyx_r = 0;
+  goto __pyx_L0;
   __pyx_L1_error:;
-  {
-    #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
-    #endif
-    __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._resize_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
-    #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
-    #endif
-  }
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer);
+  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = -1;
+  goto __pyx_L2;
   __pyx_L0:;
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_classes.rcbuffer->pybuffer);
+  __pyx_L2:;
+  __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":498
- *         return 0
+/* "skgarden/mondrian/tree/_tree.pyx":451
+ *         self.root = 0
  * 
- *     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,             # <<<<<<<<<<<<<<
- *                           SIZE_t feature, double threshold, double impurity,
- *                           SIZE_t n_node_samples,
+ *     def __dealloc__(self):             # <<<<<<<<<<<<<<
+ *         """Destructor."""
+ *         # Free all inner structures
  */
 
-static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__add_node(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent, int __pyx_v_is_left, int __pyx_v_is_leaf, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_feature, double __pyx_v_threshold, double __pyx_v_impurity, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples, double __pyx_v_weighted_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_lower_bounds, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_upper_bounds, double __pyx_v_E) {
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_id;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_r;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
-  int __pyx_t_2;
-  int __pyx_t_3;
+/* Python wrapper */
+static void __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
+static void __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_3__dealloc__(PyObject *__pyx_v_self) {
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
+  __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_2__dealloc__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":511
- *         Returns (size_t)(-1) on error.
- *         """
- *         cdef SIZE_t node_id = self.node_count             # <<<<<<<<<<<<<<
- * 
- *         if node_id >= self.capacity:
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+}
+
+static void __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_2__dealloc__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__dealloc__", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":454
+ *         """Destructor."""
+ *         # Free all inner structures
+ *         free(self.n_classes)             # <<<<<<<<<<<<<<
+ *         free(self.value)
+ *         free(self.nodes)
  */
-  __pyx_t_1 = __pyx_v_self->node_count;
-  __pyx_v_node_id = __pyx_t_1;
+  free(__pyx_v_self->n_classes);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":513
- *         cdef SIZE_t node_id = self.node_count
+  /* "skgarden/mondrian/tree/_tree.pyx":455
+ *         # Free all inner structures
+ *         free(self.n_classes)
+ *         free(self.value)             # <<<<<<<<<<<<<<
+ *         free(self.nodes)
  * 
- *         if node_id >= self.capacity:             # <<<<<<<<<<<<<<
- *             if self._resize_c() != 0:
- *                 return <SIZE_t>(-1)
  */
-  __pyx_t_2 = ((__pyx_v_node_id >= __pyx_v_self->capacity) != 0);
-  if (__pyx_t_2) {
+  free(__pyx_v_self->value);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":514
- * 
- *         if node_id >= self.capacity:
- *             if self._resize_c() != 0:             # <<<<<<<<<<<<<<
- *                 return <SIZE_t>(-1)
+  /* "skgarden/mondrian/tree/_tree.pyx":456
+ *         free(self.n_classes)
+ *         free(self.value)
+ *         free(self.nodes)             # <<<<<<<<<<<<<<
  * 
+ *     def __reduce__(self):
  */
-    __pyx_t_3 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, NULL); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 514, __pyx_L1_error)
-    __pyx_t_2 = ((__pyx_t_3 != 0) != 0);
-    if (__pyx_t_2) {
+  free(__pyx_v_self->nodes);
 
-      /* "skgarden/mondrian/tree/_tree.pyx":515
- *         if node_id >= self.capacity:
- *             if self._resize_c() != 0:
- *                 return <SIZE_t>(-1)             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":451
+ *         self.root = 0
  * 
- *         cdef Node* node = &self.nodes[node_id]
+ *     def __dealloc__(self):             # <<<<<<<<<<<<<<
+ *         """Destructor."""
+ *         # Free all inner structures
  */
-      __pyx_r = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L);
-      goto __pyx_L0;
 
-      /* "skgarden/mondrian/tree/_tree.pyx":514
- * 
- *         if node_id >= self.capacity:
- *             if self._resize_c() != 0:             # <<<<<<<<<<<<<<
- *                 return <SIZE_t>(-1)
- * 
- */
-    }
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":513
- *         cdef SIZE_t node_id = self.node_count
+/* "skgarden/mondrian/tree/_tree.pyx":458
+ *         free(self.nodes)
  * 
- *         if node_id >= self.capacity:             # <<<<<<<<<<<<<<
- *             if self._resize_c() != 0:
- *                 return <SIZE_t>(-1)
+ *     def __reduce__(self):             # <<<<<<<<<<<<<<
+ *         """Reduce re-implementation, for pickling."""
+ *         return (Tree, (self.n_features,
  */
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":517
- *                 return <SIZE_t>(-1)
- * 
- *         cdef Node* node = &self.nodes[node_id]             # <<<<<<<<<<<<<<
- *         node.impurity = impurity
- *         node.n_node_samples = n_node_samples
- */
-  __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node_id]));
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__[] = "Reduce re-implementation, for pickling.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_5__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":518
- * 
- *         cdef Node* node = &self.nodes[node_id]
- *         node.impurity = impurity             # <<<<<<<<<<<<<<
- *         node.n_node_samples = n_node_samples
- *         node.weighted_n_node_samples = weighted_n_node_samples
- */
-  __pyx_v_node->impurity = __pyx_v_impurity;
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-  /* "skgarden/mondrian/tree/_tree.pyx":519
- *         cdef Node* node = &self.nodes[node_id]
- *         node.impurity = impurity
- *         node.n_node_samples = n_node_samples             # <<<<<<<<<<<<<<
- *         node.weighted_n_node_samples = weighted_n_node_samples
- * 
- */
-  __pyx_v_node->n_node_samples = __pyx_v_n_node_samples;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_4__reduce__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  __Pyx_RefNannySetupContext("__reduce__", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":520
- *         node.impurity = impurity
- *         node.n_node_samples = n_node_samples
- *         node.weighted_n_node_samples = weighted_n_node_samples             # <<<<<<<<<<<<<<
- * 
- *         if parent != _TREE_UNDEFINED:
+  /* "skgarden/mondrian/tree/_tree.pyx":460
+ *     def __reduce__(self):
+ *         """Reduce re-implementation, for pickling."""
+ *         return (Tree, (self.n_features,             # <<<<<<<<<<<<<<
+ *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
+ *                        self.n_outputs), self.__getstate__())
  */
-  __pyx_v_node->weighted_n_node_samples = __pyx_v_weighted_n_node_samples;
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":522
- *         node.weighted_n_node_samples = weighted_n_node_samples
+  /* "skgarden/mondrian/tree/_tree.pyx":461
+ *         """Reduce re-implementation, for pickling."""
+ *         return (Tree, (self.n_features,
+ *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),             # <<<<<<<<<<<<<<
+ *                        self.n_outputs), self.__getstate__())
  * 
- *         if parent != _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
- *             if is_left:
- *                 self.nodes[parent].left_child = node_id
  */
-  __pyx_t_2 = ((__pyx_v_parent != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED) != 0);
-  if (__pyx_t_2) {
+  __pyx_t_2 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray(__pyx_v_self->n_classes, __pyx_v_self->n_outputs)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":523
+  /* "skgarden/mondrian/tree/_tree.pyx":462
+ *         return (Tree, (self.n_features,
+ *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
+ *                        self.n_outputs), self.__getstate__())             # <<<<<<<<<<<<<<
  * 
- *         if parent != _TREE_UNDEFINED:
- *             if is_left:             # <<<<<<<<<<<<<<
- *                 self.nodes[parent].left_child = node_id
- *             else:
+ *     def __getstate__(self):
  */
-    __pyx_t_2 = (__pyx_v_is_left != 0);
-    if (__pyx_t_2) {
+  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_outputs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
 
-      /* "skgarden/mondrian/tree/_tree.pyx":524
- *         if parent != _TREE_UNDEFINED:
- *             if is_left:
- *                 self.nodes[parent].left_child = node_id             # <<<<<<<<<<<<<<
- *             else:
- *                 self.nodes[parent].right_child = node_id
+  /* "skgarden/mondrian/tree/_tree.pyx":460
+ *     def __reduce__(self):
+ *         """Reduce re-implementation, for pickling."""
+ *         return (Tree, (self.n_features,             # <<<<<<<<<<<<<<
+ *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
+ *                        self.n_outputs), self.__getstate__())
  */
-      (__pyx_v_self->nodes[__pyx_v_parent]).left_child = __pyx_v_node_id;
+  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_2);
+  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
+  __pyx_t_1 = 0;
+  __pyx_t_2 = 0;
+  __pyx_t_3 = 0;
 
-      /* "skgarden/mondrian/tree/_tree.pyx":523
+  /* "skgarden/mondrian/tree/_tree.pyx":462
+ *         return (Tree, (self.n_features,
+ *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
+ *                        self.n_outputs), self.__getstate__())             # <<<<<<<<<<<<<<
  * 
- *         if parent != _TREE_UNDEFINED:
- *             if is_left:             # <<<<<<<<<<<<<<
- *                 self.nodes[parent].left_child = node_id
- *             else:
+ *     def __getstate__(self):
  */
-      goto __pyx_L6;
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_1 = NULL;
+  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
+    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
+    if (likely(__pyx_t_1)) {
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
+      __Pyx_INCREF(__pyx_t_1);
+      __Pyx_INCREF(function);
+      __Pyx_DECREF_SET(__pyx_t_2, function);
     }
+  }
+  if (__pyx_t_1) {
+    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  } else {
+    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
+  }
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":526
- *                 self.nodes[parent].left_child = node_id
- *             else:
- *                 self.nodes[parent].right_child = node_id             # <<<<<<<<<<<<<<
- * 
- *         if parent == _TREE_UNDEFINED:
+  /* "skgarden/mondrian/tree/_tree.pyx":460
+ *     def __reduce__(self):
+ *         """Reduce re-implementation, for pickling."""
+ *         return (Tree, (self.n_features,             # <<<<<<<<<<<<<<
+ *                        sizet_ptr_to_ndarray(self.n_classes, self.n_outputs),
+ *                        self.n_outputs), self.__getstate__())
  */
-    /*else*/ {
-      (__pyx_v_self->nodes[__pyx_v_parent]).right_child = __pyx_v_node_id;
-    }
-    __pyx_L6:;
+  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_INCREF(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree));
+  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree));
+  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree));
+  __Pyx_GIVEREF(__pyx_t_4);
+  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
+  __pyx_t_4 = 0;
+  __pyx_t_3 = 0;
+  __pyx_r = __pyx_t_2;
+  __pyx_t_2 = 0;
+  goto __pyx_L0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":522
- *         node.weighted_n_node_samples = weighted_n_node_samples
+  /* "skgarden/mondrian/tree/_tree.pyx":458
+ *         free(self.nodes)
  * 
- *         if parent != _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
- *             if is_left:
- *                 self.nodes[parent].left_child = node_id
+ *     def __reduce__(self):             # <<<<<<<<<<<<<<
+ *         """Reduce re-implementation, for pickling."""
+ *         return (Tree, (self.n_features,
  */
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":528
- *                 self.nodes[parent].right_child = node_id
- * 
- *         if parent == _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
- *             node.tau = E
- *         elif is_leaf:
- */
-  __pyx_t_2 = ((__pyx_v_parent == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED) != 0);
-  if (__pyx_t_2) {
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":529
+/* "skgarden/mondrian/tree/_tree.pyx":464
+ *                        self.n_outputs), self.__getstate__())
  * 
- *         if parent == _TREE_UNDEFINED:
- *             node.tau = E             # <<<<<<<<<<<<<<
- *         elif is_leaf:
- *             node.tau = INFINITY
+ *     def __getstate__(self):             # <<<<<<<<<<<<<<
+ *         """Getstate re-implementation, for pickling."""
+ *         d = {}
  */
-    __pyx_v_node->tau = __pyx_v_E;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":528
- *                 self.nodes[parent].right_child = node_id
- * 
- *         if parent == _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
- *             node.tau = E
- *         elif is_leaf:
- */
-    goto __pyx_L7;
-  }
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_6__getstate__[] = "Getstate re-implementation, for pickling.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_7__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_6__getstate__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":530
- *         if parent == _TREE_UNDEFINED:
- *             node.tau = E
- *         elif is_leaf:             # <<<<<<<<<<<<<<
- *             node.tau = INFINITY
- *         else:
- */
-  __pyx_t_2 = (__pyx_v_is_leaf != 0);
-  if (__pyx_t_2) {
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":531
- *             node.tau = E
- *         elif is_leaf:
- *             node.tau = INFINITY             # <<<<<<<<<<<<<<
- *         else:
- *             node.tau = E + self.nodes[parent].tau
- */
-    __pyx_v_node->tau = __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_6__getstate__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_v_d = NULL;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__getstate__", 0);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":530
- *         if parent == _TREE_UNDEFINED:
- *             node.tau = E
- *         elif is_leaf:             # <<<<<<<<<<<<<<
- *             node.tau = INFINITY
- *         else:
+  /* "skgarden/mondrian/tree/_tree.pyx":466
+ *     def __getstate__(self):
+ *         """Getstate re-implementation, for pickling."""
+ *         d = {}             # <<<<<<<<<<<<<<
+ *         # capacity is infered during the __setstate__ using nodes
+ *         d["max_depth"] = self.max_depth
  */
-    goto __pyx_L7;
-  }
+  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_v_d = ((PyObject*)__pyx_t_1);
+  __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":533
- *             node.tau = INFINITY
- *         else:
- *             node.tau = E + self.nodes[parent].tau             # <<<<<<<<<<<<<<
- * 
- *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+  /* "skgarden/mondrian/tree/_tree.pyx":468
+ *         d = {}
+ *         # capacity is infered during the __setstate__ using nodes
+ *         d["max_depth"] = self.max_depth             # <<<<<<<<<<<<<<
+ *         d["node_count"] = self.node_count
+ *         d["nodes"] = self._get_node_ndarray()
  */
-  /*else*/ {
-    __pyx_v_node->tau = (__pyx_v_E + (__pyx_v_self->nodes[__pyx_v_parent]).tau);
-  }
-  __pyx_L7:;
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_max_depth, __pyx_t_1) < 0)) __PYX_ERR(0, 468, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":535
- *             node.tau = E + self.nodes[parent].tau
- * 
- *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
- *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
- *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
+  /* "skgarden/mondrian/tree/_tree.pyx":469
+ *         # capacity is infered during the __setstate__ using nodes
+ *         d["max_depth"] = self.max_depth
+ *         d["node_count"] = self.node_count             # <<<<<<<<<<<<<<
+ *         d["nodes"] = self._get_node_ndarray()
+ *         d["values"] = self._get_value_ndarray()
  */
-  __pyx_v_node->lower_bounds = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_node_count, __pyx_t_1) < 0)) __PYX_ERR(0, 469, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":536
- * 
- *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
- *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
- *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
- *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))
+  /* "skgarden/mondrian/tree/_tree.pyx":470
+ *         d["max_depth"] = self.max_depth
+ *         d["node_count"] = self.node_count
+ *         d["nodes"] = self._get_node_ndarray()             # <<<<<<<<<<<<<<
+ *         d["values"] = self._get_value_ndarray()
+ *         d["root"] = self.root
  */
-  __pyx_v_node->upper_bounds = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_node_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_nodes, __pyx_t_1) < 0)) __PYX_ERR(0, 470, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":537
- *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
- *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
- *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
- *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))
- *         node.variance = impurity
+  /* "skgarden/mondrian/tree/_tree.pyx":471
+ *         d["node_count"] = self.node_count
+ *         d["nodes"] = self._get_node_ndarray()
+ *         d["values"] = self._get_value_ndarray()             # <<<<<<<<<<<<<<
+ *         d["root"] = self.root
+ *         return d
  */
-  memcpy(__pyx_v_node->lower_bounds, __pyx_v_lower_bounds, (__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t))));
+  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_values, __pyx_t_1) < 0)) __PYX_ERR(0, 471, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":538
- *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
- *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
- *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
- *         node.variance = impurity
+  /* "skgarden/mondrian/tree/_tree.pyx":472
+ *         d["nodes"] = self._get_node_ndarray()
+ *         d["values"] = self._get_value_ndarray()
+ *         d["root"] = self.root             # <<<<<<<<<<<<<<
+ *         return d
  * 
  */
-  memcpy(__pyx_v_node->upper_bounds, __pyx_v_upper_bounds, (__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t))));
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  if (unlikely(PyDict_SetItem(__pyx_v_d, __pyx_n_s_root, __pyx_t_1) < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":539
- *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
- *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))
- *         node.variance = impurity             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":473
+ *         d["values"] = self._get_value_ndarray()
+ *         d["root"] = self.root
+ *         return d             # <<<<<<<<<<<<<<
  * 
- *         if is_leaf:
+ *     def __setstate__(self, d):
  */
-  __pyx_v_node->variance = __pyx_v_impurity;
+  __Pyx_XDECREF(__pyx_r);
+  __Pyx_INCREF(__pyx_v_d);
+  __pyx_r = __pyx_v_d;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":541
- *         node.variance = impurity
+  /* "skgarden/mondrian/tree/_tree.pyx":464
+ *                        self.n_outputs), self.__getstate__())
  * 
- *         if is_leaf:             # <<<<<<<<<<<<<<
- *             node.left_child = _TREE_LEAF
- *             node.right_child = _TREE_LEAF
+ *     def __getstate__(self):             # <<<<<<<<<<<<<<
+ *         """Getstate re-implementation, for pickling."""
+ *         d = {}
  */
-  __pyx_t_2 = (__pyx_v_is_leaf != 0);
-  if (__pyx_t_2) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":542
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v_d);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":475
+ *         return d
  * 
- *         if is_leaf:
- *             node.left_child = _TREE_LEAF             # <<<<<<<<<<<<<<
- *             node.right_child = _TREE_LEAF
- *             node.feature = _TREE_UNDEFINED
+ *     def __setstate__(self, d):             # <<<<<<<<<<<<<<
+ *         """Setstate re-implementation, for unpickling."""
+ *         self.max_depth = d["max_depth"]
  */
-    __pyx_v_node->left_child = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":543
- *         if is_leaf:
- *             node.left_child = _TREE_LEAF
- *             node.right_child = _TREE_LEAF             # <<<<<<<<<<<<<<
- *             node.feature = _TREE_UNDEFINED
- *             node.threshold = _TREE_UNDEFINED
- */
-    __pyx_v_node->right_child = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF;
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_d); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_8__setstate__[] = "Setstate re-implementation, for unpickling.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8__setstate__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_d));
 
-    /* "skgarden/mondrian/tree/_tree.pyx":544
- *             node.left_child = _TREE_LEAF
- *             node.right_child = _TREE_LEAF
- *             node.feature = _TREE_UNDEFINED             # <<<<<<<<<<<<<<
- *             node.threshold = _TREE_UNDEFINED
- *         else:
- */
-    __pyx_v_node->feature = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED;
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-    /* "skgarden/mondrian/tree/_tree.pyx":545
- *             node.right_child = _TREE_LEAF
- *             node.feature = _TREE_UNDEFINED
- *             node.threshold = _TREE_UNDEFINED             # <<<<<<<<<<<<<<
- *         else:
- *             # left_child and right_child will be set later
- */
-    __pyx_v_node->threshold = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8__setstate__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_d) {
+  PyObject *__pyx_v_node_ndarray = NULL;
+  PyObject *__pyx_v_value_ndarray = NULL;
+  PyObject *__pyx_v_value_shape = NULL;
+  CYTHON_UNUSED void *__pyx_v_nodes;
+  CYTHON_UNUSED void *__pyx_v_value;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_2;
+  int __pyx_t_3;
+  int __pyx_t_4;
+  PyObject *__pyx_t_5 = NULL;
+  PyObject *__pyx_t_6 = NULL;
+  PyObject *__pyx_t_7 = NULL;
+  int __pyx_t_8;
+  int __pyx_t_9;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_10;
+  __Pyx_RefNannySetupContext("__setstate__", 0);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":541
- *         node.variance = impurity
- * 
- *         if is_leaf:             # <<<<<<<<<<<<<<
- *             node.left_child = _TREE_LEAF
- *             node.right_child = _TREE_LEAF
+  /* "skgarden/mondrian/tree/_tree.pyx":477
+ *     def __setstate__(self, d):
+ *         """Setstate re-implementation, for unpickling."""
+ *         self.max_depth = d["max_depth"]             # <<<<<<<<<<<<<<
+ *         self.node_count = d["node_count"]
+ *         self.root = d["root"]
  */
-    goto __pyx_L8;
-  }
+  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 477, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_self->max_depth = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":548
- *         else:
- *             # left_child and right_child will be set later
- *             node.feature = feature             # <<<<<<<<<<<<<<
- *             node.threshold = threshold
- *         self.node_count += 1
+  /* "skgarden/mondrian/tree/_tree.pyx":478
+ *         """Setstate re-implementation, for unpickling."""
+ *         self.max_depth = d["max_depth"]
+ *         self.node_count = d["node_count"]             # <<<<<<<<<<<<<<
+ *         self.root = d["root"]
+ * 
  */
-  /*else*/ {
-    __pyx_v_node->feature = __pyx_v_feature;
+  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_node_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_self->node_count = __pyx_t_2;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":549
- *             # left_child and right_child will be set later
- *             node.feature = feature
- *             node.threshold = threshold             # <<<<<<<<<<<<<<
- *         self.node_count += 1
- *         return node_id
+  /* "skgarden/mondrian/tree/_tree.pyx":479
+ *         self.max_depth = d["max_depth"]
+ *         self.node_count = d["node_count"]
+ *         self.root = d["root"]             # <<<<<<<<<<<<<<
+ * 
+ *         if 'nodes' not in d:
  */
-    __pyx_v_node->threshold = __pyx_v_threshold;
-  }
-  __pyx_L8:;
+  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_v_self->root = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":550
- *             node.feature = feature
- *             node.threshold = threshold
- *         self.node_count += 1             # <<<<<<<<<<<<<<
- *         return node_id
+  /* "skgarden/mondrian/tree/_tree.pyx":481
+ *         self.root = d["root"]
  * 
+ *         if 'nodes' not in d:             # <<<<<<<<<<<<<<
+ *             raise ValueError('You have loaded Tree version which '
+ *                              'cannot be imported')
  */
-  __pyx_v_self->node_count = (__pyx_v_self->node_count + 1);
+  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_nodes, __pyx_v_d, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 481, __pyx_L1_error)
+  __pyx_t_4 = (__pyx_t_3 != 0);
+  if (__pyx_t_4) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":551
- *             node.threshold = threshold
- *         self.node_count += 1
- *         return node_id             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":482
+ * 
+ *         if 'nodes' not in d:
+ *             raise ValueError('You have loaded Tree version which '             # <<<<<<<<<<<<<<
+ *                              'cannot be imported')
  * 
- *     cpdef np.ndarray apply(self, object X):
  */
-  __pyx_r = __pyx_v_node_id;
-  goto __pyx_L0;
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __PYX_ERR(0, 482, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":498
- *         return 0
+    /* "skgarden/mondrian/tree/_tree.pyx":481
+ *         self.root = d["root"]
  * 
- *     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,             # <<<<<<<<<<<<<<
- *                           SIZE_t feature, double threshold, double impurity,
- *                           SIZE_t n_node_samples,
+ *         if 'nodes' not in d:             # <<<<<<<<<<<<<<
+ *             raise ValueError('You have loaded Tree version which '
+ *                              'cannot be imported')
  */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  {
-    #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
-    #endif
-    __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
-    #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
-    #endif
   }
-  __pyx_r = -1;
-  __pyx_L0:;
-  return __pyx_r;
-}
 
-/* "skgarden/mondrian/tree/_tree.pyx":553
- *         return node_id
+  /* "skgarden/mondrian/tree/_tree.pyx":485
+ *                              'cannot be imported')
+ * 
+ *         node_ndarray = d['nodes']             # <<<<<<<<<<<<<<
+ *         value_ndarray = d['values']
  * 
- *     cpdef np.ndarray apply(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- *         if issparse(X):
  */
+  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_v_node_ndarray = __pyx_t_1;
+  __pyx_t_1 = 0;
 
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
-static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_apply(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
-  PyArrayObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  PyObject *__pyx_t_5 = NULL;
-  int __pyx_t_6;
-  __Pyx_RefNannySetupContext("apply", 0);
-  /* Check if called by wrapper */
-  if (unlikely(__pyx_skip_dispatch)) ;
-  /* Check if overridden in Python */
-  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_apply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply)) {
-      __Pyx_XDECREF(((PyObject *)__pyx_r));
-      __Pyx_INCREF(__pyx_t_1);
-      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
-      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
-        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
-        if (likely(__pyx_t_4)) {
-          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
-          __Pyx_INCREF(__pyx_t_4);
-          __Pyx_INCREF(function);
-          __Pyx_DECREF_SET(__pyx_t_3, function);
-        }
-      }
-      if (!__pyx_t_4) {
-        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
-        __Pyx_GOTREF(__pyx_t_2);
-      } else {
-        #if CYTHON_FAST_PYCALL
-        if (PyFunction_Check(__pyx_t_3)) {
-          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
-          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
-          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
-          __Pyx_GOTREF(__pyx_t_2);
-        } else
-        #endif
-        #if CYTHON_FAST_PYCCALL
-        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
-          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
-          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
-          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
-          __Pyx_GOTREF(__pyx_t_2);
-        } else
-        #endif
-        {
-          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
-          __Pyx_GOTREF(__pyx_t_5);
-          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
-          __Pyx_INCREF(__pyx_v_X);
-          __Pyx_GIVEREF(__pyx_v_X);
-          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
-          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
-          __Pyx_GOTREF(__pyx_t_2);
-          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-        }
-      }
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 553, __pyx_L1_error)
-      __pyx_r = ((PyArrayObject *)__pyx_t_2);
-      __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-      goto __pyx_L0;
-    }
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  }
+  /* "skgarden/mondrian/tree/_tree.pyx":486
+ * 
+ *         node_ndarray = d['nodes']
+ *         value_ndarray = d['values']             # <<<<<<<<<<<<<<
+ * 
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,
+ */
+  __pyx_t_1 = PyObject_GetItem(__pyx_v_d, __pyx_n_s_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_v_value_ndarray = __pyx_t_1;
+  __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":555
- *     cpdef np.ndarray apply(self, object X):
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- *         if issparse(X):             # <<<<<<<<<<<<<<
- *             return self._apply_sparse_csr(X)
- *         else:
+  /* "skgarden/mondrian/tree/_tree.pyx":488
+ *         value_ndarray = d['values']
+ * 
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,             # <<<<<<<<<<<<<<
+ *                        self.max_n_classes)
+ *         if (node_ndarray.ndim != 1 or
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_issparse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = NULL;
-  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
-    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
-    if (likely(__pyx_t_3)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-      __Pyx_INCREF(__pyx_t_3);
-      __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_2, function);
-    }
-  }
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":489
+ * 
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,
+ *                        self.max_n_classes)             # <<<<<<<<<<<<<<
+ *         if (node_ndarray.ndim != 1 or
+ *                 node_ndarray.dtype != NODE_DTYPE or
+ */
+  __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_n_classes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 489, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":488
+ *         value_ndarray = d['values']
+ * 
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,             # <<<<<<<<<<<<<<
+ *                        self.max_n_classes)
+ *         if (node_ndarray.ndim != 1 or
+ */
+  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 488, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
+  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_6);
+  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
+  __pyx_t_5 = 0;
+  __pyx_t_1 = 0;
+  __pyx_t_6 = 0;
+  __pyx_v_value_shape = ((PyObject*)__pyx_t_7);
+  __pyx_t_7 = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":490
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,
+ *                        self.max_n_classes)
+ *         if (node_ndarray.ndim != 1 or             # <<<<<<<<<<<<<<
+ *                 node_ndarray.dtype != NODE_DTYPE or
+ *                 not node_ndarray.flags.c_contiguous or
+ */
+  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_ndim); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 490, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 490, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 490, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
   if (!__pyx_t_3) {
-    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
   } else {
-    #if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_X};
-      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    #if CYTHON_FAST_PYCCALL
-    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_X};
-      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    {
-      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
-      __Pyx_INCREF(__pyx_v_X);
-      __Pyx_GIVEREF(__pyx_v_X);
-      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
-      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_1);
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    }
+    __pyx_t_4 = __pyx_t_3;
+    goto __pyx_L5_bool_binop_done;
   }
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 555, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (__pyx_t_6) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":556
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- *         if issparse(X):
- *             return self._apply_sparse_csr(X)             # <<<<<<<<<<<<<<
- *         else:
- *             return self._apply_dense(X)
+  /* "skgarden/mondrian/tree/_tree.pyx":491
+ *                        self.max_n_classes)
+ *         if (node_ndarray.ndim != 1 or
+ *                 node_ndarray.dtype != NODE_DTYPE or             # <<<<<<<<<<<<<<
+ *                 not node_ndarray.flags.c_contiguous or
+ *                 value_ndarray.shape != value_shape or
  */
-    __Pyx_XDECREF(((PyObject *)__pyx_r));
-    __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_sparse_csr(__pyx_v_self, __pyx_v_X)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_r = ((PyArrayObject *)__pyx_t_1);
-    __pyx_t_1 = 0;
-    goto __pyx_L0;
+  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 491, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_NODE_DTYPE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 491, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 491, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  if (!__pyx_t_3) {
+  } else {
+    __pyx_t_4 = __pyx_t_3;
+    goto __pyx_L5_bool_binop_done;
+  }
 
-    /* "skgarden/mondrian/tree/_tree.pyx":555
- *     cpdef np.ndarray apply(self, object X):
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- *         if issparse(X):             # <<<<<<<<<<<<<<
- *             return self._apply_sparse_csr(X)
- *         else:
+  /* "skgarden/mondrian/tree/_tree.pyx":492
+ *         if (node_ndarray.ndim != 1 or
+ *                 node_ndarray.dtype != NODE_DTYPE or
+ *                 not node_ndarray.flags.c_contiguous or             # <<<<<<<<<<<<<<
+ *                 value_ndarray.shape != value_shape or
+ *                 not value_ndarray.flags.c_contiguous or
  */
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_c_contiguous); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 492, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 492, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __pyx_t_8 = ((!__pyx_t_3) != 0);
+  if (!__pyx_t_8) {
+  } else {
+    __pyx_t_4 = __pyx_t_8;
+    goto __pyx_L5_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":558
- *             return self._apply_sparse_csr(X)
- *         else:
- *             return self._apply_dense(X)             # <<<<<<<<<<<<<<
- * 
- *     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):
+  /* "skgarden/mondrian/tree/_tree.pyx":493
+ *                 node_ndarray.dtype != NODE_DTYPE or
+ *                 not node_ndarray.flags.c_contiguous or
+ *                 value_ndarray.shape != value_shape or             # <<<<<<<<<<<<<<
+ *                 not value_ndarray.flags.c_contiguous or
+ *                 value_ndarray.dtype != np.float64):
  */
-  /*else*/ {
-    __Pyx_XDECREF(((PyObject *)__pyx_r));
-    __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense(__pyx_v_self, __pyx_v_X)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_r = ((PyArrayObject *)__pyx_t_1);
-    __pyx_t_1 = 0;
-    goto __pyx_L0;
+  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_ndarray, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 493, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_v_value_shape, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 493, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  if (!__pyx_t_8) {
+  } else {
+    __pyx_t_4 = __pyx_t_8;
+    goto __pyx_L5_bool_binop_done;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":553
- *         return node_id
- * 
- *     cpdef np.ndarray apply(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- *         if issparse(X):
+  /* "skgarden/mondrian/tree/_tree.pyx":494
+ *                 not node_ndarray.flags.c_contiguous or
+ *                 value_ndarray.shape != value_shape or
+ *                 not value_ndarray.flags.c_contiguous or             # <<<<<<<<<<<<<<
+ *                 value_ndarray.dtype != np.float64):
+ *             raise ValueError('Did not recognise loaded array layout')
  */
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_ndarray, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_c_contiguous); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 494, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __pyx_t_3 = ((!__pyx_t_8) != 0);
+  if (!__pyx_t_3) {
+  } else {
+    __pyx_t_4 = __pyx_t_3;
+    goto __pyx_L5_bool_binop_done;
+  }
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XGIVEREF((PyObject *)__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_10apply[] = "Finds the terminal region (=leaf node) for each sample in X.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_10apply(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_X));
+  /* "skgarden/mondrian/tree/_tree.pyx":495
+ *                 value_ndarray.shape != value_shape or
+ *                 not value_ndarray.flags.c_contiguous or
+ *                 value_ndarray.dtype != np.float64):             # <<<<<<<<<<<<<<
+ *             raise ValueError('Did not recognise loaded array layout')
+ * 
+ */
+  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_value_ndarray, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_7);
+  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 495, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_4 = __pyx_t_3;
+  __pyx_L5_bool_binop_done:;
 
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+  /* "skgarden/mondrian/tree/_tree.pyx":490
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,
+ *                        self.max_n_classes)
+ *         if (node_ndarray.ndim != 1 or             # <<<<<<<<<<<<<<
+ *                 node_ndarray.dtype != NODE_DTYPE or
+ *                 not node_ndarray.flags.c_contiguous or
+ */
+  if (__pyx_t_4) {
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_10apply(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  __Pyx_RefNannySetupContext("apply", 0);
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_apply(__pyx_v_self, __pyx_v_X, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
+    /* "skgarden/mondrian/tree/_tree.pyx":496
+ *                 not value_ndarray.flags.c_contiguous or
+ *                 value_ndarray.dtype != np.float64):
+ *             raise ValueError('Did not recognise loaded array layout')             # <<<<<<<<<<<<<<
+ * 
+ *         self.capacity = node_ndarray.shape[0]
+ */
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __PYX_ERR(0, 496, __pyx_L1_error)
+
+    /* "skgarden/mondrian/tree/_tree.pyx":490
+ *         value_shape = (node_ndarray.shape[0], self.n_outputs,
+ *                        self.max_n_classes)
+ *         if (node_ndarray.ndim != 1 or             # <<<<<<<<<<<<<<
+ *                 node_ndarray.dtype != NODE_DTYPE or
+ *                 not node_ndarray.flags.c_contiguous or
+ */
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":498
+ *             raise ValueError('Did not recognise loaded array layout')
+ * 
+ *         self.capacity = node_ndarray.shape[0]             # <<<<<<<<<<<<<<
+ *         if self._resize_c(self.capacity) != 0:
+ *             raise MemoryError("resizing tree to %d" % self.capacity)
+ */
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node_ndarray, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 498, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_6); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_v_self->capacity = __pyx_t_2;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":499
+ * 
+ *         self.capacity = node_ndarray.shape[0]
+ *         if self._resize_c(self.capacity) != 0:             # <<<<<<<<<<<<<<
+ *             raise MemoryError("resizing tree to %d" % self.capacity)
+ *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
+ */
+  __pyx_t_10.__pyx_n = 1;
+  __pyx_t_10.capacity = __pyx_v_self->capacity;
+  __pyx_t_9 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, &__pyx_t_10); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 499, __pyx_L1_error)
+  __pyx_t_4 = ((__pyx_t_9 != 0) != 0);
+  if (__pyx_t_4) {
+
+    /* "skgarden/mondrian/tree/_tree.pyx":500
+ *         self.capacity = node_ndarray.shape[0]
+ *         if self._resize_c(self.capacity) != 0:
+ *             raise MemoryError("resizing tree to %d" % self.capacity)             # <<<<<<<<<<<<<<
+ *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
+ *                        self.capacity * sizeof(Node))
+ */
+    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->capacity); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_6);
+    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_resizing_tree_to_d, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_GIVEREF(__pyx_t_1);
+    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
+    __pyx_t_1 = 0;
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __PYX_ERR(0, 500, __pyx_L1_error)
+
+    /* "skgarden/mondrian/tree/_tree.pyx":499
+ * 
+ *         self.capacity = node_ndarray.shape[0]
+ *         if self._resize_c(self.capacity) != 0:             # <<<<<<<<<<<<<<
+ *             raise MemoryError("resizing tree to %d" % self.capacity)
+ *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
+ */
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":501
+ *         if self._resize_c(self.capacity) != 0:
+ *             raise MemoryError("resizing tree to %d" % self.capacity)
+ *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,             # <<<<<<<<<<<<<<
+ *                        self.capacity * sizeof(Node))
+ *         value = memcpy(self.value, (<np.ndarray> value_ndarray).data,
+ */
+  __pyx_v_nodes = memcpy(__pyx_v_self->nodes, ((PyArrayObject *)__pyx_v_node_ndarray)->data, (__pyx_v_self->capacity * (sizeof(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":503
+ *         nodes = memcpy(self.nodes, (<np.ndarray> node_ndarray).data,
+ *                        self.capacity * sizeof(Node))
+ *         value = memcpy(self.value, (<np.ndarray> value_ndarray).data,             # <<<<<<<<<<<<<<
+ *                        self.capacity * self.value_stride * sizeof(double))
+ * 
+ */
+  __pyx_v_value = memcpy(__pyx_v_self->value, ((PyArrayObject *)__pyx_v_value_ndarray)->data, ((__pyx_v_self->capacity * __pyx_v_self->value_stride) * (sizeof(double))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":475
+ *         return d
+ * 
+ *     def __setstate__(self, d):             # <<<<<<<<<<<<<<
+ *         """Setstate re-implementation, for unpickling."""
+ *         self.max_depth = d["max_depth"]
+ */
 
   /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_XDECREF(__pyx_t_7);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v_node_ndarray);
+  __Pyx_XDECREF(__pyx_v_value_ndarray);
+  __Pyx_XDECREF(__pyx_v_value_shape);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":560
- *             return self._apply_dense(X)
- * 
- *     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):             # <<<<<<<<<<<<<<
- *         """Predicts the regressor and standard deviation for all samples."""
+/* "skgarden/mondrian/tree/_tree.pyx":506
+ *                        self.capacity * self.value_stride * sizeof(double))
  * 
+ *     cdef int _resize(self, SIZE_t capacity) nogil except -1:             # <<<<<<<<<<<<<<
+ *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then
+ *            double the size of the inner arrays.
  */
 
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_predict(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args) {
-  int __pyx_v_return_std = ((int)0);
-  int __pyx_v_is_regression = ((int)1);
-  PyArrayObject *__pyx_v_X_ndarray = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_sample_stride;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_fx_stride;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
-  PyArrayObject *__pyx_v_node_values = 0;
-  PyArrayObject *__pyx_v_mean = 0;
-  PyArrayObject *__pyx_v_std = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_classes;
-  PyArrayObject *__pyx_v_proba = 0;
-  PyArrayObject *__pyx_v_n_node_samples = 0;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_id;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_Delta;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_parent_tau;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_p_js;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_X_val;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_w_j;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_p_nsy;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_class_ind;
-  double __pyx_v_eta;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_mean;
-  __Pyx_Buffer __pyx_pybuffer_mean;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_n_node_samples;
-  __Pyx_Buffer __pyx_pybuffer_n_node_samples;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_node_values;
-  __Pyx_Buffer __pyx_pybuffer_node_values;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_proba;
-  __Pyx_Buffer __pyx_pybuffer_proba;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_std;
-  __Pyx_Buffer __pyx_pybuffer_std;
-  PyObject *__pyx_r = NULL;
+static int __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__resize(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_capacity) {
+  int __pyx_r;
   __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  int __pyx_t_7;
-  PyObject *__pyx_t_8 = NULL;
-  int __pyx_t_9;
-  int __pyx_t_10;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_11;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_12;
-  PyArrayObject *__pyx_t_13 = NULL;
-  PyArrayObject *__pyx_t_14 = NULL;
-  PyArrayObject *__pyx_t_15 = NULL;
-  PyArrayObject *__pyx_t_16 = NULL;
-  PyArrayObject *__pyx_t_17 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_t_18;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_19;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_20;
-  Py_ssize_t __pyx_t_21;
-  Py_ssize_t __pyx_t_22;
-  Py_ssize_t __pyx_t_23;
-  Py_ssize_t __pyx_t_24;
-  Py_ssize_t __pyx_t_25;
-  Py_ssize_t __pyx_t_26;
-  Py_ssize_t __pyx_t_27;
-  Py_ssize_t __pyx_t_28;
-  Py_ssize_t __pyx_t_29;
-  Py_ssize_t __pyx_t_30;
-  Py_ssize_t __pyx_t_31;
-  Py_ssize_t __pyx_t_32;
-  Py_ssize_t __pyx_t_33;
-  Py_ssize_t __pyx_t_34;
-  Py_ssize_t __pyx_t_35;
-  Py_ssize_t __pyx_t_36;
-  Py_ssize_t __pyx_t_37;
-  __Pyx_RefNannySetupContext("predict", 0);
-  if (__pyx_optional_args) {
-    if (__pyx_optional_args->__pyx_n > 0) {
-      __pyx_v_return_std = __pyx_optional_args->return_std;
-      if (__pyx_optional_args->__pyx_n > 1) {
-        __pyx_v_is_regression = __pyx_optional_args->is_regression;
-      }
-    }
-  }
-  __pyx_pybuffer_node_values.pybuffer.buf = NULL;
-  __pyx_pybuffer_node_values.refcount = 0;
-  __pyx_pybuffernd_node_values.data = NULL;
-  __pyx_pybuffernd_node_values.rcbuffer = &__pyx_pybuffer_node_values;
-  __pyx_pybuffer_mean.pybuffer.buf = NULL;
-  __pyx_pybuffer_mean.refcount = 0;
-  __pyx_pybuffernd_mean.data = NULL;
-  __pyx_pybuffernd_mean.rcbuffer = &__pyx_pybuffer_mean;
-  __pyx_pybuffer_std.pybuffer.buf = NULL;
-  __pyx_pybuffer_std.refcount = 0;
-  __pyx_pybuffernd_std.data = NULL;
-  __pyx_pybuffernd_std.rcbuffer = &__pyx_pybuffer_std;
-  __pyx_pybuffer_proba.pybuffer.buf = NULL;
-  __pyx_pybuffer_proba.refcount = 0;
-  __pyx_pybuffernd_proba.data = NULL;
-  __pyx_pybuffernd_proba.rcbuffer = &__pyx_pybuffer_proba;
-  __pyx_pybuffer_n_node_samples.pybuffer.buf = NULL;
-  __pyx_pybuffer_n_node_samples.refcount = 0;
-  __pyx_pybuffernd_n_node_samples.data = NULL;
-  __pyx_pybuffernd_n_node_samples.rcbuffer = &__pyx_pybuffer_n_node_samples;
-  /* Check if called by wrapper */
-  if (unlikely(__pyx_skip_dispatch)) ;
-  /* Check if overridden in Python */
-  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_predict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict)) {
-      __Pyx_XDECREF(__pyx_r);
-      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_return_std); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_is_regression); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 560, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_4);
-      __Pyx_INCREF(__pyx_t_1);
-      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
-      __pyx_t_7 = 0;
-      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
-        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
-        if (likely(__pyx_t_6)) {
-          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
-          __Pyx_INCREF(__pyx_t_6);
-          __Pyx_INCREF(function);
-          __Pyx_DECREF_SET(__pyx_t_5, function);
-          __pyx_t_7 = 1;
-        }
-      }
-      #if CYTHON_FAST_PYCALL
-      if (PyFunction_Check(__pyx_t_5)) {
-        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_X, __pyx_t_3, __pyx_t_4};
-        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
-        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
-        __Pyx_GOTREF(__pyx_t_2);
-        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      } else
-      #endif
-      #if CYTHON_FAST_PYCCALL
-      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
-        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_X, __pyx_t_3, __pyx_t_4};
-        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
-        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
-        __Pyx_GOTREF(__pyx_t_2);
-        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      } else
-      #endif
-      {
-        __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 560, __pyx_L1_error)
-        __Pyx_GOTREF(__pyx_t_8);
-        if (__pyx_t_6) {
-          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
-        }
-        __Pyx_INCREF(__pyx_v_X);
-        __Pyx_GIVEREF(__pyx_v_X);
-        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_X);
-        __Pyx_GIVEREF(__pyx_t_3);
-        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
-        __Pyx_GIVEREF(__pyx_t_4);
-        PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
-        __pyx_t_3 = 0;
-        __pyx_t_4 = 0;
-        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
-        __Pyx_GOTREF(__pyx_t_2);
-        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      }
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-      if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 560, __pyx_L1_error)
-      __pyx_r = ((PyObject*)__pyx_t_2);
-      __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-      goto __pyx_L0;
-    }
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  }
+  int __pyx_t_1;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_2;
+  int __pyx_t_3;
+  #ifdef WITH_THREAD
+  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+  #endif
+  __Pyx_RefNannySetupContext("_resize", 0);
+  #ifdef WITH_THREAD
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
+  #endif
 
-  /* "skgarden/mondrian/tree/_tree.pyx":564
+  /* "skgarden/mondrian/tree/_tree.pyx":507
+ * 
+ *     cdef int _resize(self, SIZE_t capacity) nogil except -1:
+ *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then             # <<<<<<<<<<<<<<
+ *            double the size of the inner arrays.
  * 
- *         # Check input
- *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in np.ndarray format, got %s"
- *                              % type(X))
  */
-  __pyx_t_9 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
-  __pyx_t_10 = ((!(__pyx_t_9 != 0)) != 0);
-  if (__pyx_t_10) {
+  /*try:*/ {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":566
- *         if not isinstance(X, np.ndarray):
- *             raise ValueError("X should be in np.ndarray format, got %s"
- *                              % type(X))             # <<<<<<<<<<<<<<
- * 
- *         if X.dtype != DTYPE:
+    /* "skgarden/mondrian/tree/_tree.pyx":513
+ *         or 0 otherwise.
+ *         """
+ *         if self._resize_c(capacity) != 0:             # <<<<<<<<<<<<<<
+ *             # Acquire gil only if we need to raise
+ *             with gil:
  */
-    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_2.__pyx_n = 1;
+    __pyx_t_2.capacity = __pyx_v_capacity;
+    __pyx_t_1 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, &__pyx_t_2); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 513, __pyx_L4_error)
+    __pyx_t_3 = ((__pyx_t_1 != 0) != 0);
+    if (__pyx_t_3) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":565
- *         # Check input
- *         if not isinstance(X, np.ndarray):
- *             raise ValueError("X should be in np.ndarray format, got %s"             # <<<<<<<<<<<<<<
- *                              % type(X))
+      /* "skgarden/mondrian/tree/_tree.pyx":515
+ *         if self._resize_c(capacity) != 0:
+ *             # Acquire gil only if we need to raise
+ *             with gil:             # <<<<<<<<<<<<<<
+ *                 raise MemoryError()
  * 
  */
-    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_GIVEREF(__pyx_t_1);
-    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
-    __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 565, __pyx_L1_error)
+      {
+          #ifdef WITH_THREAD
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+          #endif
+          /*try:*/ {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":564
+            /* "skgarden/mondrian/tree/_tree.pyx":516
+ *             # Acquire gil only if we need to raise
+ *             with gil:
+ *                 raise MemoryError()             # <<<<<<<<<<<<<<
  * 
- *         # Check input
- *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in np.ndarray format, got %s"
- *                              % type(X))
+ *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
  */
-  }
+            PyErr_NoMemory(); __PYX_ERR(0, 516, __pyx_L8_error)
+          }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":568
- *                              % type(X))
- * 
- *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
+          /* "skgarden/mondrian/tree/_tree.pyx":515
+ *         if self._resize_c(capacity) != 0:
+ *             # Acquire gil only if we need to raise
+ *             with gil:             # <<<<<<<<<<<<<<
+ *                 raise MemoryError()
  * 
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 568, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 568, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (__pyx_t_10) {
+          /*finally:*/ {
+            __pyx_L8_error: {
+              #ifdef WITH_THREAD
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
+              #endif
+              goto __pyx_L4_error;
+            }
+          }
+      }
 
-    /* "skgarden/mondrian/tree/_tree.pyx":569
- * 
- *         if X.dtype != DTYPE:
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
- * 
- *         # Extract input
+      /* "skgarden/mondrian/tree/_tree.pyx":513
+ *         or 0 otherwise.
+ *         """
+ *         if self._resize_c(capacity) != 0:             # <<<<<<<<<<<<<<
+ *             # Acquire gil only if we need to raise
+ *             with gil:
  */
-    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __Pyx_GIVEREF(__pyx_t_2);
-    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
-    __pyx_t_2 = 0;
-    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __PYX_ERR(0, 569, __pyx_L1_error)
+    }
+  }
 
-    /* "skgarden/mondrian/tree/_tree.pyx":568
- *                              % type(X))
+  /* "skgarden/mondrian/tree/_tree.pyx":507
  * 
- *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
+ *     cdef int _resize(self, SIZE_t capacity) nogil except -1:
+ *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then             # <<<<<<<<<<<<<<
+ *            double the size of the inner arrays.
  * 
  */
+  /*finally:*/ {
+    /*normal exit:*/{
+      #ifdef WITH_THREAD
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+      #endif
+      goto __pyx_L5;
+    }
+    __pyx_L4_error: {
+      #ifdef WITH_THREAD
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+      #endif
+      goto __pyx_L1_error;
+    }
+    __pyx_L5:;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":572
+  /* "skgarden/mondrian/tree/_tree.pyx":506
+ *                        self.capacity * self.value_stride * sizeof(double))
  * 
- *         # Extract input
- *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *     cdef int _resize(self, SIZE_t capacity) nogil except -1:             # <<<<<<<<<<<<<<
+ *         """Resize all inner arrays to `capacity`, if `capacity` == -1, then
+ *            double the size of the inner arrays.
  */
-  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 572, __pyx_L1_error)
-  __pyx_t_2 = __pyx_v_X;
-  __Pyx_INCREF(__pyx_t_2);
-  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_2);
-  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":573
- *         # Extract input
- *         cdef np.ndarray X_ndarray = X
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+  /* function exit code */
+  __pyx_r = 0;
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = -1;
+  __pyx_L0:;
+  #ifdef WITH_THREAD
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
+  #endif
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":520
+ *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
+ *     # (i.e., older MSVC).
+ *     cdef int _resize_c(self, SIZE_t capacity=<SIZE_t>(-1)) nogil except -1:             # <<<<<<<<<<<<<<
+ *         """Guts of _resize
+ * 
  */
-  __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":574
- *         cdef np.ndarray X_ndarray = X
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
- *         cdef SIZE_t n_samples = X.shape[0]
- */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_12 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_12 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_11) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_12));
+static int __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c *__pyx_optional_args) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_capacity = __pyx_k__7;
+  int __pyx_r;
+  int __pyx_t_1;
+  int __pyx_t_2;
+  if (__pyx_optional_args) {
+    if (__pyx_optional_args->__pyx_n > 0) {
+      __pyx_v_capacity = __pyx_optional_args->capacity;
+    }
+  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":575
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_samples = X.shape[0]
- *         cdef SIZE_t n_features = X.shape[1]
+  /* "skgarden/mondrian/tree/_tree.pyx":526
+ *         or 0 otherwise.
+ *         """
+ *         if capacity == self.capacity and self.nodes != NULL:             # <<<<<<<<<<<<<<
+ *             return 0
+ * 
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 575, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_12 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_12 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_12) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_11));
+  __pyx_t_2 = ((__pyx_v_capacity == __pyx_v_self->capacity) != 0);
+  if (__pyx_t_2) {
+  } else {
+    __pyx_t_1 = __pyx_t_2;
+    goto __pyx_L4_bool_binop_done;
+  }
+  __pyx_t_2 = ((__pyx_v_self->nodes != NULL) != 0);
+  __pyx_t_1 = __pyx_t_2;
+  __pyx_L4_bool_binop_done:;
+  if (__pyx_t_1) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":576
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
- *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_features = X.shape[1]
- *         cdef SIZE_t f_ind
+    /* "skgarden/mondrian/tree/_tree.pyx":527
+ *         """
+ *         if capacity == self.capacity and self.nodes != NULL:
+ *             return 0             # <<<<<<<<<<<<<<
+ * 
+ *         if capacity == <SIZE_t>(-1):
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_n_samples = __pyx_t_11;
+    __pyx_r = 0;
+    goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":577
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
- *         cdef SIZE_t n_samples = X.shape[0]
- *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
- *         cdef SIZE_t f_ind
+    /* "skgarden/mondrian/tree/_tree.pyx":526
+ *         or 0 otherwise.
+ *         """
+ *         if capacity == self.capacity and self.nodes != NULL:             # <<<<<<<<<<<<<<
+ *             return 0
  * 
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 577, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_v_n_features = __pyx_t_11;
+  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":583
- *         # These node values are the means in case of regression.
- *         # For classification these are the class counts.
- *         cdef np.ndarray[DOUBLE_t, ndim=2] node_values = self._get_value_ndarray()[:, 0, :]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":529
+ *             return 0
  * 
- *         # Initialize output
+ *         if capacity == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
+ *             if self.capacity == 0:
+ *                 capacity = 3  # default initial value
  */
-  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = PyObject_GetItem(__pyx_t_2, __pyx_tuple__7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 583, __pyx_L1_error)
-  __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_node_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
-      __pyx_v_node_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 583, __pyx_L1_error)
-    } else {__pyx_pybuffernd_node_values.diminfo[0].strides = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_node_values.diminfo[0].shape = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_node_values.diminfo[1].strides = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_node_values.diminfo[1].shape = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.shape[1];
-    }
-  }
-  __pyx_t_13 = 0;
-  __pyx_v_node_values = ((PyArrayObject *)__pyx_t_5);
-  __pyx_t_5 = 0;
+  __pyx_t_1 = ((__pyx_v_capacity == ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L)) != 0);
+  if (__pyx_t_1) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":586
+    /* "skgarden/mondrian/tree/_tree.pyx":530
  * 
- *         # Initialize output
- *         cdef np.ndarray[DTYPE_t, ndim=1] mean = np.zeros(n_samples, dtype=DTYPE)             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[DTYPE_t, ndim=1] std = np.zeros(n_samples, dtype=DTYPE)
+ *         if capacity == <SIZE_t>(-1):
+ *             if self.capacity == 0:             # <<<<<<<<<<<<<<
+ *                 capacity = 3  # default initial value
+ *             else:
+ */
+    __pyx_t_1 = ((__pyx_v_self->capacity == 0) != 0);
+    if (__pyx_t_1) {
+
+      /* "skgarden/mondrian/tree/_tree.pyx":531
+ *         if capacity == <SIZE_t>(-1):
+ *             if self.capacity == 0:
+ *                 capacity = 3  # default initial value             # <<<<<<<<<<<<<<
+ *             else:
+ *                 capacity = 2 * self.capacity
+ */
+      __pyx_v_capacity = 3;
+
+      /* "skgarden/mondrian/tree/_tree.pyx":530
  * 
+ *         if capacity == <SIZE_t>(-1):
+ *             if self.capacity == 0:             # <<<<<<<<<<<<<<
+ *                 capacity = 3  # default initial value
+ *             else:
  */
-  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
-  __pyx_t_5 = 0;
-  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 586, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 586, __pyx_L1_error)
-  __pyx_t_14 = ((PyArrayObject *)__pyx_t_8);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mean.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_mean = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_mean.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 586, __pyx_L1_error)
-    } else {__pyx_pybuffernd_mean.diminfo[0].strides = __pyx_pybuffernd_mean.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mean.diminfo[0].shape = __pyx_pybuffernd_mean.rcbuffer->pybuffer.shape[0];
+      goto __pyx_L7;
     }
-  }
-  __pyx_t_14 = 0;
-  __pyx_v_mean = ((PyArrayObject *)__pyx_t_8);
-  __pyx_t_8 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":587
- *         # Initialize output
- *         cdef np.ndarray[DTYPE_t, ndim=1] mean = np.zeros(n_samples, dtype=DTYPE)
- *         cdef np.ndarray[DTYPE_t, ndim=1] std = np.zeros(n_samples, dtype=DTYPE)             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":533
+ *                 capacity = 3  # default initial value
+ *             else:
+ *                 capacity = 2 * self.capacity             # <<<<<<<<<<<<<<
  * 
- *         cdef SIZE_t n_classes = node_values.shape[1]
+ *         safe_realloc(&self.nodes, capacity)
  */
-  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  __pyx_t_8 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_8);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
-  __pyx_t_8 = 0;
-  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 587, __pyx_L1_error)
-  __pyx_t_15 = ((PyArrayObject *)__pyx_t_2);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_std.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_std = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_std.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 587, __pyx_L1_error)
-    } else {__pyx_pybuffernd_std.diminfo[0].strides = __pyx_pybuffernd_std.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_std.diminfo[0].shape = __pyx_pybuffernd_std.rcbuffer->pybuffer.shape[0];
+    /*else*/ {
+      __pyx_v_capacity = (2 * __pyx_v_self->capacity);
     }
+    __pyx_L7:;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":529
+ *             return 0
+ * 
+ *         if capacity == <SIZE_t>(-1):             # <<<<<<<<<<<<<<
+ *             if self.capacity == 0:
+ *                 capacity = 3  # default initial value
+ */
   }
-  __pyx_t_15 = 0;
-  __pyx_v_std = ((PyArrayObject *)__pyx_t_2);
-  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":589
- *         cdef np.ndarray[DTYPE_t, ndim=1] std = np.zeros(n_samples, dtype=DTYPE)
+  /* "skgarden/mondrian/tree/_tree.pyx":535
+ *                 capacity = 2 * self.capacity
+ * 
+ *         safe_realloc(&self.nodes, capacity)             # <<<<<<<<<<<<<<
+ *         safe_realloc(&self.value, capacity * self.value_stride)
  * 
- *         cdef SIZE_t n_classes = node_values.shape[1]             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[DTYPE_t, ndim=2] proba = np.zeros((n_samples, n_classes), dtype=DTYPE)
- *         cdef np.ndarray[SIZE_t, ndim=1] n_node_samples = self.n_node_samples
  */
-  __pyx_v_n_classes = (__pyx_v_node_values->dimensions[1]);
+  __pyx_fuse_5__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->nodes), __pyx_v_capacity); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 535, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":590
+  /* "skgarden/mondrian/tree/_tree.pyx":536
  * 
- *         cdef SIZE_t n_classes = node_values.shape[1]
- *         cdef np.ndarray[DTYPE_t, ndim=2] proba = np.zeros((n_samples, n_classes), dtype=DTYPE)             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[SIZE_t, ndim=1] n_node_samples = self.n_node_samples
+ *         safe_realloc(&self.nodes, capacity)
+ *         safe_realloc(&self.value, capacity * self.value_stride)             # <<<<<<<<<<<<<<
  * 
+ *         # value memory is initialised to 0 to enable classifier argmax
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_GIVEREF(__pyx_t_2);
-  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
-  __Pyx_GIVEREF(__pyx_t_1);
-  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
-  __pyx_t_2 = 0;
-  __pyx_t_1 = 0;
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
-  __pyx_t_5 = 0;
-  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 590, __pyx_L1_error)
-  __pyx_t_16 = ((PyArrayObject *)__pyx_t_2);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_proba.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
-      __pyx_v_proba = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_proba.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 590, __pyx_L1_error)
-    } else {__pyx_pybuffernd_proba.diminfo[0].strides = __pyx_pybuffernd_proba.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_proba.diminfo[0].shape = __pyx_pybuffernd_proba.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_proba.diminfo[1].strides = __pyx_pybuffernd_proba.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_proba.diminfo[1].shape = __pyx_pybuffernd_proba.rcbuffer->pybuffer.shape[1];
-    }
-  }
-  __pyx_t_16 = 0;
-  __pyx_v_proba = ((PyArrayObject *)__pyx_t_2);
-  __pyx_t_2 = 0;
+  __pyx_fuse_3__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->value), (__pyx_v_capacity * __pyx_v_self->value_stride)); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 536, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":591
- *         cdef SIZE_t n_classes = node_values.shape[1]
- *         cdef np.ndarray[DTYPE_t, ndim=2] proba = np.zeros((n_samples, n_classes), dtype=DTYPE)
- *         cdef np.ndarray[SIZE_t, ndim=1] n_node_samples = self.n_node_samples             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":539
  * 
- *         # Initialize auxiliary data-structure
+ *         # value memory is initialised to 0 to enable classifier argmax
+ *         if capacity > self.capacity:             # <<<<<<<<<<<<<<
+ *             memset(<void*>(self.value + self.capacity * self.value_stride), 0,
+ *                    (capacity - self.capacity) * self.value_stride *
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_node_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 591, __pyx_L1_error)
-  __pyx_t_17 = ((PyArrayObject *)__pyx_t_2);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_n_node_samples = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 591, __pyx_L1_error)
-    } else {__pyx_pybuffernd_n_node_samples.diminfo[0].strides = __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n_node_samples.diminfo[0].shape = __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_17 = 0;
-  __pyx_v_n_node_samples = ((PyArrayObject *)__pyx_t_2);
-  __pyx_t_2 = 0;
+  __pyx_t_1 = ((__pyx_v_capacity > __pyx_v_self->capacity) != 0);
+  if (__pyx_t_1) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":594
- * 
- *         # Initialize auxiliary data-structure
- *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
- *         cdef SIZE_t i = 0
- *         cdef SIZE_t j
+    /* "skgarden/mondrian/tree/_tree.pyx":540
+ *         # value memory is initialised to 0 to enable classifier argmax
+ *         if capacity > self.capacity:
+ *             memset(<void*>(self.value + self.capacity * self.value_stride), 0,             # <<<<<<<<<<<<<<
+ *                    (capacity - self.capacity) * self.value_stride *
+ *                    sizeof(double))
  */
-  __pyx_v_node = NULL;
+    memset(((void *)(__pyx_v_self->value + (__pyx_v_self->capacity * __pyx_v_self->value_stride))), 0, (((__pyx_v_capacity - __pyx_v_self->capacity) * __pyx_v_self->value_stride) * (sizeof(double))));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":595
- *         # Initialize auxiliary data-structure
- *         cdef Node* node = NULL
- *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
- *         cdef SIZE_t j
- *         cdef SIZE_t node_id = 0
+    /* "skgarden/mondrian/tree/_tree.pyx":539
+ * 
+ *         # value memory is initialised to 0 to enable classifier argmax
+ *         if capacity > self.capacity:             # <<<<<<<<<<<<<<
+ *             memset(<void*>(self.value + self.capacity * self.value_stride), 0,
+ *                    (capacity - self.capacity) * self.value_stride *
  */
-  __pyx_v_i = 0;
+  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":597
- *         cdef SIZE_t i = 0
- *         cdef SIZE_t j
- *         cdef SIZE_t node_id = 0             # <<<<<<<<<<<<<<
- *         cdef DOUBLE_t Delta = 0.0
- *         cdef DOUBLE_t parent_tau
+  /* "skgarden/mondrian/tree/_tree.pyx":545
+ * 
+ *         # if capacity smaller than node_count, adjust the counter
+ *         if capacity < self.node_count:             # <<<<<<<<<<<<<<
+ *             self.node_count = capacity
+ * 
  */
-  __pyx_v_node_id = 0;
+  __pyx_t_1 = ((__pyx_v_capacity < __pyx_v_self->node_count) != 0);
+  if (__pyx_t_1) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":598
- *         cdef SIZE_t j
- *         cdef SIZE_t node_id = 0
- *         cdef DOUBLE_t Delta = 0.0             # <<<<<<<<<<<<<<
- *         cdef DOUBLE_t parent_tau
- *         cdef DOUBLE_t p_js
+    /* "skgarden/mondrian/tree/_tree.pyx":546
+ *         # if capacity smaller than node_count, adjust the counter
+ *         if capacity < self.node_count:
+ *             self.node_count = capacity             # <<<<<<<<<<<<<<
+ * 
+ *         self.capacity = capacity
  */
-  __pyx_v_Delta = 0.0;
+    __pyx_v_self->node_count = __pyx_v_capacity;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":609
- *         cdef SIZE_t class_ind
+    /* "skgarden/mondrian/tree/_tree.pyx":545
+ * 
+ *         # if capacity smaller than node_count, adjust the counter
+ *         if capacity < self.node_count:             # <<<<<<<<<<<<<<
+ *             self.node_count = capacity
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             for i in range(n_samples):
- *                 # Step 3
  */
-  {
-      #ifdef WITH_THREAD
-      PyThreadState *_save;
-      Py_UNBLOCK_THREADS
-      #endif
-      /*try:*/ {
+  }
 
-        /* "skgarden/mondrian/tree/_tree.pyx":610
+  /* "skgarden/mondrian/tree/_tree.pyx":548
+ *             self.node_count = capacity
+ * 
+ *         self.capacity = capacity             # <<<<<<<<<<<<<<
+ *         return 0
  * 
- *         with nogil:
- *             for i in range(n_samples):             # <<<<<<<<<<<<<<
- *                 # Step 3
- *                 parent_tau = 0.0
  */
-        __pyx_t_11 = __pyx_v_n_samples;
-        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
-          __pyx_v_i = __pyx_t_12;
+  __pyx_v_self->capacity = __pyx_v_capacity;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":612
- *             for i in range(n_samples):
- *                 # Step 3
- *                 parent_tau = 0.0             # <<<<<<<<<<<<<<
- *                 p_nsy = 1.0
- *                 node_id = 0
+  /* "skgarden/mondrian/tree/_tree.pyx":549
+ * 
+ *         self.capacity = capacity
+ *         return 0             # <<<<<<<<<<<<<<
+ * 
+ *     cdef void update_node_extent(self, SIZE_t node_ind, SIZE_t child_ind,
  */
-          __pyx_v_parent_tau = 0.0;
+  __pyx_r = 0;
+  goto __pyx_L0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":613
- *                 # Step 3
- *                 parent_tau = 0.0
- *                 p_nsy = 1.0             # <<<<<<<<<<<<<<
- *                 node_id = 0
+  /* "skgarden/mondrian/tree/_tree.pyx":520
+ *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
+ *     # (i.e., older MSVC).
+ *     cdef int _resize_c(self, SIZE_t capacity=<SIZE_t>(-1)) nogil except -1:             # <<<<<<<<<<<<<<
+ *         """Guts of _resize
  * 
  */
-          __pyx_v_p_nsy = 1.0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":614
- *                 parent_tau = 0.0
- *                 p_nsy = 1.0
- *                 node_id = 0             # <<<<<<<<<<<<<<
+  /* function exit code */
+  __pyx_L1_error:;
+  {
+    #ifdef WITH_THREAD
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+    #endif
+    __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._resize_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
+    #ifdef WITH_THREAD
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
+    #endif
+  }
+  __pyx_r = -1;
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":551
+ *         return 0
  * 
- *                 while True:
+ *     cdef void update_node_extent(self, SIZE_t node_ind, SIZE_t child_ind,             # <<<<<<<<<<<<<<
+ *                                  DTYPE_t* X_ptr, SIZE_t X_start, SIZE_t X_f_stride):
+ *         """
  */
-          __pyx_v_node_id = 0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":616
- *                 node_id = 0
- * 
- *                 while True:             # <<<<<<<<<<<<<<
- *                     node = &self.nodes[node_id]
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_update_node_extent(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_ind, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_child_ind, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_x_val;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_prev_node;
+  __Pyx_RefNannyDeclarations
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_2;
+  __Pyx_RefNannySetupContext("update_node_extent", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":560
+ *         cdef SIZE_t f_ind
+ *         cdef DTYPE_t x_val
+ *         cdef Node* node = &self.nodes[node_ind]             # <<<<<<<<<<<<<<
+ *         cdef Node* prev_node = &self.nodes[child_ind]
  * 
  */
-          while (1) {
+  __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node_ind]));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":617
- * 
- *                 while True:
- *                     node = &self.nodes[node_id]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":561
+ *         cdef DTYPE_t x_val
+ *         cdef Node* node = &self.nodes[node_ind]
+ *         cdef Node* prev_node = &self.nodes[child_ind]             # <<<<<<<<<<<<<<
  * 
- *                     # Step 5: First part.
+ *         for f_ind in range(self.n_features):
  */
-            __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node_id]));
+  __pyx_v_prev_node = (&(__pyx_v_self->nodes[__pyx_v_child_ind]));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":621
- *                     # Step 5: First part.
- *                     # Calculate Delta
- *                     Delta = node.tau - parent_tau             # <<<<<<<<<<<<<<
- *                     parent_tau = node.tau
+  /* "skgarden/mondrian/tree/_tree.pyx":563
+ *         cdef Node* prev_node = &self.nodes[child_ind]
  * 
+ *         for f_ind in range(self.n_features):             # <<<<<<<<<<<<<<
+ *             x_val = X_ptr[X_start + X_f_stride*f_ind]
+ *             node.lower_bounds[f_ind] = fmin(x_val, prev_node.lower_bounds[f_ind])
  */
-            __pyx_v_Delta = (__pyx_v_node->tau - __pyx_v_parent_tau);
+  __pyx_t_1 = __pyx_v_self->n_features;
+  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
+    __pyx_v_f_ind = __pyx_t_2;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":622
- *                     # Calculate Delta
- *                     Delta = node.tau - parent_tau
- *                     parent_tau = node.tau             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":564
  * 
- *                     # Step 5: Second part.
+ *         for f_ind in range(self.n_features):
+ *             x_val = X_ptr[X_start + X_f_stride*f_ind]             # <<<<<<<<<<<<<<
+ *             node.lower_bounds[f_ind] = fmin(x_val, prev_node.lower_bounds[f_ind])
+ *             node.upper_bounds[f_ind] = fmax(x_val, prev_node.upper_bounds[f_ind])
  */
-            __pyx_t_18 = __pyx_v_node->tau;
-            __pyx_v_parent_tau = __pyx_t_18;
+    __pyx_v_x_val = (__pyx_v_X_ptr[(__pyx_v_X_start + (__pyx_v_X_f_stride * __pyx_v_f_ind))]);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":626
- *                     # Step 5: Second part.
- *                     # Calculate eta
- *                     eta = 0.0             # <<<<<<<<<<<<<<
- *                     for f_ind in range(n_features):
- *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]
+    /* "skgarden/mondrian/tree/_tree.pyx":565
+ *         for f_ind in range(self.n_features):
+ *             x_val = X_ptr[X_start + X_f_stride*f_ind]
+ *             node.lower_bounds[f_ind] = fmin(x_val, prev_node.lower_bounds[f_ind])             # <<<<<<<<<<<<<<
+ *             node.upper_bounds[f_ind] = fmax(x_val, prev_node.upper_bounds[f_ind])
+ * 
  */
-            __pyx_v_eta = 0.0;
+    (__pyx_v_node->lower_bounds[__pyx_v_f_ind]) = __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmin(__pyx_v_x_val, (__pyx_v_prev_node->lower_bounds[__pyx_v_f_ind]));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":627
- *                     # Calculate eta
- *                     eta = 0.0
- *                     for f_ind in range(n_features):             # <<<<<<<<<<<<<<
- *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]
+    /* "skgarden/mondrian/tree/_tree.pyx":566
+ *             x_val = X_ptr[X_start + X_f_stride*f_ind]
+ *             node.lower_bounds[f_ind] = fmin(x_val, prev_node.lower_bounds[f_ind])
+ *             node.upper_bounds[f_ind] = fmax(x_val, prev_node.upper_bounds[f_ind])             # <<<<<<<<<<<<<<
  * 
+ *     cdef void _update_node_info(self, SIZE_t parent_id, SIZE_t child_id,
  */
-            __pyx_t_19 = __pyx_v_n_features;
-            for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
-              __pyx_v_f_ind = __pyx_t_20;
+    (__pyx_v_node->upper_bounds[__pyx_v_f_ind]) = __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax(__pyx_v_x_val, (__pyx_v_prev_node->upper_bounds[__pyx_v_f_ind]));
+  }
 
-              /* "skgarden/mondrian/tree/_tree.pyx":628
- *                     eta = 0.0
- *                     for f_ind in range(n_features):
- *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":551
+ *         return 0
  * 
- *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0) +
+ *     cdef void update_node_extent(self, SIZE_t node_ind, SIZE_t child_ind,             # <<<<<<<<<<<<<<
+ *                                  DTYPE_t* X_ptr, SIZE_t X_start, SIZE_t X_f_stride):
+ *         """
  */
-              __pyx_v_X_val = (__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_f_ind))]);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":630
- *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]
- * 
- *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0) +             # <<<<<<<<<<<<<<
- *                                 fmax(node.lower_bounds[f_ind] - X_val, 0))
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":568
+ *             node.upper_bounds[f_ind] = fmax(x_val, prev_node.upper_bounds[f_ind])
  * 
+ *     cdef void _update_node_info(self, SIZE_t parent_id, SIZE_t child_id,             # <<<<<<<<<<<<<<
+ *                                 DOUBLE_t* y_ptr, SIZE_t y_start):
+ *         """
  */
-              __pyx_v_eta = (__pyx_v_eta + (fmax((__pyx_v_X_val - (__pyx_v_node->upper_bounds[__pyx_v_f_ind])), 0.0) + fmax(((__pyx_v_node->lower_bounds[__pyx_v_f_ind]) - __pyx_v_X_val), 0.0)));
-            }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":635
- *                     # Step 6: Calculate p_j
- *                     # Step 7-11
- *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                         w_j = p_nsy
- *                     else:
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__update_node_info(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent_id, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_child_id, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_y_start) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_is_regression;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_child_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_c_ind;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_child;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_parent;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_new_sum;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_old_mean;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_new_mean;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_ss;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_2;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_3;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_4;
+  __Pyx_RefNannySetupContext("_update_node_info", 0);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":574
+ *         child_id and y_ptr[y_start]
+ *         """
+ *         cdef SIZE_t is_regression = self.n_classes[0] == 1             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t child_ptr = child_id*self.value_stride
+ *         cdef SIZE_t parent_ptr = parent_id*self.value_stride
  */
-            __pyx_t_10 = ((__pyx_v_node->left_child == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (__pyx_t_10) {
+  __pyx_v_is_regression = ((__pyx_v_self->n_classes[0]) == 1);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":636
- *                     # Step 7-11
- *                     if node.left_child == _TREE_LEAF:
- *                         w_j = p_nsy             # <<<<<<<<<<<<<<
- *                     else:
- *                         p_js = 1 - exp(-Delta * eta)
+  /* "skgarden/mondrian/tree/_tree.pyx":575
+ *         """
+ *         cdef SIZE_t is_regression = self.n_classes[0] == 1
+ *         cdef SIZE_t child_ptr = child_id*self.value_stride             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t parent_ptr = parent_id*self.value_stride
+ *         cdef SIZE_t c_ind
  */
-              __pyx_v_w_j = __pyx_v_p_nsy;
+  __pyx_v_child_ptr = (__pyx_v_child_id * __pyx_v_self->value_stride);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":635
- *                     # Step 6: Calculate p_j
- *                     # Step 7-11
- *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                         w_j = p_nsy
- *                     else:
+  /* "skgarden/mondrian/tree/_tree.pyx":576
+ *         cdef SIZE_t is_regression = self.n_classes[0] == 1
+ *         cdef SIZE_t child_ptr = child_id*self.value_stride
+ *         cdef SIZE_t parent_ptr = parent_id*self.value_stride             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t c_ind
+ *         cdef Node* child = &self.nodes[child_id]
+ */
+  __pyx_v_parent_ptr = (__pyx_v_parent_id * __pyx_v_self->value_stride);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":578
+ *         cdef SIZE_t parent_ptr = parent_id*self.value_stride
+ *         cdef SIZE_t c_ind
+ *         cdef Node* child = &self.nodes[child_id]             # <<<<<<<<<<<<<<
+ *         cdef Node* parent = &self.nodes[parent_id]
+ *         cdef DTYPE_t new_sum
+ */
+  __pyx_v_child = (&(__pyx_v_self->nodes[__pyx_v_child_id]));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":579
+ *         cdef SIZE_t c_ind
+ *         cdef Node* child = &self.nodes[child_id]
+ *         cdef Node* parent = &self.nodes[parent_id]             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t new_sum
+ *         cdef DTYPE_t old_mean
  */
-              goto __pyx_L14;
-            }
+  __pyx_v_parent = (&(__pyx_v_self->nodes[__pyx_v_parent_id]));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":638
- *                         w_j = p_nsy
- *                     else:
- *                         p_js = 1 - exp(-Delta * eta)             # <<<<<<<<<<<<<<
- *                         w_j = p_nsy * p_js
+  /* "skgarden/mondrian/tree/_tree.pyx":585
+ *         cdef DTYPE_t ss
  * 
+ *         if is_regression:             # <<<<<<<<<<<<<<
+ *             # Update mean
+ *             old_mean = self.value[child_ptr]
  */
-            /*else*/ {
-              __pyx_v_p_js = (1.0 - exp(((-__pyx_v_Delta) * __pyx_v_eta)));
+  __pyx_t_1 = (__pyx_v_is_regression != 0);
+  if (__pyx_t_1) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":639
- *                     else:
- *                         p_js = 1 - exp(-Delta * eta)
- *                         w_j = p_nsy * p_js             # <<<<<<<<<<<<<<
- * 
- *                     if is_regression:
+    /* "skgarden/mondrian/tree/_tree.pyx":587
+ *         if is_regression:
+ *             # Update mean
+ *             old_mean = self.value[child_ptr]             # <<<<<<<<<<<<<<
+ *             new_sum = old_mean*child.n_node_samples + y_ptr[y_start]
+ *             new_mean = new_sum / (child.n_node_samples + 1)
  */
-              __pyx_v_w_j = (__pyx_v_p_nsy * __pyx_v_p_js);
-            }
-            __pyx_L14:;
+    __pyx_v_old_mean = (__pyx_v_self->value[__pyx_v_child_ptr]);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":641
- *                         w_j = p_nsy * p_js
- * 
- *                     if is_regression:             # <<<<<<<<<<<<<<
- *                         mean[i] += w_j * node_values[node_id, 0]
- *                     else:
+    /* "skgarden/mondrian/tree/_tree.pyx":588
+ *             # Update mean
+ *             old_mean = self.value[child_ptr]
+ *             new_sum = old_mean*child.n_node_samples + y_ptr[y_start]             # <<<<<<<<<<<<<<
+ *             new_mean = new_sum / (child.n_node_samples + 1)
+ *             self.value[parent_ptr] = new_mean
  */
-            __pyx_t_10 = (__pyx_v_is_regression != 0);
-            if (__pyx_t_10) {
+    __pyx_v_new_sum = ((__pyx_v_old_mean * __pyx_v_child->n_node_samples) + (__pyx_v_y_ptr[__pyx_v_y_start]));
 
-              /* "skgarden/mondrian/tree/_tree.pyx":642
+    /* "skgarden/mondrian/tree/_tree.pyx":589
+ *             old_mean = self.value[child_ptr]
+ *             new_sum = old_mean*child.n_node_samples + y_ptr[y_start]
+ *             new_mean = new_sum / (child.n_node_samples + 1)             # <<<<<<<<<<<<<<
+ *             self.value[parent_ptr] = new_mean
  * 
- *                     if is_regression:
- *                         mean[i] += w_j * node_values[node_id, 0]             # <<<<<<<<<<<<<<
- *                     else:
- *                         for class_ind in range(n_classes):
  */
-              __pyx_t_21 = __pyx_v_node_id;
-              __pyx_t_22 = 0;
-              __pyx_t_23 = __pyx_v_i;
-              *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_mean.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_mean.diminfo[0].strides) += (__pyx_v_w_j * (*__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_node_values.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_node_values.diminfo[1].strides)));
+    __pyx_v_new_mean = (__pyx_v_new_sum / (__pyx_v_child->n_node_samples + 1));
 
-              /* "skgarden/mondrian/tree/_tree.pyx":641
- *                         w_j = p_nsy * p_js
+    /* "skgarden/mondrian/tree/_tree.pyx":590
+ *             new_sum = old_mean*child.n_node_samples + y_ptr[y_start]
+ *             new_mean = new_sum / (child.n_node_samples + 1)
+ *             self.value[parent_ptr] = new_mean             # <<<<<<<<<<<<<<
  * 
- *                     if is_regression:             # <<<<<<<<<<<<<<
- *                         mean[i] += w_j * node_values[node_id, 0]
- *                     else:
+ *             # Update variance
  */
-              goto __pyx_L15;
-            }
+    (__pyx_v_self->value[__pyx_v_parent_ptr]) = __pyx_v_new_mean;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":644
- *                         mean[i] += w_j * node_values[node_id, 0]
- *                     else:
- *                         for class_ind in range(n_classes):             # <<<<<<<<<<<<<<
- *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])
+    /* "skgarden/mondrian/tree/_tree.pyx":593
  * 
+ *             # Update variance
+ *             ss = (child.variance + old_mean**2)*child.n_node_samples             # <<<<<<<<<<<<<<
+ *             parent.variance = (
+ *                 (ss + y_ptr[y_start]**2) / (child.n_node_samples + 1) -
  */
-            /*else*/ {
-              __pyx_t_19 = __pyx_v_n_classes;
-              for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
-                __pyx_v_class_ind = __pyx_t_20;
+    __pyx_v_ss = ((__pyx_v_child->variance + powf(__pyx_v_old_mean, 2.0)) * __pyx_v_child->n_node_samples);
 
-                /* "skgarden/mondrian/tree/_tree.pyx":645
- *                     else:
- *                         for class_ind in range(n_classes):
- *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":594
+ *             # Update variance
+ *             ss = (child.variance + old_mean**2)*child.n_node_samples
+ *             parent.variance = (             # <<<<<<<<<<<<<<
+ *                 (ss + y_ptr[y_start]**2) / (child.n_node_samples + 1) -
+ *                 new_mean**2)
+ */
+    __pyx_v_parent->variance = (((__pyx_v_ss + pow((__pyx_v_y_ptr[__pyx_v_y_start]), 2.0)) / (__pyx_v_child->n_node_samples + 1)) - powf(__pyx_v_new_mean, 2.0));
+
+    /* "skgarden/mondrian/tree/_tree.pyx":585
+ *         cdef DTYPE_t ss
  * 
- *                     if return_std:
+ *         if is_regression:             # <<<<<<<<<<<<<<
+ *             # Update mean
+ *             old_mean = self.value[child_ptr]
  */
-                __pyx_t_24 = __pyx_v_node_id;
-                __pyx_t_25 = __pyx_v_class_ind;
-                __pyx_t_26 = __pyx_v_node_id;
-                __pyx_t_27 = __pyx_v_i;
-                __pyx_t_28 = __pyx_v_class_ind;
-                *__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_proba.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_proba.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_proba.diminfo[1].strides) += (__pyx_v_w_j * ((*__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_node_values.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_node_values.diminfo[1].strides)) / (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_n_node_samples.diminfo[0].strides))));
-              }
-            }
-            __pyx_L15:;
+    goto __pyx_L3;
+  }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":647
- *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])
+  /* "skgarden/mondrian/tree/_tree.pyx":599
+ *         else:
+ *             # Update class counts.
+ *             self.value[parent_ptr + <SIZE_t> y_ptr[y_start]] += 1.0             # <<<<<<<<<<<<<<
  * 
- *                     if return_std:             # <<<<<<<<<<<<<<
- *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+ *             if child_id != parent_id:
+ */
+  /*else*/ {
+    __pyx_t_2 = (__pyx_v_parent_ptr + ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_y_ptr[__pyx_v_y_start])));
+    (__pyx_v_self->value[__pyx_t_2]) = ((__pyx_v_self->value[__pyx_t_2]) + 1.0);
+
+    /* "skgarden/mondrian/tree/_tree.pyx":601
+ *             self.value[parent_ptr + <SIZE_t> y_ptr[y_start]] += 1.0
  * 
+ *             if child_id != parent_id:             # <<<<<<<<<<<<<<
+ *                 for c_ind in range(self.n_classes[0]):
+ *                     self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]
  */
-            __pyx_t_10 = (__pyx_v_return_std != 0);
-            if (__pyx_t_10) {
+    __pyx_t_1 = ((__pyx_v_child_id != __pyx_v_parent_id) != 0);
+    if (__pyx_t_1) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":648
+      /* "skgarden/mondrian/tree/_tree.pyx":602
  * 
- *                     if return_std:
- *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)             # <<<<<<<<<<<<<<
+ *             if child_id != parent_id:
+ *                 for c_ind in range(self.n_classes[0]):             # <<<<<<<<<<<<<<
+ *                     self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]
  * 
- *                     if node.left_child == _TREE_LEAF:
  */
-              __pyx_t_29 = __pyx_v_node_id;
-              __pyx_t_30 = 0;
-              __pyx_t_31 = __pyx_v_i;
-              *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_std.diminfo[0].strides) += (__pyx_v_w_j * (pow((*__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_node_values.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_node_values.diminfo[1].strides)), 2.0) + __pyx_v_node->variance));
+      __pyx_t_2 = (__pyx_v_self->n_classes[0]);
+      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
+        __pyx_v_c_ind = __pyx_t_3;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":647
- *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])
+        /* "skgarden/mondrian/tree/_tree.pyx":603
+ *             if child_id != parent_id:
+ *                 for c_ind in range(self.n_classes[0]):
+ *                     self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]             # <<<<<<<<<<<<<<
  * 
- *                     if return_std:             # <<<<<<<<<<<<<<
- *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,
+ */
+        __pyx_t_4 = (__pyx_v_parent_ptr + __pyx_v_c_ind);
+        (__pyx_v_self->value[__pyx_t_4]) = ((__pyx_v_self->value[__pyx_t_4]) + (__pyx_v_self->value[(__pyx_v_child_ptr + __pyx_v_c_ind)]));
+      }
+
+      /* "skgarden/mondrian/tree/_tree.pyx":601
+ *             self.value[parent_ptr + <SIZE_t> y_ptr[y_start]] += 1.0
  * 
+ *             if child_id != parent_id:             # <<<<<<<<<<<<<<
+ *                 for c_ind in range(self.n_classes[0]):
+ *                     self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]
  */
-            }
+    }
+  }
+  __pyx_L3:;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":650
- *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+  /* "skgarden/mondrian/tree/_tree.pyx":568
+ *             node.upper_bounds[f_ind] = fmax(x_val, prev_node.upper_bounds[f_ind])
  * 
- *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                         break
- *                     p_nsy = p_nsy * (1 - p_js)
+ *     cdef void _update_node_info(self, SIZE_t parent_id, SIZE_t child_id,             # <<<<<<<<<<<<<<
+ *                                 DOUBLE_t* y_ptr, SIZE_t y_start):
+ *         """
  */
-            __pyx_t_10 = ((__pyx_v_node->left_child == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (__pyx_t_10) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":651
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":605
+ *                     self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]
  * 
- *                     if node.left_child == _TREE_LEAF:
- *                         break             # <<<<<<<<<<<<<<
- *                     p_nsy = p_nsy * (1 - p_js)
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,             # <<<<<<<<<<<<<<
+ *                                   SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+ *                                   DTYPE_t tau, SIZE_t n_node_samples,
+ */
+
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_ind, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_left_child, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_right_child, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_feature, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_threshold, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_tau, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_weighted_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_impurity, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_variance, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_child_ind = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1);
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_y_start = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)0);
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_x_val;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_val_ptr;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_2;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_3;
+  __Pyx_RefNannySetupContext("set_node_attributes", 0);
+  if (__pyx_optional_args) {
+    if (__pyx_optional_args->__pyx_n > 0) {
+      __pyx_v_child_ind = __pyx_optional_args->child_ind;
+      if (__pyx_optional_args->__pyx_n > 1) {
+        __pyx_v_y_start = __pyx_optional_args->y_start;
+      }
+    }
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":624
+ *         X_ptr[X_start: X_start + n_features*X_f_stride]
+ *         """
+ *         cdef Node* node = &self.nodes[node_ind]             # <<<<<<<<<<<<<<
+ *         cdef Node* prev_node
+ *         cdef DTYPE_t x_val
+ */
+  __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node_ind]));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":628
+ *         cdef DTYPE_t x_val
+ *         cdef SIZE_t f_ind
+ *         cdef SIZE_t val_ptr = node_ind*self.value_stride             # <<<<<<<<<<<<<<
  * 
+ *         node.left_child = left_child
  */
-              goto __pyx_L11_break;
+  __pyx_v_val_ptr = (__pyx_v_node_ind * __pyx_v_self->value_stride);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":650
- *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+  /* "skgarden/mondrian/tree/_tree.pyx":630
+ *         cdef SIZE_t val_ptr = node_ind*self.value_stride
  * 
- *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                         break
- *                     p_nsy = p_nsy * (1 - p_js)
+ *         node.left_child = left_child             # <<<<<<<<<<<<<<
+ *         node.right_child = right_child
+ *         node.feature = feature
  */
-            }
+  __pyx_v_node->left_child = __pyx_v_left_child;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":652
- *                     if node.left_child == _TREE_LEAF:
- *                         break
- *                     p_nsy = p_nsy * (1 - p_js)             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":631
  * 
- *                     # Step 12-14
+ *         node.left_child = left_child
+ *         node.right_child = right_child             # <<<<<<<<<<<<<<
+ *         node.feature = feature
+ *         node.threshold = threshold
  */
-            __pyx_v_p_nsy = (__pyx_v_p_nsy * (1.0 - __pyx_v_p_js));
+  __pyx_v_node->right_child = __pyx_v_right_child;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":656
- *                     # Step 12-14
- *                     if X_ptr[X_sample_stride * i +
- *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node_id = node.left_child
- *                     else:
+  /* "skgarden/mondrian/tree/_tree.pyx":632
+ *         node.left_child = left_child
+ *         node.right_child = right_child
+ *         node.feature = feature             # <<<<<<<<<<<<<<
+ *         node.threshold = threshold
+ *         node.tau = tau
  */
-            __pyx_t_10 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
+  __pyx_v_node->feature = __pyx_v_feature;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":655
- * 
- *                     # Step 12-14
- *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node_id = node.left_child
+  /* "skgarden/mondrian/tree/_tree.pyx":633
+ *         node.right_child = right_child
+ *         node.feature = feature
+ *         node.threshold = threshold             # <<<<<<<<<<<<<<
+ *         node.tau = tau
+ *         node.n_node_samples = n_node_samples
  */
-            if (__pyx_t_10) {
+  __pyx_v_node->threshold = __pyx_v_threshold;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":657
- *                     if X_ptr[X_sample_stride * i +
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node_id = node.left_child             # <<<<<<<<<<<<<<
- *                     else:
- *                         node_id = node.right_child
+  /* "skgarden/mondrian/tree/_tree.pyx":634
+ *         node.feature = feature
+ *         node.threshold = threshold
+ *         node.tau = tau             # <<<<<<<<<<<<<<
+ *         node.n_node_samples = n_node_samples
+ *         node.weighted_n_node_samples = weighted_n_node_samples
  */
-              __pyx_t_19 = __pyx_v_node->left_child;
-              __pyx_v_node_id = __pyx_t_19;
+  __pyx_v_node->tau = __pyx_v_tau;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":655
- * 
- *                     # Step 12-14
- *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node_id = node.left_child
+  /* "skgarden/mondrian/tree/_tree.pyx":635
+ *         node.threshold = threshold
+ *         node.tau = tau
+ *         node.n_node_samples = n_node_samples             # <<<<<<<<<<<<<<
+ *         node.weighted_n_node_samples = weighted_n_node_samples
+ *         node.impurity = impurity
  */
-              goto __pyx_L20;
-            }
+  __pyx_v_node->n_node_samples = __pyx_v_n_node_samples;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":659
- *                         node_id = node.left_child
- *                     else:
- *                         node_id = node.right_child             # <<<<<<<<<<<<<<
- * 
- *                 if return_std:
+  /* "skgarden/mondrian/tree/_tree.pyx":636
+ *         node.tau = tau
+ *         node.n_node_samples = n_node_samples
+ *         node.weighted_n_node_samples = weighted_n_node_samples             # <<<<<<<<<<<<<<
+ *         node.impurity = impurity
+ *         node.variance = variance
  */
-            /*else*/ {
-              __pyx_t_19 = __pyx_v_node->right_child;
-              __pyx_v_node_id = __pyx_t_19;
-            }
-            __pyx_L20:;
-          }
-          __pyx_L11_break:;
+  __pyx_v_node->weighted_n_node_samples = __pyx_v_weighted_n_node_samples;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":661
- *                         node_id = node.right_child
+  /* "skgarden/mondrian/tree/_tree.pyx":637
+ *         node.n_node_samples = n_node_samples
+ *         node.weighted_n_node_samples = weighted_n_node_samples
+ *         node.impurity = impurity             # <<<<<<<<<<<<<<
+ *         node.variance = variance
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ */
+  __pyx_v_node->impurity = __pyx_v_impurity;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":638
+ *         node.weighted_n_node_samples = weighted_n_node_samples
+ *         node.impurity = impurity
+ *         node.variance = variance             # <<<<<<<<<<<<<<
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ */
+  __pyx_v_node->variance = __pyx_v_variance;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":639
+ *         node.impurity = impurity
+ *         node.variance = variance
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
  * 
- *                 if return_std:             # <<<<<<<<<<<<<<
- *                     std[i] -= mean[i]**2
- *                     if std[i] <= 0:
  */
-          __pyx_t_10 = (__pyx_v_return_std != 0);
-          if (__pyx_t_10) {
+  __pyx_v_node->lower_bounds = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":662
+  /* "skgarden/mondrian/tree/_tree.pyx":640
+ *         node.variance = variance
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
  * 
- *                 if return_std:
- *                     std[i] -= mean[i]**2             # <<<<<<<<<<<<<<
- *                     if std[i] <= 0:
- *                         std[i] = 0.0
+ *         # Set bounds.
  */
-            __pyx_t_32 = __pyx_v_i;
-            __pyx_t_33 = __pyx_v_i;
-            *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_std.diminfo[0].strides) -= powf((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_mean.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_mean.diminfo[0].strides)), 2.0);
+  __pyx_v_node->upper_bounds = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":663
- *                 if return_std:
- *                     std[i] -= mean[i]**2
- *                     if std[i] <= 0:             # <<<<<<<<<<<<<<
- *                         std[i] = 0.0
- *                     std[i] = sqrt(std[i])
+  /* "skgarden/mondrian/tree/_tree.pyx":644
+ *         # Set bounds.
+ *         # If child_ind is -1, its a leaf, else update the extent of each node.
+ *         if child_ind == -1:             # <<<<<<<<<<<<<<
+ *             for f_ind in range(self.n_features):
+ *                 x_val = X_ptr[X_start + X_f_stride*f_ind]
  */
-            __pyx_t_34 = __pyx_v_i;
-            __pyx_t_10 = (((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_34, __pyx_pybuffernd_std.diminfo[0].strides)) <= 0.0) != 0);
-            if (__pyx_t_10) {
+  __pyx_t_1 = ((__pyx_v_child_ind == -1L) != 0);
+  if (__pyx_t_1) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":664
- *                     std[i] -= mean[i]**2
- *                     if std[i] <= 0:
- *                         std[i] = 0.0             # <<<<<<<<<<<<<<
- *                     std[i] = sqrt(std[i])
- * 
+    /* "skgarden/mondrian/tree/_tree.pyx":645
+ *         # If child_ind is -1, its a leaf, else update the extent of each node.
+ *         if child_ind == -1:
+ *             for f_ind in range(self.n_features):             # <<<<<<<<<<<<<<
+ *                 x_val = X_ptr[X_start + X_f_stride*f_ind]
+ *                 node.lower_bounds[f_ind] = node.upper_bounds[f_ind] = x_val
+ */
+    __pyx_t_2 = __pyx_v_self->n_features;
+    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
+      __pyx_v_f_ind = __pyx_t_3;
+
+      /* "skgarden/mondrian/tree/_tree.pyx":646
+ *         if child_ind == -1:
+ *             for f_ind in range(self.n_features):
+ *                 x_val = X_ptr[X_start + X_f_stride*f_ind]             # <<<<<<<<<<<<<<
+ *                 node.lower_bounds[f_ind] = node.upper_bounds[f_ind] = x_val
+ *         else:
  */
-              __pyx_t_35 = __pyx_v_i;
-              *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_35, __pyx_pybuffernd_std.diminfo[0].strides) = 0.0;
+      __pyx_v_x_val = (__pyx_v_X_ptr[(__pyx_v_X_start + (__pyx_v_X_f_stride * __pyx_v_f_ind))]);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":663
- *                 if return_std:
- *                     std[i] -= mean[i]**2
- *                     if std[i] <= 0:             # <<<<<<<<<<<<<<
- *                         std[i] = 0.0
- *                     std[i] = sqrt(std[i])
+      /* "skgarden/mondrian/tree/_tree.pyx":647
+ *             for f_ind in range(self.n_features):
+ *                 x_val = X_ptr[X_start + X_f_stride*f_ind]
+ *                 node.lower_bounds[f_ind] = node.upper_bounds[f_ind] = x_val             # <<<<<<<<<<<<<<
+ *         else:
+ *             self.update_node_extent(
  */
-            }
+      (__pyx_v_node->lower_bounds[__pyx_v_f_ind]) = __pyx_v_x_val;
+      (__pyx_v_node->upper_bounds[__pyx_v_f_ind]) = __pyx_v_x_val;
+    }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":665
- *                     if std[i] <= 0:
- *                         std[i] = 0.0
- *                     std[i] = sqrt(std[i])             # <<<<<<<<<<<<<<
- * 
- *         if is_regression:
+    /* "skgarden/mondrian/tree/_tree.pyx":644
+ *         # Set bounds.
+ *         # If child_ind is -1, its a leaf, else update the extent of each node.
+ *         if child_ind == -1:             # <<<<<<<<<<<<<<
+ *             for f_ind in range(self.n_features):
+ *                 x_val = X_ptr[X_start + X_f_stride*f_ind]
  */
-            __pyx_t_36 = __pyx_v_i;
-            __pyx_t_37 = __pyx_v_i;
-            *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_std.diminfo[0].strides) = sqrt((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_std.diminfo[0].strides)));
+    goto __pyx_L3;
+  }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":661
- *                         node_id = node.right_child
+  /* "skgarden/mondrian/tree/_tree.pyx":649
+ *                 node.lower_bounds[f_ind] = node.upper_bounds[f_ind] = x_val
+ *         else:
+ *             self.update_node_extent(             # <<<<<<<<<<<<<<
+ *                 node_ind, child_ind, X_ptr, X_start, X_f_stride)
  * 
- *                 if return_std:             # <<<<<<<<<<<<<<
- *                     std[i] -= mean[i]**2
- *                     if std[i] <= 0:
  */
-          }
-        }
-      }
+  /*else*/ {
 
-      /* "skgarden/mondrian/tree/_tree.pyx":609
- *         cdef SIZE_t class_ind
+    /* "skgarden/mondrian/tree/_tree.pyx":650
+ *         else:
+ *             self.update_node_extent(
+ *                 node_ind, child_ind, X_ptr, X_start, X_f_stride)             # <<<<<<<<<<<<<<
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             for i in range(n_samples):
- *                 # Step 3
+ *         # Set value at node_ind
  */
-      /*finally:*/ {
-        /*normal exit:*/{
-          #ifdef WITH_THREAD
-          Py_BLOCK_THREADS
-          #endif
-          goto __pyx_L7;
-        }
-        __pyx_L7:;
-      }
+    ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->update_node_extent(__pyx_v_self, __pyx_v_node_ind, __pyx_v_child_ind, __pyx_v_X_ptr, __pyx_v_X_start, __pyx_v_X_f_stride);
   }
+  __pyx_L3:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":667
- *                     std[i] = sqrt(std[i])
+  /* "skgarden/mondrian/tree/_tree.pyx":653
  * 
- *         if is_regression:             # <<<<<<<<<<<<<<
- *             if return_std:
- *                 return mean, std
+ *         # Set value at node_ind
+ *         if child_ind == -1:             # <<<<<<<<<<<<<<
+ *             # Regression
+ *             if self.n_classes[0] == 1:
  */
-  __pyx_t_10 = (__pyx_v_is_regression != 0);
-  if (__pyx_t_10) {
+  __pyx_t_1 = ((__pyx_v_child_ind == -1L) != 0);
+  if (__pyx_t_1) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":668
- * 
- *         if is_regression:
- *             if return_std:             # <<<<<<<<<<<<<<
- *                 return mean, std
- *             return mean,
+    /* "skgarden/mondrian/tree/_tree.pyx":655
+ *         if child_ind == -1:
+ *             # Regression
+ *             if self.n_classes[0] == 1:             # <<<<<<<<<<<<<<
+ *                 self.value[val_ptr] = y_ptr[y_start]
+ *             else:
  */
-    __pyx_t_10 = (__pyx_v_return_std != 0);
-    if (__pyx_t_10) {
+    __pyx_t_1 = (((__pyx_v_self->n_classes[0]) == 1) != 0);
+    if (__pyx_t_1) {
 
-      /* "skgarden/mondrian/tree/_tree.pyx":669
- *         if is_regression:
- *             if return_std:
- *                 return mean, std             # <<<<<<<<<<<<<<
- *             return mean,
- *         else:
+      /* "skgarden/mondrian/tree/_tree.pyx":656
+ *             # Regression
+ *             if self.n_classes[0] == 1:
+ *                 self.value[val_ptr] = y_ptr[y_start]             # <<<<<<<<<<<<<<
+ *             else:
+ *                 self.value[val_ptr + <SIZE_t> y_ptr[y_start]] = 1.0
  */
-      __Pyx_XDECREF(__pyx_r);
-      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_2);
-      __Pyx_INCREF(((PyObject *)__pyx_v_mean));
-      __Pyx_GIVEREF(((PyObject *)__pyx_v_mean));
-      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mean));
-      __Pyx_INCREF(((PyObject *)__pyx_v_std));
-      __Pyx_GIVEREF(((PyObject *)__pyx_v_std));
-      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_std));
-      __pyx_r = ((PyObject*)__pyx_t_2);
-      __pyx_t_2 = 0;
-      goto __pyx_L0;
+      (__pyx_v_self->value[__pyx_v_val_ptr]) = (__pyx_v_y_ptr[__pyx_v_y_start]);
 
-      /* "skgarden/mondrian/tree/_tree.pyx":668
- * 
- *         if is_regression:
- *             if return_std:             # <<<<<<<<<<<<<<
- *                 return mean, std
- *             return mean,
+      /* "skgarden/mondrian/tree/_tree.pyx":655
+ *         if child_ind == -1:
+ *             # Regression
+ *             if self.n_classes[0] == 1:             # <<<<<<<<<<<<<<
+ *                 self.value[val_ptr] = y_ptr[y_start]
+ *             else:
  */
+      goto __pyx_L7;
     }
 
-    /* "skgarden/mondrian/tree/_tree.pyx":670
- *             if return_std:
- *                 return mean, std
- *             return mean,             # <<<<<<<<<<<<<<
- *         else:
- *             return proba,
- */
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_INCREF(((PyObject *)__pyx_v_mean));
-    __Pyx_GIVEREF(((PyObject *)__pyx_v_mean));
-    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mean));
-    __pyx_r = ((PyObject*)__pyx_t_2);
-    __pyx_t_2 = 0;
-    goto __pyx_L0;
-
-    /* "skgarden/mondrian/tree/_tree.pyx":667
- *                     std[i] = sqrt(std[i])
+    /* "skgarden/mondrian/tree/_tree.pyx":658
+ *                 self.value[val_ptr] = y_ptr[y_start]
+ *             else:
+ *                 self.value[val_ptr + <SIZE_t> y_ptr[y_start]] = 1.0             # <<<<<<<<<<<<<<
  * 
- *         if is_regression:             # <<<<<<<<<<<<<<
- *             if return_std:
- *                 return mean, std
+ *     cdef void _init(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_f_stride):
  */
-  }
+    /*else*/ {
+      (__pyx_v_self->value[(__pyx_v_val_ptr + ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_y_ptr[__pyx_v_y_start])))]) = 1.0;
+    }
+    __pyx_L7:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":672
- *             return mean,
- *         else:
- *             return proba,             # <<<<<<<<<<<<<<
- * 
+    /* "skgarden/mondrian/tree/_tree.pyx":653
  * 
+ *         # Set value at node_ind
+ *         if child_ind == -1:             # <<<<<<<<<<<<<<
+ *             # Regression
+ *             if self.n_classes[0] == 1:
  */
-  /*else*/ {
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_INCREF(((PyObject *)__pyx_v_proba));
-    __Pyx_GIVEREF(((PyObject *)__pyx_v_proba));
-    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_proba));
-    __pyx_r = ((PyObject*)__pyx_t_2);
-    __pyx_t_2 = 0;
-    goto __pyx_L0;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":560
- *             return self._apply_dense(X)
- * 
- *     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):             # <<<<<<<<<<<<<<
- *         """Predicts the regressor and standard deviation for all samples."""
+  /* "skgarden/mondrian/tree/_tree.pyx":605
+ *                     self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]
  * 
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,             # <<<<<<<<<<<<<<
+ *                                   SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+ *                                   DTYPE_t tau, SIZE_t n_node_samples,
  */
 
   /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_XDECREF(__pyx_t_8);
-  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mean.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_node_values.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_proba.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_std.rcbuffer->pybuffer);
-  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  goto __pyx_L2;
-  __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mean.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_node_values.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_proba.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_std.rcbuffer->pybuffer);
-  __pyx_L2:;
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_node_values);
-  __Pyx_XDECREF((PyObject *)__pyx_v_mean);
-  __Pyx_XDECREF((PyObject *)__pyx_v_std);
-  __Pyx_XDECREF((PyObject *)__pyx_v_proba);
-  __Pyx_XDECREF((PyObject *)__pyx_v_n_node_samples);
-  __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
-  return __pyx_r;
 }
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_12predict[] = "Predicts the regressor and standard deviation for all samples.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
-  PyObject *__pyx_v_X = 0;
-  int __pyx_v_return_std;
-  int __pyx_v_is_regression;
-  PyObject *__pyx_r = 0;
+/* "skgarden/mondrian/tree/_tree.pyx":660
+ *                 self.value[val_ptr + <SIZE_t> y_ptr[y_start]] = 1.0
+ * 
+ *     cdef void _init(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_f_stride):             # <<<<<<<<<<<<<<
+ *         """
+ *         Parameters
+ */
+
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__init(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride) {
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("predict (wrapper)", 0);
-  {
-    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_return_std,&__pyx_n_s_is_regression,0};
-    PyObject* values[3] = {0,0,0};
-    if (unlikely(__pyx_kwds)) {
-      Py_ssize_t kw_args;
-      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
-      switch (pos_args) {
-        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-        case  0: break;
-        default: goto __pyx_L5_argtuple_error;
-      }
-      kw_args = PyDict_Size(__pyx_kwds);
-      switch (pos_args) {
-        case  0:
-        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
-        else goto __pyx_L5_argtuple_error;
-        case  1:
-        if (kw_args > 0) {
-          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_std);
-          if (value) { values[1] = value; kw_args--; }
-        }
-        case  2:
-        if (kw_args > 0) {
-          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_regression);
-          if (value) { values[2] = value; kw_args--; }
-        }
-      }
-      if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "predict") < 0)) __PYX_ERR(0, 560, __pyx_L3_error)
-      }
-    } else {
-      switch (PyTuple_GET_SIZE(__pyx_args)) {
-        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
-        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
-        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
-        break;
-        default: goto __pyx_L5_argtuple_error;
-      }
-    }
-    __pyx_v_X = values[0];
-    if (values[1]) {
-      __pyx_v_return_std = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_return_std == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 560, __pyx_L3_error)
-    } else {
-      __pyx_v_return_std = ((int)0);
-    }
-    if (values[2]) {
-      __pyx_v_is_regression = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_is_regression == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 560, __pyx_L3_error)
-    } else {
-      __pyx_v_is_regression = ((int)1);
-    }
-  }
-  goto __pyx_L4_argument_unpacking_done;
-  __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("predict", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 560, __pyx_L3_error)
-  __pyx_L3_error:;
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __Pyx_RefNannyFinishContext();
-  return NULL;
-  __pyx_L4_argument_unpacking_done:;
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_12predict(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), __pyx_v_X, __pyx_v_return_std, __pyx_v_is_regression);
+  __Pyx_RefNannySetupContext("_init", 0);
 
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+  /* "skgarden/mondrian/tree/_tree.pyx":670
+ *         X_f_stride: SIZE_t, stride to reach consecutive feature.
+ *         """
+ *         self.set_node_attributes(0, _TREE_LEAF, _TREE_LEAF, _TREE_UNDEFINED,             # <<<<<<<<<<<<<<
+ *                                  _TREE_UNDEFINED, INFINITY, 1, 1, 0.0, 0.0,
+ *                                  0, X_f_stride, X_ptr, y_ptr)
+ */
+  ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->set_node_attributes(__pyx_v_self, 0, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED, __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY, 1, 1.0, 0.0, 0.0, 0, __pyx_v_X_f_stride, __pyx_v_X_ptr, __pyx_v_y_ptr, NULL);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":673
+ *                                  _TREE_UNDEFINED, INFINITY, 1, 1, 0.0, 0.0,
+ *                                  0, X_f_stride, X_ptr, y_ptr)
+ *         self.node_count += 1             # <<<<<<<<<<<<<<
+ * 
+ *     cdef void extend(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_start,
+ */
+  __pyx_v_self->node_count = (__pyx_v_self->node_count + 1);
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_12predict(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_v_return_std, int __pyx_v_is_regression) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict __pyx_t_2;
-  __Pyx_RefNannySetupContext("predict", 0);
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_2.__pyx_n = 2;
-  __pyx_t_2.return_std = __pyx_v_return_std;
-  __pyx_t_2.is_regression = __pyx_v_is_regression;
-  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree->predict(__pyx_v_self, __pyx_v_X, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
+  /* "skgarden/mondrian/tree/_tree.pyx":660
+ *                 self.value[val_ptr + <SIZE_t> y_ptr[y_start]] = 1.0
+ * 
+ *     cdef void _init(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_f_stride):             # <<<<<<<<<<<<<<
+ *         """
+ *         Parameters
+ */
 
   /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
-  return __pyx_r;
 }
 
 /* "skgarden/mondrian/tree/_tree.pyx":675
+ *         self.node_count += 1
  * 
- * 
- *     cdef inline np.ndarray _apply_dense(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- * 
+ *     cdef void extend(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_start,             # <<<<<<<<<<<<<<
+ *                      SIZE_t X_f_stride, SIZE_t y_start, UINT32_t random_state,
+ *                      SIZE_t min_samples_split):
  */
 
-static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
-  PyArrayObject *__pyx_v_X_ndarray = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_sample_stride;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_fx_stride;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
-  CYTHON_UNUSED __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
-  PyArrayObject *__pyx_v_out = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_out_ptr;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_out;
-  __Pyx_Buffer __pyx_pybuffer_out;
-  PyArrayObject *__pyx_r = NULL;
+static void __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_extend(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *__pyx_v_y_ptr, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_f_stride, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_y_start, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t __pyx_v_random_state, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_min_samples_split) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_curr_id;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent_id;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_new_child_id;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_new_parent_id;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_delta;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_curr_node;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_parent_node;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_x;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_x_val;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_new_rate;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_e_l;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_e_u;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_extent;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_E;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_tau_parent;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_l_b;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_u_b;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_rc;
+  double __pyx_v_xi;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_left_child;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_right_child;
   __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  int __pyx_t_2;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  PyObject *__pyx_t_5 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_6;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_7;
-  PyObject *__pyx_t_8 = NULL;
-  PyObject *__pyx_t_9 = NULL;
-  PyArrayObject *__pyx_t_10 = NULL;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_t_11;
-  __Pyx_RefNannySetupContext("_apply_dense", 0);
-  __pyx_pybuffer_out.pybuffer.buf = NULL;
-  __pyx_pybuffer_out.refcount = 0;
-  __pyx_pybuffernd_out.data = NULL;
-  __pyx_pybuffernd_out.rcbuffer = &__pyx_pybuffer_out;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_2;
+  int __pyx_t_3;
+  int __pyx_t_4;
+  int __pyx_t_5;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c __pyx_t_6;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes __pyx_t_7;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_t_8;
+  __Pyx_RefNannySetupContext("extend", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":679
- * 
- *         # Check input
- *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in np.ndarray format, got %s"
- *                              % type(X))
+  /* "skgarden/mondrian/tree/_tree.pyx":689
+ *         """
+ *         # Traverse the tree
+ *         cdef SIZE_t curr_id = self.root             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t parent_id = -1
+ *         cdef SIZE_t left_id
  */
-  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
-  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
-  if (__pyx_t_2) {
+  __pyx_t_1 = __pyx_v_self->root;
+  __pyx_v_curr_id = __pyx_t_1;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":681
- *         if not isinstance(X, np.ndarray):
- *             raise ValueError("X should be in np.ndarray format, got %s"
- *                              % type(X))             # <<<<<<<<<<<<<<
- * 
- *         if X.dtype != DTYPE:
+  /* "skgarden/mondrian/tree/_tree.pyx":690
+ *         # Traverse the tree
+ *         cdef SIZE_t curr_id = self.root
+ *         cdef SIZE_t parent_id = -1             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t left_id
+ *         cdef SIZE_t right_id
+ */
+  __pyx_v_parent_id = -1;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":706
+ *         cdef DTYPE_t x_val
+ *         cdef DTYPE_t new_rate
+ *         cdef DTYPE_t* e_l = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* e_u = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         cdef DTYPE_t* extent = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ */
+  __pyx_v_e_l = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":707
+ *         cdef DTYPE_t new_rate
+ *         cdef DTYPE_t* e_l = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         cdef DTYPE_t* e_u = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* extent = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         cdef DTYPE_t E
+ */
+  __pyx_v_e_u = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":708
+ *         cdef DTYPE_t* e_l = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         cdef DTYPE_t* e_u = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         cdef DTYPE_t* extent = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t E
+ *         cdef DTYPE_t tau_parent = 0.0
+ */
+  __pyx_v_extent = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":710
+ *         cdef DTYPE_t* extent = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         cdef DTYPE_t E
+ *         cdef DTYPE_t tau_parent = 0.0             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t threshold
+ *         cdef DTYPE_t l_b
  */
-    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
+  __pyx_v_tau_parent = 0.0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":680
- *         # Check input
- *         if not isinstance(X, np.ndarray):
- *             raise ValueError("X should be in np.ndarray format, got %s"             # <<<<<<<<<<<<<<
- *                              % type(X))
+  /* "skgarden/mondrian/tree/_tree.pyx":717
+ *         cdef SIZE_t rc
  * 
- */
-    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 680, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_GIVEREF(__pyx_t_3);
-    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
-    __pyx_t_3 = 0;
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 680, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(0, 680, __pyx_L1_error)
-
-    /* "skgarden/mondrian/tree/_tree.pyx":679
+ *         while True:             # <<<<<<<<<<<<<<
+ *             curr_node = &self.nodes[curr_id]
  * 
- *         # Check input
- *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in np.ndarray format, got %s"
- *                              % type(X))
  */
-  }
+  while (1) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":683
- *                              % type(X))
+    /* "skgarden/mondrian/tree/_tree.pyx":718
  * 
- *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
+ *         while True:
+ *             curr_node = &self.nodes[curr_id]             # <<<<<<<<<<<<<<
  * 
+ *             # Step 1: Calculate e^l, e^u and rate.
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 683, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 683, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (__pyx_t_2) {
+    __pyx_v_curr_node = (&(__pyx_v_self->nodes[__pyx_v_curr_id]));
 
-    /* "skgarden/mondrian/tree/_tree.pyx":684
- * 
- *         if X.dtype != DTYPE:
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
- * 
- *         # Extract input
+    /* "skgarden/mondrian/tree/_tree.pyx":722
+ *             # Step 1: Calculate e^l, e^u and rate.
+ *             # If x belongs to the bounding box, this is zero.
+ *             new_rate = 0.0             # <<<<<<<<<<<<<<
+ *             for f_ind in range(self.n_features):
+ *                 x = X_ptr[X_start + f_ind*X_f_stride]
  */
-    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 684, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 684, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __Pyx_GIVEREF(__pyx_t_4);
-    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
-    __pyx_t_4 = 0;
-    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __PYX_ERR(0, 684, __pyx_L1_error)
+    __pyx_v_new_rate = 0.0;
 
-    /* "skgarden/mondrian/tree/_tree.pyx":683
- *                              % type(X))
- * 
- *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
- * 
+    /* "skgarden/mondrian/tree/_tree.pyx":723
+ *             # If x belongs to the bounding box, this is zero.
+ *             new_rate = 0.0
+ *             for f_ind in range(self.n_features):             # <<<<<<<<<<<<<<
+ *                 x = X_ptr[X_start + f_ind*X_f_stride]
+ *                 e_l[f_ind] = fmax(curr_node.lower_bounds[f_ind] - x, 0)
  */
-  }
+    __pyx_t_1 = __pyx_v_self->n_features;
+    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
+      __pyx_v_f_ind = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":687
- * 
- *         # Extract input
- *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+      /* "skgarden/mondrian/tree/_tree.pyx":724
+ *             new_rate = 0.0
+ *             for f_ind in range(self.n_features):
+ *                 x = X_ptr[X_start + f_ind*X_f_stride]             # <<<<<<<<<<<<<<
+ *                 e_l[f_ind] = fmax(curr_node.lower_bounds[f_ind] - x, 0)
+ *                 e_u[f_ind] = fmax(x - curr_node.upper_bounds[f_ind], 0)
  */
-  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 687, __pyx_L1_error)
-  __pyx_t_4 = __pyx_v_X;
-  __Pyx_INCREF(__pyx_t_4);
-  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+      __pyx_v_x = (__pyx_v_X_ptr[(__pyx_v_X_start + (__pyx_v_f_ind * __pyx_v_X_f_stride))]);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":688
- *         # Extract input
- *         cdef np.ndarray X_ndarray = X
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+      /* "skgarden/mondrian/tree/_tree.pyx":725
+ *             for f_ind in range(self.n_features):
+ *                 x = X_ptr[X_start + f_ind*X_f_stride]
+ *                 e_l[f_ind] = fmax(curr_node.lower_bounds[f_ind] - x, 0)             # <<<<<<<<<<<<<<
+ *                 e_u[f_ind] = fmax(x - curr_node.upper_bounds[f_ind], 0)
+ *                 extent[f_ind] = e_l[f_ind] + e_u[f_ind]
  */
-  __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
+      (__pyx_v_e_l[__pyx_v_f_ind]) = __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax(((__pyx_v_curr_node->lower_bounds[__pyx_v_f_ind]) - __pyx_v_x), 0.0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":689
- *         cdef np.ndarray X_ndarray = X
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
- *         cdef SIZE_t n_samples = X.shape[0]
+      /* "skgarden/mondrian/tree/_tree.pyx":726
+ *                 x = X_ptr[X_start + f_ind*X_f_stride]
+ *                 e_l[f_ind] = fmax(curr_node.lower_bounds[f_ind] - x, 0)
+ *                 e_u[f_ind] = fmax(x - curr_node.upper_bounds[f_ind], 0)             # <<<<<<<<<<<<<<
+ *                 extent[f_ind] = e_l[f_ind] + e_u[f_ind]
+ *                 new_rate += extent[f_ind]
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7));
+      (__pyx_v_e_u[__pyx_v_f_ind]) = __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax((__pyx_v_x - (__pyx_v_curr_node->upper_bounds[__pyx_v_f_ind])), 0.0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":690
- *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_samples = X.shape[0]
- *         cdef SIZE_t n_features = X.shape[1]
+      /* "skgarden/mondrian/tree/_tree.pyx":727
+ *                 e_l[f_ind] = fmax(curr_node.lower_bounds[f_ind] - x, 0)
+ *                 e_u[f_ind] = fmax(x - curr_node.upper_bounds[f_ind], 0)
+ *                 extent[f_ind] = e_l[f_ind] + e_u[f_ind]             # <<<<<<<<<<<<<<
+ *                 new_rate += extent[f_ind]
+ * 
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 690, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 690, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 690, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6));
+      (__pyx_v_extent[__pyx_v_f_ind]) = ((__pyx_v_e_l[__pyx_v_f_ind]) + (__pyx_v_e_u[__pyx_v_f_ind]));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":691
- *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
- *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_features = X.shape[1]
- *         cdef SIZE_t f_ind
+      /* "skgarden/mondrian/tree/_tree.pyx":728
+ *                 e_u[f_ind] = fmax(x - curr_node.upper_bounds[f_ind], 0)
+ *                 extent[f_ind] = e_l[f_ind] + e_u[f_ind]
+ *                 new_rate += extent[f_ind]             # <<<<<<<<<<<<<<
+ * 
+ *             # Step 2: Sample E from an exponential distribution.
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 691, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 691, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 691, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_n_samples = __pyx_t_6;
+      __pyx_v_new_rate = (__pyx_v_new_rate + (__pyx_v_extent[__pyx_v_f_ind]));
+    }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":692
- *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
- *         cdef SIZE_t n_samples = X.shape[0]
- *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
- *         cdef SIZE_t f_ind
+    /* "skgarden/mondrian/tree/_tree.pyx":731
+ * 
+ *             # Step 2: Sample E from an exponential distribution.
+ *             E = rand_exponential(new_rate, &random_state)             # <<<<<<<<<<<<<<
  * 
+ *             # Step 3: Induce split.
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 692, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_v_n_features = __pyx_t_6;
+    __pyx_v_E = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential(__pyx_v_new_rate, (&__pyx_v_random_state));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":696
- * 
- *         # Initialize output
- *         cdef np.ndarray[SIZE_t] out = np.zeros((n_samples,), dtype=np.intp)             # <<<<<<<<<<<<<<
- *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data
+    /* "skgarden/mondrian/tree/_tree.pyx":738
+ *             # 2. A parent node with the new child node and the node at
+ *             # curr_id as children.
+ *             if (tau_parent + E < curr_node.tau and             # <<<<<<<<<<<<<<
+ *                 curr_node.n_node_samples + 1 >= min_samples_split):
  * 
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
-  __pyx_t_4 = 0;
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_GIVEREF(__pyx_t_3);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
-  __pyx_t_3 = 0;
-  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_intp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
-  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 696, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 696, __pyx_L1_error)
-  __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_out.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_out = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_out.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 696, __pyx_L1_error)
-    } else {__pyx_pybuffernd_out.diminfo[0].strides = __pyx_pybuffernd_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_out.diminfo[0].shape = __pyx_pybuffernd_out.rcbuffer->pybuffer.shape[0];
+    __pyx_t_4 = (((__pyx_v_tau_parent + __pyx_v_E) < __pyx_v_curr_node->tau) != 0);
+    if (__pyx_t_4) {
+    } else {
+      __pyx_t_3 = __pyx_t_4;
+      goto __pyx_L8_bool_binop_done;
     }
-  }
-  __pyx_t_10 = 0;
-  __pyx_v_out = ((PyArrayObject *)__pyx_t_9);
-  __pyx_t_9 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":697
- *         # Initialize output
- *         cdef np.ndarray[SIZE_t] out = np.zeros((n_samples,), dtype=np.intp)
- *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":739
+ *             # curr_id as children.
+ *             if (tau_parent + E < curr_node.tau and
+ *                 curr_node.n_node_samples + 1 >= min_samples_split):             # <<<<<<<<<<<<<<
+ * 
+ *                 new_child_id = self.node_count
+ */
+    __pyx_t_4 = (((__pyx_v_curr_node->n_node_samples + 1) >= __pyx_v_min_samples_split) != 0);
+    __pyx_t_3 = __pyx_t_4;
+    __pyx_L8_bool_binop_done:;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":738
+ *             # 2. A parent node with the new child node and the node at
+ *             # curr_id as children.
+ *             if (tau_parent + E < curr_node.tau and             # <<<<<<<<<<<<<<
+ *                 curr_node.n_node_samples + 1 >= min_samples_split):
  * 
- *         # Initialize auxiliary data-structure
  */
-  __pyx_v_out_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_out->data);
+    if (__pyx_t_3) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":700
+      /* "skgarden/mondrian/tree/_tree.pyx":741
+ *                 curr_node.n_node_samples + 1 >= min_samples_split):
  * 
- *         # Initialize auxiliary data-structure
- *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
- *         cdef SIZE_t i = 0
+ *                 new_child_id = self.node_count             # <<<<<<<<<<<<<<
+ *                 new_parent_id = self.node_count + 1
  * 
  */
-  __pyx_v_node = NULL;
+      __pyx_t_1 = __pyx_v_self->node_count;
+      __pyx_v_new_child_id = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":701
- *         # Initialize auxiliary data-structure
- *         cdef Node* node = NULL
- *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":742
  * 
- *         with nogil:
+ *                 new_child_id = self.node_count
+ *                 new_parent_id = self.node_count + 1             # <<<<<<<<<<<<<<
+ * 
+ *                 # Step 4: Sample delta from a multinomial.
  */
-  __pyx_v_i = 0;
+      __pyx_v_new_parent_id = (__pyx_v_self->node_count + 1);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":703
- *         cdef SIZE_t i = 0
+      /* "skgarden/mondrian/tree/_tree.pyx":745
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             for i in range(n_samples):
- *                 node = self.nodes
+ *                 # Step 4: Sample delta from a multinomial.
+ *                 delta = rand_multinomial(extent, self.n_features, &random_state)             # <<<<<<<<<<<<<<
+ * 
+ *                 # Step 5: Sample xi uniformly between bounds.
  */
-  {
-      #ifdef WITH_THREAD
-      PyThreadState *_save;
-      Py_UNBLOCK_THREADS
-      #endif
-      /*try:*/ {
+      __pyx_v_delta = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial(__pyx_v_extent, __pyx_v_self->n_features, (&__pyx_v_random_state));
 
-        /* "skgarden/mondrian/tree/_tree.pyx":704
+      /* "skgarden/mondrian/tree/_tree.pyx":748
  * 
- *         with nogil:
- *             for i in range(n_samples):             # <<<<<<<<<<<<<<
- *                 node = self.nodes
- *                 # While node not a leaf
+ *                 # Step 5: Sample xi uniformly between bounds.
+ *                 x_val = X_ptr[X_start + delta * X_f_stride]             # <<<<<<<<<<<<<<
+ *                 l_b = curr_node.lower_bounds[delta]
+ *                 u_b = curr_node.upper_bounds[delta]
  */
-        __pyx_t_6 = __pyx_v_n_samples;
-        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
-          __pyx_v_i = __pyx_t_7;
+      __pyx_v_x_val = (__pyx_v_X_ptr[(__pyx_v_X_start + (__pyx_v_delta * __pyx_v_X_f_stride))]);
 
-          /* "skgarden/mondrian/tree/_tree.pyx":705
- *         with nogil:
- *             for i in range(n_samples):
- *                 node = self.nodes             # <<<<<<<<<<<<<<
- *                 # While node not a leaf
- *                 while node.left_child != _TREE_LEAF:
+      /* "skgarden/mondrian/tree/_tree.pyx":749
+ *                 # Step 5: Sample xi uniformly between bounds.
+ *                 x_val = X_ptr[X_start + delta * X_f_stride]
+ *                 l_b = curr_node.lower_bounds[delta]             # <<<<<<<<<<<<<<
+ *                 u_b = curr_node.upper_bounds[delta]
+ *                 if x_val > u_b:
  */
-          __pyx_t_11 = __pyx_v_self->nodes;
-          __pyx_v_node = __pyx_t_11;
+      __pyx_v_l_b = (__pyx_v_curr_node->lower_bounds[__pyx_v_delta]);
 
-          /* "skgarden/mondrian/tree/_tree.pyx":707
- *                 node = self.nodes
- *                 # While node not a leaf
- *                 while node.left_child != _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if X_ptr[X_sample_stride * i +
+      /* "skgarden/mondrian/tree/_tree.pyx":750
+ *                 x_val = X_ptr[X_start + delta * X_f_stride]
+ *                 l_b = curr_node.lower_bounds[delta]
+ *                 u_b = curr_node.upper_bounds[delta]             # <<<<<<<<<<<<<<
+ *                 if x_val > u_b:
+ *                     xi = rand_uniform(u_b, x_val, &random_state)
  */
-          while (1) {
-            __pyx_t_2 = ((__pyx_v_node->left_child != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (!__pyx_t_2) break;
+      __pyx_v_u_b = (__pyx_v_curr_node->upper_bounds[__pyx_v_delta]);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":710
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if X_ptr[X_sample_stride * i +
- *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
- *                     else:
+      /* "skgarden/mondrian/tree/_tree.pyx":751
+ *                 l_b = curr_node.lower_bounds[delta]
+ *                 u_b = curr_node.upper_bounds[delta]
+ *                 if x_val > u_b:             # <<<<<<<<<<<<<<
+ *                     xi = rand_uniform(u_b, x_val, &random_state)
+ *                 else:
  */
-            __pyx_t_2 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
+      __pyx_t_3 = ((__pyx_v_x_val > __pyx_v_u_b) != 0);
+      if (__pyx_t_3) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":709
- *                 while node.left_child != _TREE_LEAF:
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]
+        /* "skgarden/mondrian/tree/_tree.pyx":752
+ *                 u_b = curr_node.upper_bounds[delta]
+ *                 if x_val > u_b:
+ *                     xi = rand_uniform(u_b, x_val, &random_state)             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     xi = rand_uniform(x_val, l_b, &random_state)
  */
-            if (__pyx_t_2) {
+        __pyx_v_xi = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(__pyx_v_u_b, __pyx_v_x_val, (&__pyx_v_random_state));
 
-              /* "skgarden/mondrian/tree/_tree.pyx":711
- *                     if X_ptr[X_sample_stride * i +
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]             # <<<<<<<<<<<<<<
- *                     else:
- *                         node = &self.nodes[node.right_child]
+        /* "skgarden/mondrian/tree/_tree.pyx":751
+ *                 l_b = curr_node.lower_bounds[delta]
+ *                 u_b = curr_node.upper_bounds[delta]
+ *                 if x_val > u_b:             # <<<<<<<<<<<<<<
+ *                     xi = rand_uniform(u_b, x_val, &random_state)
+ *                 else:
  */
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->left_child]));
+        goto __pyx_L10;
+      }
 
-              /* "skgarden/mondrian/tree/_tree.pyx":709
- *                 while node.left_child != _TREE_LEAF:
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]
+      /* "skgarden/mondrian/tree/_tree.pyx":754
+ *                     xi = rand_uniform(u_b, x_val, &random_state)
+ *                 else:
+ *                     xi = rand_uniform(x_val, l_b, &random_state)             # <<<<<<<<<<<<<<
+ * 
+ *                 # Step 7: Split criteria.
  */
-              goto __pyx_L12;
-            }
+      /*else*/ {
+        __pyx_v_xi = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(__pyx_v_x_val, __pyx_v_l_b, (&__pyx_v_random_state));
+      }
+      __pyx_L10:;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":713
- *                         node = &self.nodes[node.left_child]
- *                     else:
- *                         node = &self.nodes[node.right_child]             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":757
  * 
- *                 out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset
+ *                 # Step 7: Split criteria.
+ *                 if x_val < xi:             # <<<<<<<<<<<<<<
+ *                     left_child = new_child_id
+ *                     right_child = curr_id
+ */
+      __pyx_t_3 = ((__pyx_v_x_val < __pyx_v_xi) != 0);
+      if (__pyx_t_3) {
+
+        /* "skgarden/mondrian/tree/_tree.pyx":758
+ *                 # Step 7: Split criteria.
+ *                 if x_val < xi:
+ *                     left_child = new_child_id             # <<<<<<<<<<<<<<
+ *                     right_child = curr_id
+ *                 else:
  */
-            /*else*/ {
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->right_child]));
-            }
-            __pyx_L12:;
-          }
+        __pyx_v_left_child = __pyx_v_new_child_id;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":715
- *                         node = &self.nodes[node.right_child]
- * 
- *                 out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset             # <<<<<<<<<<<<<<
- * 
- *         return out
+        /* "skgarden/mondrian/tree/_tree.pyx":759
+ *                 if x_val < xi:
+ *                     left_child = new_child_id
+ *                     right_child = curr_id             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     left_child = curr_id
  */
-          (__pyx_v_out_ptr[__pyx_v_i]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
-        }
-      }
+        __pyx_v_right_child = __pyx_v_curr_id;
 
-      /* "skgarden/mondrian/tree/_tree.pyx":703
- *         cdef SIZE_t i = 0
+        /* "skgarden/mondrian/tree/_tree.pyx":757
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             for i in range(n_samples):
- *                 node = self.nodes
+ *                 # Step 7: Split criteria.
+ *                 if x_val < xi:             # <<<<<<<<<<<<<<
+ *                     left_child = new_child_id
+ *                     right_child = curr_id
  */
-      /*finally:*/ {
-        /*normal exit:*/{
-          #ifdef WITH_THREAD
-          Py_BLOCK_THREADS
-          #endif
-          goto __pyx_L7;
-        }
-        __pyx_L7:;
+        goto __pyx_L11;
       }
-  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":717
- *                 out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset
- * 
- *         return out             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":761
+ *                     right_child = curr_id
+ *                 else:
+ *                     left_child = curr_id             # <<<<<<<<<<<<<<
+ *                     right_child = new_child_id
  * 
- *     cdef inline np.ndarray _apply_sparse_csr(self, object X):
  */
-  __Pyx_XDECREF(((PyObject *)__pyx_r));
-  __Pyx_INCREF(((PyObject *)__pyx_v_out));
-  __pyx_r = ((PyArrayObject *)__pyx_v_out);
-  goto __pyx_L0;
+      /*else*/ {
+        __pyx_v_left_child = __pyx_v_curr_id;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":675
- * 
+        /* "skgarden/mondrian/tree/_tree.pyx":762
+ *                 else:
+ *                     left_child = curr_id
+ *                     right_child = new_child_id             # <<<<<<<<<<<<<<
  * 
- *     cdef inline np.ndarray _apply_dense(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the terminal region (=leaf node) for each sample in X."""
- * 
- */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_8);
-  __Pyx_XDECREF(__pyx_t_9);
-  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out.rcbuffer->pybuffer);
-  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._apply_dense", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  goto __pyx_L2;
-  __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out.rcbuffer->pybuffer);
-  __pyx_L2:;
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_out);
-  __Pyx_XGIVEREF((PyObject *)__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "skgarden/mondrian/tree/_tree.pyx":719
- *         return out
- * 
- *     cdef inline np.ndarray _apply_sparse_csr(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the terminal region (=leaf node) for each sample in sparse X.
- *         """
+ *                 # Allocate memory for the new parent and child.
  */
+        __pyx_v_right_child = __pyx_v_new_child_id;
+      }
+      __pyx_L11:;
 
-static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_sparse_csr(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
-  PyArrayObject *__pyx_v_X_data_ndarray = 0;
-  PyArrayObject *__pyx_v_X_indices_ndarray = 0;
-  PyArrayObject *__pyx_v_X_indptr_ndarray = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_data;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *__pyx_v_X_indices;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *__pyx_v_X_indptr;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
-  PyArrayObject *__pyx_v_out = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_out_ptr;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_feature_value;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_sample;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t __pyx_v_k;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_feature_to_sample;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_X_data_ndarray;
-  __Pyx_Buffer __pyx_pybuffer_X_data_ndarray;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_X_indices_ndarray;
-  __Pyx_Buffer __pyx_pybuffer_X_indices_ndarray;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_X_indptr_ndarray;
-  __Pyx_Buffer __pyx_pybuffer_X_indptr_ndarray;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_out;
-  __Pyx_Buffer __pyx_pybuffer_out;
-  PyArrayObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_t_2;
-  int __pyx_t_3;
-  PyObject *__pyx_t_4 = NULL;
-  PyObject *__pyx_t_5 = NULL;
-  PyArrayObject *__pyx_t_6 = NULL;
-  PyArrayObject *__pyx_t_7 = NULL;
-  PyArrayObject *__pyx_t_8 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_9;
-  PyObject *__pyx_t_10 = NULL;
-  PyObject *__pyx_t_11 = NULL;
-  PyArrayObject *__pyx_t_12 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_13;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_t_14;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t __pyx_t_15;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t __pyx_t_16;
-  __Pyx_RefNannySetupContext("_apply_sparse_csr", 0);
-  __pyx_pybuffer_X_data_ndarray.pybuffer.buf = NULL;
-  __pyx_pybuffer_X_data_ndarray.refcount = 0;
-  __pyx_pybuffernd_X_data_ndarray.data = NULL;
-  __pyx_pybuffernd_X_data_ndarray.rcbuffer = &__pyx_pybuffer_X_data_ndarray;
-  __pyx_pybuffer_X_indices_ndarray.pybuffer.buf = NULL;
-  __pyx_pybuffer_X_indices_ndarray.refcount = 0;
-  __pyx_pybuffernd_X_indices_ndarray.data = NULL;
-  __pyx_pybuffernd_X_indices_ndarray.rcbuffer = &__pyx_pybuffer_X_indices_ndarray;
-  __pyx_pybuffer_X_indptr_ndarray.pybuffer.buf = NULL;
-  __pyx_pybuffer_X_indptr_ndarray.refcount = 0;
-  __pyx_pybuffernd_X_indptr_ndarray.data = NULL;
-  __pyx_pybuffernd_X_indptr_ndarray.rcbuffer = &__pyx_pybuffer_X_indptr_ndarray;
-  __pyx_pybuffer_out.pybuffer.buf = NULL;
-  __pyx_pybuffer_out.refcount = 0;
-  __pyx_pybuffernd_out.data = NULL;
-  __pyx_pybuffernd_out.rcbuffer = &__pyx_pybuffer_out;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":723
- *         """
- *         # Check input
- *         if not isinstance(X, csr_matrix):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in csr_matrix format, got %s"
- *                              % type(X))
+      /* "skgarden/mondrian/tree/_tree.pyx":767
+ *                 # Store leaf in nodes[self.node_count]
+ *                 # Store parent in nodes[self.node_count + 1]
+ *                 rc = self._resize_c(self.node_count + 2)             # <<<<<<<<<<<<<<
+ *                 if rc == -1:
+ *                     raise MemoryError()
  */
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_IsInstance(__pyx_v_X, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 723, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
-  if (__pyx_t_3) {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":725
- *         if not isinstance(X, csr_matrix):
- *             raise ValueError("X should be in csr_matrix format, got %s"
- *                              % type(X))             # <<<<<<<<<<<<<<
+      __pyx_t_6.__pyx_n = 1;
+      __pyx_t_6.capacity = (__pyx_v_self->node_count + 2);
+      __pyx_t_5 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, &__pyx_t_6); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 767, __pyx_L1_error)
+      __pyx_v_rc = __pyx_t_5;
+
+      /* "skgarden/mondrian/tree/_tree.pyx":768
+ *                 # Store parent in nodes[self.node_count + 1]
+ *                 rc = self._resize_c(self.node_count + 2)
+ *                 if rc == -1:             # <<<<<<<<<<<<<<
+ *                     raise MemoryError()
  * 
- *         if X.dtype != DTYPE:
  */
-    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_csr_matrix_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
+      __pyx_t_3 = ((__pyx_v_rc == -1L) != 0);
+      if (__pyx_t_3) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":724
- *         # Check input
- *         if not isinstance(X, csr_matrix):
- *             raise ValueError("X should be in csr_matrix format, got %s"             # <<<<<<<<<<<<<<
- *                              % type(X))
+        /* "skgarden/mondrian/tree/_tree.pyx":769
+ *                 rc = self._resize_c(self.node_count + 2)
+ *                 if rc == -1:
+ *                     raise MemoryError()             # <<<<<<<<<<<<<<
  * 
+ *                 # xxx: We need to get the pointer to curr_id again
  */
-    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 724, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_GIVEREF(__pyx_t_1);
-    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
-    __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 724, __pyx_L1_error)
+        PyErr_NoMemory(); __PYX_ERR(0, 769, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":723
- *         """
- *         # Check input
- *         if not isinstance(X, csr_matrix):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in csr_matrix format, got %s"
- *                              % type(X))
+        /* "skgarden/mondrian/tree/_tree.pyx":768
+ *                 # Store parent in nodes[self.node_count + 1]
+ *                 rc = self._resize_c(self.node_count + 2)
+ *                 if rc == -1:             # <<<<<<<<<<<<<<
+ *                     raise MemoryError()
+ * 
  */
-  }
+      }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":727
- *                              % type(X))
- * 
- *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
+      /* "skgarden/mondrian/tree/_tree.pyx":773
+ *                 # xxx: We need to get the pointer to curr_id again
+ *                 # because of the resizing above.
+ *                 curr_node = &self.nodes[curr_id]             # <<<<<<<<<<<<<<
  * 
+ *                 # Step 7-8: Create new leaf node j'' and update value.
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 727, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 727, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 727, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (__pyx_t_3) {
+      __pyx_v_curr_node = (&(__pyx_v_self->nodes[__pyx_v_curr_id]));
 
-    /* "skgarden/mondrian/tree/_tree.pyx":728
+      /* "skgarden/mondrian/tree/_tree.pyx":776
  * 
- *         if X.dtype != DTYPE:
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
- * 
- *         # Extract input
+ *                 # Step 7-8: Create new leaf node j'' and update value.
+ *                 self.set_node_attributes(             # <<<<<<<<<<<<<<
+ *                     new_child_id, _TREE_LEAF, _TREE_LEAF, _TREE_UNDEFINED,
+ *                     _TREE_UNDEFINED, INFINITY, 1, 1, 0.0, 0.0, X_start,
  */
-    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __Pyx_GIVEREF(__pyx_t_4);
-    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
-    __pyx_t_4 = 0;
-    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __PYX_ERR(0, 728, __pyx_L1_error)
+      __pyx_t_7.__pyx_n = 2;
+      __pyx_t_7.child_ind = -1;
+      __pyx_t_7.y_start = __pyx_v_y_start;
+      ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->set_node_attributes(__pyx_v_self, __pyx_v_new_child_id, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED, __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED, __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY, 1, 1.0, 0.0, 0.0, __pyx_v_X_start, __pyx_v_X_f_stride, __pyx_v_X_ptr, __pyx_v_y_ptr, &__pyx_t_7); 
 
-    /* "skgarden/mondrian/tree/_tree.pyx":727
- *                              % type(X))
- * 
- *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
- *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
+      /* "skgarden/mondrian/tree/_tree.pyx":782
  * 
+ *                 # Step 6 : Create new parent node j'
+ *                 self.set_node_attributes(             # <<<<<<<<<<<<<<
+ *                     new_parent_id, left_child, right_child, delta, xi,
+ *                     tau_parent + E, curr_node.n_node_samples + 1,
  */
-  }
+      __pyx_t_7.__pyx_n = 1;
+      __pyx_t_7.child_ind = __pyx_v_curr_id;
+      ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->set_node_attributes(__pyx_v_self, __pyx_v_new_parent_id, __pyx_v_left_child, __pyx_v_right_child, __pyx_v_delta, __pyx_v_xi, (__pyx_v_tau_parent + __pyx_v_E), (__pyx_v_curr_node->n_node_samples + 1), (__pyx_v_curr_node->weighted_n_node_samples + 1.0), 0.0, 0.0, __pyx_v_X_start, __pyx_v_X_f_stride, __pyx_v_X_ptr, __pyx_v_y_ptr, &__pyx_t_7); 
 
-  /* "skgarden/mondrian/tree/_tree.pyx":731
+      /* "skgarden/mondrian/tree/_tree.pyx":787
+ *                     curr_node.weighted_n_node_samples + 1, 0.0, 0.0, X_start,
+ *                     X_f_stride, X_ptr, y_ptr, curr_id)
+ *                 self._update_node_info(new_parent_id, curr_id, y_ptr, y_start)             # <<<<<<<<<<<<<<
  * 
- *         # Extract input
- *         cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
+ *                 # New root if curr_id is root.
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 731, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 731, __pyx_L1_error)
-  __pyx_t_6 = ((PyArrayObject *)__pyx_t_4);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_X_data_ndarray = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 731, __pyx_L1_error)
-    } else {__pyx_pybuffernd_X_data_ndarray.diminfo[0].strides = __pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X_data_ndarray.diminfo[0].shape = __pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_6 = 0;
-  __pyx_v_X_data_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+      ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_update_node_info(__pyx_v_self, __pyx_v_new_parent_id, __pyx_v_curr_id, __pyx_v_y_ptr, __pyx_v_y_start);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":732
- *         # Extract input
- *         cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
+      /* "skgarden/mondrian/tree/_tree.pyx":790
  * 
+ *                 # New root if curr_id is root.
+ *                 if curr_id == self.root:             # <<<<<<<<<<<<<<
+ *                     self.root = new_parent_id
+ *                 else:
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 732, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 732, __pyx_L1_error)
-  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_X_indices_ndarray = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 732, __pyx_L1_error)
-    } else {__pyx_pybuffernd_X_indices_ndarray.diminfo[0].strides = __pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X_indices_ndarray.diminfo[0].shape = __pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_7 = 0;
-  __pyx_v_X_indices_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+      __pyx_t_3 = ((__pyx_v_curr_id == __pyx_v_self->root) != 0);
+      if (__pyx_t_3) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":733
- *         cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr             # <<<<<<<<<<<<<<
- * 
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
+        /* "skgarden/mondrian/tree/_tree.pyx":791
+ *                 # New root if curr_id is root.
+ *                 if curr_id == self.root:
+ *                     self.root = new_parent_id             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     # Link to the newly created node j' (new_parent_id)
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_indptr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 733, __pyx_L1_error)
-  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_X_indptr_ndarray = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 733, __pyx_L1_error)
-    } else {__pyx_pybuffernd_X_indptr_ndarray.diminfo[0].strides = __pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X_indptr_ndarray.diminfo[0].shape = __pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_8 = 0;
-  __pyx_v_X_indptr_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+        __pyx_v_self->root = __pyx_v_new_parent_id;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":735
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
+        /* "skgarden/mondrian/tree/_tree.pyx":790
  * 
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data             # <<<<<<<<<<<<<<
- *         cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
+ *                 # New root if curr_id is root.
+ *                 if curr_id == self.root:             # <<<<<<<<<<<<<<
+ *                     self.root = new_parent_id
+ *                 else:
  */
-  __pyx_v_X_data = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_data_ndarray->data);
+        goto __pyx_L13;
+      }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":736
- * 
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
- *         cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data             # <<<<<<<<<<<<<<
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
- * 
+      /* "skgarden/mondrian/tree/_tree.pyx":795
+ *                     # Link to the newly created node j' (new_parent_id)
+ *                     # as the child of the parent of node j (curr_id)
+ *                     parent_node = &self.nodes[parent_id]             # <<<<<<<<<<<<<<
+ *                     if parent_node.left_child == curr_id:
+ *                         parent_node.left_child = new_parent_id
  */
-  __pyx_v_X_indices = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *)__pyx_v_X_indices_ndarray->data);
+      /*else*/ {
+        __pyx_v_parent_node = (&(__pyx_v_self->nodes[__pyx_v_parent_id]));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":737
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
- *         cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data             # <<<<<<<<<<<<<<
- * 
- *         cdef SIZE_t n_samples = X.shape[0]
+        /* "skgarden/mondrian/tree/_tree.pyx":796
+ *                     # as the child of the parent of node j (curr_id)
+ *                     parent_node = &self.nodes[parent_id]
+ *                     if parent_node.left_child == curr_id:             # <<<<<<<<<<<<<<
+ *                         parent_node.left_child = new_parent_id
+ *                     else:
  */
-  __pyx_v_X_indptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *)__pyx_v_X_indptr_ndarray->data);
+        __pyx_t_3 = ((__pyx_v_parent_node->left_child == __pyx_v_curr_id) != 0);
+        if (__pyx_t_3) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":739
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
- * 
- *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_features = X.shape[1]
- * 
+          /* "skgarden/mondrian/tree/_tree.pyx":797
+ *                     parent_node = &self.nodes[parent_id]
+ *                     if parent_node.left_child == curr_id:
+ *                         parent_node.left_child = new_parent_id             # <<<<<<<<<<<<<<
+ *                     else:
+ *                         parent_node.right_child = new_parent_id
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 739, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_n_samples = __pyx_t_9;
+          __pyx_v_parent_node->left_child = __pyx_v_new_parent_id;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":740
- * 
- *         cdef SIZE_t n_samples = X.shape[0]
- *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
- * 
- *         # Initialize output
+          /* "skgarden/mondrian/tree/_tree.pyx":796
+ *                     # as the child of the parent of node j (curr_id)
+ *                     parent_node = &self.nodes[parent_id]
+ *                     if parent_node.left_child == curr_id:             # <<<<<<<<<<<<<<
+ *                         parent_node.left_child = new_parent_id
+ *                     else:
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 740, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_v_n_features = __pyx_t_9;
+          goto __pyx_L14;
+        }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":743
- * 
- *         # Initialize output
- *         cdef np.ndarray[SIZE_t, ndim=1] out = np.zeros((n_samples,),             # <<<<<<<<<<<<<<
- *                                                        dtype=np.intp)
- *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data
+        /* "skgarden/mondrian/tree/_tree.pyx":799
+ *                         parent_node.left_child = new_parent_id
+ *                     else:
+ *                         parent_node.right_child = new_parent_id             # <<<<<<<<<<<<<<
+ *                 self.max_depth += 1
+ *                 self.node_count += 2
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 743, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 743, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 743, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
-  __pyx_t_4 = 0;
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 743, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_GIVEREF(__pyx_t_1);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
-  __pyx_t_1 = 0;
+        /*else*/ {
+          __pyx_v_parent_node->right_child = __pyx_v_new_parent_id;
+        }
+        __pyx_L14:;
+      }
+      __pyx_L13:;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":744
- *         # Initialize output
- *         cdef np.ndarray[SIZE_t, ndim=1] out = np.zeros((n_samples,),
- *                                                        dtype=np.intp)             # <<<<<<<<<<<<<<
- *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data
- * 
+      /* "skgarden/mondrian/tree/_tree.pyx":800
+ *                     else:
+ *                         parent_node.right_child = new_parent_id
+ *                 self.max_depth += 1             # <<<<<<<<<<<<<<
+ *                 self.node_count += 2
+ *                 break
  */
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 744, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_intp); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 744, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
+      __pyx_v_self->max_depth = (__pyx_v_self->max_depth + 1);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":743
+      /* "skgarden/mondrian/tree/_tree.pyx":801
+ *                         parent_node.right_child = new_parent_id
+ *                 self.max_depth += 1
+ *                 self.node_count += 2             # <<<<<<<<<<<<<<
+ *                 break
  * 
- *         # Initialize output
- *         cdef np.ndarray[SIZE_t, ndim=1] out = np.zeros((n_samples,),             # <<<<<<<<<<<<<<
- *                                                        dtype=np.intp)
- *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data
  */
-  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 743, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 743, __pyx_L1_error)
-  __pyx_t_12 = ((PyArrayObject *)__pyx_t_11);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_out.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_out = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_out.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 743, __pyx_L1_error)
-    } else {__pyx_pybuffernd_out.diminfo[0].strides = __pyx_pybuffernd_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_out.diminfo[0].shape = __pyx_pybuffernd_out.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_12 = 0;
-  __pyx_v_out = ((PyArrayObject *)__pyx_t_11);
-  __pyx_t_11 = 0;
+      __pyx_v_self->node_count = (__pyx_v_self->node_count + 2);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":745
- *         cdef np.ndarray[SIZE_t, ndim=1] out = np.zeros((n_samples,),
- *                                                        dtype=np.intp)
- *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":802
+ *                 self.max_depth += 1
+ *                 self.node_count += 2
+ *                 break             # <<<<<<<<<<<<<<
  * 
- *         # Initialize auxiliary data-structure
+ *             # Absorb new sample into curr_id and Traverse further down the
  */
-  __pyx_v_out_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_out->data);
+      goto __pyx_L4_break;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":748
+      /* "skgarden/mondrian/tree/_tree.pyx":738
+ *             # 2. A parent node with the new child node and the node at
+ *             # curr_id as children.
+ *             if (tau_parent + E < curr_node.tau and             # <<<<<<<<<<<<<<
+ *                 curr_node.n_node_samples + 1 >= min_samples_split):
  * 
- *         # Initialize auxiliary data-structure
- *         cdef DTYPE_t feature_value = 0.             # <<<<<<<<<<<<<<
- *         cdef Node* node = NULL
- *         cdef DTYPE_t* X_sample = NULL
  */
-  __pyx_v_feature_value = 0.;
+    }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":749
- *         # Initialize auxiliary data-structure
- *         cdef DTYPE_t feature_value = 0.
- *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
- *         cdef DTYPE_t* X_sample = NULL
- *         cdef SIZE_t i = 0
+    /* "skgarden/mondrian/tree/_tree.pyx":809
+ *                 # Step 10: Update extent, value at node curr_id and increment
+ *                 # the number of samples.
+ *                 self.update_node_extent(curr_id, curr_id, X_ptr, X_start, X_f_stride)             # <<<<<<<<<<<<<<
+ *                 self._update_node_info(curr_id, curr_id, y_ptr, y_start)
+ *                 curr_node.n_node_samples += 1
  */
-  __pyx_v_node = NULL;
+    /*else*/ {
+      ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->update_node_extent(__pyx_v_self, __pyx_v_curr_id, __pyx_v_curr_id, __pyx_v_X_ptr, __pyx_v_X_start, __pyx_v_X_f_stride);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":750
- *         cdef DTYPE_t feature_value = 0.
- *         cdef Node* node = NULL
- *         cdef DTYPE_t* X_sample = NULL             # <<<<<<<<<<<<<<
- *         cdef SIZE_t i = 0
- *         cdef INT32_t k = 0
+      /* "skgarden/mondrian/tree/_tree.pyx":810
+ *                 # the number of samples.
+ *                 self.update_node_extent(curr_id, curr_id, X_ptr, X_start, X_f_stride)
+ *                 self._update_node_info(curr_id, curr_id, y_ptr, y_start)             # <<<<<<<<<<<<<<
+ *                 curr_node.n_node_samples += 1
+ *                 curr_node.weighted_n_node_samples += 1
  */
-  __pyx_v_X_sample = NULL;
+      ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_update_node_info(__pyx_v_self, __pyx_v_curr_id, __pyx_v_curr_id, __pyx_v_y_ptr, __pyx_v_y_start);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":751
- *         cdef Node* node = NULL
- *         cdef DTYPE_t* X_sample = NULL
- *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
- *         cdef INT32_t k = 0
+      /* "skgarden/mondrian/tree/_tree.pyx":811
+ *                 self.update_node_extent(curr_id, curr_id, X_ptr, X_start, X_f_stride)
+ *                 self._update_node_info(curr_id, curr_id, y_ptr, y_start)
+ *                 curr_node.n_node_samples += 1             # <<<<<<<<<<<<<<
+ *                 curr_node.weighted_n_node_samples += 1
  * 
  */
-  __pyx_v_i = 0;
+      __pyx_v_curr_node->n_node_samples = (__pyx_v_curr_node->n_node_samples + 1);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":752
- *         cdef DTYPE_t* X_sample = NULL
- *         cdef SIZE_t i = 0
- *         cdef INT32_t k = 0             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":812
+ *                 self._update_node_info(curr_id, curr_id, y_ptr, y_start)
+ *                 curr_node.n_node_samples += 1
+ *                 curr_node.weighted_n_node_samples += 1             # <<<<<<<<<<<<<<
  * 
- *         # feature_to_sample as a data structure records the last seen sample
+ *                 if curr_node.left_child == -1:
  */
-  __pyx_v_k = 0;
+      __pyx_v_curr_node->weighted_n_node_samples = (__pyx_v_curr_node->weighted_n_node_samples + 1.0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":757
- *         # for each feature; functionally, it is an efficient way to identify
- *         # which features are nonzero in the present sample.
- *         cdef SIZE_t* feature_to_sample = NULL             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":814
+ *                 curr_node.weighted_n_node_samples += 1
+ * 
+ *                 if curr_node.left_child == -1:             # <<<<<<<<<<<<<<
+ *                     break
  * 
- *         safe_realloc(&X_sample, n_features)
  */
-  __pyx_v_feature_to_sample = NULL;
+      __pyx_t_3 = ((__pyx_v_curr_node->left_child == -1L) != 0);
+      if (__pyx_t_3) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":759
- *         cdef SIZE_t* feature_to_sample = NULL
+        /* "skgarden/mondrian/tree/_tree.pyx":815
  * 
- *         safe_realloc(&X_sample, n_features)             # <<<<<<<<<<<<<<
- *         safe_realloc(&feature_to_sample, n_features)
+ *                 if curr_node.left_child == -1:
+ *                     break             # <<<<<<<<<<<<<<
  * 
+ *                 # Step 12 - 13: Recurse down the tree.
  */
-  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_X_sample), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L1_error)
+        goto __pyx_L4_break;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":760
+        /* "skgarden/mondrian/tree/_tree.pyx":814
+ *                 curr_node.weighted_n_node_samples += 1
  * 
- *         safe_realloc(&X_sample, n_features)
- *         safe_realloc(&feature_to_sample, n_features)             # <<<<<<<<<<<<<<
+ *                 if curr_node.left_child == -1:             # <<<<<<<<<<<<<<
+ *                     break
  * 
- *         with nogil:
  */
-  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_feature_to_sample), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
+      }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":762
- *         safe_realloc(&feature_to_sample, n_features)
- * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
+      /* "skgarden/mondrian/tree/_tree.pyx":818
  * 
+ *                 # Step 12 - 13: Recurse down the tree.
+ *                 parent_id = curr_id             # <<<<<<<<<<<<<<
+ *                 if X_ptr[X_start + curr_node.feature*X_f_stride] < curr_node.threshold:
+ *                     curr_id = curr_node.left_child
+ */
+      __pyx_v_parent_id = __pyx_v_curr_id;
+
+      /* "skgarden/mondrian/tree/_tree.pyx":819
+ *                 # Step 12 - 13: Recurse down the tree.
+ *                 parent_id = curr_id
+ *                 if X_ptr[X_start + curr_node.feature*X_f_stride] < curr_node.threshold:             # <<<<<<<<<<<<<<
+ *                     curr_id = curr_node.left_child
+ *                 else:
  */
-  {
-      #ifdef WITH_THREAD
-      PyThreadState *_save;
-      Py_UNBLOCK_THREADS
-      #endif
-      /*try:*/ {
+      __pyx_t_3 = (((__pyx_v_X_ptr[(__pyx_v_X_start + (__pyx_v_curr_node->feature * __pyx_v_X_f_stride))]) < __pyx_v_curr_node->threshold) != 0);
+      if (__pyx_t_3) {
 
-        /* "skgarden/mondrian/tree/_tree.pyx":763
- * 
- *         with nogil:
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))             # <<<<<<<<<<<<<<
- * 
- *             for i in range(n_samples):
+        /* "skgarden/mondrian/tree/_tree.pyx":820
+ *                 parent_id = curr_id
+ *                 if X_ptr[X_start + curr_node.feature*X_f_stride] < curr_node.threshold:
+ *                     curr_id = curr_node.left_child             # <<<<<<<<<<<<<<
+ *                 else:
+ *                     curr_id = curr_node.right_child
  */
-        memset(__pyx_v_feature_to_sample, -1, (__pyx_v_n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t))));
+        __pyx_t_1 = __pyx_v_curr_node->left_child;
+        __pyx_v_curr_id = __pyx_t_1;
 
-        /* "skgarden/mondrian/tree/_tree.pyx":765
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
- * 
- *             for i in range(n_samples):             # <<<<<<<<<<<<<<
- *                 node = self.nodes
- * 
+        /* "skgarden/mondrian/tree/_tree.pyx":819
+ *                 # Step 12 - 13: Recurse down the tree.
+ *                 parent_id = curr_id
+ *                 if X_ptr[X_start + curr_node.feature*X_f_stride] < curr_node.threshold:             # <<<<<<<<<<<<<<
+ *                     curr_id = curr_node.left_child
+ *                 else:
  */
-        __pyx_t_9 = __pyx_v_n_samples;
-        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_9; __pyx_t_13+=1) {
-          __pyx_v_i = __pyx_t_13;
+        goto __pyx_L16;
+      }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":766
- * 
- *             for i in range(n_samples):
- *                 node = self.nodes             # <<<<<<<<<<<<<<
- * 
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):
+      /* "skgarden/mondrian/tree/_tree.pyx":822
+ *                     curr_id = curr_node.left_child
+ *                 else:
+ *                     curr_id = curr_node.right_child             # <<<<<<<<<<<<<<
+ *                 tau_parent = curr_node.tau
+ *         free(e_l)
  */
-          __pyx_t_14 = __pyx_v_self->nodes;
-          __pyx_v_node = __pyx_t_14;
+      /*else*/ {
+        __pyx_t_1 = __pyx_v_curr_node->right_child;
+        __pyx_v_curr_id = __pyx_t_1;
+      }
+      __pyx_L16:;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":768
- *                 node = self.nodes
- * 
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):             # <<<<<<<<<<<<<<
- *                     feature_to_sample[X_indices[k]] = i
- *                     X_sample[X_indices[k]] = X_data[k]
+      /* "skgarden/mondrian/tree/_tree.pyx":823
+ *                 else:
+ *                     curr_id = curr_node.right_child
+ *                 tau_parent = curr_node.tau             # <<<<<<<<<<<<<<
+ *         free(e_l)
+ *         free(e_u)
  */
-          __pyx_t_15 = (__pyx_v_X_indptr[(__pyx_v_i + 1)]);
-          for (__pyx_t_16 = (__pyx_v_X_indptr[__pyx_v_i]); __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
-            __pyx_v_k = __pyx_t_16;
+      __pyx_t_8 = __pyx_v_curr_node->tau;
+      __pyx_v_tau_parent = __pyx_t_8;
+    }
+  }
+  __pyx_L4_break:;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":824
+ *                     curr_id = curr_node.right_child
+ *                 tau_parent = curr_node.tau
+ *         free(e_l)             # <<<<<<<<<<<<<<
+ *         free(e_u)
+ *         free(extent)
+ */
+  free(__pyx_v_e_l);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":769
+  /* "skgarden/mondrian/tree/_tree.pyx":825
+ *                 tau_parent = curr_node.tau
+ *         free(e_l)
+ *         free(e_u)             # <<<<<<<<<<<<<<
+ *         free(extent)
  * 
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):
- *                     feature_to_sample[X_indices[k]] = i             # <<<<<<<<<<<<<<
- *                     X_sample[X_indices[k]] = X_data[k]
+ */
+  free(__pyx_v_e_u);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":826
+ *         free(e_l)
+ *         free(e_u)
+ *         free(extent)             # <<<<<<<<<<<<<<
  * 
+ *     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,
  */
-            (__pyx_v_feature_to_sample[(__pyx_v_X_indices[__pyx_v_k])]) = __pyx_v_i;
+  free(__pyx_v_extent);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":770
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):
- *                     feature_to_sample[X_indices[k]] = i
- *                     X_sample[X_indices[k]] = X_data[k]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":675
+ *         self.node_count += 1
  * 
- *                 # While node not a leaf
+ *     cdef void extend(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_start,             # <<<<<<<<<<<<<<
+ *                      SIZE_t X_f_stride, SIZE_t y_start, UINT32_t random_state,
+ *                      SIZE_t min_samples_split):
  */
-            (__pyx_v_X_sample[(__pyx_v_X_indices[__pyx_v_k])]) = (__pyx_v_X_data[__pyx_v_k]);
-          }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":773
+  /* function exit code */
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_WriteUnraisable("skgarden.mondrian.tree._tree.Tree.extend", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
+  __pyx_L0:;
+  __Pyx_RefNannyFinishContext();
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":828
+ *         free(extent)
  * 
- *                 # While node not a leaf
- *                 while node.left_child != _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if feature_to_sample[node.feature] == i:
+ *     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,             # <<<<<<<<<<<<<<
+ *                           SIZE_t feature, double threshold, double impurity,
+ *                           SIZE_t n_node_samples,
  */
-          while (1) {
-            __pyx_t_3 = ((__pyx_v_node->left_child != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (!__pyx_t_3) break;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":775
- *                 while node.left_child != _TREE_LEAF:
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if feature_to_sample[node.feature] == i:             # <<<<<<<<<<<<<<
- *                         feature_value = X_sample[node.feature]
+static __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__add_node(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_parent, int __pyx_v_is_left, int __pyx_v_is_leaf, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_feature, double __pyx_v_threshold, double __pyx_v_impurity, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_node_samples, double __pyx_v_weighted_n_node_samples, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_lower_bounds, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_upper_bounds, double __pyx_v_E) {
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_id;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_r;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
+  int __pyx_t_2;
+  int __pyx_t_3;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":841
+ *         Returns (size_t)(-1) on error.
+ *         """
+ *         cdef SIZE_t node_id = self.node_count             # <<<<<<<<<<<<<<
  * 
+ *         if node_id >= self.capacity:
  */
-            __pyx_t_3 = (((__pyx_v_feature_to_sample[__pyx_v_node->feature]) == __pyx_v_i) != 0);
-            if (__pyx_t_3) {
+  __pyx_t_1 = __pyx_v_self->node_count;
+  __pyx_v_node_id = __pyx_t_1;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":776
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if feature_to_sample[node.feature] == i:
- *                         feature_value = X_sample[node.feature]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":843
+ *         cdef SIZE_t node_id = self.node_count
  * 
- *                     else:
+ *         if node_id >= self.capacity:             # <<<<<<<<<<<<<<
+ *             if self._resize_c() != 0:
+ *                 return <SIZE_t>(-1)
  */
-              __pyx_v_feature_value = (__pyx_v_X_sample[__pyx_v_node->feature]);
+  __pyx_t_2 = ((__pyx_v_node_id >= __pyx_v_self->capacity) != 0);
+  if (__pyx_t_2) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":775
- *                 while node.left_child != _TREE_LEAF:
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     if feature_to_sample[node.feature] == i:             # <<<<<<<<<<<<<<
- *                         feature_value = X_sample[node.feature]
+    /* "skgarden/mondrian/tree/_tree.pyx":844
+ * 
+ *         if node_id >= self.capacity:
+ *             if self._resize_c() != 0:             # <<<<<<<<<<<<<<
+ *                 return <SIZE_t>(-1)
  * 
  */
-              goto __pyx_L14;
-            }
+    __pyx_t_3 = ((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_resize_c(__pyx_v_self, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 844, __pyx_L1_error)
+    __pyx_t_2 = ((__pyx_t_3 != 0) != 0);
+    if (__pyx_t_2) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":779
- * 
- *                     else:
- *                         feature_value = 0.             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":845
+ *         if node_id >= self.capacity:
+ *             if self._resize_c() != 0:
+ *                 return <SIZE_t>(-1)             # <<<<<<<<<<<<<<
  * 
- *                     if feature_value <= node.threshold:
+ *         cdef Node* node = &self.nodes[node_id]
  */
-            /*else*/ {
-              __pyx_v_feature_value = 0.;
-            }
-            __pyx_L14:;
+      __pyx_r = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L);
+      goto __pyx_L0;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":781
- *                         feature_value = 0.
+      /* "skgarden/mondrian/tree/_tree.pyx":844
+ * 
+ *         if node_id >= self.capacity:
+ *             if self._resize_c() != 0:             # <<<<<<<<<<<<<<
+ *                 return <SIZE_t>(-1)
  * 
- *                     if feature_value <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
- *                     else:
  */
-            __pyx_t_3 = ((__pyx_v_feature_value <= __pyx_v_node->threshold) != 0);
-            if (__pyx_t_3) {
+    }
 
-              /* "skgarden/mondrian/tree/_tree.pyx":782
+    /* "skgarden/mondrian/tree/_tree.pyx":843
+ *         cdef SIZE_t node_id = self.node_count
  * 
- *                     if feature_value <= node.threshold:
- *                         node = &self.nodes[node.left_child]             # <<<<<<<<<<<<<<
- *                     else:
- *                         node = &self.nodes[node.right_child]
+ *         if node_id >= self.capacity:             # <<<<<<<<<<<<<<
+ *             if self._resize_c() != 0:
+ *                 return <SIZE_t>(-1)
  */
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->left_child]));
+  }
 
-              /* "skgarden/mondrian/tree/_tree.pyx":781
- *                         feature_value = 0.
+  /* "skgarden/mondrian/tree/_tree.pyx":847
+ *                 return <SIZE_t>(-1)
  * 
- *                     if feature_value <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
- *                     else:
+ *         cdef Node* node = &self.nodes[node_id]             # <<<<<<<<<<<<<<
+ *         node.impurity = impurity
+ *         node.n_node_samples = n_node_samples
  */
-              goto __pyx_L15;
-            }
+  __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node_id]));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":784
- *                         node = &self.nodes[node.left_child]
- *                     else:
- *                         node = &self.nodes[node.right_child]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":848
  * 
- *                 out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset
+ *         cdef Node* node = &self.nodes[node_id]
+ *         node.impurity = impurity             # <<<<<<<<<<<<<<
+ *         node.n_node_samples = n_node_samples
+ *         node.weighted_n_node_samples = weighted_n_node_samples
  */
-            /*else*/ {
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->right_child]));
-            }
-            __pyx_L15:;
-          }
+  __pyx_v_node->impurity = __pyx_v_impurity;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":786
- *                         node = &self.nodes[node.right_child]
+  /* "skgarden/mondrian/tree/_tree.pyx":849
+ *         cdef Node* node = &self.nodes[node_id]
+ *         node.impurity = impurity
+ *         node.n_node_samples = n_node_samples             # <<<<<<<<<<<<<<
+ *         node.weighted_n_node_samples = weighted_n_node_samples
  * 
- *                 out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset             # <<<<<<<<<<<<<<
+ */
+  __pyx_v_node->n_node_samples = __pyx_v_n_node_samples;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":850
+ *         node.impurity = impurity
+ *         node.n_node_samples = n_node_samples
+ *         node.weighted_n_node_samples = weighted_n_node_samples             # <<<<<<<<<<<<<<
  * 
- *             # Free auxiliary arrays
+ *         if parent != _TREE_UNDEFINED:
  */
-          (__pyx_v_out_ptr[__pyx_v_i]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
-        }
+  __pyx_v_node->weighted_n_node_samples = __pyx_v_weighted_n_node_samples;
 
-        /* "skgarden/mondrian/tree/_tree.pyx":789
+  /* "skgarden/mondrian/tree/_tree.pyx":852
+ *         node.weighted_n_node_samples = weighted_n_node_samples
  * 
- *             # Free auxiliary arrays
- *             free(X_sample)             # <<<<<<<<<<<<<<
- *             free(feature_to_sample)
+ *         if parent != _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
+ *             if is_left:
+ *                 self.nodes[parent].left_child = node_id
+ */
+  __pyx_t_2 = ((__pyx_v_parent != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED) != 0);
+  if (__pyx_t_2) {
+
+    /* "skgarden/mondrian/tree/_tree.pyx":853
  * 
+ *         if parent != _TREE_UNDEFINED:
+ *             if is_left:             # <<<<<<<<<<<<<<
+ *                 self.nodes[parent].left_child = node_id
+ *             else:
  */
-        free(__pyx_v_X_sample);
+    __pyx_t_2 = (__pyx_v_is_left != 0);
+    if (__pyx_t_2) {
 
-        /* "skgarden/mondrian/tree/_tree.pyx":790
- *             # Free auxiliary arrays
- *             free(X_sample)
- *             free(feature_to_sample)             # <<<<<<<<<<<<<<
+      /* "skgarden/mondrian/tree/_tree.pyx":854
+ *         if parent != _TREE_UNDEFINED:
+ *             if is_left:
+ *                 self.nodes[parent].left_child = node_id             # <<<<<<<<<<<<<<
+ *             else:
+ *                 self.nodes[parent].right_child = node_id
+ */
+      (__pyx_v_self->nodes[__pyx_v_parent]).left_child = __pyx_v_node_id;
+
+      /* "skgarden/mondrian/tree/_tree.pyx":853
  * 
- *         return out
+ *         if parent != _TREE_UNDEFINED:
+ *             if is_left:             # <<<<<<<<<<<<<<
+ *                 self.nodes[parent].left_child = node_id
+ *             else:
  */
-        free(__pyx_v_feature_to_sample);
-      }
+      goto __pyx_L6;
+    }
 
-      /* "skgarden/mondrian/tree/_tree.pyx":762
- *         safe_realloc(&feature_to_sample, n_features)
+    /* "skgarden/mondrian/tree/_tree.pyx":856
+ *                 self.nodes[parent].left_child = node_id
+ *             else:
+ *                 self.nodes[parent].right_child = node_id             # <<<<<<<<<<<<<<
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
+ *         if parent == _TREE_UNDEFINED:
+ */
+    /*else*/ {
+      (__pyx_v_self->nodes[__pyx_v_parent]).right_child = __pyx_v_node_id;
+    }
+    __pyx_L6:;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":852
+ *         node.weighted_n_node_samples = weighted_n_node_samples
  * 
+ *         if parent != _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
+ *             if is_left:
+ *                 self.nodes[parent].left_child = node_id
  */
-      /*finally:*/ {
-        /*normal exit:*/{
-          #ifdef WITH_THREAD
-          Py_BLOCK_THREADS
-          #endif
-          goto __pyx_L7;
-        }
-        __pyx_L7:;
-      }
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":792
- *             free(feature_to_sample)
+  /* "skgarden/mondrian/tree/_tree.pyx":858
+ *                 self.nodes[parent].right_child = node_id
  * 
- *         return out             # <<<<<<<<<<<<<<
+ *         if parent == _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
+ *             node.tau = E
+ *         elif is_leaf:
+ */
+  __pyx_t_2 = ((__pyx_v_parent == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED) != 0);
+  if (__pyx_t_2) {
+
+    /* "skgarden/mondrian/tree/_tree.pyx":859
  * 
- *     cpdef object decision_path(self, object X):
+ *         if parent == _TREE_UNDEFINED:
+ *             node.tau = E             # <<<<<<<<<<<<<<
+ *         elif is_leaf:
+ *             node.tau = INFINITY
  */
-  __Pyx_XDECREF(((PyObject *)__pyx_r));
-  __Pyx_INCREF(((PyObject *)__pyx_v_out));
-  __pyx_r = ((PyArrayObject *)__pyx_v_out);
-  goto __pyx_L0;
+    __pyx_v_node->tau = __pyx_v_E;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":719
- *         return out
+    /* "skgarden/mondrian/tree/_tree.pyx":858
+ *                 self.nodes[parent].right_child = node_id
  * 
- *     cdef inline np.ndarray _apply_sparse_csr(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the terminal region (=leaf node) for each sample in sparse X.
- *         """
+ *         if parent == _TREE_UNDEFINED:             # <<<<<<<<<<<<<<
+ *             node.tau = E
+ *         elif is_leaf:
  */
+    goto __pyx_L7;
+  }
 
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_10);
-  __Pyx_XDECREF(__pyx_t_11);
-  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out.rcbuffer->pybuffer);
-  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._apply_sparse_csr", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  goto __pyx_L2;
-  __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out.rcbuffer->pybuffer);
-  __pyx_L2:;
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_data_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_indices_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_indptr_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_out);
-  __Pyx_XGIVEREF((PyObject *)__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+  /* "skgarden/mondrian/tree/_tree.pyx":860
+ *         if parent == _TREE_UNDEFINED:
+ *             node.tau = E
+ *         elif is_leaf:             # <<<<<<<<<<<<<<
+ *             node.tau = INFINITY
+ *         else:
+ */
+  __pyx_t_2 = (__pyx_v_is_leaf != 0);
+  if (__pyx_t_2) {
 
-/* "skgarden/mondrian/tree/_tree.pyx":794
- *         return out
- * 
- *     cpdef object decision_path(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the decision path (=node) for each sample in X."""
- *         if issparse(X):
+    /* "skgarden/mondrian/tree/_tree.pyx":861
+ *             node.tau = E
+ *         elif is_leaf:
+ *             node.tau = INFINITY             # <<<<<<<<<<<<<<
+ *         else:
+ *             node.tau = E + self.nodes[parent].tau
  */
+    __pyx_v_node->tau = __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY;
 
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  PyObject *__pyx_t_5 = NULL;
-  int __pyx_t_6;
-  __Pyx_RefNannySetupContext("decision_path", 0);
-  /* Check if called by wrapper */
+    /* "skgarden/mondrian/tree/_tree.pyx":860
+ *         if parent == _TREE_UNDEFINED:
+ *             node.tau = E
+ *         elif is_leaf:             # <<<<<<<<<<<<<<
+ *             node.tau = INFINITY
+ *         else:
+ */
+    goto __pyx_L7;
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":863
+ *             node.tau = INFINITY
+ *         else:
+ *             node.tau = E + self.nodes[parent].tau             # <<<<<<<<<<<<<<
+ * 
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ */
+  /*else*/ {
+    __pyx_v_node->tau = (__pyx_v_E + (__pyx_v_self->nodes[__pyx_v_parent]).tau);
+  }
+  __pyx_L7:;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":865
+ *             node.tau = E + self.nodes[parent].tau
+ * 
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
+ */
+  __pyx_v_node->lower_bounds = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":866
+ * 
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
+ *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))
+ */
+  __pyx_v_node->upper_bounds = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)malloc((__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t)))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":867
+ *         node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))
+ *         node.variance = impurity
+ */
+  memcpy(__pyx_v_node->lower_bounds, __pyx_v_lower_bounds, (__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":868
+ *         node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+ *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
+ *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *         node.variance = impurity
+ * 
+ */
+  memcpy(__pyx_v_node->upper_bounds, __pyx_v_upper_bounds, (__pyx_v_self->n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t))));
+
+  /* "skgarden/mondrian/tree/_tree.pyx":869
+ *         memcpy(node.lower_bounds, lower_bounds, self.n_features*sizeof(DTYPE_t))
+ *         memcpy(node.upper_bounds, upper_bounds, self.n_features*sizeof(DTYPE_t))
+ *         node.variance = impurity             # <<<<<<<<<<<<<<
+ * 
+ *         if is_leaf:
+ */
+  __pyx_v_node->variance = __pyx_v_impurity;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":871
+ *         node.variance = impurity
+ * 
+ *         if is_leaf:             # <<<<<<<<<<<<<<
+ *             node.left_child = _TREE_LEAF
+ *             node.right_child = _TREE_LEAF
+ */
+  __pyx_t_2 = (__pyx_v_is_leaf != 0);
+  if (__pyx_t_2) {
+
+    /* "skgarden/mondrian/tree/_tree.pyx":872
+ * 
+ *         if is_leaf:
+ *             node.left_child = _TREE_LEAF             # <<<<<<<<<<<<<<
+ *             node.right_child = _TREE_LEAF
+ *             node.feature = _TREE_UNDEFINED
+ */
+    __pyx_v_node->left_child = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":873
+ *         if is_leaf:
+ *             node.left_child = _TREE_LEAF
+ *             node.right_child = _TREE_LEAF             # <<<<<<<<<<<<<<
+ *             node.feature = _TREE_UNDEFINED
+ *             node.threshold = _TREE_UNDEFINED
+ */
+    __pyx_v_node->right_child = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":874
+ *             node.left_child = _TREE_LEAF
+ *             node.right_child = _TREE_LEAF
+ *             node.feature = _TREE_UNDEFINED             # <<<<<<<<<<<<<<
+ *             node.threshold = _TREE_UNDEFINED
+ *         else:
+ */
+    __pyx_v_node->feature = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":875
+ *             node.right_child = _TREE_LEAF
+ *             node.feature = _TREE_UNDEFINED
+ *             node.threshold = _TREE_UNDEFINED             # <<<<<<<<<<<<<<
+ *         else:
+ *             # left_child and right_child will be set later
+ */
+    __pyx_v_node->threshold = __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":871
+ *         node.variance = impurity
+ * 
+ *         if is_leaf:             # <<<<<<<<<<<<<<
+ *             node.left_child = _TREE_LEAF
+ *             node.right_child = _TREE_LEAF
+ */
+    goto __pyx_L8;
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":878
+ *         else:
+ *             # left_child and right_child will be set later
+ *             node.feature = feature             # <<<<<<<<<<<<<<
+ *             node.threshold = threshold
+ *         self.node_count += 1
+ */
+  /*else*/ {
+    __pyx_v_node->feature = __pyx_v_feature;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":879
+ *             # left_child and right_child will be set later
+ *             node.feature = feature
+ *             node.threshold = threshold             # <<<<<<<<<<<<<<
+ *         self.node_count += 1
+ *         return node_id
+ */
+    __pyx_v_node->threshold = __pyx_v_threshold;
+  }
+  __pyx_L8:;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":880
+ *             node.feature = feature
+ *             node.threshold = threshold
+ *         self.node_count += 1             # <<<<<<<<<<<<<<
+ *         return node_id
+ * 
+ */
+  __pyx_v_self->node_count = (__pyx_v_self->node_count + 1);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":881
+ *             node.threshold = threshold
+ *         self.node_count += 1
+ *         return node_id             # <<<<<<<<<<<<<<
+ * 
+ *     cpdef np.ndarray apply(self, object X):
+ */
+  __pyx_r = __pyx_v_node_id;
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":828
+ *         free(extent)
+ * 
+ *     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,             # <<<<<<<<<<<<<<
+ *                           SIZE_t feature, double threshold, double impurity,
+ *                           SIZE_t n_node_samples,
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  {
+    #ifdef WITH_THREAD
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
+    #endif
+    __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
+    #ifdef WITH_THREAD
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
+    #endif
+  }
+  __pyx_r = -1;
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":883
+ *         return node_id
+ * 
+ *     cpdef np.ndarray apply(self, object X):             # <<<<<<<<<<<<<<
+ *         """Finds the terminal region (=leaf node) for each sample in X."""
+ *         return self._apply_dense(X)
+ */
+
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
+static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_apply(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
+  PyArrayObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  __Pyx_RefNannySetupContext("apply", 0);
+  /* Check if called by wrapper */
   if (unlikely(__pyx_skip_dispatch)) ;
   /* Check if overridden in Python */
   else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_decision_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_apply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
-    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path)) {
-      __Pyx_XDECREF(__pyx_r);
+    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply)) {
+      __Pyx_XDECREF(((PyObject *)__pyx_r));
       __Pyx_INCREF(__pyx_t_1);
       __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
       if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
@@ -10173,13 +10391,13 @@
         }
       }
       if (!__pyx_t_4) {
-        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
+        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_2);
       } else {
         #if CYTHON_FAST_PYCALL
         if (PyFunction_Check(__pyx_t_3)) {
           PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
-          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
+          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
           __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
           __Pyx_GOTREF(__pyx_t_2);
         } else
@@ -10187,25 +10405,26 @@
         #if CYTHON_FAST_PYCCALL
         if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
           PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
-          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
+          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
           __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
           __Pyx_GOTREF(__pyx_t_2);
         } else
         #endif
         {
-          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
+          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 883, __pyx_L1_error)
           __Pyx_GOTREF(__pyx_t_5);
           __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
           __Pyx_INCREF(__pyx_v_X);
           __Pyx_GIVEREF(__pyx_v_X);
           PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
-          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
+          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
           __Pyx_GOTREF(__pyx_t_2);
           __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
         }
       }
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_r = __pyx_t_2;
+      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 883, __pyx_L1_error)
+      __pyx_r = ((PyArrayObject *)__pyx_t_2);
       __pyx_t_2 = 0;
       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
       goto __pyx_L0;
@@ -10213,107 +10432,26 @@
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":796
- *     cpdef object decision_path(self, object X):
- *         """Finds the decision path (=node) for each sample in X."""
- *         if issparse(X):             # <<<<<<<<<<<<<<
- *             return self._decision_path_sparse_csr(X)
- *         else:
- */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_issparse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = NULL;
-  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
-    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
-    if (likely(__pyx_t_3)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
-      __Pyx_INCREF(__pyx_t_3);
-      __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_2, function);
-    }
-  }
-  if (!__pyx_t_3) {
-    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-  } else {
-    #if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_X};
-      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    #if CYTHON_FAST_PYCCALL
-    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_X};
-      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
-      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_GOTREF(__pyx_t_1);
-    } else
-    #endif
-    {
-      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
-      __Pyx_INCREF(__pyx_v_X);
-      __Pyx_GIVEREF(__pyx_v_X);
-      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
-      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_1);
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    }
-  }
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 796, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (__pyx_t_6) {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":797
- *         """Finds the decision path (=node) for each sample in X."""
- *         if issparse(X):
- *             return self._decision_path_sparse_csr(X)             # <<<<<<<<<<<<<<
- *         else:
- *             return self._decision_path_dense(X)
- */
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_sparse_csr(__pyx_v_self, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_r = __pyx_t_1;
-    __pyx_t_1 = 0;
-    goto __pyx_L0;
-
-    /* "skgarden/mondrian/tree/_tree.pyx":796
- *     cpdef object decision_path(self, object X):
- *         """Finds the decision path (=node) for each sample in X."""
- *         if issparse(X):             # <<<<<<<<<<<<<<
- *             return self._decision_path_sparse_csr(X)
- *         else:
+  /* "skgarden/mondrian/tree/_tree.pyx":885
+ *     cpdef np.ndarray apply(self, object X):
+ *         """Finds the terminal region (=leaf node) for each sample in X."""
+ *         return self._apply_dense(X)             # <<<<<<<<<<<<<<
+ * 
+ *     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):
  */
-  }
+  __Pyx_XDECREF(((PyObject *)__pyx_r));
+  __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense(__pyx_v_self, __pyx_v_X)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = ((PyArrayObject *)__pyx_t_1);
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":799
- *             return self._decision_path_sparse_csr(X)
- *         else:
- *             return self._decision_path_dense(X)             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":883
+ *         return node_id
  * 
- *     cpdef object weighted_decision_path(self, object X):
- */
-  /*else*/ {
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense(__pyx_v_self, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
-    __pyx_r = __pyx_t_1;
-    __pyx_t_1 = 0;
-    goto __pyx_L0;
-  }
-
-  /* "skgarden/mondrian/tree/_tree.pyx":794
- *         return out
- * 
- *     cpdef object decision_path(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the decision path (=node) for each sample in X."""
- *         if issparse(X):
+ *     cpdef np.ndarray apply(self, object X):             # <<<<<<<<<<<<<<
+ *         """Finds the terminal region (=leaf node) for each sample in X."""
+ *         return self._apply_dense(X)
  */
 
   /* function exit code */
@@ -10323,35 +10461,35 @@
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_XGIVEREF((PyObject *)__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_14decision_path[] = "Finds the decision path (=node) for each sample in X.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_10apply[] = "Finds the terminal region (=leaf node) for each sample in X.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_11apply(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("decision_path (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14decision_path(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_X));
+  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_10apply(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_X));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_10apply(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  __Pyx_RefNannySetupContext("decision_path", 0);
+  __Pyx_RefNannySetupContext("apply", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_decision_path(__pyx_v_self, __pyx_v_X, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
+  __pyx_t_1 = ((PyObject *)__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_apply(__pyx_v_self, __pyx_v_X, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -10360,7 +10498,7 @@
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -10368,44 +10506,52 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":801
- *             return self._decision_path_dense(X)
+/* "skgarden/mondrian/tree/_tree.pyx":887
+ *         return self._apply_dense(X)
+ * 
+ *     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):             # <<<<<<<<<<<<<<
+ *         """Predicts the regressor and standard deviation for all samples."""
  * 
- *     cpdef object weighted_decision_path(self, object X):             # <<<<<<<<<<<<<<
- *         """Returns the weight at each node for each sample in X."""
- *         if not isinstance(X, np.ndarray):
  */
 
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_weighted_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_predict(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args) {
+  int __pyx_v_return_std = ((int)0);
+  int __pyx_v_is_regression = ((int)1);
   PyArrayObject *__pyx_v_X_ndarray = 0;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_sample_stride;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_fx_stride;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
-  PyArrayObject *__pyx_v_indptr = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_indptr_ptr;
-  PyArrayObject *__pyx_v_indices = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_indices_ptr;
-  PyArrayObject *__pyx_v_values = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_values_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
+  PyArrayObject *__pyx_v_node_values = 0;
+  PyArrayObject *__pyx_v_mean = 0;
+  PyArrayObject *__pyx_v_std = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_classes;
+  PyArrayObject *__pyx_v_proba = 0;
+  PyArrayObject *__pyx_v_n_node_samples = 0;
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_parent_tau;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_delta;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_eta;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_X_val;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_p_s;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_p_nsy;
-  PyObject *__pyx_v_out = NULL;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
-  __Pyx_Buffer __pyx_pybuffer_indices;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_indptr;
-  __Pyx_Buffer __pyx_pybuffer_indptr;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_values;
-  __Pyx_Buffer __pyx_pybuffer_values;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_node_id;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_Delta;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_parent_tau;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_p_js;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_X_val;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_w_j;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t __pyx_v_p_nsy;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_class_ind;
+  double __pyx_v_eta;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_mean;
+  __Pyx_Buffer __pyx_pybuffer_mean;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_n_node_samples;
+  __Pyx_Buffer __pyx_pybuffer_n_node_samples;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_node_values;
+  __Pyx_Buffer __pyx_pybuffer_node_values;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_proba;
+  __Pyx_Buffer __pyx_pybuffer_proba;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_std;
+  __Pyx_Buffer __pyx_pybuffer_std;
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
@@ -10413,91 +10559,134 @@
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
-  int __pyx_t_6;
+  PyObject *__pyx_t_6 = NULL;
   int __pyx_t_7;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_8;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_9;
-  PyArrayObject *__pyx_t_10 = NULL;
-  PyArrayObject *__pyx_t_11 = NULL;
-  PyArrayObject *__pyx_t_12 = NULL;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_t_13;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_t_14;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_15;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_16;
-  long __pyx_t_17;
-  Py_ssize_t __pyx_t_18;
-  int __pyx_t_19;
-  PyObject *__pyx_t_20 = NULL;
-  PyObject *__pyx_t_21 = NULL;
-  PyObject *__pyx_t_22 = NULL;
+  PyObject *__pyx_t_8 = NULL;
+  int __pyx_t_9;
+  int __pyx_t_10;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_11;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_12;
+  PyArrayObject *__pyx_t_13 = NULL;
+  PyArrayObject *__pyx_t_14 = NULL;
+  PyArrayObject *__pyx_t_15 = NULL;
+  PyArrayObject *__pyx_t_16 = NULL;
+  PyArrayObject *__pyx_t_17 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_18;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_t_19;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_20;
+  Py_ssize_t __pyx_t_21;
+  Py_ssize_t __pyx_t_22;
   Py_ssize_t __pyx_t_23;
-  PyObject *__pyx_t_24 = NULL;
-  __Pyx_RefNannySetupContext("weighted_decision_path", 0);
-  __pyx_pybuffer_indptr.pybuffer.buf = NULL;
-  __pyx_pybuffer_indptr.refcount = 0;
-  __pyx_pybuffernd_indptr.data = NULL;
-  __pyx_pybuffernd_indptr.rcbuffer = &__pyx_pybuffer_indptr;
-  __pyx_pybuffer_indices.pybuffer.buf = NULL;
-  __pyx_pybuffer_indices.refcount = 0;
-  __pyx_pybuffernd_indices.data = NULL;
-  __pyx_pybuffernd_indices.rcbuffer = &__pyx_pybuffer_indices;
-  __pyx_pybuffer_values.pybuffer.buf = NULL;
-  __pyx_pybuffer_values.refcount = 0;
-  __pyx_pybuffernd_values.data = NULL;
-  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;
+  Py_ssize_t __pyx_t_24;
+  Py_ssize_t __pyx_t_25;
+  Py_ssize_t __pyx_t_26;
+  Py_ssize_t __pyx_t_27;
+  Py_ssize_t __pyx_t_28;
+  Py_ssize_t __pyx_t_29;
+  Py_ssize_t __pyx_t_30;
+  Py_ssize_t __pyx_t_31;
+  Py_ssize_t __pyx_t_32;
+  Py_ssize_t __pyx_t_33;
+  Py_ssize_t __pyx_t_34;
+  Py_ssize_t __pyx_t_35;
+  Py_ssize_t __pyx_t_36;
+  Py_ssize_t __pyx_t_37;
+  __Pyx_RefNannySetupContext("predict", 0);
+  if (__pyx_optional_args) {
+    if (__pyx_optional_args->__pyx_n > 0) {
+      __pyx_v_return_std = __pyx_optional_args->return_std;
+      if (__pyx_optional_args->__pyx_n > 1) {
+        __pyx_v_is_regression = __pyx_optional_args->is_regression;
+      }
+    }
+  }
+  __pyx_pybuffer_node_values.pybuffer.buf = NULL;
+  __pyx_pybuffer_node_values.refcount = 0;
+  __pyx_pybuffernd_node_values.data = NULL;
+  __pyx_pybuffernd_node_values.rcbuffer = &__pyx_pybuffer_node_values;
+  __pyx_pybuffer_mean.pybuffer.buf = NULL;
+  __pyx_pybuffer_mean.refcount = 0;
+  __pyx_pybuffernd_mean.data = NULL;
+  __pyx_pybuffernd_mean.rcbuffer = &__pyx_pybuffer_mean;
+  __pyx_pybuffer_std.pybuffer.buf = NULL;
+  __pyx_pybuffer_std.refcount = 0;
+  __pyx_pybuffernd_std.data = NULL;
+  __pyx_pybuffernd_std.rcbuffer = &__pyx_pybuffer_std;
+  __pyx_pybuffer_proba.pybuffer.buf = NULL;
+  __pyx_pybuffer_proba.refcount = 0;
+  __pyx_pybuffernd_proba.data = NULL;
+  __pyx_pybuffernd_proba.rcbuffer = &__pyx_pybuffer_proba;
+  __pyx_pybuffer_n_node_samples.pybuffer.buf = NULL;
+  __pyx_pybuffer_n_node_samples.refcount = 0;
+  __pyx_pybuffernd_n_node_samples.data = NULL;
+  __pyx_pybuffernd_n_node_samples.rcbuffer = &__pyx_pybuffer_n_node_samples;
   /* Check if called by wrapper */
   if (unlikely(__pyx_skip_dispatch)) ;
   /* Check if overridden in Python */
   else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_weighted_decision_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_predict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
-    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path)) {
+    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict)) {
       __Pyx_XDECREF(__pyx_r);
+      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_return_std); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_3);
+      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_is_regression); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_4);
       __Pyx_INCREF(__pyx_t_1);
-      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
-      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
-        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
-        if (likely(__pyx_t_4)) {
-          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
-          __Pyx_INCREF(__pyx_t_4);
+      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
+      __pyx_t_7 = 0;
+      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
+        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
+        if (likely(__pyx_t_6)) {
+          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
+          __Pyx_INCREF(__pyx_t_6);
           __Pyx_INCREF(function);
-          __Pyx_DECREF_SET(__pyx_t_3, function);
+          __Pyx_DECREF_SET(__pyx_t_5, function);
+          __pyx_t_7 = 1;
         }
       }
-      if (!__pyx_t_4) {
-        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
+      #if CYTHON_FAST_PYCALL
+      if (PyFunction_Check(__pyx_t_5)) {
+        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_X, __pyx_t_3, __pyx_t_4};
+        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
         __Pyx_GOTREF(__pyx_t_2);
-      } else {
-        #if CYTHON_FAST_PYCALL
-        if (PyFunction_Check(__pyx_t_3)) {
-          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
-          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
-          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
-          __Pyx_GOTREF(__pyx_t_2);
-        } else
-        #endif
-        #if CYTHON_FAST_PYCCALL
-        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
-          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
-          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
-          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
-          __Pyx_GOTREF(__pyx_t_2);
-        } else
-        #endif
-        {
-          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 801, __pyx_L1_error)
-          __Pyx_GOTREF(__pyx_t_5);
-          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
-          __Pyx_INCREF(__pyx_v_X);
-          __Pyx_GIVEREF(__pyx_v_X);
-          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
-          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
-          __Pyx_GOTREF(__pyx_t_2);
-          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      } else
+      #endif
+      #if CYTHON_FAST_PYCCALL
+      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
+        PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_X, __pyx_t_3, __pyx_t_4};
+        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
+        __Pyx_GOTREF(__pyx_t_2);
+        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      } else
+      #endif
+      {
+        __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_8);
+        if (__pyx_t_6) {
+          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
         }
+        __Pyx_INCREF(__pyx_v_X);
+        __Pyx_GIVEREF(__pyx_v_X);
+        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_X);
+        __Pyx_GIVEREF(__pyx_t_3);
+        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
+        __Pyx_GIVEREF(__pyx_t_4);
+        PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
+        __pyx_t_3 = 0;
+        __pyx_t_4 = 0;
+        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_2);
+        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
       }
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_r = __pyx_t_2;
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+      if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 887, __pyx_L1_error)
+      __pyx_r = ((PyObject*)__pyx_t_2);
       __pyx_t_2 = 0;
       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
       goto __pyx_L0;
@@ -10505,98 +10694,98 @@
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":803
- *     cpdef object weighted_decision_path(self, object X):
- *         """Returns the weight at each node for each sample in X."""
+  /* "skgarden/mondrian/tree/_tree.pyx":891
+ * 
+ *         # Check input
  *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
  *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))
  */
-  __pyx_t_6 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
-  __pyx_t_7 = ((!(__pyx_t_6 != 0)) != 0);
-  if (__pyx_t_7) {
-
-    /* "skgarden/mondrian/tree/_tree.pyx":805
+  __pyx_t_9 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
+  __pyx_t_10 = ((!(__pyx_t_9 != 0)) != 0);
+  if (__pyx_t_10) {
+
+    /* "skgarden/mondrian/tree/_tree.pyx":893
  *         if not isinstance(X, np.ndarray):
  *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))             # <<<<<<<<<<<<<<
  * 
  *         if X.dtype != DTYPE:
  */
-    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":804
- *         """Returns the weight at each node for each sample in X."""
+    /* "skgarden/mondrian/tree/_tree.pyx":892
+ *         # Check input
  *         if not isinstance(X, np.ndarray):
  *             raise ValueError("X should be in np.ndarray format, got %s"             # <<<<<<<<<<<<<<
  *                              % type(X))
  * 
  */
-    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
+    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
     __Pyx_GIVEREF(__pyx_t_1);
     PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
     __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 892, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_Raise(__pyx_t_1, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 804, __pyx_L1_error)
+    __PYX_ERR(0, 892, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":803
- *     cpdef object weighted_decision_path(self, object X):
- *         """Returns the weight at each node for each sample in X."""
+    /* "skgarden/mondrian/tree/_tree.pyx":891
+ * 
+ *         # Check input
  *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
  *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":807
+  /* "skgarden/mondrian/tree/_tree.pyx":895
  *                              % type(X))
  * 
  *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
  *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
  * 
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 807, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 807, __pyx_L1_error)
+  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 895, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 807, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  if (__pyx_t_7) {
+  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 895, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (__pyx_t_10) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":808
+    /* "skgarden/mondrian/tree/_tree.pyx":896
  * 
  *         if X.dtype != DTYPE:
  *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
  * 
  *         # Extract input
  */
-    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 808, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 808, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 896, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 896, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 808, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 896, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
     __Pyx_GIVEREF(__pyx_t_2);
-    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
     __pyx_t_2 = 0;
-    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 808, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 896, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
     __Pyx_Raise(__pyx_t_2, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __PYX_ERR(0, 808, __pyx_L1_error)
+    __PYX_ERR(0, 896, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":807
+    /* "skgarden/mondrian/tree/_tree.pyx":895
  *                              % type(X))
  * 
  *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
@@ -10605,20 +10794,20 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":811
+  /* "skgarden/mondrian/tree/_tree.pyx":899
  * 
  *         # Extract input
  *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  */
-  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 811, __pyx_L1_error)
+  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 899, __pyx_L1_error)
   __pyx_t_2 = __pyx_v_X;
   __Pyx_INCREF(__pyx_t_2);
   __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_2);
   __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":812
+  /* "skgarden/mondrian/tree/_tree.pyx":900
  *         # Extract input
  *         cdef np.ndarray X_ndarray = X
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
@@ -10627,611 +10816,1521 @@
  */
   __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":813
+  /* "skgarden/mondrian/tree/_tree.pyx":901
  *         cdef np.ndarray X_ndarray = X
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         cdef SIZE_t n_samples = X.shape[0]
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 813, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 813, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_8) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_9));
+  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_12 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_12 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_11) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_12));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":814
+  /* "skgarden/mondrian/tree/_tree.pyx":902
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         cdef SIZE_t n_samples = X.shape[0]
  *         cdef SIZE_t n_features = X.shape[1]
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 902, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 814, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_12 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_12 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 814, __pyx_L1_error)
+  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_9) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_8));
+  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_12) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_11));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":815
+  /* "skgarden/mondrian/tree/_tree.pyx":903
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
  *         cdef SIZE_t n_features = X.shape[1]
- * 
+ *         cdef SIZE_t f_ind
  */
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 815, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 903, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 815, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_v_n_samples = __pyx_t_8;
+  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_v_n_samples = __pyx_t_11;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":816
+  /* "skgarden/mondrian/tree/_tree.pyx":904
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         cdef SIZE_t n_samples = X.shape[0]
  *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t f_ind
  * 
- *         # Initialize output
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 904, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 816, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_11 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 904, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_v_n_features = __pyx_t_8;
+  __pyx_v_n_features = __pyx_t_11;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":819
+  /* "skgarden/mondrian/tree/_tree.pyx":910
+ *         # These node values are the means in case of regression.
+ *         # For classification these are the class counts.
+ *         cdef np.ndarray[DOUBLE_t, ndim=2] node_values = self._get_value_ndarray()[:, 0, :]             # <<<<<<<<<<<<<<
  * 
  *         # Initialize output
- *         cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)             # <<<<<<<<<<<<<<
- *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
- * 
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_n_samples + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_2);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
-  __pyx_t_2 = 0;
-  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
+  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self->__pyx_vtab)->_get_value_ndarray(__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 819, __pyx_L1_error)
+  __pyx_t_5 = PyObject_GetItem(__pyx_t_2, __pyx_tuple__10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 910, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 819, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 819, __pyx_L1_error)
-  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 910, __pyx_L1_error)
+  __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_indptr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 819, __pyx_L1_error)
-    } else {__pyx_pybuffernd_indptr.diminfo[0].strides = __pyx_pybuffernd_indptr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indptr.diminfo[0].shape = __pyx_pybuffernd_indptr.rcbuffer->pybuffer.shape[0];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_node_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
+      __pyx_v_node_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 910, __pyx_L1_error)
+    } else {__pyx_pybuffernd_node_values.diminfo[0].strides = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_node_values.diminfo[0].shape = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_node_values.diminfo[1].strides = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_node_values.diminfo[1].shape = __pyx_pybuffernd_node_values.rcbuffer->pybuffer.shape[1];
     }
   }
-  __pyx_t_10 = 0;
-  __pyx_v_indptr = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+  __pyx_t_13 = 0;
+  __pyx_v_node_values = ((PyArrayObject *)__pyx_t_5);
+  __pyx_t_5 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":820
- *         # Initialize output
- *         cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)
- *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":913
  * 
- *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
- */
-  __pyx_v_indptr_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indptr->data);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":822
- *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
+ *         # Initialize output
+ *         cdef np.ndarray[DTYPE_t, ndim=1] mean = np.zeros(n_samples, dtype=DTYPE)             # <<<<<<<<<<<<<<
+ *         cdef np.ndarray[DTYPE_t, ndim=1] std = np.zeros(n_samples, dtype=DTYPE)
  * 
- *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
- *                                                    (1 + self.max_depth),
- *                                                    dtype=np.intp)
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":823
- * 
- *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
- *                                                    (1 + self.max_depth),             # <<<<<<<<<<<<<<
- *                                                    dtype=np.intp)
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
- */
-  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":822
- *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
- * 
- *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
- *                                                    (1 + self.max_depth),
- *                                                    dtype=np.intp)
- */
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 913, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
-  __pyx_t_4 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":824
- *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
- *                                                    (1 + self.max_depth),
- *                                                    dtype=np.intp)             # <<<<<<<<<<<<<<
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
- * 
- */
-  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 824, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 824, __pyx_L1_error)
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+  __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 913, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 913, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 913, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 913, __pyx_L1_error)
+  __pyx_t_14 = ((PyArrayObject *)__pyx_t_8);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mean.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+      __pyx_v_mean = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_mean.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 913, __pyx_L1_error)
+    } else {__pyx_pybuffernd_mean.diminfo[0].strides = __pyx_pybuffernd_mean.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mean.diminfo[0].shape = __pyx_pybuffernd_mean.rcbuffer->pybuffer.shape[0];
+    }
+  }
+  __pyx_t_14 = 0;
+  __pyx_v_mean = ((PyArrayObject *)__pyx_t_8);
+  __pyx_t_8 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":822
- *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
+  /* "skgarden/mondrian/tree/_tree.pyx":914
+ *         # Initialize output
+ *         cdef np.ndarray[DTYPE_t, ndim=1] mean = np.zeros(n_samples, dtype=DTYPE)
+ *         cdef np.ndarray[DTYPE_t, ndim=1] std = np.zeros(n_samples, dtype=DTYPE)             # <<<<<<<<<<<<<<
  * 
- *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
- *                                                    (1 + self.max_depth),
- *                                                    dtype=np.intp)
+ *         cdef SIZE_t n_classes = node_values.shape[1]
  */
-  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 822, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_t_8 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_8);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
+  __pyx_t_8 = 0;
+  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 914, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 822, __pyx_L1_error)
-  __pyx_t_11 = ((PyArrayObject *)__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 914, __pyx_L1_error)
+  __pyx_t_15 = ((PyArrayObject *)__pyx_t_2);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 822, __pyx_L1_error)
-    } else {__pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_std.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+      __pyx_v_std = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_std.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 914, __pyx_L1_error)
+    } else {__pyx_pybuffernd_std.diminfo[0].strides = __pyx_pybuffernd_std.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_std.diminfo[0].shape = __pyx_pybuffernd_std.rcbuffer->pybuffer.shape[0];
     }
   }
-  __pyx_t_11 = 0;
-  __pyx_v_indices = ((PyArrayObject *)__pyx_t_5);
-  __pyx_t_5 = 0;
+  __pyx_t_15 = 0;
+  __pyx_v_std = ((PyArrayObject *)__pyx_t_2);
+  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":825
- *                                                    (1 + self.max_depth),
- *                                                    dtype=np.intp)
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":916
+ *         cdef np.ndarray[DTYPE_t, ndim=1] std = np.zeros(n_samples, dtype=DTYPE)
  * 
- *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *
+ *         cdef SIZE_t n_classes = node_values.shape[1]             # <<<<<<<<<<<<<<
+ *         cdef np.ndarray[DTYPE_t, ndim=2] proba = np.zeros((n_samples, n_classes), dtype=DTYPE)
+ *         cdef np.ndarray[SIZE_t, ndim=1] n_node_samples = self.n_node_samples
  */
-  __pyx_v_indices_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indices->data);
+  __pyx_v_n_classes = (__pyx_v_node_values->dimensions[1]);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":827
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
+  /* "skgarden/mondrian/tree/_tree.pyx":917
+ * 
+ *         cdef SIZE_t n_classes = node_values.shape[1]
+ *         cdef np.ndarray[DTYPE_t, ndim=2] proba = np.zeros((n_samples, n_classes), dtype=DTYPE)             # <<<<<<<<<<<<<<
+ *         cdef np.ndarray[SIZE_t, ndim=1] n_node_samples = self.n_node_samples
  * 
- *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *             # <<<<<<<<<<<<<<
- *                                                 (1 + self.max_depth),
- *                                                  dtype=DTYPE)
  */
-  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 827, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 827, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_2);
+  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_1);
+  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
+  __pyx_t_2 = 0;
+  __pyx_t_1 = 0;
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+  __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 917, __pyx_L1_error)
+  __pyx_t_16 = ((PyArrayObject *)__pyx_t_2);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_proba.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
+      __pyx_v_proba = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_proba.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 917, __pyx_L1_error)
+    } else {__pyx_pybuffernd_proba.diminfo[0].strides = __pyx_pybuffernd_proba.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_proba.diminfo[0].shape = __pyx_pybuffernd_proba.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_proba.diminfo[1].strides = __pyx_pybuffernd_proba.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_proba.diminfo[1].shape = __pyx_pybuffernd_proba.rcbuffer->pybuffer.shape[1];
+    }
+  }
+  __pyx_t_16 = 0;
+  __pyx_v_proba = ((PyArrayObject *)__pyx_t_2);
+  __pyx_t_2 = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":918
+ *         cdef SIZE_t n_classes = node_values.shape[1]
+ *         cdef np.ndarray[DTYPE_t, ndim=2] proba = np.zeros((n_samples, n_classes), dtype=DTYPE)
+ *         cdef np.ndarray[SIZE_t, ndim=1] n_node_samples = self.n_node_samples             # <<<<<<<<<<<<<<
+ * 
+ *         # Initialize auxiliary data-structure
+ */
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_node_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 918, __pyx_L1_error)
+  __pyx_t_17 = ((PyArrayObject *)__pyx_t_2);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+      __pyx_v_n_node_samples = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 918, __pyx_L1_error)
+    } else {__pyx_pybuffernd_n_node_samples.diminfo[0].strides = __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n_node_samples.diminfo[0].shape = __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.shape[0];
+    }
+  }
+  __pyx_t_17 = 0;
+  __pyx_v_n_node_samples = ((PyArrayObject *)__pyx_t_2);
+  __pyx_t_2 = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":921
+ * 
+ *         # Initialize auxiliary data-structure
+ *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t i = 0
+ *         cdef SIZE_t j
+ */
+  __pyx_v_node = NULL;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":922
+ *         # Initialize auxiliary data-structure
+ *         cdef Node* node = NULL
+ *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t j
+ *         cdef SIZE_t node_id = 0
+ */
+  __pyx_v_i = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":924
+ *         cdef SIZE_t i = 0
+ *         cdef SIZE_t j
+ *         cdef SIZE_t node_id = 0             # <<<<<<<<<<<<<<
+ *         cdef DOUBLE_t Delta = 0.0
+ *         cdef DOUBLE_t parent_tau
+ */
+  __pyx_v_node_id = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":925
+ *         cdef SIZE_t j
+ *         cdef SIZE_t node_id = 0
+ *         cdef DOUBLE_t Delta = 0.0             # <<<<<<<<<<<<<<
+ *         cdef DOUBLE_t parent_tau
+ *         cdef DOUBLE_t p_js
+ */
+  __pyx_v_Delta = 0.0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":936
+ *         cdef SIZE_t class_ind
+ * 
+ *         with nogil:             # <<<<<<<<<<<<<<
+ *             for i in range(n_samples):
+ *                 # Step 3
+ */
+  {
+      #ifdef WITH_THREAD
+      PyThreadState *_save;
+      Py_UNBLOCK_THREADS
+      __Pyx_FastGIL_Remember();
+      #endif
+      /*try:*/ {
+
+        /* "skgarden/mondrian/tree/_tree.pyx":937
+ * 
+ *         with nogil:
+ *             for i in range(n_samples):             # <<<<<<<<<<<<<<
+ *                 # Step 3
+ *                 parent_tau = 0.0
+ */
+        __pyx_t_11 = __pyx_v_n_samples;
+        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
+          __pyx_v_i = __pyx_t_12;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":939
+ *             for i in range(n_samples):
+ *                 # Step 3
+ *                 parent_tau = 0.0             # <<<<<<<<<<<<<<
+ *                 p_nsy = 1.0
+ *                 node_id = self.root
+ */
+          __pyx_v_parent_tau = 0.0;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":940
+ *                 # Step 3
+ *                 parent_tau = 0.0
+ *                 p_nsy = 1.0             # <<<<<<<<<<<<<<
+ *                 node_id = self.root
+ * 
+ */
+          __pyx_v_p_nsy = 1.0;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":941
+ *                 parent_tau = 0.0
+ *                 p_nsy = 1.0
+ *                 node_id = self.root             # <<<<<<<<<<<<<<
+ * 
+ *                 while True:
+ */
+          __pyx_t_18 = __pyx_v_self->root;
+          __pyx_v_node_id = __pyx_t_18;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":943
+ *                 node_id = self.root
+ * 
+ *                 while True:             # <<<<<<<<<<<<<<
+ *                     node = &self.nodes[node_id]
+ * 
+ */
+          while (1) {
+
+            /* "skgarden/mondrian/tree/_tree.pyx":944
+ * 
+ *                 while True:
+ *                     node = &self.nodes[node_id]             # <<<<<<<<<<<<<<
+ * 
+ *                     # Step 5: First part.
+ */
+            __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node_id]));
+
+            /* "skgarden/mondrian/tree/_tree.pyx":948
+ *                     # Step 5: First part.
+ *                     # Calculate Delta
+ *                     Delta = node.tau - parent_tau             # <<<<<<<<<<<<<<
+ *                     parent_tau = node.tau
+ * 
+ */
+            __pyx_v_Delta = (__pyx_v_node->tau - __pyx_v_parent_tau);
+
+            /* "skgarden/mondrian/tree/_tree.pyx":949
+ *                     # Calculate Delta
+ *                     Delta = node.tau - parent_tau
+ *                     parent_tau = node.tau             # <<<<<<<<<<<<<<
+ * 
+ *                     # Step 5: Second part.
+ */
+            __pyx_t_19 = __pyx_v_node->tau;
+            __pyx_v_parent_tau = __pyx_t_19;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":953
+ *                     # Step 5: Second part.
+ *                     # Calculate eta
+ *                     eta = 0.0             # <<<<<<<<<<<<<<
+ *                     for f_ind in range(n_features):
+ *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]
+ */
+            __pyx_v_eta = 0.0;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":954
+ *                     # Calculate eta
+ *                     eta = 0.0
+ *                     for f_ind in range(n_features):             # <<<<<<<<<<<<<<
+ *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]
+ * 
+ */
+            __pyx_t_18 = __pyx_v_n_features;
+            for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_18; __pyx_t_20+=1) {
+              __pyx_v_f_ind = __pyx_t_20;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":955
+ *                     eta = 0.0
+ *                     for f_ind in range(n_features):
+ *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]             # <<<<<<<<<<<<<<
+ * 
+ *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0) +
+ */
+              __pyx_v_X_val = (__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_f_ind))]);
+
+              /* "skgarden/mondrian/tree/_tree.pyx":957
+ *                         X_val = X_ptr[X_sample_stride*i + X_fx_stride*f_ind]
+ * 
+ *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0) +             # <<<<<<<<<<<<<<
+ *                                 fmax(node.lower_bounds[f_ind] - X_val, 0))
+ * 
+ */
+              __pyx_v_eta = (__pyx_v_eta + (__pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax((__pyx_v_X_val - (__pyx_v_node->upper_bounds[__pyx_v_f_ind])), 0.0) + __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax(((__pyx_v_node->lower_bounds[__pyx_v_f_ind]) - __pyx_v_X_val), 0.0)));
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":962
+ *                     # Step 6: Calculate p_j
+ *                     # Step 7-11
+ *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                         w_j = p_nsy
+ *                     else:
+ */
+            __pyx_t_10 = ((__pyx_v_node->left_child == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
+            if (__pyx_t_10) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":963
+ *                     # Step 7-11
+ *                     if node.left_child == _TREE_LEAF:
+ *                         w_j = p_nsy             # <<<<<<<<<<<<<<
+ *                     else:
+ *                         p_js = 1 - exp(-Delta * eta)
+ */
+              __pyx_v_w_j = __pyx_v_p_nsy;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":962
+ *                     # Step 6: Calculate p_j
+ *                     # Step 7-11
+ *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                         w_j = p_nsy
+ *                     else:
+ */
+              goto __pyx_L14;
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":965
+ *                         w_j = p_nsy
+ *                     else:
+ *                         p_js = 1 - exp(-Delta * eta)             # <<<<<<<<<<<<<<
+ *                         w_j = p_nsy * p_js
+ * 
+ */
+            /*else*/ {
+              __pyx_v_p_js = (1.0 - exp(((-__pyx_v_Delta) * __pyx_v_eta)));
+
+              /* "skgarden/mondrian/tree/_tree.pyx":966
+ *                     else:
+ *                         p_js = 1 - exp(-Delta * eta)
+ *                         w_j = p_nsy * p_js             # <<<<<<<<<<<<<<
+ * 
+ *                     if is_regression:
+ */
+              __pyx_v_w_j = (__pyx_v_p_nsy * __pyx_v_p_js);
+            }
+            __pyx_L14:;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":968
+ *                         w_j = p_nsy * p_js
+ * 
+ *                     if is_regression:             # <<<<<<<<<<<<<<
+ *                         mean[i] += w_j * node_values[node_id, 0]
+ *                     else:
+ */
+            __pyx_t_10 = (__pyx_v_is_regression != 0);
+            if (__pyx_t_10) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":969
+ * 
+ *                     if is_regression:
+ *                         mean[i] += w_j * node_values[node_id, 0]             # <<<<<<<<<<<<<<
+ *                     else:
+ *                         for class_ind in range(n_classes):
+ */
+              __pyx_t_21 = __pyx_v_node_id;
+              __pyx_t_22 = 0;
+              __pyx_t_23 = __pyx_v_i;
+              *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_mean.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_mean.diminfo[0].strides) += (__pyx_v_w_j * (*__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_node_values.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_node_values.diminfo[1].strides)));
+
+              /* "skgarden/mondrian/tree/_tree.pyx":968
+ *                         w_j = p_nsy * p_js
+ * 
+ *                     if is_regression:             # <<<<<<<<<<<<<<
+ *                         mean[i] += w_j * node_values[node_id, 0]
+ *                     else:
+ */
+              goto __pyx_L15;
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":971
+ *                         mean[i] += w_j * node_values[node_id, 0]
+ *                     else:
+ *                         for class_ind in range(n_classes):             # <<<<<<<<<<<<<<
+ *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])
+ * 
+ */
+            /*else*/ {
+              __pyx_t_18 = __pyx_v_n_classes;
+              for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_18; __pyx_t_20+=1) {
+                __pyx_v_class_ind = __pyx_t_20;
+
+                /* "skgarden/mondrian/tree/_tree.pyx":972
+ *                     else:
+ *                         for class_ind in range(n_classes):
+ *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])             # <<<<<<<<<<<<<<
+ * 
+ *                     if return_std:
+ */
+                __pyx_t_24 = __pyx_v_node_id;
+                __pyx_t_25 = __pyx_v_class_ind;
+                __pyx_t_26 = __pyx_v_node_id;
+                __pyx_t_27 = __pyx_v_i;
+                __pyx_t_28 = __pyx_v_class_ind;
+                *__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_proba.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_proba.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_proba.diminfo[1].strides) += (__pyx_v_w_j * ((*__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_node_values.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_node_values.diminfo[1].strides)) / (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_n_node_samples.diminfo[0].strides))));
+              }
+            }
+            __pyx_L15:;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":974
+ *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])
+ * 
+ *                     if return_std:             # <<<<<<<<<<<<<<
+ *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+ * 
+ */
+            __pyx_t_10 = (__pyx_v_return_std != 0);
+            if (__pyx_t_10) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":975
+ * 
+ *                     if return_std:
+ *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)             # <<<<<<<<<<<<<<
+ * 
+ *                     if node.left_child == _TREE_LEAF:
+ */
+              __pyx_t_29 = __pyx_v_node_id;
+              __pyx_t_30 = 0;
+              __pyx_t_31 = __pyx_v_i;
+              *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_std.diminfo[0].strides) += (__pyx_v_w_j * (pow((*__Pyx_BufPtrStrided2d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_pybuffernd_node_values.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_node_values.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_node_values.diminfo[1].strides)), 2.0) + __pyx_v_node->variance));
+
+              /* "skgarden/mondrian/tree/_tree.pyx":974
+ *                             proba[i, class_ind] += w_j * (node_values[node_id, class_ind] / n_node_samples[node_id])
+ * 
+ *                     if return_std:             # <<<<<<<<<<<<<<
+ *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+ * 
+ */
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":977
+ *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+ * 
+ *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                         break
+ *                     p_nsy = p_nsy * (1 - p_js)
+ */
+            __pyx_t_10 = ((__pyx_v_node->left_child == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
+            if (__pyx_t_10) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":978
+ * 
+ *                     if node.left_child == _TREE_LEAF:
+ *                         break             # <<<<<<<<<<<<<<
+ *                     p_nsy = p_nsy * (1 - p_js)
+ * 
+ */
+              goto __pyx_L11_break;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":977
+ *                         std[i] += w_j * (node_values[node_id, 0]**2 + node.variance)
+ * 
+ *                     if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                         break
+ *                     p_nsy = p_nsy * (1 - p_js)
+ */
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":979
+ *                     if node.left_child == _TREE_LEAF:
+ *                         break
+ *                     p_nsy = p_nsy * (1 - p_js)             # <<<<<<<<<<<<<<
+ * 
+ *                     # Step 12-14
+ */
+            __pyx_v_p_nsy = (__pyx_v_p_nsy * (1.0 - __pyx_v_p_js));
+
+            /* "skgarden/mondrian/tree/_tree.pyx":983
+ *                     # Step 12-14
+ *                     if X_ptr[X_sample_stride * i +
+ *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
+ *                         node_id = node.left_child
+ *                     else:
+ */
+            __pyx_t_10 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
+
+            /* "skgarden/mondrian/tree/_tree.pyx":982
+ * 
+ *                     # Step 12-14
+ *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ *                         node_id = node.left_child
+ */
+            if (__pyx_t_10) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":984
+ *                     if X_ptr[X_sample_stride * i +
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ *                         node_id = node.left_child             # <<<<<<<<<<<<<<
+ *                     else:
+ *                         node_id = node.right_child
+ */
+              __pyx_t_18 = __pyx_v_node->left_child;
+              __pyx_v_node_id = __pyx_t_18;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":982
+ * 
+ *                     # Step 12-14
+ *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ *                         node_id = node.left_child
+ */
+              goto __pyx_L20;
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":986
+ *                         node_id = node.left_child
+ *                     else:
+ *                         node_id = node.right_child             # <<<<<<<<<<<<<<
+ * 
+ *                 if return_std:
+ */
+            /*else*/ {
+              __pyx_t_18 = __pyx_v_node->right_child;
+              __pyx_v_node_id = __pyx_t_18;
+            }
+            __pyx_L20:;
+          }
+          __pyx_L11_break:;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":988
+ *                         node_id = node.right_child
+ * 
+ *                 if return_std:             # <<<<<<<<<<<<<<
+ *                     std[i] -= mean[i]**2
+ *                     if std[i] <= 0:
+ */
+          __pyx_t_10 = (__pyx_v_return_std != 0);
+          if (__pyx_t_10) {
+
+            /* "skgarden/mondrian/tree/_tree.pyx":989
+ * 
+ *                 if return_std:
+ *                     std[i] -= mean[i]**2             # <<<<<<<<<<<<<<
+ *                     if std[i] <= 0:
+ *                         std[i] = 0.0
+ */
+            __pyx_t_32 = __pyx_v_i;
+            __pyx_t_33 = __pyx_v_i;
+            *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_std.diminfo[0].strides) -= powf((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_mean.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_mean.diminfo[0].strides)), 2.0);
+
+            /* "skgarden/mondrian/tree/_tree.pyx":990
+ *                 if return_std:
+ *                     std[i] -= mean[i]**2
+ *                     if std[i] <= 0:             # <<<<<<<<<<<<<<
+ *                         std[i] = 0.0
+ *                     std[i] = sqrt(std[i])
+ */
+            __pyx_t_34 = __pyx_v_i;
+            __pyx_t_10 = (((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_34, __pyx_pybuffernd_std.diminfo[0].strides)) <= 0.0) != 0);
+            if (__pyx_t_10) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":991
+ *                     std[i] -= mean[i]**2
+ *                     if std[i] <= 0:
+ *                         std[i] = 0.0             # <<<<<<<<<<<<<<
+ *                     std[i] = sqrt(std[i])
+ * 
+ */
+              __pyx_t_35 = __pyx_v_i;
+              *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_35, __pyx_pybuffernd_std.diminfo[0].strides) = 0.0;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":990
+ *                 if return_std:
+ *                     std[i] -= mean[i]**2
+ *                     if std[i] <= 0:             # <<<<<<<<<<<<<<
+ *                         std[i] = 0.0
+ *                     std[i] = sqrt(std[i])
+ */
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":992
+ *                     if std[i] <= 0:
+ *                         std[i] = 0.0
+ *                     std[i] = sqrt(std[i])             # <<<<<<<<<<<<<<
+ * 
+ *         if is_regression:
+ */
+            __pyx_t_36 = __pyx_v_i;
+            __pyx_t_37 = __pyx_v_i;
+            *__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_std.diminfo[0].strides) = sqrt((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_pybuffernd_std.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_std.diminfo[0].strides)));
+
+            /* "skgarden/mondrian/tree/_tree.pyx":988
+ *                         node_id = node.right_child
+ * 
+ *                 if return_std:             # <<<<<<<<<<<<<<
+ *                     std[i] -= mean[i]**2
+ *                     if std[i] <= 0:
+ */
+          }
+        }
+      }
+
+      /* "skgarden/mondrian/tree/_tree.pyx":936
+ *         cdef SIZE_t class_ind
+ * 
+ *         with nogil:             # <<<<<<<<<<<<<<
+ *             for i in range(n_samples):
+ *                 # Step 3
+ */
+      /*finally:*/ {
+        /*normal exit:*/{
+          #ifdef WITH_THREAD
+          __Pyx_FastGIL_Forget();
+          Py_BLOCK_THREADS
+          #endif
+          goto __pyx_L7;
+        }
+        __pyx_L7:;
+      }
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":994
+ *                     std[i] = sqrt(std[i])
+ * 
+ *         if is_regression:             # <<<<<<<<<<<<<<
+ *             if return_std:
+ *                 return mean, std
+ */
+  __pyx_t_10 = (__pyx_v_is_regression != 0);
+  if (__pyx_t_10) {
+
+    /* "skgarden/mondrian/tree/_tree.pyx":995
+ * 
+ *         if is_regression:
+ *             if return_std:             # <<<<<<<<<<<<<<
+ *                 return mean, std
+ *             return mean,
+ */
+    __pyx_t_10 = (__pyx_v_return_std != 0);
+    if (__pyx_t_10) {
+
+      /* "skgarden/mondrian/tree/_tree.pyx":996
+ *         if is_regression:
+ *             if return_std:
+ *                 return mean, std             # <<<<<<<<<<<<<<
+ *             return mean,
+ *         else:
+ */
+      __Pyx_XDECREF(__pyx_r);
+      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_2);
+      __Pyx_INCREF(((PyObject *)__pyx_v_mean));
+      __Pyx_GIVEREF(((PyObject *)__pyx_v_mean));
+      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mean));
+      __Pyx_INCREF(((PyObject *)__pyx_v_std));
+      __Pyx_GIVEREF(((PyObject *)__pyx_v_std));
+      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_std));
+      __pyx_r = ((PyObject*)__pyx_t_2);
+      __pyx_t_2 = 0;
+      goto __pyx_L0;
+
+      /* "skgarden/mondrian/tree/_tree.pyx":995
+ * 
+ *         if is_regression:
+ *             if return_std:             # <<<<<<<<<<<<<<
+ *                 return mean, std
+ *             return mean,
+ */
+    }
+
+    /* "skgarden/mondrian/tree/_tree.pyx":997
+ *             if return_std:
+ *                 return mean, std
+ *             return mean,             # <<<<<<<<<<<<<<
+ *         else:
+ *             return proba,
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(((PyObject *)__pyx_v_mean));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_mean));
+    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mean));
+    __pyx_r = ((PyObject*)__pyx_t_2);
+    __pyx_t_2 = 0;
+    goto __pyx_L0;
+
+    /* "skgarden/mondrian/tree/_tree.pyx":994
+ *                     std[i] = sqrt(std[i])
+ * 
+ *         if is_regression:             # <<<<<<<<<<<<<<
+ *             if return_std:
+ *                 return mean, std
+ */
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":999
+ *             return mean,
+ *         else:
+ *             return proba,             # <<<<<<<<<<<<<<
+ * 
+ * 
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(((PyObject *)__pyx_v_proba));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_proba));
+    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_proba));
+    __pyx_r = ((PyObject*)__pyx_t_2);
+    __pyx_t_2 = 0;
+    goto __pyx_L0;
+  }
+
+  /* "skgarden/mondrian/tree/_tree.pyx":887
+ *         return self._apply_dense(X)
+ * 
+ *     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):             # <<<<<<<<<<<<<<
+ *         """Predicts the regressor and standard deviation for all samples."""
+ * 
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_XDECREF(__pyx_t_8);
+  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mean.rcbuffer->pybuffer);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_node_values.rcbuffer->pybuffer);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_proba.rcbuffer->pybuffer);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_std.rcbuffer->pybuffer);
+  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = 0;
+  goto __pyx_L2;
+  __pyx_L0:;
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mean.rcbuffer->pybuffer);
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n_node_samples.rcbuffer->pybuffer);
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_node_values.rcbuffer->pybuffer);
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_proba.rcbuffer->pybuffer);
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_std.rcbuffer->pybuffer);
+  __pyx_L2:;
+  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
+  __Pyx_XDECREF((PyObject *)__pyx_v_node_values);
+  __Pyx_XDECREF((PyObject *)__pyx_v_mean);
+  __Pyx_XDECREF((PyObject *)__pyx_v_std);
+  __Pyx_XDECREF((PyObject *)__pyx_v_proba);
+  __Pyx_XDECREF((PyObject *)__pyx_v_n_node_samples);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_12predict[] = "Predicts the regressor and standard deviation for all samples.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_13predict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v_X = 0;
+  int __pyx_v_return_std;
+  int __pyx_v_is_regression;
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("predict (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_return_std,&__pyx_n_s_is_regression,0};
+    PyObject* values[3] = {0,0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_std);
+          if (value) { values[1] = value; kw_args--; }
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (kw_args > 0) {
+          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_regression);
+          if (value) { values[2] = value; kw_args--; }
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "predict") < 0)) __PYX_ERR(0, 887, __pyx_L3_error)
+      }
+    } else {
+      switch (PyTuple_GET_SIZE(__pyx_args)) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+    }
+    __pyx_v_X = values[0];
+    if (values[1]) {
+      __pyx_v_return_std = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_return_std == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L3_error)
+    } else {
+      __pyx_v_return_std = ((int)0);
+    }
+    if (values[2]) {
+      __pyx_v_is_regression = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_is_regression == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L3_error)
+    } else {
+      __pyx_v_is_regression = ((int)1);
+    }
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("predict", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 887, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_12predict(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), __pyx_v_X, __pyx_v_return_std, __pyx_v_is_regression);
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_12predict(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_v_return_std, int __pyx_v_is_regression) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict __pyx_t_2;
+  __Pyx_RefNannySetupContext("predict", 0);
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_2.__pyx_n = 2;
+  __pyx_t_2.return_std = __pyx_v_return_std;
+  __pyx_t_2.is_regression = __pyx_v_is_regression;
+  __pyx_t_1 = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree->predict(__pyx_v_self, __pyx_v_X, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":1002
+ * 
+ * 
+ *     cdef inline np.ndarray _apply_dense(self, object X):             # <<<<<<<<<<<<<<
+ *         """Finds the terminal region (=leaf node) for each sample in X."""
+ * 
+ */
+
+static PyArrayObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
+  PyArrayObject *__pyx_v_X_ndarray = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_sample_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_fx_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
+  CYTHON_UNUSED __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
+  PyArrayObject *__pyx_v_out = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_out_ptr;
+  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_curr_node_id;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_out;
+  __Pyx_Buffer __pyx_pybuffer_out;
+  PyArrayObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  int __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_6;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_7;
+  PyObject *__pyx_t_8 = NULL;
+  PyObject *__pyx_t_9 = NULL;
+  PyArrayObject *__pyx_t_10 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_11;
+  __Pyx_RefNannySetupContext("_apply_dense", 0);
+  __pyx_pybuffer_out.pybuffer.buf = NULL;
+  __pyx_pybuffer_out.refcount = 0;
+  __pyx_pybuffernd_out.data = NULL;
+  __pyx_pybuffernd_out.rcbuffer = &__pyx_pybuffer_out;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":828
+  /* "skgarden/mondrian/tree/_tree.pyx":1006
  * 
- *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *
- *                                                 (1 + self.max_depth),             # <<<<<<<<<<<<<<
- *                                                  dtype=DTYPE)
- *         cdef DTYPE_t* values_ptr = <DTYPE_t*> values.data
+ *         # Check input
+ *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
+ *             raise ValueError("X should be in np.ndarray format, got %s"
+ *                              % type(X))
  */
-  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 827, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
+  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
+  if (__pyx_t_2) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":827
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
+    /* "skgarden/mondrian/tree/_tree.pyx":1008
+ *         if not isinstance(X, np.ndarray):
+ *             raise ValueError("X should be in np.ndarray format, got %s"
+ *                              % type(X))             # <<<<<<<<<<<<<<
  * 
- *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *             # <<<<<<<<<<<<<<
- *                                                 (1 + self.max_depth),
- *                                                  dtype=DTYPE)
+ *         if X.dtype != DTYPE:
  */
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
-  __pyx_t_5 = 0;
+    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":829
- *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *
- *                                                 (1 + self.max_depth),
- *                                                  dtype=DTYPE)             # <<<<<<<<<<<<<<
- *         cdef DTYPE_t* values_ptr = <DTYPE_t*> values.data
+    /* "skgarden/mondrian/tree/_tree.pyx":1007
+ *         # Check input
+ *         if not isinstance(X, np.ndarray):
+ *             raise ValueError("X should be in np.ndarray format, got %s"             # <<<<<<<<<<<<<<
+ *                              % type(X))
  * 
  */
-  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 829, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_GIVEREF(__pyx_t_3);
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
+    __pyx_t_3 = 0;
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __PYX_ERR(0, 1007, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":827
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
+    /* "skgarden/mondrian/tree/_tree.pyx":1006
  * 
- *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *             # <<<<<<<<<<<<<<
- *                                                 (1 + self.max_depth),
- *                                                  dtype=DTYPE)
+ *         # Check input
+ *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
+ *             raise ValueError("X should be in np.ndarray format, got %s"
+ *                              % type(X))
  */
-  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 827, __pyx_L1_error)
-  __pyx_t_12 = ((PyArrayObject *)__pyx_t_2);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 827, __pyx_L1_error)
-    } else {__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];
-    }
   }
-  __pyx_t_12 = 0;
-  __pyx_v_values = ((PyArrayObject *)__pyx_t_2);
-  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":830
- *                                                 (1 + self.max_depth),
- *                                                  dtype=DTYPE)
- *         cdef DTYPE_t* values_ptr = <DTYPE_t*> values.data             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":1010
+ *                              % type(X))
+ * 
+ *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
+ *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
  * 
- *         # Initialize auxiliary data-structure
  */
-  __pyx_v_values_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_values->data);
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1010, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1010, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (__pyx_t_2) {
 
-  /* "skgarden/mondrian/tree/_tree.pyx":833
+    /* "skgarden/mondrian/tree/_tree.pyx":1011
  * 
- *         # Initialize auxiliary data-structure
- *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
- *         cdef SIZE_t i = 0
+ *         if X.dtype != DTYPE:
+ *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
  * 
+ *         # Extract input
  */
-  __pyx_v_node = NULL;
+    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1011, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1011, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1011, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_5);
+    __Pyx_GIVEREF(__pyx_t_4);
+    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
+    __pyx_t_4 = 0;
+    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1011, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __PYX_ERR(0, 1011, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":834
- *         # Initialize auxiliary data-structure
- *         cdef Node* node = NULL
- *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
+    /* "skgarden/mondrian/tree/_tree.pyx":1010
+ *                              % type(X))
  * 
- *         cdef DTYPE_t parent_tau
- */
-  __pyx_v_i = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":844
- *         cdef DTYPE_t p_nsy
+ *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
+ *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
  * 
- *         with nogil:             # <<<<<<<<<<<<<<
- *             for i in range(n_samples):
- *                 p_nsy = 1.0
  */
-  {
-      #ifdef WITH_THREAD
-      PyThreadState *_save;
-      Py_UNBLOCK_THREADS
-      #endif
-      /*try:*/ {
+  }
 
-        /* "skgarden/mondrian/tree/_tree.pyx":845
+  /* "skgarden/mondrian/tree/_tree.pyx":1014
  * 
- *         with nogil:
- *             for i in range(n_samples):             # <<<<<<<<<<<<<<
- *                 p_nsy = 1.0
- *                 node = self.nodes
- */
-        __pyx_t_8 = __pyx_v_n_samples;
-        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
-          __pyx_v_i = __pyx_t_9;
-
-          /* "skgarden/mondrian/tree/_tree.pyx":846
- *         with nogil:
- *             for i in range(n_samples):
- *                 p_nsy = 1.0             # <<<<<<<<<<<<<<
- *                 node = self.nodes
- *                 parent_tau = 0.0
+ *         # Extract input
+ *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  */
-          __pyx_v_p_nsy = 1.0;
+  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1014, __pyx_L1_error)
+  __pyx_t_4 = __pyx_v_X;
+  __Pyx_INCREF(__pyx_t_4);
+  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_4);
+  __pyx_t_4 = 0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":847
- *             for i in range(n_samples):
- *                 p_nsy = 1.0
- *                 node = self.nodes             # <<<<<<<<<<<<<<
- *                 parent_tau = 0.0
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":1015
+ *         # Extract input
+ *         cdef np.ndarray X_ndarray = X
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  */
-          __pyx_t_13 = __pyx_v_self->nodes;
-          __pyx_v_node = __pyx_t_13;
+  __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-          /* "skgarden/mondrian/tree/_tree.pyx":848
- *                 p_nsy = 1.0
- *                 node = self.nodes
- *                 parent_tau = 0.0             # <<<<<<<<<<<<<<
- * 
- *                 indptr_ptr[i + 1] = indptr_ptr[i]
+  /* "skgarden/mondrian/tree/_tree.pyx":1016
+ *         cdef np.ndarray X_ndarray = X
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t n_samples = X.shape[0]
  */
-          __pyx_v_parent_tau = 0.0;
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7));
 
-          /* "skgarden/mondrian/tree/_tree.pyx":850
- *                 parent_tau = 0.0
- * 
- *                 indptr_ptr[i + 1] = indptr_ptr[i]             # <<<<<<<<<<<<<<
- * 
- *                 # Add all external nodes
+  /* "skgarden/mondrian/tree/_tree.pyx":1017
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t n_samples = X.shape[0]
+ *         cdef SIZE_t n_features = X.shape[1]
  */
-          (__pyx_v_indptr_ptr[(__pyx_v_i + 1)]) = (__pyx_v_indptr_ptr[__pyx_v_i]);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1017, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1017, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6));
 
-          /* "skgarden/mondrian/tree/_tree.pyx":853
- * 
- *                 # Add all external nodes
- *                 while node.left_child != _TREE_LEAF:             # <<<<<<<<<<<<<<
- * 
- *                     delta = node.tau - parent_tau
+  /* "skgarden/mondrian/tree/_tree.pyx":1018
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t n_features = X.shape[1]
+ *         cdef SIZE_t f_ind
  */
-          while (1) {
-            __pyx_t_7 = ((__pyx_v_node->left_child != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (!__pyx_t_7) break;
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1018, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1018, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_v_n_samples = __pyx_t_6;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":855
- *                 while node.left_child != _TREE_LEAF:
- * 
- *                     delta = node.tau - parent_tau             # <<<<<<<<<<<<<<
- *                     parent_tau = node.tau
+  /* "skgarden/mondrian/tree/_tree.pyx":1019
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t n_samples = X.shape[0]
+ *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t f_ind
  * 
  */
-            __pyx_v_delta = (__pyx_v_node->tau - __pyx_v_parent_tau);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1019, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_v_n_features = __pyx_t_6;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":856
+  /* "skgarden/mondrian/tree/_tree.pyx":1023
  * 
- *                     delta = node.tau - parent_tau
- *                     parent_tau = node.tau             # <<<<<<<<<<<<<<
+ *         # Initialize output
+ *         cdef np.ndarray[SIZE_t] out = np.zeros((n_samples,), dtype=np.intp)             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data
  * 
- *                     eta = 0.0
  */
-            __pyx_t_14 = __pyx_v_node->tau;
-            __pyx_v_parent_tau = __pyx_t_14;
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_4);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
+  __pyx_t_4 = 0;
+  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
+  __pyx_t_3 = 0;
+  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_intp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1023, __pyx_L1_error)
+  __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_out.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+      __pyx_v_out = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_out.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 1023, __pyx_L1_error)
+    } else {__pyx_pybuffernd_out.diminfo[0].strides = __pyx_pybuffernd_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_out.diminfo[0].shape = __pyx_pybuffernd_out.rcbuffer->pybuffer.shape[0];
+    }
+  }
+  __pyx_t_10 = 0;
+  __pyx_v_out = ((PyArrayObject *)__pyx_t_9);
+  __pyx_t_9 = 0;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":858
- *                     parent_tau = node.tau
+  /* "skgarden/mondrian/tree/_tree.pyx":1024
+ *         # Initialize output
+ *         cdef np.ndarray[SIZE_t] out = np.zeros((n_samples,), dtype=np.intp)
+ *         cdef SIZE_t* out_ptr = <SIZE_t*> out.data             # <<<<<<<<<<<<<<
  * 
- *                     eta = 0.0             # <<<<<<<<<<<<<<
- *                     for f_ind in range(n_features):
- *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]
+ *         # Initialize auxiliary data-structure
  */
-            __pyx_v_eta = 0.0;
+  __pyx_v_out_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_out->data);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":859
+  /* "skgarden/mondrian/tree/_tree.pyx":1027
  * 
- *                     eta = 0.0
- *                     for f_ind in range(n_features):             # <<<<<<<<<<<<<<
- *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]
- *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +
+ *         # Initialize auxiliary data-structure
+ *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t i = 0
+ *         cdef SIZE_t curr_node_id
  */
-            __pyx_t_15 = __pyx_v_n_features;
-            for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
-              __pyx_v_f_ind = __pyx_t_16;
+  __pyx_v_node = NULL;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":860
- *                     eta = 0.0
- *                     for f_ind in range(n_features):
- *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]             # <<<<<<<<<<<<<<
- *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +
- *                                 fmax(node.lower_bounds[f_ind] - X_val, 0.0))
+  /* "skgarden/mondrian/tree/_tree.pyx":1028
+ *         # Initialize auxiliary data-structure
+ *         cdef Node* node = NULL
+ *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t curr_node_id
+ * 
  */
-              __pyx_v_X_val = (__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_f_ind))]);
+  __pyx_v_i = 0;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":861
- *                     for f_ind in range(n_features):
- *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]
- *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +             # <<<<<<<<<<<<<<
- *                                 fmax(node.lower_bounds[f_ind] - X_val, 0.0))
- *                     p_s = 1 - exp(-delta*eta)
+  /* "skgarden/mondrian/tree/_tree.pyx":1031
+ *         cdef SIZE_t curr_node_id
+ * 
+ *         with nogil:             # <<<<<<<<<<<<<<
+ *             for i in range(n_samples):
+ *                 curr_node_id = self.root
  */
-              __pyx_v_eta = (__pyx_v_eta + (fmax((__pyx_v_X_val - (__pyx_v_node->upper_bounds[__pyx_v_f_ind])), 0.0) + fmax(((__pyx_v_node->lower_bounds[__pyx_v_f_ind]) - __pyx_v_X_val), 0.0)));
-            }
+  {
+      #ifdef WITH_THREAD
+      PyThreadState *_save;
+      Py_UNBLOCK_THREADS
+      __Pyx_FastGIL_Remember();
+      #endif
+      /*try:*/ {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":863
- *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +
- *                                 fmax(node.lower_bounds[f_ind] - X_val, 0.0))
- *                     p_s = 1 - exp(-delta*eta)             # <<<<<<<<<<<<<<
+        /* "skgarden/mondrian/tree/_tree.pyx":1032
+ * 
+ *         with nogil:
+ *             for i in range(n_samples):             # <<<<<<<<<<<<<<
+ *                 curr_node_id = self.root
  * 
- *                     if p_s > 0:
  */
-            __pyx_v_p_s = (1.0 - exp(((-__pyx_v_delta) * __pyx_v_eta)));
+        __pyx_t_6 = __pyx_v_n_samples;
+        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
+          __pyx_v_i = __pyx_t_7;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":865
- *                     p_s = 1 - exp(-delta*eta)
+          /* "skgarden/mondrian/tree/_tree.pyx":1033
+ *         with nogil:
+ *             for i in range(n_samples):
+ *                 curr_node_id = self.root             # <<<<<<<<<<<<<<
  * 
- *                     if p_s > 0:             # <<<<<<<<<<<<<<
- *                         # ... and node.right_child != _TREE_LEAF:
- *                         indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
+ *                 while True:
  */
-            __pyx_t_7 = ((__pyx_v_p_s > 0.0) != 0);
-            if (__pyx_t_7) {
+          __pyx_t_11 = __pyx_v_self->root;
+          __pyx_v_curr_node_id = __pyx_t_11;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":867
- *                     if p_s > 0:
- *                         # ... and node.right_child != _TREE_LEAF:
- *                         indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)             # <<<<<<<<<<<<<<
- *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
- *                         indptr_ptr[i + 1] += 1
+          /* "skgarden/mondrian/tree/_tree.pyx":1035
+ *                 curr_node_id = self.root
+ * 
+ *                 while True:             # <<<<<<<<<<<<<<
+ * 
+ *                     node = &self.nodes[curr_node_id]
  */
-              (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
+          while (1) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":868
- *                         # ... and node.right_child != _TREE_LEAF:
- *                         indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
- *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy             # <<<<<<<<<<<<<<
- *                         indptr_ptr[i + 1] += 1
+            /* "skgarden/mondrian/tree/_tree.pyx":1037
+ *                 while True:
+ * 
+ *                     node = &self.nodes[curr_node_id]             # <<<<<<<<<<<<<<
  * 
+ *                     if X_ptr[X_sample_stride * i +
  */
-              (__pyx_v_values_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = (__pyx_v_p_s * __pyx_v_p_nsy);
+            __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_curr_node_id]));
 
-              /* "skgarden/mondrian/tree/_tree.pyx":869
- *                         indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
- *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
- *                         indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
+            /* "skgarden/mondrian/tree/_tree.pyx":1040
  * 
  *                     if X_ptr[X_sample_stride * i +
+ *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
+ * 
+ *                         if node.left_child == _TREE_LEAF:
  */
-              __pyx_t_17 = (__pyx_v_i + 1);
-              (__pyx_v_indptr_ptr[__pyx_t_17]) = ((__pyx_v_indptr_ptr[__pyx_t_17]) + 1);
+            __pyx_t_2 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":865
- *                     p_s = 1 - exp(-delta*eta)
+            /* "skgarden/mondrian/tree/_tree.pyx":1039
+ *                     node = &self.nodes[curr_node_id]
+ * 
+ *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
+ *                              X_fx_stride * node.feature] <= node.threshold:
  * 
- *                     if p_s > 0:             # <<<<<<<<<<<<<<
- *                         # ... and node.right_child != _TREE_LEAF:
- *                         indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
  */
-            }
+            if (__pyx_t_2) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":872
+              /* "skgarden/mondrian/tree/_tree.pyx":1042
+ *                              X_fx_stride * node.feature] <= node.threshold:
  * 
- *                     if X_ptr[X_sample_stride * i +
- *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
- *                     else:
+ *                         if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                             break
+ *                         curr_node_id = node.left_child
  */
-            __pyx_t_7 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
+              __pyx_t_2 = ((__pyx_v_node->left_child == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
+              if (__pyx_t_2) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":871
- *                         indptr_ptr[i + 1] += 1
+                /* "skgarden/mondrian/tree/_tree.pyx":1043
+ * 
+ *                         if node.left_child == _TREE_LEAF:
+ *                             break             # <<<<<<<<<<<<<<
+ *                         curr_node_id = node.left_child
  * 
- *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
- *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]
  */
-            if (__pyx_t_7) {
+                goto __pyx_L11_break;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":873
- *                     if X_ptr[X_sample_stride * i +
+                /* "skgarden/mondrian/tree/_tree.pyx":1042
  *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]             # <<<<<<<<<<<<<<
+ * 
+ *                         if node.left_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                             break
+ *                         curr_node_id = node.left_child
+ */
+              }
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1044
+ *                         if node.left_child == _TREE_LEAF:
+ *                             break
+ *                         curr_node_id = node.left_child             # <<<<<<<<<<<<<<
+ * 
  *                     else:
- *                         node = &self.nodes[node.right_child]
  */
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->left_child]));
+              __pyx_t_11 = __pyx_v_node->left_child;
+              __pyx_v_curr_node_id = __pyx_t_11;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":871
- *                         indptr_ptr[i + 1] += 1
+              /* "skgarden/mondrian/tree/_tree.pyx":1039
+ *                     node = &self.nodes[curr_node_id]
  * 
  *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
  *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]
+ * 
  */
-              goto __pyx_L15;
+              goto __pyx_L12;
             }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":875
- *                         node = &self.nodes[node.left_child]
- *                     else:
- *                         node = &self.nodes[node.right_child]             # <<<<<<<<<<<<<<
- *                     p_nsy *= (1 - p_s)
+            /* "skgarden/mondrian/tree/_tree.pyx":1047
  * 
+ *                     else:
+ *                         if node.right_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                             break
+ *                         curr_node_id = node.right_child
  */
             /*else*/ {
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->right_child]));
-            }
-            __pyx_L15:;
+              __pyx_t_2 = ((__pyx_v_node->right_child == __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
+              if (__pyx_t_2) {
 
-            /* "skgarden/mondrian/tree/_tree.pyx":876
+                /* "skgarden/mondrian/tree/_tree.pyx":1048
  *                     else:
- *                         node = &self.nodes[node.right_child]
- *                     p_nsy *= (1 - p_s)             # <<<<<<<<<<<<<<
- * 
- *                 # Add the leave node
+ *                         if node.right_child == _TREE_LEAF:
+ *                             break             # <<<<<<<<<<<<<<
+ *                         curr_node_id = node.right_child
+ *                 out_ptr[i] = curr_node_id
  */
-            __pyx_v_p_nsy = (__pyx_v_p_nsy * (1.0 - __pyx_v_p_s));
-          }
+                goto __pyx_L11_break;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":879
+                /* "skgarden/mondrian/tree/_tree.pyx":1047
  * 
- *                 # Add the leave node
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)             # <<<<<<<<<<<<<<
- *                 values_ptr[indptr_ptr[i + 1]] = p_nsy
- *                 indptr_ptr[i + 1] += 1
+ *                     else:
+ *                         if node.right_child == _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                             break
+ *                         curr_node_id = node.right_child
  */
-          (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
+              }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":880
- *                 # Add the leave node
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
- *                 values_ptr[indptr_ptr[i + 1]] = p_nsy             # <<<<<<<<<<<<<<
- *                 indptr_ptr[i + 1] += 1
- * 
+              /* "skgarden/mondrian/tree/_tree.pyx":1049
+ *                         if node.right_child == _TREE_LEAF:
+ *                             break
+ *                         curr_node_id = node.right_child             # <<<<<<<<<<<<<<
+ *                 out_ptr[i] = curr_node_id
+ *         return out
  */
-          (__pyx_v_values_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = __pyx_v_p_nsy;
+              __pyx_t_11 = __pyx_v_node->right_child;
+              __pyx_v_curr_node_id = __pyx_t_11;
+            }
+            __pyx_L12:;
+          }
+          __pyx_L11_break:;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":881
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
- *                 values_ptr[indptr_ptr[i + 1]] = p_nsy
- *                 indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
+          /* "skgarden/mondrian/tree/_tree.pyx":1050
+ *                             break
+ *                         curr_node_id = node.right_child
+ *                 out_ptr[i] = curr_node_id             # <<<<<<<<<<<<<<
+ *         return out
  * 
- *         indices = indices[:indptr[n_samples]]
  */
-          __pyx_t_17 = (__pyx_v_i + 1);
-          (__pyx_v_indptr_ptr[__pyx_t_17]) = ((__pyx_v_indptr_ptr[__pyx_t_17]) + 1);
+          (__pyx_v_out_ptr[__pyx_v_i]) = __pyx_v_curr_node_id;
         }
       }
 
-      /* "skgarden/mondrian/tree/_tree.pyx":844
- *         cdef DTYPE_t p_nsy
+      /* "skgarden/mondrian/tree/_tree.pyx":1031
+ *         cdef SIZE_t curr_node_id
  * 
  *         with nogil:             # <<<<<<<<<<<<<<
  *             for i in range(n_samples):
- *                 p_nsy = 1.0
+ *                 curr_node_id = self.root
  */
       /*finally:*/ {
         /*normal exit:*/{
           #ifdef WITH_THREAD
+          __Pyx_FastGIL_Forget();
           Py_BLOCK_THREADS
           #endif
           goto __pyx_L7;
@@ -11240,153 +12339,150 @@
       }
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":883
- *                 indptr_ptr[i + 1] += 1
+  /* "skgarden/mondrian/tree/_tree.pyx":1051
+ *                         curr_node_id = node.right_child
+ *                 out_ptr[i] = curr_node_id
+ *         return out             # <<<<<<<<<<<<<<
  * 
- *         indices = indices[:indptr[n_samples]]             # <<<<<<<<<<<<<<
- *         values = values[:indptr[n_samples]]
- *         out = csr_matrix((values, indices, indptr),
+ *     cpdef object decision_path(self, object X):
  */
-  __pyx_t_18 = __pyx_v_n_samples;
-  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_indices), 0, (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_indptr.diminfo[0].strides)), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 883, __pyx_L1_error)
-  __pyx_t_11 = ((PyArrayObject *)__pyx_t_2);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
-    __pyx_t_19 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
-    if (unlikely(__pyx_t_19 < 0)) {
-      PyErr_Fetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
-      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-        Py_XDECREF(__pyx_t_20); Py_XDECREF(__pyx_t_21); Py_XDECREF(__pyx_t_22);
-        __Pyx_RaiseBufferFallbackError();
-      } else {
-        PyErr_Restore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
-      }
-    }
-    __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
-    if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 883, __pyx_L1_error)
-  }
-  __pyx_t_11 = 0;
-  __Pyx_DECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_2));
-  __pyx_t_2 = 0;
+  __Pyx_XDECREF(((PyObject *)__pyx_r));
+  __Pyx_INCREF(((PyObject *)__pyx_v_out));
+  __pyx_r = ((PyArrayObject *)__pyx_v_out);
+  goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":884
+  /* "skgarden/mondrian/tree/_tree.pyx":1002
+ * 
+ * 
+ *     cdef inline np.ndarray _apply_dense(self, object X):             # <<<<<<<<<<<<<<
+ *         """Finds the terminal region (=leaf node) for each sample in X."""
  * 
- *         indices = indices[:indptr[n_samples]]
- *         values = values[:indptr[n_samples]]             # <<<<<<<<<<<<<<
- *         out = csr_matrix((values, indices, indptr),
- *                          shape=(n_samples, self.node_count))
  */
-  __pyx_t_23 = __pyx_v_n_samples;
-  __pyx_t_2 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_values), 0, (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_indptr.diminfo[0].strides)), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 884, __pyx_L1_error)
-  __pyx_t_12 = ((PyArrayObject *)__pyx_t_2);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);
-    __pyx_t_19 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
-    if (unlikely(__pyx_t_19 < 0)) {
-      PyErr_Fetch(&__pyx_t_22, &__pyx_t_21, &__pyx_t_20);
-      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_v_values, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-        Py_XDECREF(__pyx_t_22); Py_XDECREF(__pyx_t_21); Py_XDECREF(__pyx_t_20);
-        __Pyx_RaiseBufferFallbackError();
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_8);
+  __Pyx_XDECREF(__pyx_t_9);
+  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out.rcbuffer->pybuffer);
+  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._apply_dense", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = 0;
+  goto __pyx_L2;
+  __pyx_L0:;
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_out.rcbuffer->pybuffer);
+  __pyx_L2:;
+  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
+  __Pyx_XDECREF((PyObject *)__pyx_v_out);
+  __Pyx_XGIVEREF((PyObject *)__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":1053
+ *         return out
+ * 
+ *     cpdef object decision_path(self, object X):             # <<<<<<<<<<<<<<
+ *         """Finds the decision path (=node) for each sample in X."""
+ *         return self._decision_path_dense(X)
+ */
+
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  __Pyx_RefNannySetupContext("decision_path", 0);
+  /* Check if called by wrapper */
+  if (unlikely(__pyx_skip_dispatch)) ;
+  /* Check if overridden in Python */
+  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_decision_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path)) {
+      __Pyx_XDECREF(__pyx_r);
+      __Pyx_INCREF(__pyx_t_1);
+      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
+      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
+        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
+        if (likely(__pyx_t_4)) {
+          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
+          __Pyx_INCREF(__pyx_t_4);
+          __Pyx_INCREF(function);
+          __Pyx_DECREF_SET(__pyx_t_3, function);
+        }
+      }
+      if (!__pyx_t_4) {
+        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_2);
       } else {
-        PyErr_Restore(__pyx_t_22, __pyx_t_21, __pyx_t_20);
+        #if CYTHON_FAST_PYCALL
+        if (PyFunction_Check(__pyx_t_3)) {
+          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
+          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
+          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+          __Pyx_GOTREF(__pyx_t_2);
+        } else
+        #endif
+        #if CYTHON_FAST_PYCCALL
+        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
+          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
+          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
+          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+          __Pyx_GOTREF(__pyx_t_2);
+        } else
+        #endif
+        {
+          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1053, __pyx_L1_error)
+          __Pyx_GOTREF(__pyx_t_5);
+          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
+          __Pyx_INCREF(__pyx_v_X);
+          __Pyx_GIVEREF(__pyx_v_X);
+          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
+          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
+          __Pyx_GOTREF(__pyx_t_2);
+          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+        }
       }
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __pyx_r = __pyx_t_2;
+      __pyx_t_2 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      goto __pyx_L0;
     }
-    __pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];
-    if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 884, __pyx_L1_error)
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   }
-  __pyx_t_12 = 0;
-  __Pyx_DECREF_SET(__pyx_v_values, ((PyArrayObject *)__pyx_t_2));
-  __pyx_t_2 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":885
- *         indices = indices[:indptr[n_samples]]
- *         values = values[:indptr[n_samples]]
- *         out = csr_matrix((values, indices, indptr),             # <<<<<<<<<<<<<<
- *                          shape=(n_samples, self.node_count))
- * 
- */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 885, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 885, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_INCREF(((PyObject *)__pyx_v_values));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_values));
-  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_values));
-  __Pyx_INCREF(((PyObject *)__pyx_v_indices));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_indices));
-  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_indices));
-  __Pyx_INCREF(((PyObject *)__pyx_v_indptr));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_indptr));
-  PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_indptr));
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
-  __pyx_t_5 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":886
- *         values = values[:indptr[n_samples]]
- *         out = csr_matrix((values, indices, indptr),
- *                          shape=(n_samples, self.node_count))             # <<<<<<<<<<<<<<
- * 
- *         return out
- */
-  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 886, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 886, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_24 = PyTuple_New(2); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 886, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_24);
-  __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_4);
-  __Pyx_GIVEREF(__pyx_t_3);
-  PyTuple_SET_ITEM(__pyx_t_24, 1, __pyx_t_3);
-  __pyx_t_4 = 0;
-  __pyx_t_3 = 0;
-  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_shape, __pyx_t_24) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":885
- *         indices = indices[:indptr[n_samples]]
- *         values = values[:indptr[n_samples]]
- *         out = csr_matrix((values, indices, indptr),             # <<<<<<<<<<<<<<
- *                          shape=(n_samples, self.node_count))
- * 
- */
-  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 885, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_24);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_out = __pyx_t_24;
-  __pyx_t_24 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":888
- *                          shape=(n_samples, self.node_count))
- * 
- *         return out             # <<<<<<<<<<<<<<
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":1055
+ *     cpdef object decision_path(self, object X):
+ *         """Finds the decision path (=node) for each sample in X."""
+ *         return self._decision_path_dense(X)             # <<<<<<<<<<<<<<
  * 
+ *     cpdef object weighted_decision_path(self, object X):
  */
   __Pyx_XDECREF(__pyx_r);
-  __Pyx_INCREF(__pyx_v_out);
-  __pyx_r = __pyx_v_out;
+  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense(__pyx_v_self, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":801
- *             return self._decision_path_dense(X)
+  /* "skgarden/mondrian/tree/_tree.pyx":1053
+ *         return out
  * 
- *     cpdef object weighted_decision_path(self, object X):             # <<<<<<<<<<<<<<
- *         """Returns the weight at each node for each sample in X."""
- *         if not isinstance(X, np.ndarray):
+ *     cpdef object decision_path(self, object X):             # <<<<<<<<<<<<<<
+ *         """Finds the decision path (=node) for each sample in X."""
+ *         return self._decision_path_dense(X)
  */
 
   /* function exit code */
@@ -11396,54 +12492,35 @@
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_24);
-  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);
-  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.weighted_decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
-  goto __pyx_L2;
   __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);
-  __pyx_L2:;
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_indptr);
-  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
-  __Pyx_XDECREF((PyObject *)__pyx_v_values);
-  __Pyx_XDECREF(__pyx_v_out);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
 /* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
-static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_16weighted_decision_path[] = "Returns the weight at each node for each sample in X.";
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_14decision_path[] = "Finds the decision path (=node) for each sample in X.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_15decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
   PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("weighted_decision_path (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_16weighted_decision_path(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_X));
+  __Pyx_RefNannySetupContext("decision_path (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14decision_path(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_X));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_16weighted_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_14decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   PyObject *__pyx_t_1 = NULL;
-  __Pyx_RefNannySetupContext("weighted_decision_path", 0);
+  __Pyx_RefNannySetupContext("decision_path", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_weighted_decision_path(__pyx_v_self, __pyx_v_X, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
+  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_decision_path(__pyx_v_self, __pyx_v_X, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -11452,7 +12529,7 @@
   /* function exit code */
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.weighted_decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
   __Pyx_XGIVEREF(__pyx_r);
@@ -11460,58 +12537,71 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":892
- * 
- * 
- *     cdef inline object _decision_path_dense(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the decision path (=node) for each sample in X."""
+/* "skgarden/mondrian/tree/_tree.pyx":1057
+ *         return self._decision_path_dense(X)
  * 
+ *     cpdef object weighted_decision_path(self, object X):             # <<<<<<<<<<<<<<
+ *         """Returns the weight at each node for each sample in X."""
+ *         if not isinstance(X, np.ndarray):
  */
 
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_weighted_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
   PyArrayObject *__pyx_v_X_ndarray = 0;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_sample_stride;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_fx_stride;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
   PyArrayObject *__pyx_v_indptr = 0;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_indptr_ptr;
   PyArrayObject *__pyx_v_indices = 0;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_indices_ptr;
+  PyArrayObject *__pyx_v_values = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_values_ptr;
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
-  PyArrayObject *__pyx_v_data = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_parent_tau;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_delta;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_eta;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_X_val;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_p_s;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_p_nsy;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_f_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_curr_node_id;
   PyObject *__pyx_v_out = NULL;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
-  __Pyx_Buffer __pyx_pybuffer_data;
   __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
   __Pyx_Buffer __pyx_pybuffer_indices;
   __Pyx_LocalBuf_ND __pyx_pybuffernd_indptr;
   __Pyx_Buffer __pyx_pybuffer_indptr;
+  __Pyx_LocalBuf_ND __pyx_pybuffernd_values;
+  __Pyx_Buffer __pyx_pybuffer_values;
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  int __pyx_t_2;
+  PyObject *__pyx_t_1 = NULL;
+  PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_6;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_7;
-  PyObject *__pyx_t_8 = NULL;
-  PyObject *__pyx_t_9 = NULL;
+  int __pyx_t_6;
+  int __pyx_t_7;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_8;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_9;
   PyArrayObject *__pyx_t_10 = NULL;
   PyArrayObject *__pyx_t_11 = NULL;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_t_12;
-  long __pyx_t_13;
-  Py_ssize_t __pyx_t_14;
-  int __pyx_t_15;
-  PyObject *__pyx_t_16 = NULL;
-  PyObject *__pyx_t_17 = NULL;
-  PyObject *__pyx_t_18 = NULL;
-  Py_ssize_t __pyx_t_19;
-  PyArrayObject *__pyx_t_20 = NULL;
+  PyArrayObject *__pyx_t_12 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_13;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_t_14;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_15;
+  long __pyx_t_16;
+  Py_ssize_t __pyx_t_17;
+  int __pyx_t_18;
+  PyObject *__pyx_t_19 = NULL;
+  PyObject *__pyx_t_20 = NULL;
   PyObject *__pyx_t_21 = NULL;
-  __Pyx_RefNannySetupContext("_decision_path_dense", 0);
+  Py_ssize_t __pyx_t_22;
+  PyObject *__pyx_t_23 = NULL;
+  __Pyx_RefNannySetupContext("weighted_decision_path", 0);
   __pyx_pybuffer_indptr.pybuffer.buf = NULL;
   __pyx_pybuffer_indptr.refcount = 0;
   __pyx_pybuffernd_indptr.data = NULL;
@@ -11520,103 +12610,162 @@
   __pyx_pybuffer_indices.refcount = 0;
   __pyx_pybuffernd_indices.data = NULL;
   __pyx_pybuffernd_indices.rcbuffer = &__pyx_pybuffer_indices;
-  __pyx_pybuffer_data.pybuffer.buf = NULL;
-  __pyx_pybuffer_data.refcount = 0;
-  __pyx_pybuffernd_data.data = NULL;
-  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;
+  __pyx_pybuffer_values.pybuffer.buf = NULL;
+  __pyx_pybuffer_values.refcount = 0;
+  __pyx_pybuffernd_values.data = NULL;
+  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;
+  /* Check if called by wrapper */
+  if (unlikely(__pyx_skip_dispatch)) ;
+  /* Check if overridden in Python */
+  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_weighted_decision_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path)) {
+      __Pyx_XDECREF(__pyx_r);
+      __Pyx_INCREF(__pyx_t_1);
+      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
+      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
+        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
+        if (likely(__pyx_t_4)) {
+          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
+          __Pyx_INCREF(__pyx_t_4);
+          __Pyx_INCREF(function);
+          __Pyx_DECREF_SET(__pyx_t_3, function);
+        }
+      }
+      if (!__pyx_t_4) {
+        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_2);
+      } else {
+        #if CYTHON_FAST_PYCALL
+        if (PyFunction_Check(__pyx_t_3)) {
+          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
+          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
+          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+          __Pyx_GOTREF(__pyx_t_2);
+        } else
+        #endif
+        #if CYTHON_FAST_PYCCALL
+        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
+          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
+          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
+          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
+          __Pyx_GOTREF(__pyx_t_2);
+        } else
+        #endif
+        {
+          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1057, __pyx_L1_error)
+          __Pyx_GOTREF(__pyx_t_5);
+          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
+          __Pyx_INCREF(__pyx_v_X);
+          __Pyx_GIVEREF(__pyx_v_X);
+          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
+          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
+          __Pyx_GOTREF(__pyx_t_2);
+          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+        }
+      }
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __pyx_r = __pyx_t_2;
+      __pyx_t_2 = 0;
+      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+      goto __pyx_L0;
+    }
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":896
- * 
- *         # Check input
+  /* "skgarden/mondrian/tree/_tree.pyx":1059
+ *     cpdef object weighted_decision_path(self, object X):
+ *         """Returns the weight at each node for each sample in X."""
  *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
  *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))
  */
-  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
-  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
-  if (__pyx_t_2) {
+  __pyx_t_6 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
+  __pyx_t_7 = ((!(__pyx_t_6 != 0)) != 0);
+  if (__pyx_t_7) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":898
+    /* "skgarden/mondrian/tree/_tree.pyx":1061
  *         if not isinstance(X, np.ndarray):
  *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))             # <<<<<<<<<<<<<<
  * 
  *         if X.dtype != DTYPE:
  */
-    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":897
- *         # Check input
+    /* "skgarden/mondrian/tree/_tree.pyx":1060
+ *         """Returns the weight at each node for each sample in X."""
  *         if not isinstance(X, np.ndarray):
  *             raise ValueError("X should be in np.ndarray format, got %s"             # <<<<<<<<<<<<<<
  *                              % type(X))
  * 
  */
-    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 897, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_GIVEREF(__pyx_t_3);
-    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
-    __pyx_t_3 = 0;
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 897, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(0, 897, __pyx_L1_error)
+    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_GIVEREF(__pyx_t_1);
+    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
+    __pyx_t_1 = 0;
+    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+    __PYX_ERR(0, 1060, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":896
- * 
- *         # Check input
+    /* "skgarden/mondrian/tree/_tree.pyx":1059
+ *     cpdef object weighted_decision_path(self, object X):
+ *         """Returns the weight at each node for each sample in X."""
  *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
  *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":900
+  /* "skgarden/mondrian/tree/_tree.pyx":1063
  *                              % type(X))
  * 
  *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
  *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
  * 
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 900, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 900, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1063, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 900, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (__pyx_t_2) {
+  if (__pyx_t_7) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":901
+    /* "skgarden/mondrian/tree/_tree.pyx":1064
  * 
  *         if X.dtype != DTYPE:
  *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
  * 
  *         # Extract input
  */
-    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 901, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 901, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_5);
-    __Pyx_GIVEREF(__pyx_t_4);
-    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
-    __pyx_t_4 = 0;
-    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 901, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __PYX_ERR(0, 901, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_GIVEREF(__pyx_t_2);
+    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
+    __pyx_t_2 = 0;
+    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __PYX_ERR(0, 1064, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":900
+    /* "skgarden/mondrian/tree/_tree.pyx":1063
  *                              % type(X))
  * 
  *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
@@ -11625,20 +12774,20 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":904
+  /* "skgarden/mondrian/tree/_tree.pyx":1067
  * 
  *         # Extract input
  *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  */
-  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 904, __pyx_L1_error)
-  __pyx_t_4 = __pyx_v_X;
-  __Pyx_INCREF(__pyx_t_4);
-  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1067, __pyx_L1_error)
+  __pyx_t_2 = __pyx_v_X;
+  __Pyx_INCREF(__pyx_t_2);
+  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_2);
+  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":905
+  /* "skgarden/mondrian/tree/_tree.pyx":1068
  *         # Extract input
  *         cdef np.ndarray X_ndarray = X
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
@@ -11647,110 +12796,126 @@
  */
   __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":906
+  /* "skgarden/mondrian/tree/_tree.pyx":1069
  *         cdef np.ndarray X_ndarray = X
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         cdef SIZE_t n_samples = X.shape[0]
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 906, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 906, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 906, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7));
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1069, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1069, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1069, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1069, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_8) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_9));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":907
+  /* "skgarden/mondrian/tree/_tree.pyx":1070
  *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         cdef SIZE_t n_samples = X.shape[0]
- * 
+ *         cdef SIZE_t n_features = X.shape[1]
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 907, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 907, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6));
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1070, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_9) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_8));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":908
+  /* "skgarden/mondrian/tree/_tree.pyx":1071
  *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t n_features = X.shape[1]
+ * 
+ */
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_v_n_samples = __pyx_t_8;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1072
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t n_samples = X.shape[0]
+ *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
  * 
  *         # Initialize output
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_n_samples = __pyx_t_6;
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1072, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_v_n_features = __pyx_t_8;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":911
+  /* "skgarden/mondrian/tree/_tree.pyx":1075
  * 
  *         # Initialize output
  *         cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)             # <<<<<<<<<<<<<<
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  */
-  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_n_samples + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_2);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
+  __pyx_t_2 = 0;
+  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1075, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 911, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1075, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_n_samples + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
-  __pyx_t_5 = 0;
-  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_intp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
-  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
+  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 911, __pyx_L1_error)
-  __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1075, __pyx_L1_error)
+  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
       __pyx_v_indptr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 911, __pyx_L1_error)
+      __PYX_ERR(0, 1075, __pyx_L1_error)
     } else {__pyx_pybuffernd_indptr.diminfo[0].strides = __pyx_pybuffernd_indptr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indptr.diminfo[0].shape = __pyx_pybuffernd_indptr.rcbuffer->pybuffer.shape[0];
     }
   }
   __pyx_t_10 = 0;
-  __pyx_v_indptr = ((PyArrayObject *)__pyx_t_9);
-  __pyx_t_9 = 0;
+  __pyx_v_indptr = ((PyArrayObject *)__pyx_t_4);
+  __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":912
+  /* "skgarden/mondrian/tree/_tree.pyx":1076
  *         # Initialize output
  *         cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data             # <<<<<<<<<<<<<<
@@ -11759,95 +12924,180 @@
  */
   __pyx_v_indptr_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indptr->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":914
+  /* "skgarden/mondrian/tree/_tree.pyx":1078
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  */
-  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 914, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1078, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":915
+  /* "skgarden/mondrian/tree/_tree.pyx":1079
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
  *                                                    (1 + self.max_depth),             # <<<<<<<<<<<<<<
  *                                                    dtype=np.intp)
  *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
  */
-  __pyx_t_9 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 914, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
+  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1078, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":914
+  /* "skgarden/mondrian/tree/_tree.pyx":1078
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  */
-  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_GIVEREF(__pyx_t_9);
-  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
-  __pyx_t_9 = 0;
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_4);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
+  __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":916
+  /* "skgarden/mondrian/tree/_tree.pyx":1080
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)             # <<<<<<<<<<<<<<
  *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
  * 
  */
-  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 916, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 916, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 916, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 916, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1080, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1080, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":914
+  /* "skgarden/mondrian/tree/_tree.pyx":1078
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  */
-  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1078, __pyx_L1_error)
+  __pyx_t_11 = ((PyArrayObject *)__pyx_t_5);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+      __pyx_v_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 1078, __pyx_L1_error)
+    } else {__pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
+    }
+  }
+  __pyx_t_11 = 0;
+  __pyx_v_indices = ((PyArrayObject *)__pyx_t_5);
+  __pyx_t_5 = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1081
+ *                                                    (1 + self.max_depth),
+ *                                                    dtype=np.intp)
+ *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data             # <<<<<<<<<<<<<<
+ * 
+ *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *
+ */
+  __pyx_v_indices_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indices->data);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1083
+ *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
+ * 
+ *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *             # <<<<<<<<<<<<<<
+ *                                                 (1 + self.max_depth),
+ *                                                  dtype=DTYPE)
+ */
+  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1083, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1083, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
-  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 914, __pyx_L1_error)
-  __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1084
+ * 
+ *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *
+ *                                                 (1 + self.max_depth),             # <<<<<<<<<<<<<<
+ *                                                  dtype=DTYPE)
+ *         cdef DTYPE_t* values_ptr = <DTYPE_t*> values.data
+ */
+  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1083, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1083
+ *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
+ * 
+ *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *             # <<<<<<<<<<<<<<
+ *                                                 (1 + self.max_depth),
+ *                                                  dtype=DTYPE)
+ */
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+  __pyx_t_5 = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1085
+ *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *
+ *                                                 (1 + self.max_depth),
+ *                                                  dtype=DTYPE)             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* values_ptr = <DTYPE_t*> values.data
+ * 
+ */
+  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1085, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1085, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+
+  /* "skgarden/mondrian/tree/_tree.pyx":1083
+ *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
+ * 
+ *         cdef np.ndarray[DTYPE_t] values = np.zeros(n_samples *             # <<<<<<<<<<<<<<
+ *                                                 (1 + self.max_depth),
+ *                                                  dtype=DTYPE)
+ */
+  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1083, __pyx_L1_error)
+  __pyx_t_12 = ((PyArrayObject *)__pyx_t_2);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 914, __pyx_L1_error)
-    } else {__pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;
+      __PYX_ERR(0, 1083, __pyx_L1_error)
+    } else {__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];
     }
   }
-  __pyx_t_11 = 0;
-  __pyx_v_indices = ((PyArrayObject *)__pyx_t_8);
-  __pyx_t_8 = 0;
+  __pyx_t_12 = 0;
+  __pyx_v_values = ((PyArrayObject *)__pyx_t_2);
+  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":917
- *                                                    (1 + self.max_depth),
- *                                                    dtype=np.intp)
- *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":1086
+ *                                                 (1 + self.max_depth),
+ *                                                  dtype=DTYPE)
+ *         cdef DTYPE_t* values_ptr = <DTYPE_t*> values.data             # <<<<<<<<<<<<<<
  * 
  *         # Initialize auxiliary data-structure
  */
-  __pyx_v_indices_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indices->data);
+  __pyx_v_values_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_values->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":920
+  /* "skgarden/mondrian/tree/_tree.pyx":1089
  * 
  *         # Initialize auxiliary data-structure
  *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
@@ -11856,170 +13106,323 @@
  */
   __pyx_v_node = NULL;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":921
+  /* "skgarden/mondrian/tree/_tree.pyx":1090
  *         # Initialize auxiliary data-structure
  *         cdef Node* node = NULL
  *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
  * 
- *         with nogil:
+ *         cdef DTYPE_t parent_tau
  */
   __pyx_v_i = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":923
- *         cdef SIZE_t i = 0
+  /* "skgarden/mondrian/tree/_tree.pyx":1101
+ *         cdef SIZE_t curr_node_id
  * 
  *         with nogil:             # <<<<<<<<<<<<<<
  *             for i in range(n_samples):
- *                 node = self.nodes
+ *                 p_nsy = 1.0
  */
   {
       #ifdef WITH_THREAD
       PyThreadState *_save;
       Py_UNBLOCK_THREADS
+      __Pyx_FastGIL_Remember();
       #endif
       /*try:*/ {
 
-        /* "skgarden/mondrian/tree/_tree.pyx":924
+        /* "skgarden/mondrian/tree/_tree.pyx":1102
  * 
  *         with nogil:
  *             for i in range(n_samples):             # <<<<<<<<<<<<<<
- *                 node = self.nodes
- *                 indptr_ptr[i + 1] = indptr_ptr[i]
+ *                 p_nsy = 1.0
+ *                 parent_tau = 0.0
  */
-        __pyx_t_6 = __pyx_v_n_samples;
-        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
-          __pyx_v_i = __pyx_t_7;
+        __pyx_t_8 = __pyx_v_n_samples;
+        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
+          __pyx_v_i = __pyx_t_9;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":925
+          /* "skgarden/mondrian/tree/_tree.pyx":1103
  *         with nogil:
  *             for i in range(n_samples):
- *                 node = self.nodes             # <<<<<<<<<<<<<<
+ *                 p_nsy = 1.0             # <<<<<<<<<<<<<<
+ *                 parent_tau = 0.0
  *                 indptr_ptr[i + 1] = indptr_ptr[i]
- * 
  */
-          __pyx_t_12 = __pyx_v_self->nodes;
-          __pyx_v_node = __pyx_t_12;
+          __pyx_v_p_nsy = 1.0;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":926
+          /* "skgarden/mondrian/tree/_tree.pyx":1104
  *             for i in range(n_samples):
- *                 node = self.nodes
+ *                 p_nsy = 1.0
+ *                 parent_tau = 0.0             # <<<<<<<<<<<<<<
+ *                 indptr_ptr[i + 1] = indptr_ptr[i]
+ * 
+ */
+          __pyx_v_parent_tau = 0.0;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":1105
+ *                 p_nsy = 1.0
+ *                 parent_tau = 0.0
  *                 indptr_ptr[i + 1] = indptr_ptr[i]             # <<<<<<<<<<<<<<
  * 
- *                 # Add all external nodes
+ *                 curr_node_id = self.root
  */
           (__pyx_v_indptr_ptr[(__pyx_v_i + 1)]) = (__pyx_v_indptr_ptr[__pyx_v_i]);
 
-          /* "skgarden/mondrian/tree/_tree.pyx":929
+          /* "skgarden/mondrian/tree/_tree.pyx":1107
+ *                 indptr_ptr[i + 1] = indptr_ptr[i]
+ * 
+ *                 curr_node_id = self.root             # <<<<<<<<<<<<<<
+ *                 node = &self.nodes[curr_node_id]
+ * 
+ */
+          __pyx_t_13 = __pyx_v_self->root;
+          __pyx_v_curr_node_id = __pyx_t_13;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":1108
+ * 
+ *                 curr_node_id = self.root
+ *                 node = &self.nodes[curr_node_id]             # <<<<<<<<<<<<<<
+ * 
+ *                 while node.left_child != _TREE_LEAF:
+ */
+          __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_curr_node_id]));
+
+          /* "skgarden/mondrian/tree/_tree.pyx":1110
+ *                 node = &self.nodes[curr_node_id]
  * 
- *                 # Add all external nodes
  *                 while node.left_child != _TREE_LEAF:             # <<<<<<<<<<<<<<
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
+ * 
+ *                     delta = node.tau - parent_tau
  */
           while (1) {
-            __pyx_t_2 = ((__pyx_v_node->left_child != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (!__pyx_t_2) break;
+            __pyx_t_7 = ((__pyx_v_node->left_child != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
+            if (!__pyx_t_7) break;
 
-            /* "skgarden/mondrian/tree/_tree.pyx":931
+            /* "skgarden/mondrian/tree/_tree.pyx":1112
  *                 while node.left_child != _TREE_LEAF:
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)             # <<<<<<<<<<<<<<
- *                     indptr_ptr[i + 1] += 1
+ * 
+ *                     delta = node.tau - parent_tau             # <<<<<<<<<<<<<<
+ *                     parent_tau = node.tau
  * 
  */
-            (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
+            __pyx_v_delta = (__pyx_v_node->tau - __pyx_v_parent_tau);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":932
- *                     # ... and node.right_child != _TREE_LEAF:
- *                     indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
- *                     indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
+            /* "skgarden/mondrian/tree/_tree.pyx":1113
  * 
- *                     if X_ptr[X_sample_stride * i +
+ *                     delta = node.tau - parent_tau
+ *                     parent_tau = node.tau             # <<<<<<<<<<<<<<
+ * 
+ *                     eta = 0.0
  */
-            __pyx_t_13 = (__pyx_v_i + 1);
-            (__pyx_v_indptr_ptr[__pyx_t_13]) = ((__pyx_v_indptr_ptr[__pyx_t_13]) + 1);
+            __pyx_t_14 = __pyx_v_node->tau;
+            __pyx_v_parent_tau = __pyx_t_14;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":1115
+ *                     parent_tau = node.tau
+ * 
+ *                     eta = 0.0             # <<<<<<<<<<<<<<
+ *                     for f_ind in range(n_features):
+ *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]
+ */
+            __pyx_v_eta = 0.0;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":1116
+ * 
+ *                     eta = 0.0
+ *                     for f_ind in range(n_features):             # <<<<<<<<<<<<<<
+ *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]
+ *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +
+ */
+            __pyx_t_13 = __pyx_v_n_features;
+            for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_13; __pyx_t_15+=1) {
+              __pyx_v_f_ind = __pyx_t_15;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1117
+ *                     eta = 0.0
+ *                     for f_ind in range(n_features):
+ *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]             # <<<<<<<<<<<<<<
+ *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +
+ *                                 fmax(node.lower_bounds[f_ind] - X_val, 0.0))
+ */
+              __pyx_v_X_val = (__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_f_ind))]);
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1118
+ *                     for f_ind in range(n_features):
+ *                         X_val = X_ptr[X_sample_stride * i + X_fx_stride * f_ind]
+ *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +             # <<<<<<<<<<<<<<
+ *                                 fmax(node.lower_bounds[f_ind] - X_val, 0.0))
+ *                     p_s = 1 - exp(-delta*eta)
+ */
+              __pyx_v_eta = (__pyx_v_eta + (__pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax((__pyx_v_X_val - (__pyx_v_node->upper_bounds[__pyx_v_f_ind])), 0.0) + __pyx_f_8skgarden_8mondrian_4tree_5_tree_fmax(((__pyx_v_node->lower_bounds[__pyx_v_f_ind]) - __pyx_v_X_val), 0.0)));
+            }
+
+            /* "skgarden/mondrian/tree/_tree.pyx":1120
+ *                         eta += (fmax(X_val - node.upper_bounds[f_ind], 0.0) +
+ *                                 fmax(node.lower_bounds[f_ind] - X_val, 0.0))
+ *                     p_s = 1 - exp(-delta*eta)             # <<<<<<<<<<<<<<
+ * 
+ *                     if p_s > 0:
+ */
+            __pyx_v_p_s = (1.0 - exp(((-__pyx_v_delta) * __pyx_v_eta)));
+
+            /* "skgarden/mondrian/tree/_tree.pyx":1122
+ *                     p_s = 1 - exp(-delta*eta)
+ * 
+ *                     if p_s > 0:             # <<<<<<<<<<<<<<
+ *                         indices_ptr[indptr_ptr[i + 1]] = curr_node_id
+ *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
+ */
+            __pyx_t_7 = ((__pyx_v_p_s > 0.0) != 0);
+            if (__pyx_t_7) {
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1123
+ * 
+ *                     if p_s > 0:
+ *                         indices_ptr[indptr_ptr[i + 1]] = curr_node_id             # <<<<<<<<<<<<<<
+ *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
+ *                         indptr_ptr[i + 1] += 1
+ */
+              (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = __pyx_v_curr_node_id;
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1124
+ *                     if p_s > 0:
+ *                         indices_ptr[indptr_ptr[i + 1]] = curr_node_id
+ *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy             # <<<<<<<<<<<<<<
+ *                         indptr_ptr[i + 1] += 1
+ * 
+ */
+              (__pyx_v_values_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = (__pyx_v_p_s * __pyx_v_p_nsy);
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1125
+ *                         indices_ptr[indptr_ptr[i + 1]] = curr_node_id
+ *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
+ *                         indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
+ * 
+ *                     p_nsy *= (1 - p_s)
+ */
+              __pyx_t_16 = (__pyx_v_i + 1);
+              (__pyx_v_indptr_ptr[__pyx_t_16]) = ((__pyx_v_indptr_ptr[__pyx_t_16]) + 1);
+
+              /* "skgarden/mondrian/tree/_tree.pyx":1122
+ *                     p_s = 1 - exp(-delta*eta)
+ * 
+ *                     if p_s > 0:             # <<<<<<<<<<<<<<
+ *                         indices_ptr[indptr_ptr[i + 1]] = curr_node_id
+ *                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
+ */
+            }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":935
+            /* "skgarden/mondrian/tree/_tree.pyx":1127
+ *                         indptr_ptr[i + 1] += 1
  * 
+ *                     p_nsy *= (1 - p_s)             # <<<<<<<<<<<<<<
+ *                     if X_ptr[X_sample_stride * i +
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ */
+            __pyx_v_p_nsy = (__pyx_v_p_nsy * (1.0 - __pyx_v_p_s));
+
+            /* "skgarden/mondrian/tree/_tree.pyx":1129
+ *                     p_nsy *= (1 - p_s)
  *                     if X_ptr[X_sample_stride * i +
  *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
+ *                         curr_node_id = node.left_child
  *                     else:
  */
-            __pyx_t_2 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
+            __pyx_t_7 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
 
-            /* "skgarden/mondrian/tree/_tree.pyx":934
- *                     indptr_ptr[i + 1] += 1
+            /* "skgarden/mondrian/tree/_tree.pyx":1128
  * 
+ *                     p_nsy *= (1 - p_s)
  *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
  *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]
+ *                         curr_node_id = node.left_child
  */
-            if (__pyx_t_2) {
+            if (__pyx_t_7) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":936
+              /* "skgarden/mondrian/tree/_tree.pyx":1130
  *                     if X_ptr[X_sample_stride * i +
  *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]             # <<<<<<<<<<<<<<
+ *                         curr_node_id = node.left_child             # <<<<<<<<<<<<<<
  *                     else:
- *                         node = &self.nodes[node.right_child]
+ *                         curr_node_id = node.right_child
  */
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->left_child]));
+              __pyx_t_13 = __pyx_v_node->left_child;
+              __pyx_v_curr_node_id = __pyx_t_13;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":934
- *                     indptr_ptr[i + 1] += 1
+              /* "skgarden/mondrian/tree/_tree.pyx":1128
  * 
+ *                     p_nsy *= (1 - p_s)
  *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
  *                              X_fx_stride * node.feature] <= node.threshold:
- *                         node = &self.nodes[node.left_child]
+ *                         curr_node_id = node.left_child
  */
-              goto __pyx_L12;
+              goto __pyx_L15;
             }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":938
- *                         node = &self.nodes[node.left_child]
+            /* "skgarden/mondrian/tree/_tree.pyx":1132
+ *                         curr_node_id = node.left_child
  *                     else:
- *                         node = &self.nodes[node.right_child]             # <<<<<<<<<<<<<<
+ *                         curr_node_id = node.right_child             # <<<<<<<<<<<<<<
+ *                     node = &self.nodes[curr_node_id]
  * 
- *                 # Add the leave node
  */
             /*else*/ {
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->right_child]));
+              __pyx_t_13 = __pyx_v_node->right_child;
+              __pyx_v_curr_node_id = __pyx_t_13;
             }
-            __pyx_L12:;
+            __pyx_L15:;
+
+            /* "skgarden/mondrian/tree/_tree.pyx":1133
+ *                     else:
+ *                         curr_node_id = node.right_child
+ *                     node = &self.nodes[curr_node_id]             # <<<<<<<<<<<<<<
+ * 
+ *                 # Add the leave node
+ */
+            __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_curr_node_id]));
           }
 
-          /* "skgarden/mondrian/tree/_tree.pyx":941
+          /* "skgarden/mondrian/tree/_tree.pyx":1136
  * 
  *                 # Add the leave node
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)             # <<<<<<<<<<<<<<
+ *                 indices_ptr[indptr_ptr[i + 1]] = curr_node_id             # <<<<<<<<<<<<<<
+ *                 values_ptr[indptr_ptr[i + 1]] = p_nsy
  *                 indptr_ptr[i + 1] += 1
- * 
  */
-          (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
+          (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = __pyx_v_curr_node_id;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":942
+          /* "skgarden/mondrian/tree/_tree.pyx":1137
  *                 # Add the leave node
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
+ *                 indices_ptr[indptr_ptr[i + 1]] = curr_node_id
+ *                 values_ptr[indptr_ptr[i + 1]] = p_nsy             # <<<<<<<<<<<<<<
+ *                 indptr_ptr[i + 1] += 1
+ * 
+ */
+          (__pyx_v_values_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = __pyx_v_p_nsy;
+
+          /* "skgarden/mondrian/tree/_tree.pyx":1138
+ *                 indices_ptr[indptr_ptr[i + 1]] = curr_node_id
+ *                 values_ptr[indptr_ptr[i + 1]] = p_nsy
  *                 indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
  * 
  *         indices = indices[:indptr[n_samples]]
  */
-          __pyx_t_13 = (__pyx_v_i + 1);
-          (__pyx_v_indptr_ptr[__pyx_t_13]) = ((__pyx_v_indptr_ptr[__pyx_t_13]) + 1);
+          __pyx_t_16 = (__pyx_v_i + 1);
+          (__pyx_v_indptr_ptr[__pyx_t_16]) = ((__pyx_v_indptr_ptr[__pyx_t_16]) + 1);
         }
       }
 
-      /* "skgarden/mondrian/tree/_tree.pyx":923
- *         cdef SIZE_t i = 0
+      /* "skgarden/mondrian/tree/_tree.pyx":1101
+ *         cdef SIZE_t curr_node_id
  * 
  *         with nogil:             # <<<<<<<<<<<<<<
  *             for i in range(n_samples):
- *                 node = self.nodes
+ *                 p_nsy = 1.0
  */
       /*finally:*/ {
         /*normal exit:*/{
           #ifdef WITH_THREAD
+          __Pyx_FastGIL_Forget();
           Py_BLOCK_THREADS
           #endif
           goto __pyx_L7;
@@ -12028,252 +13431,263 @@
       }
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":944
+  /* "skgarden/mondrian/tree/_tree.pyx":1140
  *                 indptr_ptr[i + 1] += 1
  * 
  *         indices = indices[:indptr[n_samples]]             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
- *                                                dtype=np.intp)
+ *         values = values[:indptr[n_samples]]
+ *         out = csr_matrix((values, indices, indptr),
  */
-  __pyx_t_14 = __pyx_v_n_samples;
-  __pyx_t_8 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_indices), 0, (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_indptr.diminfo[0].strides)), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 944, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 944, __pyx_L1_error)
-  __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
+  __pyx_t_17 = __pyx_v_n_samples;
+  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_indptr.diminfo[0].strides))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_5 = PySlice_New(Py_None, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1140, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_indices), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1140, __pyx_L1_error)
+  __pyx_t_11 = ((PyArrayObject *)__pyx_t_2);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
-    __pyx_t_15 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
-    if (unlikely(__pyx_t_15 < 0)) {
-      PyErr_Fetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
+    __pyx_t_18 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_18 < 0)) {
+      PyErr_Fetch(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
       if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-        Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18);
+        Py_XDECREF(__pyx_t_19); Py_XDECREF(__pyx_t_20); Py_XDECREF(__pyx_t_21);
         __Pyx_RaiseBufferFallbackError();
       } else {
-        PyErr_Restore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
+        PyErr_Restore(__pyx_t_19, __pyx_t_20, __pyx_t_21);
       }
+      __pyx_t_19 = __pyx_t_20 = __pyx_t_21 = 0;
     }
     __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
-    if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 944, __pyx_L1_error)
+    if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1140, __pyx_L1_error)
   }
   __pyx_t_11 = 0;
-  __Pyx_DECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_8));
-  __pyx_t_8 = 0;
+  __Pyx_DECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_2));
+  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":945
+  /* "skgarden/mondrian/tree/_tree.pyx":1141
  * 
  *         indices = indices[:indptr[n_samples]]
- *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),             # <<<<<<<<<<<<<<
- *                                                dtype=np.intp)
- *         out = csr_matrix((data, indices, indptr),
- */
-  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 945, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ones); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 945, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_19 = PyObject_Length(((PyObject *)__pyx_v_indices)); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 945, __pyx_L1_error)
-  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_19); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":946
- *         indices = indices[:indptr[n_samples]]
- *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
- *                                                dtype=np.intp)             # <<<<<<<<<<<<<<
- *         out = csr_matrix((data, indices, indptr),
+ *         values = values[:indptr[n_samples]]             # <<<<<<<<<<<<<<
+ *         out = csr_matrix((values, indices, indptr),
  *                          shape=(n_samples, self.node_count))
  */
-  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L1_error)
+  __pyx_t_22 = __pyx_v_n_samples;
+  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_indptr.diminfo[0].strides))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_5 = PySlice_New(Py_None, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1141, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_values), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":945
- * 
- *         indices = indices[:indptr[n_samples]]
- *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),             # <<<<<<<<<<<<<<
- *                                                dtype=np.intp)
- *         out = csr_matrix((data, indices, indptr),
- */
-  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 945, __pyx_L1_error)
-  __pyx_t_20 = ((PyArrayObject *)__pyx_t_5);
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1141, __pyx_L1_error)
+  __pyx_t_12 = ((PyArrayObject *)__pyx_t_2);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 945, __pyx_L1_error)
-    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);
+    __pyx_t_18 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_18 < 0)) {
+      PyErr_Fetch(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
+      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_v_values, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+        Py_XDECREF(__pyx_t_21); Py_XDECREF(__pyx_t_20); Py_XDECREF(__pyx_t_19);
+        __Pyx_RaiseBufferFallbackError();
+      } else {
+        PyErr_Restore(__pyx_t_21, __pyx_t_20, __pyx_t_19);
+      }
+      __pyx_t_21 = __pyx_t_20 = __pyx_t_19 = 0;
     }
+    __pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];
+    if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1141, __pyx_L1_error)
   }
-  __pyx_t_20 = 0;
-  __pyx_v_data = ((PyArrayObject *)__pyx_t_5);
-  __pyx_t_5 = 0;
+  __pyx_t_12 = 0;
+  __Pyx_DECREF_SET(__pyx_v_values, ((PyArrayObject *)__pyx_t_2));
+  __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":947
- *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
- *                                                dtype=np.intp)
- *         out = csr_matrix((data, indices, indptr),             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":1142
+ *         indices = indices[:indptr[n_samples]]
+ *         values = values[:indptr[n_samples]]
+ *         out = csr_matrix((values, indices, indptr),             # <<<<<<<<<<<<<<
  *                          shape=(n_samples, self.node_count))
  * 
  */
-  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1142, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1142, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __Pyx_INCREF(((PyObject *)__pyx_v_data));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
-  PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_data));
+  __Pyx_INCREF(((PyObject *)__pyx_v_values));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_values));
+  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_values));
   __Pyx_INCREF(((PyObject *)__pyx_v_indices));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_indices));
-  PyTuple_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_indices));
+  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_indices));
   __Pyx_INCREF(((PyObject *)__pyx_v_indptr));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_indptr));
-  PyTuple_SET_ITEM(__pyx_t_8, 2, ((PyObject *)__pyx_v_indptr));
-  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 947, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_9);
-  __Pyx_GIVEREF(__pyx_t_8);
-  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
-  __pyx_t_8 = 0;
+  PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_indptr));
+  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
+  __pyx_t_5 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":948
- *                                                dtype=np.intp)
- *         out = csr_matrix((data, indices, indptr),
+  /* "skgarden/mondrian/tree/_tree.pyx":1143
+ *         values = values[:indptr[n_samples]]
+ *         out = csr_matrix((values, indices, indptr),
  *                          shape=(n_samples, self.node_count))             # <<<<<<<<<<<<<<
  * 
  *         return out
  */
-  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 948, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_8);
-  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1143, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1143, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 948, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_21);
-  __Pyx_GIVEREF(__pyx_t_3);
-  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_3);
+  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1143, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1143, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_23);
   __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_4);
-  __pyx_t_3 = 0;
+  PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_3);
   __pyx_t_4 = 0;
-  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_shape, __pyx_t_21) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
+  __pyx_t_3 = 0;
+  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_shape, __pyx_t_23) < 0) __PYX_ERR(0, 1143, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":947
- *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
- *                                                dtype=np.intp)
- *         out = csr_matrix((data, indices, indptr),             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":1142
+ *         indices = indices[:indptr[n_samples]]
+ *         values = values[:indptr[n_samples]]
+ *         out = csr_matrix((values, indices, indptr),             # <<<<<<<<<<<<<<
  *                          shape=(n_samples, self.node_count))
  * 
  */
-  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 947, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_21);
+  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1142, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_23);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
-  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-  __pyx_v_out = __pyx_t_21;
-  __pyx_t_21 = 0;
+  __pyx_v_out = __pyx_t_23;
+  __pyx_t_23 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":950
+  /* "skgarden/mondrian/tree/_tree.pyx":1145
  *                          shape=(n_samples, self.node_count))
  * 
  *         return out             # <<<<<<<<<<<<<<
  * 
- *     cdef inline object _decision_path_sparse_csr(self, object X):
+ *     cdef inline object _decision_path_dense(self, object X):
  */
   __Pyx_XDECREF(__pyx_r);
   __Pyx_INCREF(__pyx_v_out);
   __pyx_r = __pyx_v_out;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":892
- * 
- * 
- *     cdef inline object _decision_path_dense(self, object X):             # <<<<<<<<<<<<<<
- *         """Finds the decision path (=node) for each sample in X."""
+  /* "skgarden/mondrian/tree/_tree.pyx":1057
+ *         return self._decision_path_dense(X)
  * 
+ *     cpdef object weighted_decision_path(self, object X):             # <<<<<<<<<<<<<<
+ *         """Returns the weight at each node for each sample in X."""
+ *         if not isinstance(X, np.ndarray):
  */
 
   /* function exit code */
   __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_8);
-  __Pyx_XDECREF(__pyx_t_9);
-  __Pyx_XDECREF(__pyx_t_21);
+  __Pyx_XDECREF(__pyx_t_23);
   { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
     __Pyx_PyThreadState_declare
     __Pyx_PyThreadState_assign
     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer);
+    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);
   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._decision_path_dense", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.weighted_decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   goto __pyx_L2;
   __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer);
+  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);
   __pyx_L2:;
   __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
   __Pyx_XDECREF((PyObject *)__pyx_v_indptr);
   __Pyx_XDECREF((PyObject *)__pyx_v_indices);
-  __Pyx_XDECREF((PyObject *)__pyx_v_data);
+  __Pyx_XDECREF((PyObject *)__pyx_v_values);
   __Pyx_XDECREF(__pyx_v_out);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":952
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
+static char __pyx_doc_8skgarden_8mondrian_4tree_5_tree_4Tree_16weighted_decision_path[] = "Returns the weight at each node for each sample in X.";
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_17weighted_decision_path(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("weighted_decision_path (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_16weighted_decision_path(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_X));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_16weighted_decision_path(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("weighted_decision_path", 0);
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = __pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_weighted_decision_path(__pyx_v_self, __pyx_v_X, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.weighted_decision_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_tree.pyx":1147
  *         return out
  * 
- *     cdef inline object _decision_path_sparse_csr(self, object X):             # <<<<<<<<<<<<<<
+ *     cdef inline object _decision_path_dense(self, object X):             # <<<<<<<<<<<<<<
  *         """Finds the decision path (=node) for each sample in X."""
  * 
  */
 
-static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_sparse_csr(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
-  PyArrayObject *__pyx_v_X_data_ndarray = 0;
-  PyArrayObject *__pyx_v_X_indices_ndarray = 0;
-  PyArrayObject *__pyx_v_X_indptr_ndarray = 0;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_data;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *__pyx_v_X_indices;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *__pyx_v_X_indptr;
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_X) {
+  PyArrayObject *__pyx_v_X_ndarray = 0;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_ptr;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_sample_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_X_fx_stride;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_samples;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_n_features;
   PyArrayObject *__pyx_v_indptr = 0;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_indptr_ptr;
   PyArrayObject *__pyx_v_indices = 0;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_indices_ptr;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t __pyx_v_feature_value;
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_v_node;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *__pyx_v_X_sample;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_i;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t __pyx_v_k;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *__pyx_v_feature_to_sample;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_v_curr_node_id;
   PyArrayObject *__pyx_v_data = 0;
   PyObject *__pyx_v_out = NULL;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_X_data_ndarray;
-  __Pyx_Buffer __pyx_pybuffer_X_data_ndarray;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_X_indices_ndarray;
-  __Pyx_Buffer __pyx_pybuffer_X_indices_ndarray;
-  __Pyx_LocalBuf_ND __pyx_pybuffernd_X_indptr_ndarray;
-  __Pyx_Buffer __pyx_pybuffer_X_indptr_ndarray;
   __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
   __Pyx_Buffer __pyx_pybuffer_data;
   __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
@@ -12282,45 +13696,28 @@
   __Pyx_Buffer __pyx_pybuffer_indptr;
   PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
+  int __pyx_t_1;
   int __pyx_t_2;
-  int __pyx_t_3;
+  PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
-  PyArrayObject *__pyx_t_6 = NULL;
-  PyArrayObject *__pyx_t_7 = NULL;
-  PyArrayObject *__pyx_t_8 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_9;
-  PyObject *__pyx_t_10 = NULL;
-  PyObject *__pyx_t_11 = NULL;
-  PyArrayObject *__pyx_t_12 = NULL;
-  PyArrayObject *__pyx_t_13 = NULL;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_14;
-  struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *__pyx_t_15;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t __pyx_t_16;
-  __pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t __pyx_t_17;
-  long __pyx_t_18;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_6;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_7;
+  PyObject *__pyx_t_8 = NULL;
+  PyObject *__pyx_t_9 = NULL;
+  PyArrayObject *__pyx_t_10 = NULL;
+  PyArrayObject *__pyx_t_11 = NULL;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_12;
+  long __pyx_t_13;
+  Py_ssize_t __pyx_t_14;
+  int __pyx_t_15;
+  PyObject *__pyx_t_16 = NULL;
+  PyObject *__pyx_t_17 = NULL;
+  PyObject *__pyx_t_18 = NULL;
   Py_ssize_t __pyx_t_19;
-  int __pyx_t_20;
+  PyArrayObject *__pyx_t_20 = NULL;
   PyObject *__pyx_t_21 = NULL;
-  PyObject *__pyx_t_22 = NULL;
-  PyObject *__pyx_t_23 = NULL;
-  Py_ssize_t __pyx_t_24;
-  PyArrayObject *__pyx_t_25 = NULL;
-  PyObject *__pyx_t_26 = NULL;
-  __Pyx_RefNannySetupContext("_decision_path_sparse_csr", 0);
-  __pyx_pybuffer_X_data_ndarray.pybuffer.buf = NULL;
-  __pyx_pybuffer_X_data_ndarray.refcount = 0;
-  __pyx_pybuffernd_X_data_ndarray.data = NULL;
-  __pyx_pybuffernd_X_data_ndarray.rcbuffer = &__pyx_pybuffer_X_data_ndarray;
-  __pyx_pybuffer_X_indices_ndarray.pybuffer.buf = NULL;
-  __pyx_pybuffer_X_indices_ndarray.refcount = 0;
-  __pyx_pybuffernd_X_indices_ndarray.data = NULL;
-  __pyx_pybuffernd_X_indices_ndarray.rcbuffer = &__pyx_pybuffer_X_indices_ndarray;
-  __pyx_pybuffer_X_indptr_ndarray.pybuffer.buf = NULL;
-  __pyx_pybuffer_X_indptr_ndarray.refcount = 0;
-  __pyx_pybuffernd_X_indptr_ndarray.data = NULL;
-  __pyx_pybuffernd_X_indptr_ndarray.rcbuffer = &__pyx_pybuffer_X_indptr_ndarray;
+  __Pyx_RefNannySetupContext("_decision_path_dense", 0);
   __pyx_pybuffer_indptr.pybuffer.buf = NULL;
   __pyx_pybuffer_indptr.refcount = 0;
   __pyx_pybuffernd_indptr.data = NULL;
@@ -12334,101 +13731,98 @@
   __pyx_pybuffernd_data.data = NULL;
   __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":956
+  /* "skgarden/mondrian/tree/_tree.pyx":1151
  * 
  *         # Check input
- *         if not isinstance(X, csr_matrix):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in csr_matrix format, got %s"
+ *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
+ *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))
  */
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_IsInstance(__pyx_v_X, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 956, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
-  if (__pyx_t_3) {
+  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_X, __pyx_ptype_5numpy_ndarray); 
+  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
+  if (__pyx_t_2) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":958
- *         if not isinstance(X, csr_matrix):
- *             raise ValueError("X should be in csr_matrix format, got %s"
+    /* "skgarden/mondrian/tree/_tree.pyx":1153
+ *         if not isinstance(X, np.ndarray):
+ *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))             # <<<<<<<<<<<<<<
  * 
  *         if X.dtype != DTYPE:
  */
-    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_csr_matrix_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
+    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_X_should_be_in_np_ndarray_format, ((PyObject *)Py_TYPE(__pyx_v_X))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
 
-    /* "skgarden/mondrian/tree/_tree.pyx":957
+    /* "skgarden/mondrian/tree/_tree.pyx":1152
  *         # Check input
- *         if not isinstance(X, csr_matrix):
- *             raise ValueError("X should be in csr_matrix format, got %s"             # <<<<<<<<<<<<<<
+ *         if not isinstance(X, np.ndarray):
+ *             raise ValueError("X should be in np.ndarray format, got %s"             # <<<<<<<<<<<<<<
  *                              % type(X))
  * 
  */
-    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 957, __pyx_L1_error)
+    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1152, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_GIVEREF(__pyx_t_1);
-    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
-    __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_1);
+    __Pyx_GIVEREF(__pyx_t_3);
+    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
+    __pyx_t_3 = 0;
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1152, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __PYX_ERR(0, 957, __pyx_L1_error)
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __PYX_ERR(0, 1152, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":956
+    /* "skgarden/mondrian/tree/_tree.pyx":1151
  * 
  *         # Check input
- *         if not isinstance(X, csr_matrix):             # <<<<<<<<<<<<<<
- *             raise ValueError("X should be in csr_matrix format, got %s"
+ *         if not isinstance(X, np.ndarray):             # <<<<<<<<<<<<<<
+ *             raise ValueError("X should be in np.ndarray format, got %s"
  *                              % type(X))
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":960
+  /* "skgarden/mondrian/tree/_tree.pyx":1155
  *                              % type(X))
  * 
  *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
  *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
  * 
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 960, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1155, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1155, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 960, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1155, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 960, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1155, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (__pyx_t_3) {
+  if (__pyx_t_2) {
 
-    /* "skgarden/mondrian/tree/_tree.pyx":961
+    /* "skgarden/mondrian/tree/_tree.pyx":1156
  * 
  *         if X.dtype != DTYPE:
  *             raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)             # <<<<<<<<<<<<<<
  * 
  *         # Extract input
  */
-    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1156, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_5);
-    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 961, __pyx_L1_error)
+    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1156, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
+    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1156, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_5);
     __Pyx_GIVEREF(__pyx_t_4);
     PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
     __pyx_t_4 = 0;
-    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 961, __pyx_L1_error)
+    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1156, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
     __Pyx_Raise(__pyx_t_4, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __PYX_ERR(0, 961, __pyx_L1_error)
+    __PYX_ERR(0, 1156, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_tree.pyx":960
+    /* "skgarden/mondrian/tree/_tree.pyx":1155
  *                              % type(X))
  * 
  *         if X.dtype != DTYPE:             # <<<<<<<<<<<<<<
@@ -12437,182 +13831,132 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":964
+  /* "skgarden/mondrian/tree/_tree.pyx":1159
  * 
  *         # Extract input
- *         cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
+ *         cdef np.ndarray X_ndarray = X             # <<<<<<<<<<<<<<
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 964, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 964, __pyx_L1_error)
-  __pyx_t_6 = ((PyArrayObject *)__pyx_t_4);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_X_data_ndarray = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 964, __pyx_L1_error)
-    } else {__pyx_pybuffernd_X_data_ndarray.diminfo[0].strides = __pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X_data_ndarray.diminfo[0].shape = __pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_6 = 0;
-  __pyx_v_X_data_ndarray = ((PyArrayObject *)__pyx_t_4);
+  if (!(likely(((__pyx_v_X) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_X, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1159, __pyx_L1_error)
+  __pyx_t_4 = __pyx_v_X;
+  __Pyx_INCREF(__pyx_t_4);
+  __pyx_v_X_ndarray = ((PyArrayObject *)__pyx_t_4);
   __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":965
+  /* "skgarden/mondrian/tree/_tree.pyx":1160
  *         # Extract input
- *         cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices             # <<<<<<<<<<<<<<
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
- * 
+ *         cdef np.ndarray X_ndarray = X
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 965, __pyx_L1_error)
-  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_X_indices_ndarray = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 965, __pyx_L1_error)
-    } else {__pyx_pybuffernd_X_indices_ndarray.diminfo[0].strides = __pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X_indices_ndarray.diminfo[0].shape = __pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_7 = 0;
-  __pyx_v_X_indices_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+  __pyx_v_X_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_ndarray->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":966
- *         cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr             # <<<<<<<<<<<<<<
- * 
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
+  /* "skgarden/mondrian/tree/_tree.pyx":1161
+ *         cdef np.ndarray X_ndarray = X
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t n_samples = X.shape[0]
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_indptr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 966, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1161, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 966, __pyx_L1_error)
-  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
-  {
-    __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-      __pyx_v_X_indptr_ndarray = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 966, __pyx_L1_error)
-    } else {__pyx_pybuffernd_X_indptr_ndarray.diminfo[0].strides = __pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X_indptr_ndarray.diminfo[0].shape = __pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer.shape[0];
-    }
-  }
-  __pyx_t_8 = 0;
-  __pyx_v_X_indptr_ndarray = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":968
- *         cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
- * 
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data             # <<<<<<<<<<<<<<
- *         cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
- */
-  __pyx_v_X_data = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *)__pyx_v_X_data_ndarray->data);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":969
- * 
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
- *         cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data             # <<<<<<<<<<<<<<
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
- * 
- */
-  __pyx_v_X_indices = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *)__pyx_v_X_indices_ndarray->data);
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1161, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1161, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1161, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1161, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_v_X_sample_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":970
- *         cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
- *         cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data             # <<<<<<<<<<<<<<
- * 
+  /* "skgarden/mondrian/tree/_tree.pyx":1162
+ *         cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize             # <<<<<<<<<<<<<<
  *         cdef SIZE_t n_samples = X.shape[0]
- */
-  __pyx_v_X_indptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_INT32_t *)__pyx_v_X_indptr_ndarray->data);
-
-  /* "skgarden/mondrian/tree/_tree.pyx":972
- *         cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
- * 
- *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
- *         cdef SIZE_t n_features = X.shape[1]
  * 
  */
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 972, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_strides); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1162, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_7 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1162, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1162, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_v_n_samples = __pyx_t_9;
+  __pyx_v_X_fx_stride = (((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_7) / ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)__pyx_t_6));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":973
- * 
- *         cdef SIZE_t n_samples = X.shape[0]
- *         cdef SIZE_t n_features = X.shape[1]             # <<<<<<<<<<<<<<
+  /* "skgarden/mondrian/tree/_tree.pyx":1163
+ *         cdef SIZE_t X_sample_stride = <SIZE_t> X.strides[0] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t X_fx_stride = <SIZE_t> X.strides[1] / <SIZE_t> X.itemsize
+ *         cdef SIZE_t n_samples = X.shape[0]             # <<<<<<<<<<<<<<
  * 
  *         # Initialize output
  */
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 973, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 973, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_9 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_9 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1163, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_v_n_features = __pyx_t_9;
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1163, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_v_n_samples = __pyx_t_6;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":976
+  /* "skgarden/mondrian/tree/_tree.pyx":1166
  * 
  *         # Initialize output
  *         cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)             # <<<<<<<<<<<<<<
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_n_samples + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
-  __pyx_t_4 = 0;
-  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_intp); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
-  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 976, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_n_samples + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_5);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
+  __pyx_t_5 = 0;
+  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_intp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 976, __pyx_L1_error)
-  __pyx_t_12 = ((PyArrayObject *)__pyx_t_11);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1166, __pyx_L1_error)
+  __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
       __pyx_v_indptr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 976, __pyx_L1_error)
+      __PYX_ERR(0, 1166, __pyx_L1_error)
     } else {__pyx_pybuffernd_indptr.diminfo[0].strides = __pyx_pybuffernd_indptr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indptr.diminfo[0].shape = __pyx_pybuffernd_indptr.rcbuffer->pybuffer.shape[0];
     }
   }
-  __pyx_t_12 = 0;
-  __pyx_v_indptr = ((PyArrayObject *)__pyx_t_11);
-  __pyx_t_11 = 0;
+  __pyx_t_10 = 0;
+  __pyx_v_indptr = ((PyArrayObject *)__pyx_t_9);
+  __pyx_t_9 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":977
+  /* "skgarden/mondrian/tree/_tree.pyx":1167
  *         # Initialize output
  *         cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data             # <<<<<<<<<<<<<<
@@ -12621,86 +13965,86 @@
  */
   __pyx_v_indptr_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indptr->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":979
+  /* "skgarden/mondrian/tree/_tree.pyx":1169
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  */
-  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 979, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 979, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
+  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1169, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":980
+  /* "skgarden/mondrian/tree/_tree.pyx":1170
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
  *                                                    (1 + self.max_depth),             # <<<<<<<<<<<<<<
  *                                                    dtype=np.intp)
  *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
  */
-  __pyx_t_11 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 979, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
+  __pyx_t_9 = __Pyx_PyInt_From_long((__pyx_v_n_samples * (1 + __pyx_v_self->max_depth))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":979
+  /* "skgarden/mondrian/tree/_tree.pyx":1169
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  */
-  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 979, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_11);
-  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11);
-  __pyx_t_11 = 0;
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1169, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_9);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
+  __pyx_t_9 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":981
+  /* "skgarden/mondrian/tree/_tree.pyx":1171
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)             # <<<<<<<<<<<<<<
  *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
  * 
  */
-  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 981, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 981, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 981, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
+  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1171, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1171, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1171, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":979
+  /* "skgarden/mondrian/tree/_tree.pyx":1169
  *         cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
  * 
  *         cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *             # <<<<<<<<<<<<<<
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  */
-  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 979, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
-  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 979, __pyx_L1_error)
-  __pyx_t_13 = ((PyArrayObject *)__pyx_t_10);
+  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1169, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1169, __pyx_L1_error)
+  __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
       __pyx_v_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 979, __pyx_L1_error)
+      __PYX_ERR(0, 1169, __pyx_L1_error)
     } else {__pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
     }
   }
-  __pyx_t_13 = 0;
-  __pyx_v_indices = ((PyArrayObject *)__pyx_t_10);
-  __pyx_t_10 = 0;
+  __pyx_t_11 = 0;
+  __pyx_v_indices = ((PyArrayObject *)__pyx_t_8);
+  __pyx_t_8 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":982
+  /* "skgarden/mondrian/tree/_tree.pyx":1172
  *                                                    (1 + self.max_depth),
  *                                                    dtype=np.intp)
  *         cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data             # <<<<<<<<<<<<<<
@@ -12709,323 +14053,173 @@
  */
   __pyx_v_indices_ptr = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *)__pyx_v_indices->data);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":985
+  /* "skgarden/mondrian/tree/_tree.pyx":1175
  * 
  *         # Initialize auxiliary data-structure
- *         cdef DTYPE_t feature_value = 0.             # <<<<<<<<<<<<<<
- *         cdef Node* node = NULL
- *         cdef DTYPE_t* X_sample = NULL
- */
-  __pyx_v_feature_value = 0.;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":986
- *         # Initialize auxiliary data-structure
- *         cdef DTYPE_t feature_value = 0.
  *         cdef Node* node = NULL             # <<<<<<<<<<<<<<
- *         cdef DTYPE_t* X_sample = NULL
  *         cdef SIZE_t i = 0
+ *         cdef SIZE_t curr_node_id
  */
   __pyx_v_node = NULL;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":987
- *         cdef DTYPE_t feature_value = 0.
- *         cdef Node* node = NULL
- *         cdef DTYPE_t* X_sample = NULL             # <<<<<<<<<<<<<<
- *         cdef SIZE_t i = 0
- *         cdef INT32_t k = 0
- */
-  __pyx_v_X_sample = NULL;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":988
+  /* "skgarden/mondrian/tree/_tree.pyx":1176
+ *         # Initialize auxiliary data-structure
  *         cdef Node* node = NULL
- *         cdef DTYPE_t* X_sample = NULL
  *         cdef SIZE_t i = 0             # <<<<<<<<<<<<<<
- *         cdef INT32_t k = 0
+ *         cdef SIZE_t curr_node_id
  * 
  */
   __pyx_v_i = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":989
- *         cdef DTYPE_t* X_sample = NULL
- *         cdef SIZE_t i = 0
- *         cdef INT32_t k = 0             # <<<<<<<<<<<<<<
- * 
- *         # feature_to_sample as a data structure records the last seen sample
- */
-  __pyx_v_k = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":994
- *         # for each feature; functionally, it is an efficient way to identify
- *         # which features are nonzero in the present sample.
- *         cdef SIZE_t* feature_to_sample = NULL             # <<<<<<<<<<<<<<
- * 
- *         safe_realloc(&X_sample, n_features)
- */
-  __pyx_v_feature_to_sample = NULL;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":996
- *         cdef SIZE_t* feature_to_sample = NULL
- * 
- *         safe_realloc(&X_sample, n_features)             # <<<<<<<<<<<<<<
- *         safe_realloc(&feature_to_sample, n_features)
- * 
- */
-  __pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_X_sample), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 996, __pyx_L1_error)
-
-  /* "skgarden/mondrian/tree/_tree.pyx":997
- * 
- *         safe_realloc(&X_sample, n_features)
- *         safe_realloc(&feature_to_sample, n_features)             # <<<<<<<<<<<<<<
- * 
- *         with nogil:
- */
-  __pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_feature_to_sample), __pyx_v_n_features); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 997, __pyx_L1_error)
-
-  /* "skgarden/mondrian/tree/_tree.pyx":999
- *         safe_realloc(&feature_to_sample, n_features)
+  /* "skgarden/mondrian/tree/_tree.pyx":1179
+ *         cdef SIZE_t curr_node_id
  * 
  *         with nogil:             # <<<<<<<<<<<<<<
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
- * 
+ *             for i in range(n_samples):
+ *                 curr_node_id = self.root
  */
   {
       #ifdef WITH_THREAD
       PyThreadState *_save;
       Py_UNBLOCK_THREADS
+      __Pyx_FastGIL_Remember();
       #endif
       /*try:*/ {
 
-        /* "skgarden/mondrian/tree/_tree.pyx":1000
+        /* "skgarden/mondrian/tree/_tree.pyx":1180
  * 
  *         with nogil:
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))             # <<<<<<<<<<<<<<
- * 
- *             for i in range(n_samples):
- */
-        memset(__pyx_v_feature_to_sample, -1, (__pyx_v_n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t))));
-
-        /* "skgarden/mondrian/tree/_tree.pyx":1002
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
- * 
  *             for i in range(n_samples):             # <<<<<<<<<<<<<<
- *                 node = self.nodes
+ *                 curr_node_id = self.root
  *                 indptr_ptr[i + 1] = indptr_ptr[i]
  */
-        __pyx_t_9 = __pyx_v_n_samples;
-        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_9; __pyx_t_14+=1) {
-          __pyx_v_i = __pyx_t_14;
+        __pyx_t_6 = __pyx_v_n_samples;
+        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
+          __pyx_v_i = __pyx_t_7;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":1003
- * 
+          /* "skgarden/mondrian/tree/_tree.pyx":1181
+ *         with nogil:
  *             for i in range(n_samples):
- *                 node = self.nodes             # <<<<<<<<<<<<<<
+ *                 curr_node_id = self.root             # <<<<<<<<<<<<<<
  *                 indptr_ptr[i + 1] = indptr_ptr[i]
  * 
  */
-          __pyx_t_15 = __pyx_v_self->nodes;
-          __pyx_v_node = __pyx_t_15;
+          __pyx_t_12 = __pyx_v_self->root;
+          __pyx_v_curr_node_id = __pyx_t_12;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":1004
+          /* "skgarden/mondrian/tree/_tree.pyx":1182
  *             for i in range(n_samples):
- *                 node = self.nodes
+ *                 curr_node_id = self.root
  *                 indptr_ptr[i + 1] = indptr_ptr[i]             # <<<<<<<<<<<<<<
  * 
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):
+ *                 # Add all external nodes
  */
           (__pyx_v_indptr_ptr[(__pyx_v_i + 1)]) = (__pyx_v_indptr_ptr[__pyx_v_i]);
 
-          /* "skgarden/mondrian/tree/_tree.pyx":1006
- *                 indptr_ptr[i + 1] = indptr_ptr[i]
- * 
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):             # <<<<<<<<<<<<<<
- *                     feature_to_sample[X_indices[k]] = i
- *                     X_sample[X_indices[k]] = X_data[k]
- */
-          __pyx_t_16 = (__pyx_v_X_indptr[(__pyx_v_i + 1)]);
-          for (__pyx_t_17 = (__pyx_v_X_indptr[__pyx_v_i]); __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
-            __pyx_v_k = __pyx_t_17;
-
-            /* "skgarden/mondrian/tree/_tree.pyx":1007
- * 
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):
- *                     feature_to_sample[X_indices[k]] = i             # <<<<<<<<<<<<<<
- *                     X_sample[X_indices[k]] = X_data[k]
+          /* "skgarden/mondrian/tree/_tree.pyx":1185
  * 
- */
-            (__pyx_v_feature_to_sample[(__pyx_v_X_indices[__pyx_v_k])]) = __pyx_v_i;
-
-            /* "skgarden/mondrian/tree/_tree.pyx":1008
- *                 for k in range(X_indptr[i], X_indptr[i + 1]):
- *                     feature_to_sample[X_indices[k]] = i
- *                     X_sample[X_indices[k]] = X_data[k]             # <<<<<<<<<<<<<<
+ *                 # Add all external nodes
+ *                 while curr_node_id != _TREE_LEAF:             # <<<<<<<<<<<<<<
+ *                     node = &self.nodes[curr_node_id]
  * 
- *                 # While node not a leaf
  */
-            (__pyx_v_X_sample[(__pyx_v_X_indices[__pyx_v_k])]) = (__pyx_v_X_data[__pyx_v_k]);
-          }
+          while (1) {
+            __pyx_t_2 = ((__pyx_v_curr_node_id != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
+            if (!__pyx_t_2) break;
 
-          /* "skgarden/mondrian/tree/_tree.pyx":1011
+            /* "skgarden/mondrian/tree/_tree.pyx":1186
+ *                 # Add all external nodes
+ *                 while curr_node_id != _TREE_LEAF:
+ *                     node = &self.nodes[curr_node_id]             # <<<<<<<<<<<<<<
  * 
- *                 # While node not a leaf
- *                 while node.left_child != _TREE_LEAF:             # <<<<<<<<<<<<<<
  *                     # ... and node.right_child != _TREE_LEAF:
- * 
  */
-          while (1) {
-            __pyx_t_3 = ((__pyx_v_node->left_child != __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF) != 0);
-            if (!__pyx_t_3) break;
+            __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_curr_node_id]));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":1014
- *                     # ... and node.right_child != _TREE_LEAF:
+            /* "skgarden/mondrian/tree/_tree.pyx":1189
  * 
+ *                     # ... and node.right_child != _TREE_LEAF:
  *                     indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)             # <<<<<<<<<<<<<<
  *                     indptr_ptr[i + 1] += 1
  * 
  */
             (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
 
-            /* "skgarden/mondrian/tree/_tree.pyx":1015
- * 
+            /* "skgarden/mondrian/tree/_tree.pyx":1190
+ *                     # ... and node.right_child != _TREE_LEAF:
  *                     indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
  *                     indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
  * 
- *                     if feature_to_sample[node.feature] == i:
- */
-            __pyx_t_18 = (__pyx_v_i + 1);
-            (__pyx_v_indptr_ptr[__pyx_t_18]) = ((__pyx_v_indptr_ptr[__pyx_t_18]) + 1);
-
-            /* "skgarden/mondrian/tree/_tree.pyx":1017
- *                     indptr_ptr[i + 1] += 1
- * 
- *                     if feature_to_sample[node.feature] == i:             # <<<<<<<<<<<<<<
- *                         feature_value = X_sample[node.feature]
- * 
+ *                     if X_ptr[X_sample_stride * i +
  */
-            __pyx_t_3 = (((__pyx_v_feature_to_sample[__pyx_v_node->feature]) == __pyx_v_i) != 0);
-            if (__pyx_t_3) {
+            __pyx_t_13 = (__pyx_v_i + 1);
+            (__pyx_v_indptr_ptr[__pyx_t_13]) = ((__pyx_v_indptr_ptr[__pyx_t_13]) + 1);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":1018
- * 
- *                     if feature_to_sample[node.feature] == i:
- *                         feature_value = X_sample[node.feature]             # <<<<<<<<<<<<<<
+            /* "skgarden/mondrian/tree/_tree.pyx":1193
  * 
+ *                     if X_ptr[X_sample_stride * i +
+ *                              X_fx_stride * node.feature] <= node.threshold:             # <<<<<<<<<<<<<<
+ *                         curr_node_id = node.left_child
  *                     else:
  */
-              __pyx_v_feature_value = (__pyx_v_X_sample[__pyx_v_node->feature]);
+            __pyx_t_2 = (((__pyx_v_X_ptr[((__pyx_v_X_sample_stride * __pyx_v_i) + (__pyx_v_X_fx_stride * __pyx_v_node->feature))]) <= __pyx_v_node->threshold) != 0);
 
-              /* "skgarden/mondrian/tree/_tree.pyx":1017
+            /* "skgarden/mondrian/tree/_tree.pyx":1192
  *                     indptr_ptr[i + 1] += 1
  * 
- *                     if feature_to_sample[node.feature] == i:             # <<<<<<<<<<<<<<
- *                         feature_value = X_sample[node.feature]
- * 
- */
-              goto __pyx_L14;
-            }
-
-            /* "skgarden/mondrian/tree/_tree.pyx":1021
- * 
- *                     else:
- *                         feature_value = 0.             # <<<<<<<<<<<<<<
- * 
- *                     if feature_value <= node.threshold:
- */
-            /*else*/ {
-              __pyx_v_feature_value = 0.;
-            }
-            __pyx_L14:;
-
-            /* "skgarden/mondrian/tree/_tree.pyx":1023
- *                         feature_value = 0.
- * 
- *                     if feature_value <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
- *                     else:
+ *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ *                         curr_node_id = node.left_child
  */
-            __pyx_t_3 = ((__pyx_v_feature_value <= __pyx_v_node->threshold) != 0);
-            if (__pyx_t_3) {
+            if (__pyx_t_2) {
 
-              /* "skgarden/mondrian/tree/_tree.pyx":1024
- * 
- *                     if feature_value <= node.threshold:
- *                         node = &self.nodes[node.left_child]             # <<<<<<<<<<<<<<
+              /* "skgarden/mondrian/tree/_tree.pyx":1194
+ *                     if X_ptr[X_sample_stride * i +
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ *                         curr_node_id = node.left_child             # <<<<<<<<<<<<<<
  *                     else:
- *                         node = &self.nodes[node.right_child]
+ *                         curr_node_id = node.right_child
  */
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->left_child]));
+              __pyx_t_12 = __pyx_v_node->left_child;
+              __pyx_v_curr_node_id = __pyx_t_12;
 
-              /* "skgarden/mondrian/tree/_tree.pyx":1023
- *                         feature_value = 0.
+              /* "skgarden/mondrian/tree/_tree.pyx":1192
+ *                     indptr_ptr[i + 1] += 1
  * 
- *                     if feature_value <= node.threshold:             # <<<<<<<<<<<<<<
- *                         node = &self.nodes[node.left_child]
- *                     else:
+ *                     if X_ptr[X_sample_stride * i +             # <<<<<<<<<<<<<<
+ *                              X_fx_stride * node.feature] <= node.threshold:
+ *                         curr_node_id = node.left_child
  */
-              goto __pyx_L15;
+              goto __pyx_L12;
             }
 
-            /* "skgarden/mondrian/tree/_tree.pyx":1026
- *                         node = &self.nodes[node.left_child]
+            /* "skgarden/mondrian/tree/_tree.pyx":1196
+ *                         curr_node_id = node.left_child
  *                     else:
- *                         node = &self.nodes[node.right_child]             # <<<<<<<<<<<<<<
+ *                         curr_node_id = node.right_child             # <<<<<<<<<<<<<<
  * 
- *                 # Add the leave node
+ *         indices = indices[:indptr[n_samples]]
  */
             /*else*/ {
-              __pyx_v_node = (&(__pyx_v_self->nodes[__pyx_v_node->right_child]));
+              __pyx_t_12 = __pyx_v_node->right_child;
+              __pyx_v_curr_node_id = __pyx_t_12;
             }
-            __pyx_L15:;
+            __pyx_L12:;
           }
-
-          /* "skgarden/mondrian/tree/_tree.pyx":1029
- * 
- *                 # Add the leave node
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)             # <<<<<<<<<<<<<<
- *                 indptr_ptr[i + 1] += 1
- * 
- */
-          (__pyx_v_indices_ptr[(__pyx_v_indptr_ptr[(__pyx_v_i + 1)])]) = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)(__pyx_v_node - __pyx_v_self->nodes));
-
-          /* "skgarden/mondrian/tree/_tree.pyx":1030
- *                 # Add the leave node
- *                 indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
- *                 indptr_ptr[i + 1] += 1             # <<<<<<<<<<<<<<
- * 
- *             # Free auxiliary arrays
- */
-          __pyx_t_18 = (__pyx_v_i + 1);
-          (__pyx_v_indptr_ptr[__pyx_t_18]) = ((__pyx_v_indptr_ptr[__pyx_t_18]) + 1);
         }
-
-        /* "skgarden/mondrian/tree/_tree.pyx":1033
- * 
- *             # Free auxiliary arrays
- *             free(X_sample)             # <<<<<<<<<<<<<<
- *             free(feature_to_sample)
- * 
- */
-        free(__pyx_v_X_sample);
-
-        /* "skgarden/mondrian/tree/_tree.pyx":1034
- *             # Free auxiliary arrays
- *             free(X_sample)
- *             free(feature_to_sample)             # <<<<<<<<<<<<<<
- * 
- *         indices = indices[:indptr[n_samples]]
- */
-        free(__pyx_v_feature_to_sample);
       }
 
-      /* "skgarden/mondrian/tree/_tree.pyx":999
- *         safe_realloc(&feature_to_sample, n_features)
+      /* "skgarden/mondrian/tree/_tree.pyx":1179
+ *         cdef SIZE_t curr_node_id
  * 
  *         with nogil:             # <<<<<<<<<<<<<<
- *             memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
- * 
+ *             for i in range(n_samples):
+ *                 curr_node_id = self.root
  */
       /*finally:*/ {
         /*normal exit:*/{
           #ifdef WITH_THREAD
+          __Pyx_FastGIL_Forget();
           Py_BLOCK_THREADS
           #endif
           goto __pyx_L7;
@@ -13034,164 +14228,171 @@
       }
   }
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1036
- *             free(feature_to_sample)
+  /* "skgarden/mondrian/tree/_tree.pyx":1198
+ *                         curr_node_id = node.right_child
  * 
  *         indices = indices[:indptr[n_samples]]             # <<<<<<<<<<<<<<
  *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
  *                                                dtype=np.intp)
  */
-  __pyx_t_19 = __pyx_v_n_samples;
-  __pyx_t_10 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_indices), 0, (*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_indptr.diminfo[0].strides)), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1036, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1036, __pyx_L1_error)
-  __pyx_t_13 = ((PyArrayObject *)__pyx_t_10);
+  __pyx_t_14 = __pyx_v_n_samples;
+  __pyx_t_8 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrStrided1d(__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t *, __pyx_pybuffernd_indptr.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_indptr.diminfo[0].strides))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1198, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_9 = PySlice_New(Py_None, __pyx_t_8, Py_None); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1198, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_t_8 = PyObject_GetItem(((PyObject *)__pyx_v_indices), __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1198, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1198, __pyx_L1_error)
+  __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
-    __pyx_t_20 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
-    if (unlikely(__pyx_t_20 < 0)) {
-      PyErr_Fetch(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
+    __pyx_t_15 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_15 < 0)) {
+      PyErr_Fetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
       if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-        Py_XDECREF(__pyx_t_21); Py_XDECREF(__pyx_t_22); Py_XDECREF(__pyx_t_23);
+        Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18);
         __Pyx_RaiseBufferFallbackError();
       } else {
-        PyErr_Restore(__pyx_t_21, __pyx_t_22, __pyx_t_23);
+        PyErr_Restore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
       }
+      __pyx_t_16 = __pyx_t_17 = __pyx_t_18 = 0;
     }
     __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];
-    if (unlikely(__pyx_t_20 < 0)) __PYX_ERR(0, 1036, __pyx_L1_error)
+    if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1198, __pyx_L1_error)
   }
-  __pyx_t_13 = 0;
-  __Pyx_DECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_10));
-  __pyx_t_10 = 0;
+  __pyx_t_11 = 0;
+  __Pyx_DECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_8));
+  __pyx_t_8 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1037
+  /* "skgarden/mondrian/tree/_tree.pyx":1199
  * 
  *         indices = indices[:indptr[n_samples]]
  *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),             # <<<<<<<<<<<<<<
  *                                                dtype=np.intp)
  *         out = csr_matrix((data, indices, indptr),
  */
-  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_ones); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __pyx_t_24 = PyObject_Length(((PyObject *)__pyx_v_indices)); if (unlikely(__pyx_t_24 == -1)) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_24); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_shape, __pyx_t_1) < 0) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ones); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_19 = PyObject_Length(((PyObject *)__pyx_v_indices)); if (unlikely(__pyx_t_19 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_19); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1038
+  /* "skgarden/mondrian/tree/_tree.pyx":1200
  *         indices = indices[:indptr[n_samples]]
  *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
  *                                                dtype=np.intp)             # <<<<<<<<<<<<<<
  *         out = csr_matrix((data, indices, indptr),
  *                          shape=(n_samples, self.node_count))
  */
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_intp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1200, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1037
+  /* "skgarden/mondrian/tree/_tree.pyx":1199
  * 
  *         indices = indices[:indptr[n_samples]]
  *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),             # <<<<<<<<<<<<<<
  *                                                dtype=np.intp)
  *         out = csr_matrix((data, indices, indptr),
  */
-  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
-  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1037, __pyx_L1_error)
-  __pyx_t_25 = ((PyArrayObject *)__pyx_t_4);
+  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1199, __pyx_L1_error)
+  __pyx_t_20 = ((PyArrayObject *)__pyx_t_5);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_25, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn___pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
       __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
-      __PYX_ERR(0, 1037, __pyx_L1_error)
+      __PYX_ERR(0, 1199, __pyx_L1_error)
     } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
     }
   }
-  __pyx_t_25 = 0;
-  __pyx_v_data = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+  __pyx_t_20 = 0;
+  __pyx_v_data = ((PyArrayObject *)__pyx_t_5);
+  __pyx_t_5 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1039
+  /* "skgarden/mondrian/tree/_tree.pyx":1201
  *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
  *                                                dtype=np.intp)
  *         out = csr_matrix((data, indices, indptr),             # <<<<<<<<<<<<<<
  *                          shape=(n_samples, self.node_count))
  * 
- */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1039, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1039, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
+ */
+  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1201, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1201, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
   __Pyx_INCREF(((PyObject *)__pyx_v_data));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
-  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_data));
+  PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_data));
   __Pyx_INCREF(((PyObject *)__pyx_v_indices));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_indices));
-  PyTuple_SET_ITEM(__pyx_t_10, 1, ((PyObject *)__pyx_v_indices));
+  PyTuple_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_indices));
   __Pyx_INCREF(((PyObject *)__pyx_v_indptr));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_indptr));
-  PyTuple_SET_ITEM(__pyx_t_10, 2, ((PyObject *)__pyx_v_indptr));
-  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1039, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_11);
-  __Pyx_GIVEREF(__pyx_t_10);
-  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
-  __pyx_t_10 = 0;
+  PyTuple_SET_ITEM(__pyx_t_8, 2, ((PyObject *)__pyx_v_indptr));
+  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1201, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_9);
+  __Pyx_GIVEREF(__pyx_t_8);
+  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
+  __pyx_t_8 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1040
+  /* "skgarden/mondrian/tree/_tree.pyx":1202
  *                                                dtype=np.intp)
  *         out = csr_matrix((data, indices, indptr),
  *                          shape=(n_samples, self.node_count))             # <<<<<<<<<<<<<<
  * 
  *         return out
  */
-  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1040, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_10);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1040, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_26 = PyTuple_New(2); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1040, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_26);
-  __Pyx_GIVEREF(__pyx_t_1);
-  PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_5);
-  PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_5);
-  __pyx_t_1 = 0;
-  __pyx_t_5 = 0;
-  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_shape, __pyx_t_26) < 0) __PYX_ERR(0, 1040, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
+  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1202, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_21 = PyTuple_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1202, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_21);
+  __Pyx_GIVEREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_4);
+  PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_4);
+  __pyx_t_3 = 0;
+  __pyx_t_4 = 0;
+  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_shape, __pyx_t_21) < 0) __PYX_ERR(0, 1202, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1039
+  /* "skgarden/mondrian/tree/_tree.pyx":1201
  *         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
  *                                                dtype=np.intp)
  *         out = csr_matrix((data, indices, indptr),             # <<<<<<<<<<<<<<
  *                          shape=(n_samples, self.node_count))
  * 
  */
-  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1039, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_26);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
-  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-  __pyx_v_out = __pyx_t_26;
-  __pyx_t_26 = 0;
+  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1201, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_21);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_v_out = __pyx_t_21;
+  __pyx_t_21 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1042
+  /* "skgarden/mondrian/tree/_tree.pyx":1204
  *                          shape=(n_samples, self.node_count))
  * 
  *         return out             # <<<<<<<<<<<<<<
@@ -13203,47 +14404,39 @@
   __pyx_r = __pyx_v_out;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":952
+  /* "skgarden/mondrian/tree/_tree.pyx":1147
  *         return out
  * 
- *     cdef inline object _decision_path_sparse_csr(self, object X):             # <<<<<<<<<<<<<<
+ *     cdef inline object _decision_path_dense(self, object X):             # <<<<<<<<<<<<<<
  *         """Finds the decision path (=node) for each sample in X."""
  * 
  */
 
   /* function exit code */
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_10);
-  __Pyx_XDECREF(__pyx_t_11);
-  __Pyx_XDECREF(__pyx_t_26);
+  __Pyx_XDECREF(__pyx_t_8);
+  __Pyx_XDECREF(__pyx_t_9);
+  __Pyx_XDECREF(__pyx_t_21);
   { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
     __Pyx_PyThreadState_declare
     __Pyx_PyThreadState_assign
     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer);
-    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer);
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer);
   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._decision_path_sparse_csr", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree._decision_path_dense", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = 0;
   goto __pyx_L2;
   __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_data_ndarray.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indices_ndarray.rcbuffer->pybuffer);
-  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X_indptr_ndarray.rcbuffer->pybuffer);
   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indptr.rcbuffer->pybuffer);
   __pyx_L2:;
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_data_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_indices_ndarray);
-  __Pyx_XDECREF((PyObject *)__pyx_v_X_indptr_ndarray);
+  __Pyx_XDECREF((PyObject *)__pyx_v_X_ndarray);
   __Pyx_XDECREF((PyObject *)__pyx_v_indptr);
   __Pyx_XDECREF((PyObject *)__pyx_v_indices);
   __Pyx_XDECREF((PyObject *)__pyx_v_data);
@@ -13253,7 +14446,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":1044
+/* "skgarden/mondrian/tree/_tree.pyx":1206
  *         return out
  * 
  *     cdef np.ndarray _get_value_ndarray(self):             # <<<<<<<<<<<<<<
@@ -13269,7 +14462,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("_get_value_ndarray", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1051
+  /* "skgarden/mondrian/tree/_tree.pyx":1213
  *         """
  *         cdef np.npy_intp shape[3]
  *         shape[0] = <np.npy_intp> self.node_count             # <<<<<<<<<<<<<<
@@ -13278,7 +14471,7 @@
  */
   (__pyx_v_shape[0]) = ((npy_intp)__pyx_v_self->node_count);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1052
+  /* "skgarden/mondrian/tree/_tree.pyx":1214
  *         cdef np.npy_intp shape[3]
  *         shape[0] = <np.npy_intp> self.node_count
  *         shape[1] = <np.npy_intp> self.n_outputs             # <<<<<<<<<<<<<<
@@ -13287,7 +14480,7 @@
  */
   (__pyx_v_shape[1]) = ((npy_intp)__pyx_v_self->n_outputs);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1053
+  /* "skgarden/mondrian/tree/_tree.pyx":1215
  *         shape[0] = <np.npy_intp> self.node_count
  *         shape[1] = <np.npy_intp> self.n_outputs
  *         shape[2] = <np.npy_intp> self.max_n_classes             # <<<<<<<<<<<<<<
@@ -13296,20 +14489,20 @@
  */
   (__pyx_v_shape[2]) = ((npy_intp)__pyx_v_self->max_n_classes);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1055
+  /* "skgarden/mondrian/tree/_tree.pyx":1217
  *         shape[2] = <np.npy_intp> self.max_n_classes
  *         cdef np.ndarray arr
  *         arr = np.PyArray_SimpleNewFromData(3, shape, np.NPY_DOUBLE, self.value)             # <<<<<<<<<<<<<<
  *         Py_INCREF(self)
  *         arr.base = <PyObject*> self
  */
-  __pyx_t_1 = PyArray_SimpleNewFromData(3, __pyx_v_shape, NPY_DOUBLE, __pyx_v_self->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
+  __pyx_t_1 = PyArray_SimpleNewFromData(3, __pyx_v_shape, NPY_DOUBLE, __pyx_v_self->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1055, __pyx_L1_error)
+  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1217, __pyx_L1_error)
   __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
   __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1056
+  /* "skgarden/mondrian/tree/_tree.pyx":1218
  *         cdef np.ndarray arr
  *         arr = np.PyArray_SimpleNewFromData(3, shape, np.NPY_DOUBLE, self.value)
  *         Py_INCREF(self)             # <<<<<<<<<<<<<<
@@ -13318,7 +14511,7 @@
  */
   Py_INCREF(((PyObject *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1057
+  /* "skgarden/mondrian/tree/_tree.pyx":1219
  *         arr = np.PyArray_SimpleNewFromData(3, shape, np.NPY_DOUBLE, self.value)
  *         Py_INCREF(self)
  *         arr.base = <PyObject*> self             # <<<<<<<<<<<<<<
@@ -13327,7 +14520,7 @@
  */
   __pyx_v_arr->base = ((PyObject *)__pyx_v_self);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1058
+  /* "skgarden/mondrian/tree/_tree.pyx":1220
  *         Py_INCREF(self)
  *         arr.base = <PyObject*> self
  *         return arr             # <<<<<<<<<<<<<<
@@ -13339,7 +14532,7 @@
   __pyx_r = __pyx_v_arr;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1044
+  /* "skgarden/mondrian/tree/_tree.pyx":1206
  *         return out
  * 
  *     cdef np.ndarray _get_value_ndarray(self):             # <<<<<<<<<<<<<<
@@ -13359,7 +14552,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pyx":1060
+/* "skgarden/mondrian/tree/_tree.pyx":1222
  *         return arr
  * 
  *     cdef np.ndarray _get_node_ndarray(self):             # <<<<<<<<<<<<<<
@@ -13377,7 +14570,7 @@
   PyObject *__pyx_t_2 = NULL;
   __Pyx_RefNannySetupContext("_get_node_ndarray", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1068
+  /* "skgarden/mondrian/tree/_tree.pyx":1230
  *         """
  *         cdef np.npy_intp shape[1]
  *         shape[0] = <np.npy_intp> self.node_count             # <<<<<<<<<<<<<<
@@ -13386,7 +14579,7 @@
  */
   (__pyx_v_shape[0]) = ((npy_intp)__pyx_v_self->node_count);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1070
+  /* "skgarden/mondrian/tree/_tree.pyx":1232
  *         shape[0] = <np.npy_intp> self.node_count
  *         cdef np.npy_intp strides[1]
  *         strides[0] = sizeof(Node)             # <<<<<<<<<<<<<<
@@ -13395,51 +14588,51 @@
  */
   (__pyx_v_strides[0]) = (sizeof(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1072
+  /* "skgarden/mondrian/tree/_tree.pyx":1234
  *         strides[0] = sizeof(Node)
  *         cdef np.ndarray arr
  *         Py_INCREF(NODE_DTYPE)             # <<<<<<<<<<<<<<
  *         arr = PyArray_NewFromDescr(np.ndarray, <np.dtype> NODE_DTYPE, 1, shape,
  *                                    strides, <void*> self.nodes,
  */
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NODE_DTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NODE_DTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   Py_INCREF(__pyx_t_1);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1073
+  /* "skgarden/mondrian/tree/_tree.pyx":1235
  *         cdef np.ndarray arr
  *         Py_INCREF(NODE_DTYPE)
  *         arr = PyArray_NewFromDescr(np.ndarray, <np.dtype> NODE_DTYPE, 1, shape,             # <<<<<<<<<<<<<<
  *                                    strides, <void*> self.nodes,
  *                                    np.NPY_DEFAULT, None)
  */
-  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NODE_DTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NODE_DTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1235, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1075
+  /* "skgarden/mondrian/tree/_tree.pyx":1237
  *         arr = PyArray_NewFromDescr(np.ndarray, <np.dtype> NODE_DTYPE, 1, shape,
  *                                    strides, <void*> self.nodes,
  *                                    np.NPY_DEFAULT, None)             # <<<<<<<<<<<<<<
  *         Py_INCREF(self)
  *         arr.base = <PyObject*> self
  */
-  __pyx_t_2 = PyArray_NewFromDescr(((PyObject *)__pyx_ptype_5numpy_ndarray), ((PyArray_Descr *)__pyx_t_1), 1, __pyx_v_shape, __pyx_v_strides, ((void *)__pyx_v_self->nodes), NPY_DEFAULT, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
+  __pyx_t_2 = PyArray_NewFromDescr(((PyObject *)__pyx_ptype_5numpy_ndarray), ((PyArray_Descr *)__pyx_t_1), 1, __pyx_v_shape, __pyx_v_strides, ((void *)__pyx_v_self->nodes), NPY_DEFAULT, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1235, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1073
+  /* "skgarden/mondrian/tree/_tree.pyx":1235
  *         cdef np.ndarray arr
  *         Py_INCREF(NODE_DTYPE)
  *         arr = PyArray_NewFromDescr(np.ndarray, <np.dtype> NODE_DTYPE, 1, shape,             # <<<<<<<<<<<<<<
  *                                    strides, <void*> self.nodes,
  *                                    np.NPY_DEFAULT, None)
  */
-  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1073, __pyx_L1_error)
+  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1235, __pyx_L1_error)
   __pyx_v_arr = ((PyArrayObject *)__pyx_t_2);
   __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1076
+  /* "skgarden/mondrian/tree/_tree.pyx":1238
  *                                    strides, <void*> self.nodes,
  *                                    np.NPY_DEFAULT, None)
  *         Py_INCREF(self)             # <<<<<<<<<<<<<<
@@ -13448,7 +14641,7 @@
  */
   Py_INCREF(((PyObject *)__pyx_v_self));
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1077
+  /* "skgarden/mondrian/tree/_tree.pyx":1239
  *                                    np.NPY_DEFAULT, None)
  *         Py_INCREF(self)
  *         arr.base = <PyObject*> self             # <<<<<<<<<<<<<<
@@ -13456,7 +14649,7 @@
  */
   __pyx_v_arr->base = ((PyObject *)__pyx_v_self);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1078
+  /* "skgarden/mondrian/tree/_tree.pyx":1240
  *         Py_INCREF(self)
  *         arr.base = <PyObject*> self
  *         return arr             # <<<<<<<<<<<<<<
@@ -13466,7 +14659,7 @@
   __pyx_r = __pyx_v_arr;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":1060
+  /* "skgarden/mondrian/tree/_tree.pyx":1222
  *         return arr
  * 
  *     cdef np.ndarray _get_node_ndarray(self):             # <<<<<<<<<<<<<<
@@ -13514,7 +14707,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__get__", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -13549,7 +14742,7 @@
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
   __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 47, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 47, __pyx_L1_error)
   __pyx_v_self->n_features = __pyx_t_1;
 
   /* function exit code */
@@ -13590,7 +14783,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__get__", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 49, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_outputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 49, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -13625,7 +14818,7 @@
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
   __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 49, __pyx_L1_error)
   __pyx_v_self->n_outputs = __pyx_t_1;
 
   /* function exit code */
@@ -13666,7 +14859,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__get__", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -13701,7 +14894,7 @@
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
   __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 50, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 50, __pyx_L1_error)
   __pyx_v_self->max_n_classes = __pyx_t_1;
 
   /* function exit code */
@@ -13742,7 +14935,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__get__", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 54, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -13777,7 +14970,7 @@
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
   __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 54, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 54, __pyx_L1_error)
   __pyx_v_self->max_depth = __pyx_t_1;
 
   /* function exit code */
@@ -13818,7 +15011,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("__get__", 0);
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 55, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->node_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
@@ -13853,7 +15046,7 @@
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
   __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 55, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 55, __pyx_L1_error)
   __pyx_v_self->node_count = __pyx_t_1;
 
   /* function exit code */
@@ -13867,83 +15060,592 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_tree.pxd":56
- *     cdef public SIZE_t max_depth         # Max depth of the tree
- *     cdef public SIZE_t node_count        # Counter for node IDs
- *     cdef public SIZE_t capacity          # Capacity of tree, in terms of nodes             # <<<<<<<<<<<<<<
- *     cdef Node* nodes                     # Array of nodes
- *     cdef double* value                   # (capacity, n_outputs, max_n_classes) array of values
+/* "skgarden/mondrian/tree/_tree.pxd":56
+ *     cdef public SIZE_t max_depth         # Max depth of the tree
+ *     cdef public SIZE_t node_count        # Counter for node IDs
+ *     cdef public SIZE_t capacity          # Capacity of tree, in terms of nodes             # <<<<<<<<<<<<<<
+ *     cdef Node* nodes                     # Array of nodes
+ *     cdef double* value                   # (capacity, n_outputs, max_n_classes) array of values
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_1__get__(PyObject *__pyx_v_self); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_1__get__(PyObject *__pyx_v_self) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__get__", 0);
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->capacity); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.capacity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* Python wrapper */
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
+static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_2__set__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_value));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_2__set__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_value) {
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
+  __Pyx_RefNannySetupContext("__set__", 0);
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(2, 56, __pyx_L1_error)
+  __pyx_v_self->capacity = __pyx_t_1;
+
+  /* function exit code */
+  __pyx_r = 0;
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.capacity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = -1;
+  __pyx_L0:;
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":1
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0xedae8f4:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_1__pyx_unpickle_TreeBuilder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyMethodDef __pyx_mdef_8skgarden_8mondrian_4tree_5_tree_1__pyx_unpickle_TreeBuilder = {"__pyx_unpickle_TreeBuilder", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_1__pyx_unpickle_TreeBuilder, METH_VARARGS|METH_KEYWORDS, 0};
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_1__pyx_unpickle_TreeBuilder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyObject *__pyx_v___pyx_type = 0;
+  long __pyx_v___pyx_checksum;
+  PyObject *__pyx_v___pyx_state = 0;
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__pyx_unpickle_TreeBuilder (wrapper)", 0);
+  {
+    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
+    PyObject* values[3] = {0,0,0};
+    if (unlikely(__pyx_kwds)) {
+      Py_ssize_t kw_args;
+      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
+      switch (pos_args) {
+        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+        CYTHON_FALLTHROUGH;
+        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+        CYTHON_FALLTHROUGH;
+        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
+        case  0: break;
+        default: goto __pyx_L5_argtuple_error;
+      }
+      kw_args = PyDict_Size(__pyx_kwds);
+      switch (pos_args) {
+        case  0:
+        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
+        else goto __pyx_L5_argtuple_error;
+        CYTHON_FALLTHROUGH;
+        case  1:
+        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TreeBuilder", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
+        }
+        CYTHON_FALLTHROUGH;
+        case  2:
+        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
+        else {
+          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TreeBuilder", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
+        }
+      }
+      if (unlikely(kw_args > 0)) {
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_TreeBuilder") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
+      }
+    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
+      goto __pyx_L5_argtuple_error;
+    } else {
+      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+    }
+    __pyx_v___pyx_type = values[0];
+    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
+    __pyx_v___pyx_state = values[2];
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TreeBuilder", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.__pyx_unpickle_TreeBuilder", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_RefNannyFinishContext();
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_v___pyx_PickleError = NULL;
+  PyObject *__pyx_v___pyx_result = NULL;
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  PyObject *__pyx_t_6 = NULL;
+  int __pyx_t_7;
+  __Pyx_RefNannySetupContext("__pyx_unpickle_TreeBuilder", 0);
+
+  /* "(tree fragment)":2
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):
+ *     if __pyx_checksum != 0xedae8f4:             # <<<<<<<<<<<<<<
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)
+ */
+  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xedae8f4) != 0);
+  if (__pyx_t_1) {
+
+    /* "(tree fragment)":3
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):
+ *     if __pyx_checksum != 0xedae8f4:
+ *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)
+ *     __pyx_result = TreeBuilder.__new__(__pyx_type)
+ */
+    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(__pyx_n_s_PickleError);
+    __Pyx_GIVEREF(__pyx_n_s_PickleError);
+    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
+    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(__pyx_t_2);
+    __pyx_v___pyx_PickleError = __pyx_t_2;
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+    /* "(tree fragment)":4
+ *     if __pyx_checksum != 0xedae8f4:
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)             # <<<<<<<<<<<<<<
+ *     __pyx_result = TreeBuilder.__new__(__pyx_type)
+ *     if __pyx_state is not None:
+ */
+    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xed, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_INCREF(__pyx_v___pyx_PickleError);
+    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
+    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
+      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
+      if (likely(__pyx_t_5)) {
+        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
+        __Pyx_INCREF(__pyx_t_5);
+        __Pyx_INCREF(function);
+        __Pyx_DECREF_SET(__pyx_t_2, function);
+      }
+    }
+    if (!__pyx_t_5) {
+      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __Pyx_GOTREF(__pyx_t_3);
+    } else {
+      #if CYTHON_FAST_PYCALL
+      if (PyFunction_Check(__pyx_t_2)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
+        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      } else
+      #endif
+      #if CYTHON_FAST_PYCCALL
+      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
+        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      } else
+      #endif
+      {
+        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_6);
+        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
+        __Pyx_GIVEREF(__pyx_t_4);
+        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
+        __pyx_t_4 = 0;
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      }
+    }
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __PYX_ERR(1, 4, __pyx_L1_error)
+
+    /* "(tree fragment)":2
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):
+ *     if __pyx_checksum != 0xedae8f4:             # <<<<<<<<<<<<<<
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)
+ */
+  }
+
+  /* "(tree fragment)":5
+ *         from pickle import PickleError as __pyx_PickleError
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)
+ *     __pyx_result = TreeBuilder.__new__(__pyx_type)             # <<<<<<<<<<<<<<
+ *     if __pyx_state is not None:
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)
+ */
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_6 = NULL;
+  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
+    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
+    if (likely(__pyx_t_6)) {
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
+      __Pyx_INCREF(__pyx_t_6);
+      __Pyx_INCREF(function);
+      __Pyx_DECREF_SET(__pyx_t_2, function);
+    }
+  }
+  if (!__pyx_t_6) {
+    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+  } else {
+    #if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(__pyx_t_2)) {
+      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
+      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __Pyx_GOTREF(__pyx_t_3);
+    } else
+    #endif
+    #if CYTHON_FAST_PYCCALL
+    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
+      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
+      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __Pyx_GOTREF(__pyx_t_3);
+    } else
+    #endif
+    {
+      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_4);
+      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
+      __Pyx_INCREF(__pyx_v___pyx_type);
+      __Pyx_GIVEREF(__pyx_v___pyx_type);
+      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_3);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    }
+  }
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_v___pyx_result = __pyx_t_3;
+  __pyx_t_3 = 0;
+
+  /* "(tree fragment)":6
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)
+ *     __pyx_result = TreeBuilder.__new__(__pyx_type)
+ *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)
+ *     return __pyx_result
  */
+  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
+  __pyx_t_7 = (__pyx_t_1 != 0);
+  if (__pyx_t_7) {
 
-/* Python wrapper */
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_1__get__(PyObject *__pyx_v_self); /*proto*/
-static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_1__get__(PyObject *__pyx_v_self) {
-  PyObject *__pyx_r = 0;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity___get__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self));
+    /* "(tree fragment)":7
+ *     __pyx_result = TreeBuilder.__new__(__pyx_type)
+ *     if __pyx_state is not None:
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
+ *     return __pyx_result
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):
+ */
+    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
+    __pyx_t_3 = __pyx_f_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder__set_state(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
 
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+    /* "(tree fragment)":6
+ *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xedae8f4 = (max_depth, min_samples_leaf, min_samples_split, min_weight_leaf, random_state, splitter))" % __pyx_checksum)
+ *     __pyx_result = TreeBuilder.__new__(__pyx_type)
+ *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ */
+  }
 
-static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity___get__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  __Pyx_RefNannySetupContext("__get__", 0);
+  /* "(tree fragment)":8
+ *     if __pyx_state is not None:
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)
+ *     return __pyx_result             # <<<<<<<<<<<<<<
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]
+ */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->capacity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
+  __Pyx_INCREF(__pyx_v___pyx_result);
+  __pyx_r = __pyx_v___pyx_result;
   goto __pyx_L0;
 
+  /* "(tree fragment)":1
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0xedae8f4:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+
   /* function exit code */
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.capacity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.__pyx_unpickle_TreeBuilder", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __pyx_r = NULL;
   __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
+  __Pyx_XDECREF(__pyx_v___pyx_result);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* Python wrapper */
-static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
-static int __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
-  int __pyx_r;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_2__set__(((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_value));
-
-  /* function exit code */
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+/* "(tree fragment)":9
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]
+ *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
+ */
 
-static int __pyx_pf_8skgarden_8mondrian_4tree_5_tree_4Tree_8capacity_2__set__(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_v_self, PyObject *__pyx_v_value) {
-  int __pyx_r;
+static PyObject *__pyx_f_8skgarden_8mondrian_4tree_5_tree___pyx_unpickle_TreeBuilder__set_state(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t __pyx_t_1;
-  __Pyx_RefNannySetupContext("__set__", 0);
-  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
-  __pyx_v_self->capacity = __pyx_t_1;
+  double __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  int __pyx_t_4;
+  Py_ssize_t __pyx_t_5;
+  int __pyx_t_6;
+  int __pyx_t_7;
+  PyObject *__pyx_t_8 = NULL;
+  PyObject *__pyx_t_9 = NULL;
+  PyObject *__pyx_t_10 = NULL;
+  __Pyx_RefNannySetupContext("__pyx_unpickle_TreeBuilder__set_state", 0);
+
+  /* "(tree fragment)":10
+ *     return __pyx_result
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]             # <<<<<<<<<<<<<<
+ *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
+ *         __pyx_result.__dict__.update(__pyx_state[6])
+ */
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
+  __pyx_v___pyx_result->max_depth = __pyx_t_1;
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
+  __pyx_v___pyx_result->min_samples_leaf = __pyx_t_1;
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_1 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
+  __pyx_v___pyx_result->min_samples_split = __pyx_t_1;
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  __pyx_t_2 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
+  __pyx_v___pyx_result->min_weight_leaf = __pyx_t_2;
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 4);
+  __Pyx_INCREF(__pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_3);
+  __Pyx_GOTREF(__pyx_v___pyx_result->random_state);
+  __Pyx_DECREF(__pyx_v___pyx_result->random_state);
+  __pyx_v___pyx_result->random_state = __pyx_t_3;
+  __pyx_t_3 = 0;
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+    __PYX_ERR(1, 10, __pyx_L1_error)
+  }
+  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5), __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter))))) __PYX_ERR(1, 10, __pyx_L1_error)
+  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 5);
+  __Pyx_INCREF(__pyx_t_3);
+  __Pyx_GIVEREF(__pyx_t_3);
+  __Pyx_GOTREF(__pyx_v___pyx_result->splitter);
+  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->splitter));
+  __pyx_v___pyx_result->splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)__pyx_t_3);
+  __pyx_t_3 = 0;
+
+  /* "(tree fragment)":11
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]
+ *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
+ *         __pyx_result.__dict__.update(__pyx_state[6])
+ */
+  if (unlikely(__pyx_v___pyx_state == Py_None)) {
+    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
+    __PYX_ERR(1, 11, __pyx_L1_error)
+  }
+  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
+  __pyx_t_6 = ((__pyx_t_5 > 6) != 0);
+  if (__pyx_t_6) {
+  } else {
+    __pyx_t_4 = __pyx_t_6;
+    goto __pyx_L4_bool_binop_done;
+  }
+  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
+  __pyx_t_7 = (__pyx_t_6 != 0);
+  __pyx_t_4 = __pyx_t_7;
+  __pyx_L4_bool_binop_done:;
+  if (__pyx_t_4) {
+
+    /* "(tree fragment)":12
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]
+ *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
+ *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
+ */
+    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_8);
+    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 12, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_9);
+    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+    if (unlikely(__pyx_v___pyx_state == Py_None)) {
+      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
+      __PYX_ERR(1, 12, __pyx_L1_error)
+    }
+    __pyx_t_8 = NULL;
+    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
+      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
+      if (likely(__pyx_t_8)) {
+        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
+        __Pyx_INCREF(__pyx_t_8);
+        __Pyx_INCREF(function);
+        __Pyx_DECREF_SET(__pyx_t_9, function);
+      }
+    }
+    if (!__pyx_t_8) {
+      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 12, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_3);
+    } else {
+      #if CYTHON_FAST_PYCALL
+      if (PyFunction_Check(__pyx_t_9)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)};
+        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
+        __Pyx_GOTREF(__pyx_t_3);
+      } else
+      #endif
+      #if CYTHON_FAST_PYCCALL
+      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
+        PyObject *__pyx_temp[2] = {__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)};
+        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
+        __Pyx_GOTREF(__pyx_t_3);
+      } else
+      #endif
+      {
+        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_10);
+        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
+        __Pyx_INCREF(PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
+        __Pyx_GIVEREF(PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
+        PyTuple_SET_ITEM(__pyx_t_10, 0+1, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 12, __pyx_L1_error)
+        __Pyx_GOTREF(__pyx_t_3);
+        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
+      }
+    }
+    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+
+    /* "(tree fragment)":11
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]
+ *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
+ *         __pyx_result.__dict__.update(__pyx_state[6])
+ */
+  }
+
+  /* "(tree fragment)":9
+ *         __pyx_unpickle_TreeBuilder__set_state(<TreeBuilder> __pyx_result, __pyx_state)
+ *     return __pyx_result
+ * cdef __pyx_unpickle_TreeBuilder__set_state(TreeBuilder __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
+ *     __pyx_result.max_depth = __pyx_state[0]; __pyx_result.min_samples_leaf = __pyx_state[1]; __pyx_result.min_samples_split = __pyx_state[2]; __pyx_result.min_weight_leaf = __pyx_state[3]; __pyx_result.random_state = __pyx_state[4]; __pyx_result.splitter = __pyx_state[5]
+ *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
+ */
 
   /* function exit code */
-  __pyx_r = 0;
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.Tree.capacity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = -1;
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_8);
+  __Pyx_XDECREF(__pyx_t_9);
+  __Pyx_XDECREF(__pyx_t_10);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._tree.__pyx_unpickle_TreeBuilder__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = 0;
   __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -13990,7 +15692,7 @@
     __Pyx_GIVEREF(__pyx_v_info->obj);
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":203
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
  *             # of flags
  * 
  *             if info == NULL: return             # <<<<<<<<<<<<<<
@@ -14003,7 +15705,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":206
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
  * 
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -14012,7 +15714,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":207
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":224
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -14021,7 +15723,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":209
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
  * 
  *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
@@ -14030,7 +15732,7 @@
  */
   __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -14040,7 +15742,7 @@
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":212
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  *                 copy_shape = 1             # <<<<<<<<<<<<<<
@@ -14049,7 +15751,7 @@
  */
     __pyx_v_copy_shape = 1;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -14059,7 +15761,7 @@
     goto __pyx_L4;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":214
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
  *                 copy_shape = 1
  *             else:
  *                 copy_shape = 0             # <<<<<<<<<<<<<<
@@ -14071,7 +15773,7 @@
   }
   __pyx_L4:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -14085,7 +15787,7 @@
     goto __pyx_L6_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":217
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":234
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -14096,7 +15798,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L6_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -14105,20 +15807,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 218, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 235, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(2, 218, __pyx_L1_error)
+    __PYX_ERR(3, 235, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -14127,7 +15829,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -14141,7 +15843,7 @@
     goto __pyx_L9_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":221
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":238
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -14152,7 +15854,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L9_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -14161,20 +15863,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 222, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 239, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(2, 222, __pyx_L1_error)
+    __PYX_ERR(3, 239, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -14183,7 +15885,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":224
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
  * 
  *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
@@ -14192,7 +15894,7 @@
  */
   __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":225
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
  * 
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim             # <<<<<<<<<<<<<<
@@ -14201,7 +15903,7 @@
  */
   __pyx_v_info->ndim = __pyx_v_ndim;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -14211,26 +15913,26 @@
   __pyx_t_1 = (__pyx_v_copy_shape != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":229
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
  *                 # Allocate new buffer for strides and shape info.
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  */
-    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));
+    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":230
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  */
     __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":231
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):             # <<<<<<<<<<<<<<
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
@@ -14240,7 +15942,7 @@
     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
       __pyx_v_i = __pyx_t_5;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":232
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
@@ -14249,7 +15951,7 @@
  */
       (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":233
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
@@ -14259,7 +15961,7 @@
       (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -14269,7 +15971,7 @@
     goto __pyx_L11;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":235
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":252
  *                     info.shape[i] = PyArray_DIMS(self)[i]
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
@@ -14279,7 +15981,7 @@
   /*else*/ {
     __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":236
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
@@ -14290,7 +15992,7 @@
   }
   __pyx_L11:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":237
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
@@ -14299,7 +16001,7 @@
  */
   __pyx_v_info->suboffsets = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":238
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
@@ -14308,7 +16010,7 @@
  */
   __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":239
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)
  *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
@@ -14317,7 +16019,7 @@
  */
   __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":242
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
  * 
  *             cdef int t
  *             cdef char* f = NULL             # <<<<<<<<<<<<<<
@@ -14326,7 +16028,7 @@
  */
   __pyx_v_f = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":243
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
  *             cdef int t
  *             cdef char* f = NULL
  *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
@@ -14338,7 +16040,7 @@
   __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
   __pyx_t_3 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":246
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
  *             cdef int offset
  * 
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
@@ -14347,7 +16049,7 @@
  */
   __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -14365,7 +16067,7 @@
   __pyx_L15_bool_binop_done:;
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":250
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
  *             if not hasfields and not copy_shape:
  *                 # do not call releasebuffer
  *                 info.obj = None             # <<<<<<<<<<<<<<
@@ -14378,7 +16080,7 @@
     __Pyx_DECREF(__pyx_v_info->obj);
     __pyx_v_info->obj = Py_None;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -14388,7 +16090,7 @@
     goto __pyx_L14;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":253
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
  *             else:
  *                 # need to call releasebuffer
  *                 info.obj = self             # <<<<<<<<<<<<<<
@@ -14404,7 +16106,7 @@
   }
   __pyx_L14:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -14414,7 +16116,7 @@
   __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":256
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
  * 
  *             if not hasfields:
  *                 t = descr.type_num             # <<<<<<<<<<<<<<
@@ -14424,7 +16126,7 @@
     __pyx_t_4 = __pyx_v_descr->type_num;
     __pyx_v_t = __pyx_t_4;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -14444,7 +16146,7 @@
     }
     __pyx_L20_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":258
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -14461,7 +16163,7 @@
     __pyx_t_1 = __pyx_t_2;
     __pyx_L19_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -14470,20 +16172,20 @@
  */
     if (__pyx_t_1) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 259, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 276, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(2, 259, __pyx_L1_error)
+      __PYX_ERR(3, 276, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -14492,7 +16194,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":260
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
@@ -14504,7 +16206,7 @@
       __pyx_v_f = ((char *)"b");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":261
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
@@ -14515,7 +16217,7 @@
       __pyx_v_f = ((char *)"B");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":262
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
@@ -14526,7 +16228,7 @@
       __pyx_v_f = ((char *)"h");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":263
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
@@ -14537,7 +16239,7 @@
       __pyx_v_f = ((char *)"H");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":264
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":281
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
@@ -14548,7 +16250,7 @@
       __pyx_v_f = ((char *)"i");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":265
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
@@ -14559,7 +16261,7 @@
       __pyx_v_f = ((char *)"I");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":266
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
@@ -14570,7 +16272,7 @@
       __pyx_v_f = ((char *)"l");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":267
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
@@ -14581,7 +16283,7 @@
       __pyx_v_f = ((char *)"L");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":268
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
@@ -14592,7 +16294,7 @@
       __pyx_v_f = ((char *)"q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":269
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
@@ -14603,7 +16305,7 @@
       __pyx_v_f = ((char *)"Q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":270
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
@@ -14614,7 +16316,7 @@
       __pyx_v_f = ((char *)"f");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":271
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
@@ -14625,7 +16327,7 @@
       __pyx_v_f = ((char *)"d");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":272
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
@@ -14636,7 +16338,7 @@
       __pyx_v_f = ((char *)"g");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":273
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
@@ -14647,7 +16349,7 @@
       __pyx_v_f = ((char *)"Zf");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":274
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
@@ -14658,7 +16360,7 @@
       __pyx_v_f = ((char *)"Zd");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":275
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
@@ -14669,7 +16371,7 @@
       __pyx_v_f = ((char *)"Zg");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":276
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
  *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
@@ -14681,33 +16383,33 @@
       break;
       default:
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":278
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
  *                 elif t == NPY_OBJECT:      f = "O"
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
  *                 info.format = f
  *                 return
  */
-      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_GIVEREF(__pyx_t_6);
       PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
       __pyx_t_6 = 0;
-      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 278, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       __Pyx_Raise(__pyx_t_6, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __PYX_ERR(2, 278, __pyx_L1_error)
+      __PYX_ERR(3, 295, __pyx_L1_error)
       break;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":279
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f             # <<<<<<<<<<<<<<
@@ -14716,17 +16418,17 @@
  */
     __pyx_v_info->format = __pyx_v_f;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":280
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f
  *                 return             # <<<<<<<<<<<<<<
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  */
     __pyx_r = 0;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -14735,27 +16437,27 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":282
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":299
  *                 return
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  */
   /*else*/ {
-    __pyx_v_info->format = ((char *)malloc(0xFF));
+    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":283
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":300
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,
  */
     (__pyx_v_info->format[0]) = '^';
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":284
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":301
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0             # <<<<<<<<<<<<<<
  *                 f = _util_dtypestring(descr, info.format + 1,
@@ -14763,17 +16465,17 @@
  */
     __pyx_v_offset = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":285
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  */
-    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(2, 285, __pyx_L1_error)
+    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(3, 302, __pyx_L1_error)
     __pyx_v_f = __pyx_t_7;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":288
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":305
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
@@ -14783,7 +16485,7 @@
     (__pyx_v_f[0]) = '\x00';
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -14815,12 +16517,12 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
 /* Python wrapper */
@@ -14839,75 +16541,75 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("__releasebuffer__", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":292
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":309
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  */
-    free(__pyx_v_info->format);
+    PyObject_Free(__pyx_v_info->format);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":294
- *                 stdlib.free(info.format)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":311
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
  *                 # info.shape was stored after info.strides in the same block
  * 
  */
-    free(__pyx_v_info->strides);
+    PyObject_Free(__pyx_v_info->strides);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -14921,7 +16623,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":771
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":789
  * 
  * cdef inline object PyArray_MultiIterNew1(a):
  *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
@@ -14929,13 +16631,13 @@
  * cdef inline object PyArray_MultiIterNew2(a, b):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 771, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 789, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -14954,7 +16656,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -14968,7 +16670,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":774
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
@@ -14976,13 +16678,13 @@
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 774, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 792, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -15001,7 +16703,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -15015,7 +16717,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":777
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
@@ -15023,13 +16725,13 @@
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 795, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -15048,7 +16750,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -15062,7 +16764,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":780
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
@@ -15070,13 +16772,13 @@
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 798, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -15095,7 +16797,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -15109,21 +16811,21 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":783
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
  * 
- * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 801, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -15142,9 +16844,83 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
+ *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
+  if (__pyx_t_1) {
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
+ *     else:
+ *         return ()
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
+    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
+    goto __pyx_L0;
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
+ *         return <tuple>d.subarray.shape
+ *     else:
+ *         return ()             # <<<<<<<<<<<<<<
+ * 
+ * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(__pyx_empty_tuple);
+    __pyx_r = __pyx_empty_tuple;
+    goto __pyx_L0;
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
  * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
+ * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
  *     # string. The new location in the format string is returned.
@@ -15171,7 +16947,7 @@
   char *__pyx_t_9;
   __Pyx_RefNannySetupContext("_util_dtypestring", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":790
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
  * 
  *     cdef dtype child
  *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -15180,7 +16956,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":791
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
  *     cdef dtype child
  *     cdef int endian_detector = 1
  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -15189,7 +16965,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -15198,21 +16974,21 @@
  */
   if (unlikely(__pyx_v_descr->names == Py_None)) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
-    __PYX_ERR(2, 794, __pyx_L1_error)
+    __PYX_ERR(3, 818, __pyx_L1_error)
   }
   __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
   for (;;) {
     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 794, __pyx_L1_error)
+    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 818, __pyx_L1_error)
     #else
-    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 794, __pyx_L1_error)
+    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 818, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     #endif
     __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":795
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":819
  * 
  *     for childname in descr.names:
  *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
@@ -15221,15 +16997,15 @@
  */
     if (unlikely(__pyx_v_descr->fields == Py_None)) {
       PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
-      __PYX_ERR(2, 795, __pyx_L1_error)
+      __PYX_ERR(3, 819, __pyx_L1_error)
     }
-    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 795, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 819, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
-    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 795, __pyx_L1_error)
+    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(3, 819, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":796
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
  *     for childname in descr.names:
  *         fields = descr.fields[childname]
  *         child, new_offset = fields             # <<<<<<<<<<<<<<
@@ -15246,7 +17022,7 @@
       if (unlikely(size != 2)) {
         if (size > 2) __Pyx_RaiseTooManyValuesError(2);
         else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
-        __PYX_ERR(2, 796, __pyx_L1_error)
+        __PYX_ERR(3, 820, __pyx_L1_error)
       }
       #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
       __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
@@ -15254,51 +17030,51 @@
       __Pyx_INCREF(__pyx_t_3);
       __Pyx_INCREF(__pyx_t_4);
       #else
-      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 796, __pyx_L1_error)
+      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 796, __pyx_L1_error)
+      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       #endif
     } else {
-      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 796, __pyx_L1_error)
+      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(3, 820, __pyx_L1_error)
     }
-    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 796, __pyx_L1_error)
+    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(3, 820, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
     __pyx_t_3 = 0;
     __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
     __pyx_t_4 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  */
-    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 798, __pyx_L1_error)
+    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 798, __pyx_L1_error)
+    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 798, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 822, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 799, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 823, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(2, 799, __pyx_L1_error)
+      __PYX_ERR(3, 823, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
@@ -15307,7 +17083,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -15327,7 +17103,7 @@
     }
     __pyx_L8_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":802
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -15344,7 +17120,7 @@
     __pyx_t_6 = __pyx_t_7;
     __pyx_L7_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -15353,20 +17129,20 @@
  */
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 803, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 827, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(2, 803, __pyx_L1_error)
+      __PYX_ERR(3, 827, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -15375,7 +17151,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":813
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
  * 
  *         # Output padding bytes
  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
@@ -15383,15 +17159,15 @@
  *             f += 1
  */
     while (1) {
-      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 813, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 837, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 813, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 813, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (!__pyx_t_6) break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":814
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
  *         # Output padding bytes
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
@@ -15400,7 +17176,7 @@
  */
       (__pyx_v_f[0]) = 0x78;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":815
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte
  *             f += 1             # <<<<<<<<<<<<<<
@@ -15409,7 +17185,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":816
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
  *             f[0] = 120 # "x"; pad byte
  *             f += 1
  *             offset[0] += 1             # <<<<<<<<<<<<<<
@@ -15420,7 +17196,7 @@
       (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":818
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
  *             offset[0] += 1
  * 
  *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
@@ -15430,7 +17206,7 @@
     __pyx_t_8 = 0;
     (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -15440,19 +17216,19 @@
     __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":821
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
  * 
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num             # <<<<<<<<<<<<<<
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")
  */
-      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 821, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 845, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
       __pyx_t_4 = 0;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -15462,20 +17238,20 @@
       __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
       if (__pyx_t_6) {
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 823, __pyx_L1_error)
+        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 847, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_Raise(__pyx_t_4, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-        __PYX_ERR(2, 823, __pyx_L1_error)
+        __PYX_ERR(3, 847, __pyx_L1_error)
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -15484,252 +17260,252 @@
  */
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":826
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 826, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 850, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 826, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 826, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 98;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":827
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 851, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 827, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 827, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":828
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 828, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 852, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 828, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 828, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x68;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":829
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 829, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 853, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 829, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 829, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 72;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":830
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":854
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 830, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 854, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 830, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 830, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x69;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":831
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 831, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 855, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 831, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 831, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 73;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":832
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 856, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 832, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 832, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x6C;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":833
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":857
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 833, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 857, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 833, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 833, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 76;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":834
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 858, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 834, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 834, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x71;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":835
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":859
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 835, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 859, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 835, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 835, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 81;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":836
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 836, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 860, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 836, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 836, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":837
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 861, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x64;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":838
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":862
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 862, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x67;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":839
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":863
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 863, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -15738,18 +17514,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":840
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":864
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 864, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -15758,18 +17534,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":841
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":865
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 865, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -15778,25 +17554,25 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":842
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":866
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 866, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 79;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":844
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":868
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
@@ -15804,23 +17580,23 @@
  *         else:
  */
       /*else*/ {
-        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
+        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
-        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
+        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_GIVEREF(__pyx_t_3);
         PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
         __pyx_t_3 = 0;
-        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_Raise(__pyx_t_3, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-        __PYX_ERR(2, 844, __pyx_L1_error)
+        __PYX_ERR(3, 868, __pyx_L1_error)
       }
       __pyx_L15:;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":845
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":869
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *             f += 1             # <<<<<<<<<<<<<<
@@ -15829,7 +17605,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -15839,7 +17615,7 @@
       goto __pyx_L13;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":849
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":873
  *             # Cython ignores struct boundary information ("T{...}"),
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
@@ -15847,12 +17623,12 @@
  * 
  */
     /*else*/ {
-      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(2, 849, __pyx_L1_error)
+      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(3, 873, __pyx_L1_error)
       __pyx_v_f = __pyx_t_9;
     }
     __pyx_L13:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -15862,7 +17638,7 @@
   }
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":850
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":874
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)
  *     return f             # <<<<<<<<<<<<<<
@@ -15872,8 +17648,8 @@
   __pyx_r = __pyx_v_f;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
  * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
@@ -15897,7 +17673,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -15912,7 +17688,7 @@
   int __pyx_t_2;
   __Pyx_RefNannySetupContext("set_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -15923,7 +17699,7 @@
   __pyx_t_2 = (__pyx_t_1 != 0);
   if (__pyx_t_2) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":969
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":993
  *      cdef PyObject* baseptr
  *      if base is None:
  *          baseptr = NULL             # <<<<<<<<<<<<<<
@@ -15932,7 +17708,7 @@
  */
     __pyx_v_baseptr = NULL;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -15942,7 +17718,7 @@
     goto __pyx_L3;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":971
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
  *          baseptr = NULL
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
@@ -15952,7 +17728,7 @@
   /*else*/ {
     Py_INCREF(__pyx_v_base);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":972
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
@@ -15963,7 +17739,7 @@
   }
   __pyx_L3:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":973
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
@@ -15972,7 +17748,7 @@
  */
   Py_XDECREF(__pyx_v_arr->base);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":974
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)
  *      arr.base = baseptr             # <<<<<<<<<<<<<<
@@ -15981,7 +17757,7 @@
  */
   __pyx_v_arr->base = __pyx_v_baseptr;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -15993,7 +17769,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -16007,7 +17783,7 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("get_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -16017,7 +17793,7 @@
   __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":978
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:
  *         return None             # <<<<<<<<<<<<<<
@@ -16029,7 +17805,7 @@
     __pyx_r = Py_None;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -16038,7 +17814,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":980
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
  *         return None
  *     else:
  *         return <object>arr.base             # <<<<<<<<<<<<<<
@@ -16052,7 +17828,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -16067,7 +17843,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -16088,7 +17864,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_array", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -16104,16 +17880,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":987
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
  * cdef inline int import_array() except -1:
  *     try:
  *         _import_array()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")
  */
-      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 987, __pyx_L3_error)
+      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1011, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -16124,11 +17900,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":988
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
  *     try:
  *         _import_array()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -16138,44 +17913,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1012, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1013, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(2, 989, __pyx_L5_except_error)
+      __PYX_ERR(3, 1013, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_array()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -16198,7 +17972,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -16219,7 +17993,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_umath", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -16235,16 +18009,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":993
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1017
  * cdef inline int import_umath() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 993, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1017, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -16255,11 +18029,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":994
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1018
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -16269,44 +18042,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1018, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1019, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(2, 995, __pyx_L5_except_error)
+      __PYX_ERR(3, 1019, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -16329,7 +18101,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -16350,7 +18122,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_ufunc", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -16366,16 +18138,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":999
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1023
  * cdef inline int import_ufunc() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 999, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1023, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -16386,11 +18158,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1000
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1024
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -16399,42 +18170,41 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1024, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1025, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(2, 1001, __pyx_L5_except_error)
+      __PYX_ERR(3, 1025, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -16477,8 +18247,8 @@
 }
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_5_tree_Tree(PyObject *o) {
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -16541,6 +18311,10 @@
   return __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_8variance_1__get__(o);
 }
 
+static PyObject *__pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_root(PyObject *o, CYTHON_UNUSED void *x) {
+  return __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_4root_1__get__(o);
+}
+
 static PyObject *__pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_n_features(PyObject *o, CYTHON_UNUSED void *x) {
   return __pyx_pw_8skgarden_8mondrian_4tree_5_tree_4Tree_10n_features_1__get__(o);
 }
@@ -16649,6 +18423,7 @@
   {(char *)"tau", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_tau, 0, (char *)0, 0},
   {(char *)"mean", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_mean, 0, (char *)0, 0},
   {(char *)"variance", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_variance, 0, (char *)0, 0},
+  {(char *)"root", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_root, 0, (char *)0, 0},
   {(char *)"n_features", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_n_features, __pyx_setprop_8skgarden_8mondrian_4tree_5_tree_4Tree_n_features, (char *)0, 0},
   {(char *)"n_outputs", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_n_outputs, __pyx_setprop_8skgarden_8mondrian_4tree_5_tree_4Tree_n_outputs, (char *)0, 0},
   {(char *)"max_n_classes", __pyx_getprop_8skgarden_8mondrian_4tree_5_tree_4Tree_max_n_classes, __pyx_setprop_8skgarden_8mondrian_4tree_5_tree_4Tree_max_n_classes, (char *)0, 0},
@@ -16729,18 +18504,20 @@
   p = ((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)o);
   p->__pyx_vtab = __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
   p->splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)Py_None); Py_INCREF(Py_None);
+  p->random_state = Py_None; Py_INCREF(Py_None);
   return o;
 }
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_5_tree_TreeBuilder(PyObject *o) {
   struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *p = (struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)o;
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
   PyObject_GC_UnTrack(o);
   Py_CLEAR(p->splitter);
+  Py_CLEAR(p->random_state);
   (*Py_TYPE(o)->tp_free)(o);
 }
 
@@ -16748,7 +18525,10 @@
   int e;
   struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *p = (struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *)o;
   if (p->splitter) {
-    e = (*v)(((PyObject*)p->splitter), a); if (e) return e;
+    e = (*v)(((PyObject *)p->splitter), a); if (e) return e;
+  }
+  if (p->random_state) {
+    e = (*v)(p->random_state, a); if (e) return e;
   }
   return 0;
 }
@@ -16759,18 +18539,102 @@
   tmp = ((PyObject*)p->splitter);
   p->splitter = ((struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter *)Py_None); Py_INCREF(Py_None);
   Py_XDECREF(tmp);
+  tmp = ((PyObject*)p->random_state);
+  p->random_state = Py_None; Py_INCREF(Py_None);
+  Py_XDECREF(tmp);
   return 0;
 }
 
-static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_5_tree_TreeBuilder[] = {
-  {"build", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_1build, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build},
+static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_5_tree_TreeBuilder[] = {
+  {"build", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_1build, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build},
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_3__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_5__setstate_cython__, METH_O, 0},
+  {0, 0, 0, 0}
+};
+
+static PyTypeObject __pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = {
+  PyVarObject_HEAD_INIT(0, 0)
+  "skgarden.mondrian.tree._tree.TreeBuilder", /*tp_name*/
+  sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), /*tp_basicsize*/
+  0, /*tp_itemsize*/
+  __pyx_tp_dealloc_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_dealloc*/
+  0, /*tp_print*/
+  0, /*tp_getattr*/
+  0, /*tp_setattr*/
+  #if PY_MAJOR_VERSION < 3
+  0, /*tp_compare*/
+  #endif
+  #if PY_MAJOR_VERSION >= 3
+  0, /*tp_as_async*/
+  #endif
+  0, /*tp_repr*/
+  0, /*tp_as_number*/
+  0, /*tp_as_sequence*/
+  0, /*tp_as_mapping*/
+  0, /*tp_hash*/
+  0, /*tp_call*/
+  0, /*tp_str*/
+  0, /*tp_getattro*/
+  0, /*tp_setattro*/
+  0, /*tp_as_buffer*/
+  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
+  "Interface for different tree building strategies.", /*tp_doc*/
+  __pyx_tp_traverse_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_traverse*/
+  __pyx_tp_clear_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_clear*/
+  0, /*tp_richcompare*/
+  0, /*tp_weaklistoffset*/
+  0, /*tp_iter*/
+  0, /*tp_iternext*/
+  __pyx_methods_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_methods*/
+  0, /*tp_members*/
+  0, /*tp_getset*/
+  0, /*tp_base*/
+  0, /*tp_dict*/
+  0, /*tp_descr_get*/
+  0, /*tp_descr_set*/
+  0, /*tp_dictoffset*/
+  0, /*tp_init*/
+  0, /*tp_alloc*/
+  __pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_new*/
+  0, /*tp_free*/
+  0, /*tp_is_gc*/
+  0, /*tp_bases*/
+  0, /*tp_mro*/
+  0, /*tp_cache*/
+  0, /*tp_subclasses*/
+  0, /*tp_weaklist*/
+  0, /*tp_del*/
+  0, /*tp_version_tag*/
+  #if PY_VERSION_HEX >= 0x030400a1
+  0, /*tp_finalize*/
+  #endif
+};
+static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder;
+
+static PyObject *__pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder(PyTypeObject *t, PyObject *a, PyObject *k) {
+  struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *p;
+  PyObject *o = __pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_TreeBuilder(t, a, k);
+  if (unlikely(!o)) return 0;
+  p = ((struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder *)o);
+  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder;
+  if (unlikely(__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_1__cinit__(o, a, k) < 0)) goto bad;
+  return o;
+  bad:
+  Py_DECREF(o); o = 0;
+  return NULL;
+}
+
+static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder[] = {
+  {"build", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_3build, METH_VARARGS|METH_KEYWORDS, 0},
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_5__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_7__setstate_cython__, METH_O, 0},
   {0, 0, 0, 0}
 };
 
-static PyTypeObject __pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = {
+static PyTypeObject __pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder = {
   PyVarObject_HEAD_INIT(0, 0)
-  "skgarden.mondrian.tree._tree.TreeBuilder", /*tp_name*/
-  sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), /*tp_basicsize*/
+  "skgarden.mondrian.tree._tree.PartialFitTreeBuilder", /*tp_name*/
+  sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder), /*tp_basicsize*/
   0, /*tp_itemsize*/
   __pyx_tp_dealloc_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_dealloc*/
   0, /*tp_print*/
@@ -16793,14 +18657,14 @@
   0, /*tp_setattro*/
   0, /*tp_as_buffer*/
   Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
-  "Interface for different tree building strategies.", /*tp_doc*/
+  "Build a decision tree incrementally.", /*tp_doc*/
   __pyx_tp_traverse_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_traverse*/
   __pyx_tp_clear_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_clear*/
   0, /*tp_richcompare*/
   0, /*tp_weaklistoffset*/
   0, /*tp_iter*/
   0, /*tp_iternext*/
-  __pyx_methods_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_methods*/
+  __pyx_methods_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder, /*tp_methods*/
   0, /*tp_members*/
   0, /*tp_getset*/
   0, /*tp_base*/
@@ -16810,7 +18674,7 @@
   0, /*tp_dictoffset*/
   0, /*tp_init*/
   0, /*tp_alloc*/
-  __pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_TreeBuilder, /*tp_new*/
+  __pyx_tp_new_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder, /*tp_new*/
   0, /*tp_free*/
   0, /*tp_is_gc*/
   0, /*tp_bases*/
@@ -16841,6 +18705,8 @@
 
 static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder[] = {
   {"build", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_3build, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_2build},
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_5__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_7__setstate_cython__, METH_O, 0},
   {0, 0, 0, 0}
 };
 
@@ -16907,17 +18773,31 @@
 };
 
 #if PY_MAJOR_VERSION >= 3
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
+static int __pyx_pymod_exec__tree(PyObject* module); /*proto*/
+static PyModuleDef_Slot __pyx_moduledef_slots[] = {
+  {Py_mod_create, (void*)__pyx_pymod_create},
+  {Py_mod_exec, (void*)__pyx_pymod_exec__tree},
+  {0, NULL}
+};
+#endif
+
 static struct PyModuleDef __pyx_moduledef = {
-  #if PY_VERSION_HEX < 0x03020000
-    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
-  #else
     PyModuleDef_HEAD_INIT,
-  #endif
     "_tree",
     0, /* m_doc */
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    0, /* m_size */
+  #else
     -1, /* m_size */
+  #endif
     __pyx_methods /* m_methods */,
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    __pyx_moduledef_slots, /* m_slots */
+  #else
     NULL, /* m_reload */
+  #endif
     NULL, /* m_traverse */
     NULL, /* m_clear */
     NULL /* m_free */
@@ -16932,18 +18812,19 @@
   {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
   {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
   {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
+  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xed, __pyx_k_Incompatible_checksums_s_vs_0xed, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xed), 0, 0, 1, 0},
   {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
   {&__pyx_n_s_NODE_DTYPE, __pyx_k_NODE_DTYPE, sizeof(__pyx_k_NODE_DTYPE), 0, 0, 1, 1},
-  {&__pyx_kp_s_No_support_for_np_int64_index_ba, __pyx_k_No_support_for_np_int64_index_ba, sizeof(__pyx_k_No_support_for_np_int64_index_ba), 0, 0, 1, 0},
   {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
+  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
   {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
   {&__pyx_n_s_TREE_LEAF, __pyx_k_TREE_LEAF, sizeof(__pyx_k_TREE_LEAF), 0, 0, 1, 1},
   {&__pyx_n_s_TREE_UNDEFINED, __pyx_k_TREE_UNDEFINED, sizeof(__pyx_k_TREE_UNDEFINED), 0, 0, 1, 1},
+  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
   {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
   {&__pyx_kp_s_X_dtype_should_be_np_float32_got, __pyx_k_X_dtype_should_be_np_float32_got, sizeof(__pyx_k_X_dtype_should_be_np_float32_got), 0, 0, 1, 0},
   {&__pyx_n_s_X_idx_sorted, __pyx_k_X_idx_sorted, sizeof(__pyx_k_X_idx_sorted), 0, 0, 1, 1},
-  {&__pyx_kp_s_X_should_be_in_csr_matrix_format, __pyx_k_X_should_be_in_csr_matrix_format, sizeof(__pyx_k_X_should_be_in_csr_matrix_format), 0, 0, 1, 0},
   {&__pyx_kp_s_X_should_be_in_np_ndarray_format, __pyx_k_X_should_be_in_np_ndarray_format, sizeof(__pyx_k_X_should_be_in_np_ndarray_format), 0, 0, 1, 0},
   {&__pyx_kp_s_You_have_loaded_Tree_version_whi, __pyx_k_You_have_loaded_Tree_version_whi, sizeof(__pyx_k_You_have_loaded_Tree_version_whi), 0, 0, 1, 0},
   {&__pyx_n_s_apply, __pyx_k_apply, sizeof(__pyx_k_apply), 0, 0, 1, 1},
@@ -16952,11 +18833,11 @@
   {&__pyx_n_s_asfortranarray, __pyx_k_asfortranarray, sizeof(__pyx_k_asfortranarray), 0, 0, 1, 1},
   {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
   {&__pyx_n_s_c_contiguous, __pyx_k_c_contiguous, sizeof(__pyx_k_c_contiguous), 0, 0, 1, 1},
+  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
   {&__pyx_n_s_contiguous, __pyx_k_contiguous, sizeof(__pyx_k_contiguous), 0, 0, 1, 1},
-  {&__pyx_n_s_csc_matrix, __pyx_k_csc_matrix, sizeof(__pyx_k_csc_matrix), 0, 0, 1, 1},
   {&__pyx_n_s_csr_matrix, __pyx_k_csr_matrix, sizeof(__pyx_k_csr_matrix), 0, 0, 1, 1},
-  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
   {&__pyx_n_s_decision_path, __pyx_k_decision_path, sizeof(__pyx_k_decision_path), 0, 0, 1, 1},
+  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
   {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
   {&__pyx_n_s_feature, __pyx_k_feature, sizeof(__pyx_k_feature), 0, 0, 1, 1},
   {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
@@ -16966,13 +18847,9 @@
   {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
   {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
   {&__pyx_n_s_impurity, __pyx_k_impurity, sizeof(__pyx_k_impurity), 0, 0, 1, 1},
-  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
-  {&__pyx_n_s_indptr, __pyx_k_indptr, sizeof(__pyx_k_indptr), 0, 0, 1, 1},
   {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
-  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
   {&__pyx_n_s_intp, __pyx_k_intp, sizeof(__pyx_k_intp), 0, 0, 1, 1},
   {&__pyx_n_s_is_regression, __pyx_k_is_regression, sizeof(__pyx_k_is_regression), 0, 0, 1, 1},
-  {&__pyx_n_s_issparse, __pyx_k_issparse, sizeof(__pyx_k_issparse), 0, 0, 1, 1},
   {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
   {&__pyx_n_s_left_child, __pyx_k_left_child, sizeof(__pyx_k_left_child), 0, 0, 1, 1},
   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
@@ -16983,10 +18860,13 @@
   {&__pyx_n_s_n_features, __pyx_k_n_features, sizeof(__pyx_k_n_features), 0, 0, 1, 1},
   {&__pyx_n_s_n_node_samples, __pyx_k_n_node_samples, sizeof(__pyx_k_n_node_samples), 0, 0, 1, 1},
   {&__pyx_n_s_n_outputs, __pyx_k_n_outputs, sizeof(__pyx_k_n_outputs), 0, 0, 1, 1},
+  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
   {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
   {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
   {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
   {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
+  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
+  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
   {&__pyx_n_s_node_count, __pyx_k_node_count, sizeof(__pyx_k_node_count), 0, 0, 1, 1},
   {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
   {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
@@ -16996,25 +18876,41 @@
   {&__pyx_n_s_offsets, __pyx_k_offsets, sizeof(__pyx_k_offsets), 0, 0, 1, 1},
   {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
   {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
+  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
   {&__pyx_n_s_predict, __pyx_k_predict, sizeof(__pyx_k_predict), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
+  {&__pyx_n_s_pyx_unpickle_TreeBuilder, __pyx_k_pyx_unpickle_TreeBuilder, sizeof(__pyx_k_pyx_unpickle_TreeBuilder), 0, 0, 1, 1},
   {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
+  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
+  {&__pyx_n_s_random_state, __pyx_k_random_state, sizeof(__pyx_k_random_state), 0, 0, 1, 1},
   {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
   {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
   {&__pyx_kp_s_resizing_tree_to_d, __pyx_k_resizing_tree_to_d, sizeof(__pyx_k_resizing_tree_to_d), 0, 0, 1, 0},
   {&__pyx_n_s_return_std, __pyx_k_return_std, sizeof(__pyx_k_return_std), 0, 0, 1, 1},
   {&__pyx_n_s_right_child, __pyx_k_right_child, sizeof(__pyx_k_right_child), 0, 0, 1, 1},
+  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
   {&__pyx_n_s_sample_weight, __pyx_k_sample_weight, sizeof(__pyx_k_sample_weight), 0, 0, 1, 1},
   {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
   {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
-  {&__pyx_n_s_sort_indices, __pyx_k_sort_indices, sizeof(__pyx_k_sort_indices), 0, 0, 1, 1},
+  {&__pyx_n_s_skgarden_mondrian_tree__tree, __pyx_k_skgarden_mondrian_tree__tree, sizeof(__pyx_k_skgarden_mondrian_tree__tree), 0, 0, 1, 1},
   {&__pyx_n_s_splitter, __pyx_k_splitter, sizeof(__pyx_k_splitter), 0, 0, 1, 1},
   {&__pyx_n_s_strides, __pyx_k_strides, sizeof(__pyx_k_strides), 0, 0, 1, 1},
+  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
   {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
   {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
-  {&__pyx_n_s_tocsc, __pyx_k_tocsc, sizeof(__pyx_k_tocsc), 0, 0, 1, 1},
   {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
   {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
+  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
   {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
   {&__pyx_n_s_variance, __pyx_k_variance, sizeof(__pyx_k_variance), 0, 0, 1, 1},
   {&__pyx_n_s_weighted_decision_path, __pyx_k_weighted_decision_path, sizeof(__pyx_k_weighted_decision_path), 0, 0, 1, 1},
@@ -17024,11 +18920,12 @@
   {0, 0, 0, 0, 0, 0, 0}
 };
 static int __Pyx_InitCachedBuiltins(void) {
-  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 112, __pyx_L1_error)
-  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 199, __pyx_L1_error)
-  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 390, __pyx_L1_error)
-  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 799, __pyx_L1_error)
-  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
+  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 167, __pyx_L1_error)
+  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
+  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 240, __pyx_L1_error)
+  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 482, __pyx_L1_error)
+  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(3, 823, __pyx_L1_error)
+  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 1013, __pyx_L1_error)
   return 0;
   __pyx_L1_error:;
   return -1;
@@ -17038,152 +18935,189 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":112
- * 
- *             if X.indices.dtype != np.int32 or X.indptr.dtype != np.int32:
- *                 raise ValueError("No support for np.int64 index based "             # <<<<<<<<<<<<<<
- *                                  "sparse matrices")
- * 
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
  */
-  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_No_support_for_np_int64_index_ba); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 112, __pyx_L1_error)
+  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_tuple_);
   __Pyx_GIVEREF(__pyx_tuple_);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":429
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__2);
+  __Pyx_GIVEREF(__pyx_tuple__2);
+
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__3);
+  __Pyx_GIVEREF(__pyx_tuple__3);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__4);
+  __Pyx_GIVEREF(__pyx_tuple__4);
+
+  /* "skgarden/mondrian/tree/_tree.pyx":482
  * 
  *         if 'nodes' not in d:
  *             raise ValueError('You have loaded Tree version which '             # <<<<<<<<<<<<<<
  *                              'cannot be imported')
  * 
  */
-  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_You_have_loaded_Tree_version_whi); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 429, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__2);
-  __Pyx_GIVEREF(__pyx_tuple__2);
+  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_You_have_loaded_Tree_version_whi); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 482, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__5);
+  __Pyx_GIVEREF(__pyx_tuple__5);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":443
+  /* "skgarden/mondrian/tree/_tree.pyx":496
  *                 not value_ndarray.flags.c_contiguous or
  *                 value_ndarray.dtype != np.float64):
  *             raise ValueError('Did not recognise loaded array layout')             # <<<<<<<<<<<<<<
  * 
  *         self.capacity = node_ndarray.shape[0]
  */
-  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Did_not_recognise_loaded_array_l); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 443, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__3);
-  __Pyx_GIVEREF(__pyx_tuple__3);
+  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Did_not_recognise_loaded_array_l); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 496, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__6);
+  __Pyx_GIVEREF(__pyx_tuple__6);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":583
+  /* "skgarden/mondrian/tree/_tree.pyx":910
  *         # These node values are the means in case of regression.
  *         # For classification these are the class counts.
  *         cdef np.ndarray[DOUBLE_t, ndim=2] node_values = self._get_value_ndarray()[:, 0, :]             # <<<<<<<<<<<<<<
  * 
  *         # Initialize output
  */
-  __pyx_slice__5 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 583, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_slice__5);
-  __Pyx_GIVEREF(__pyx_slice__5);
-  __pyx_slice__6 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 583, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_slice__6);
-  __Pyx_GIVEREF(__pyx_slice__6);
-  __pyx_tuple__7 = PyTuple_Pack(3, __pyx_slice__5, __pyx_int_0, __pyx_slice__6); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 583, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__7);
-  __Pyx_GIVEREF(__pyx_tuple__7);
+  __pyx_slice__8 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 910, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_slice__8);
+  __Pyx_GIVEREF(__pyx_slice__8);
+  __pyx_slice__9 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 910, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_slice__9);
+  __Pyx_GIVEREF(__pyx_slice__9);
+  __pyx_tuple__10 = PyTuple_Pack(3, __pyx_slice__8, __pyx_int_0, __pyx_slice__9); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 910, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__10);
+  __Pyx_GIVEREF(__pyx_tuple__10);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 218, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__8);
-  __Pyx_GIVEREF(__pyx_tuple__8);
+  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(3, 235, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__11);
+  __Pyx_GIVEREF(__pyx_tuple__11);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 222, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__9);
-  __Pyx_GIVEREF(__pyx_tuple__9);
+  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 239, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__12);
+  __Pyx_GIVEREF(__pyx_tuple__12);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 259, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__10);
-  __Pyx_GIVEREF(__pyx_tuple__10);
+  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(3, 276, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__13);
+  __Pyx_GIVEREF(__pyx_tuple__13);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 799, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__11);
-  __Pyx_GIVEREF(__pyx_tuple__11);
+  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(3, 823, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__14);
+  __Pyx_GIVEREF(__pyx_tuple__14);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 803, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__12);
-  __Pyx_GIVEREF(__pyx_tuple__12);
+  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(3, 827, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__15);
+  __Pyx_GIVEREF(__pyx_tuple__15);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 823, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__13);
-  __Pyx_GIVEREF(__pyx_tuple__13);
+  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(3, 847, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__16);
+  __Pyx_GIVEREF(__pyx_tuple__16);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 989, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__14);
-  __Pyx_GIVEREF(__pyx_tuple__14);
+  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(3, 1013, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__17);
+  __Pyx_GIVEREF(__pyx_tuple__17);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 995, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__15);
-  __Pyx_GIVEREF(__pyx_tuple__15);
+  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(3, 1019, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__18);
+  __Pyx_GIVEREF(__pyx_tuple__18);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 1001, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__16);
-  __Pyx_GIVEREF(__pyx_tuple__16);
+  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(3, 1025, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__19);
+  __Pyx_GIVEREF(__pyx_tuple__19);
+
+  /* "(tree fragment)":1
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0xedae8f4:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+  __pyx_tuple__20 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__20);
+  __Pyx_GIVEREF(__pyx_tuple__20);
+  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_TreeBuilder, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(1, 1, __pyx_L1_error)
   __Pyx_RefNannyFinishContext();
   return 0;
   __pyx_L1_error:;
@@ -17195,6 +19129,7 @@
   if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
   __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
   __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_int_249227508 = PyInt_FromLong(249227508L); if (unlikely(!__pyx_int_249227508)) __PYX_ERR(0, 1, __pyx_L1_error)
   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
   __pyx_int_neg_2 = PyInt_FromLong(-2); if (unlikely(!__pyx_int_neg_2)) __PYX_ERR(0, 1, __pyx_L1_error)
   return 0;
@@ -17208,6 +19143,47 @@
 #else
 PyMODINIT_FUNC PyInit__tree(void); /*proto*/
 PyMODINIT_FUNC PyInit__tree(void)
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+{
+  return PyModuleDef_Init(&__pyx_moduledef);
+}
+static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
+    PyObject *value = PyObject_GetAttrString(spec, from_name);
+    int result = 0;
+    if (likely(value)) {
+        result = PyDict_SetItemString(moddict, to_name, value);
+        Py_DECREF(value);
+    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Clear();
+    } else {
+        result = -1;
+    }
+    return result;
+}
+static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
+    PyObject *module = NULL, *moddict, *modname;
+    if (__pyx_m)
+        return __Pyx_NewRef(__pyx_m);
+    modname = PyObject_GetAttrString(spec, "name");
+    if (unlikely(!modname)) goto bad;
+    module = PyModule_NewObject(modname);
+    Py_DECREF(modname);
+    if (unlikely(!module)) goto bad;
+    moddict = PyModule_GetDict(module);
+    if (unlikely(!moddict)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
+    return module;
+bad:
+    Py_XDECREF(module);
+    return NULL;
+}
+
+
+static int __pyx_pymod_exec__tree(PyObject *__pyx_pyinit_module)
+#endif
 #endif
 {
   PyObject *__pyx_t_1 = NULL;
@@ -17226,6 +19202,9 @@
   PyObject *__pyx_t_14 = NULL;
   PyObject *__pyx_t_15 = NULL;
   __Pyx_RefNannyDeclarations
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
+  #endif
   #if CYTHON_REFNANNY
   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
   if (!__Pyx_RefNanny) {
@@ -17252,6 +19231,9 @@
   #ifdef __Pyx_Generator_USED
   if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
+  #ifdef __Pyx_AsyncGen_USED
+  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   #ifdef __Pyx_StopAsyncIteration_USED
   if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
@@ -17263,15 +19245,21 @@
   #endif
   #endif
   /*--- Module creation code ---*/
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  __pyx_m = __pyx_pyinit_module;
+  Py_INCREF(__pyx_m);
+  #else
   #if PY_MAJOR_VERSION < 3
   __pyx_m = Py_InitModule4("_tree", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
   #else
   __pyx_m = PyModule_Create(&__pyx_moduledef);
   #endif
   if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
   Py_INCREF(__pyx_d);
   __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
   #if CYTHON_COMPILING_IN_PYPY
   Py_INCREF(__pyx_b);
   #endif
@@ -17309,32 +19297,47 @@
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.predict = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_predict;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.apply = (PyArrayObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_apply;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree._apply_dense = (PyArrayObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_dense;
-  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree._apply_sparse_csr = (PyArrayObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__apply_sparse_csr;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.decision_path = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_decision_path;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree._decision_path_dense = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_dense;
-  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree._decision_path_sparse_csr = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__decision_path_sparse_csr;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.weighted_decision_path = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_weighted_decision_path;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree._init = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__init;
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.extend = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_extend;
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.set_node_attributes = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes;
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree.update_node_extent = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree_update_node_extent;
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_Tree._update_node_info = (void (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t))__pyx_f_8skgarden_8mondrian_4tree_5_tree_4Tree__update_node_info;
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "Tree", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "Tree", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = &__pyx_type_8skgarden_8mondrian_4tree_5_tree_Tree;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = &__pyx_vtable_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_TreeBuilder.build = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build *__pyx_optional_args))__pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_TreeBuilder._check_input = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *, PyObject *, PyArrayObject *, PyArrayObject *))__pyx_f_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder__check_input;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "TreeBuilder", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "TreeBuilder", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = &__pyx_type_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder = &__pyx_vtable_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder;
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
+  __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder.__pyx_base.build = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build *__pyx_optional_args))__pyx_f_8skgarden_8mondrian_4tree_5_tree_21PartialFitTreeBuilder_build;
+  __pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
+  __pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder.tp_print = 0;
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "PartialFitTreeBuilder", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder = &__pyx_type_8skgarden_8mondrian_4tree_5_tree_PartialFitTreeBuilder;
   __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder = &__pyx_vtable_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder.__pyx_base = *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
   __pyx_vtable_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder.__pyx_base.build = (PyObject *(*)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *, struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build *__pyx_optional_args))__pyx_f_8skgarden_8mondrian_4tree_5_tree_21DepthFirstTreeBuilder_build;
   __pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder.tp_base = __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "DepthFirstTreeBuilder", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "DepthFirstTreeBuilder", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder = &__pyx_type_8skgarden_8mondrian_4tree_5_tree_DepthFirstTreeBuilder;
   /*--- Type import code ---*/
   __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
@@ -17343,24 +19346,27 @@
   #else
   sizeof(PyHeapTypeObject),
   #endif
-  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
-  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(4, 8, __pyx_L1_error)
-  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(5, 15, __pyx_L1_error)
-  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 155, __pyx_L1_error)
-  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 168, __pyx_L1_error)
-  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 172, __pyx_L1_error)
-  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 181, __pyx_L1_error)
-  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 861, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = __Pyx_ImportType("skgarden.mondrian.tree._criterion", "Criterion", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(6, 21, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(6, 21, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = __Pyx_ImportType("skgarden.mondrian.tree._splitter", "Splitter", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(7, 35, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(7, 35, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = __Pyx_ImportType("skgarden.mondrian.tree._utils", "Stack", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(8, 74, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(8, 74, __pyx_L1_error)
+  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(4, 9, __pyx_L1_error)
+  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(5, 8, __pyx_L1_error)
+  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(6, 15, __pyx_L1_error)
+  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(3, 163, __pyx_L1_error)
+  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(3, 185, __pyx_L1_error)
+  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(3, 189, __pyx_L1_error)
+  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(3, 198, __pyx_L1_error)
+  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(3, 885, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = __Pyx_ImportType("skgarden.mondrian.tree._criterion", "Criterion", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(7, 21, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(7, 21, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = __Pyx_ImportType("skgarden.mondrian.tree._splitter", "Splitter", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(8, 35, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(8, 35, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = __Pyx_ImportType("skgarden.mondrian.tree._utils", "Stack", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(9, 78, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_6_utils_Stack*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack)) __PYX_ERR(9, 78, __pyx_L1_error)
   /*--- Variable import code ---*/
   /*--- Function import code ---*/
   __pyx_t_1 = __Pyx_ImportModule("skgarden.mondrian.tree._utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "sizet_ptr_to_ndarray", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray, "PyArrayObject *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "rand_uniform", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform, "double (double, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "rand_multinomial", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ImportFunction(__pyx_t_1, "rand_exponential", (void (**)(void))&__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential, "double (__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_0safe_realloc", (void (**)(void))&__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_1safe_realloc", (void (**)(void))&__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ImportFunction(__pyx_t_1, "__pyx_fuse_2safe_realloc", (void (**)(void))&__pyx_fuse_2__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "unsigned char *(unsigned char **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
@@ -17375,149 +19381,107 @@
   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
 
-  /* "skgarden/mondrian/tree/_tree.pyx":29
+  /* "skgarden/mondrian/tree/_tree.pyx":28
  * from libc.string cimport memset
  * 
  * import numpy as np             # <<<<<<<<<<<<<<
  * cimport numpy as np
  * np.import_array()
  */
-  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":31
+  /* "skgarden/mondrian/tree/_tree.pyx":30
  * import numpy as np
  * cimport numpy as np
  * np.import_array()             # <<<<<<<<<<<<<<
  * 
- * from scipy.sparse import issparse
- */
-  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 31, __pyx_L1_error)
-
-  /* "skgarden/mondrian/tree/_tree.pyx":33
- * np.import_array()
- * 
- * from scipy.sparse import issparse             # <<<<<<<<<<<<<<
- * from scipy.sparse import csc_matrix
  * from scipy.sparse import csr_matrix
  */
-  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_INCREF(__pyx_n_s_issparse);
-  __Pyx_GIVEREF(__pyx_n_s_issparse);
-  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_issparse);
-  __pyx_t_4 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_2, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_issparse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_issparse, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_3 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 30, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":34
- * 
- * from scipy.sparse import issparse
- * from scipy.sparse import csc_matrix             # <<<<<<<<<<<<<<
- * from scipy.sparse import csr_matrix
+  /* "skgarden/mondrian/tree/_tree.pyx":32
+ * np.import_array()
  * 
- */
-  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_INCREF(__pyx_n_s_csc_matrix);
-  __Pyx_GIVEREF(__pyx_n_s_csc_matrix);
-  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_csc_matrix);
-  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_4, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_csc_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_4);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csc_matrix, __pyx_t_4) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-
-  /* "skgarden/mondrian/tree/_tree.pyx":35
- * from scipy.sparse import issparse
- * from scipy.sparse import csc_matrix
  * from scipy.sparse import csr_matrix             # <<<<<<<<<<<<<<
  * 
  * from ._utils cimport Stack
  */
-  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
+  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_INCREF(__pyx_n_s_csr_matrix);
   __Pyx_GIVEREF(__pyx_n_s_csr_matrix);
   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_csr_matrix);
-  __pyx_t_4 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_2, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_2, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csr_matrix, __pyx_t_2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csr_matrix, __pyx_t_2) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":52
+  /* "skgarden/mondrian/tree/_tree.pyx":53
  * # =============================================================================
  * 
  * from numpy import float32 as DTYPE             # <<<<<<<<<<<<<<
  * from numpy import float64 as DOUBLE
  * 
  */
-  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
+  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_INCREF(__pyx_n_s_float32);
   __Pyx_GIVEREF(__pyx_n_s_float32);
   PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_float32);
-  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_4, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_4, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DTYPE, __pyx_t_4) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DTYPE, __pyx_t_4) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":53
+  /* "skgarden/mondrian/tree/_tree.pyx":54
  * 
  * from numpy import float32 as DTYPE
  * from numpy import float64 as DOUBLE             # <<<<<<<<<<<<<<
  * 
  * cdef double INFINITY = np.inf
  */
-  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
+  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_INCREF(__pyx_n_s_float64);
   __Pyx_GIVEREF(__pyx_n_s_float64);
   PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_float64);
-  __pyx_t_4 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DOUBLE, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DOUBLE, __pyx_t_2) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":55
+  /* "skgarden/mondrian/tree/_tree.pyx":56
  * from numpy import float64 as DOUBLE
  * 
  * cdef double INFINITY = np.inf             # <<<<<<<<<<<<<<
  * 
  * # Some handy constants (BestFirstTreeBuilder)
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
+  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_v_8skgarden_8mondrian_4tree_5_tree_INFINITY = __pyx_t_5;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":58
+  /* "skgarden/mondrian/tree/_tree.pyx":59
  * 
  * # Some handy constants (BestFirstTreeBuilder)
  * cdef int IS_FIRST = 1             # <<<<<<<<<<<<<<
@@ -17526,7 +19490,7 @@
  */
   __pyx_v_8skgarden_8mondrian_4tree_5_tree_IS_FIRST = 1;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":59
+  /* "skgarden/mondrian/tree/_tree.pyx":60
  * # Some handy constants (BestFirstTreeBuilder)
  * cdef int IS_FIRST = 1
  * cdef int IS_NOT_FIRST = 0             # <<<<<<<<<<<<<<
@@ -17535,7 +19499,7 @@
  */
   __pyx_v_8skgarden_8mondrian_4tree_5_tree_IS_NOT_FIRST = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":60
+  /* "skgarden/mondrian/tree/_tree.pyx":61
  * cdef int IS_FIRST = 1
  * cdef int IS_NOT_FIRST = 0
  * cdef int IS_LEFT = 1             # <<<<<<<<<<<<<<
@@ -17544,7 +19508,7 @@
  */
   __pyx_v_8skgarden_8mondrian_4tree_5_tree_IS_LEFT = 1;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":61
+  /* "skgarden/mondrian/tree/_tree.pyx":62
  * cdef int IS_NOT_FIRST = 0
  * cdef int IS_LEFT = 1
  * cdef int IS_NOT_LEFT = 0             # <<<<<<<<<<<<<<
@@ -17553,51 +19517,51 @@
  */
   __pyx_v_8skgarden_8mondrian_4tree_5_tree_IS_NOT_LEFT = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":63
+  /* "skgarden/mondrian/tree/_tree.pyx":64
  * cdef int IS_NOT_LEFT = 0
  * 
  * TREE_LEAF = -1             # <<<<<<<<<<<<<<
  * TREE_UNDEFINED = -2
  * cdef SIZE_t _TREE_LEAF = TREE_LEAF
  */
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_LEAF, __pyx_int_neg_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_LEAF, __pyx_int_neg_1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":64
+  /* "skgarden/mondrian/tree/_tree.pyx":65
  * 
  * TREE_LEAF = -1
  * TREE_UNDEFINED = -2             # <<<<<<<<<<<<<<
  * cdef SIZE_t _TREE_LEAF = TREE_LEAF
  * cdef SIZE_t _TREE_UNDEFINED = TREE_UNDEFINED
  */
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_UNDEFINED, __pyx_int_neg_2) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_UNDEFINED, __pyx_int_neg_2) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
 
-  /* "skgarden/mondrian/tree/_tree.pyx":65
+  /* "skgarden/mondrian/tree/_tree.pyx":66
  * TREE_LEAF = -1
  * TREE_UNDEFINED = -2
  * cdef SIZE_t _TREE_LEAF = TREE_LEAF             # <<<<<<<<<<<<<<
  * cdef SIZE_t _TREE_UNDEFINED = TREE_UNDEFINED
  * cdef SIZE_t INITIAL_STACK_SIZE = 10
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_TREE_LEAF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_TREE_LEAF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L1_error)
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_LEAF = __pyx_t_6;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":66
+  /* "skgarden/mondrian/tree/_tree.pyx":67
  * TREE_UNDEFINED = -2
  * cdef SIZE_t _TREE_LEAF = TREE_LEAF
  * cdef SIZE_t _TREE_UNDEFINED = TREE_UNDEFINED             # <<<<<<<<<<<<<<
  * cdef SIZE_t INITIAL_STACK_SIZE = 10
  * 
  */
-  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_TREE_UNDEFINED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_TREE_UNDEFINED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
+  __pyx_t_6 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 67, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_v_8skgarden_8mondrian_4tree_5_tree__TREE_UNDEFINED = __pyx_t_6;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":67
+  /* "skgarden/mondrian/tree/_tree.pyx":68
  * cdef SIZE_t _TREE_LEAF = TREE_LEAF
  * cdef SIZE_t _TREE_UNDEFINED = TREE_UNDEFINED
  * cdef SIZE_t INITIAL_STACK_SIZE = 10             # <<<<<<<<<<<<<<
@@ -17606,16 +19570,16 @@
  */
   __pyx_v_8skgarden_8mondrian_4tree_5_tree_INITIAL_STACK_SIZE = 10;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":71
+  /* "skgarden/mondrian/tree/_tree.pyx":72
  * # Repeat struct definition for numpy
  * NODE_DTYPE = np.dtype({
  *     'names': ['left_child', 'right_child', 'feature', 'threshold', 'impurity',             # <<<<<<<<<<<<<<
  *               'n_node_samples', 'weighted_n_node_samples', 'tau', 'variance'],
  *     'formats': [np.intp, np.intp, np.intp, np.float64, np.float64, np.intp,
  */
-  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_4 = PyList_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
+  __pyx_t_4 = PyList_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_INCREF(__pyx_n_s_left_child);
   __Pyx_GIVEREF(__pyx_n_s_left_child);
@@ -17644,78 +19608,78 @@
   __Pyx_INCREF(__pyx_n_s_variance);
   __Pyx_GIVEREF(__pyx_n_s_variance);
   PyList_SET_ITEM(__pyx_t_4, 8, __pyx_n_s_variance);
-  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_names, __pyx_t_4) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_names, __pyx_t_4) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":73
+  /* "skgarden/mondrian/tree/_tree.pyx":74
  *     'names': ['left_child', 'right_child', 'feature', 'threshold', 'impurity',
  *               'n_node_samples', 'weighted_n_node_samples', 'tau', 'variance'],
  *     'formats': [np.intp, np.intp, np.intp, np.float64, np.float64, np.intp,             # <<<<<<<<<<<<<<
  *                 np.float64, np.float32, np.float64],
  *     'offsets': [
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_7);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_8);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_9);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_10);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_11);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_12);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":74
+  /* "skgarden/mondrian/tree/_tree.pyx":75
  *               'n_node_samples', 'weighted_n_node_samples', 'tau', 'variance'],
  *     'formats': [np.intp, np.intp, np.intp, np.float64, np.float64, np.intp,
  *                 np.float64, np.float32, np.float64],             # <<<<<<<<<<<<<<
  *     'offsets': [
  *         <Py_ssize_t> &(<Node*> NULL).left_child,
  */
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 74, __pyx_L1_error)
+  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 75, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_13);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 74, __pyx_L1_error)
+  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 75, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_14);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
+  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 74, __pyx_L1_error)
+  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 75, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_15);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":73
+  /* "skgarden/mondrian/tree/_tree.pyx":74
  *     'names': ['left_child', 'right_child', 'feature', 'threshold', 'impurity',
  *               'n_node_samples', 'weighted_n_node_samples', 'tau', 'variance'],
  *     'formats': [np.intp, np.intp, np.intp, np.float64, np.float64, np.intp,             # <<<<<<<<<<<<<<
  *                 np.float64, np.float32, np.float64],
  *     'offsets': [
  */
-  __pyx_t_4 = PyList_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 73, __pyx_L1_error)
+  __pyx_t_4 = PyList_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_GIVEREF(__pyx_t_7);
   PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
@@ -17744,107 +19708,107 @@
   __pyx_t_13 = 0;
   __pyx_t_14 = 0;
   __pyx_t_15 = 0;
-  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_formats, __pyx_t_4) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_formats, __pyx_t_4) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":76
+  /* "skgarden/mondrian/tree/_tree.pyx":77
  *                 np.float64, np.float32, np.float64],
  *     'offsets': [
  *         <Py_ssize_t> &(<Node*> NULL).left_child,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).right_child,
  *         <Py_ssize_t> &(<Node*> NULL).feature,
  */
-  __pyx_t_4 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->left_child))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
+  __pyx_t_4 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->left_child))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_4);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":77
+  /* "skgarden/mondrian/tree/_tree.pyx":78
  *     'offsets': [
  *         <Py_ssize_t> &(<Node*> NULL).left_child,
  *         <Py_ssize_t> &(<Node*> NULL).right_child,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).feature,
  *         <Py_ssize_t> &(<Node*> NULL).threshold,
  */
-  __pyx_t_15 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->right_child))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 77, __pyx_L1_error)
+  __pyx_t_15 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->right_child))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 78, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_15);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":78
+  /* "skgarden/mondrian/tree/_tree.pyx":79
  *         <Py_ssize_t> &(<Node*> NULL).left_child,
  *         <Py_ssize_t> &(<Node*> NULL).right_child,
  *         <Py_ssize_t> &(<Node*> NULL).feature,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).threshold,
  *         <Py_ssize_t> &(<Node*> NULL).impurity,
  */
-  __pyx_t_14 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->feature))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 78, __pyx_L1_error)
+  __pyx_t_14 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->feature))); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 79, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_14);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":79
+  /* "skgarden/mondrian/tree/_tree.pyx":80
  *         <Py_ssize_t> &(<Node*> NULL).right_child,
  *         <Py_ssize_t> &(<Node*> NULL).feature,
  *         <Py_ssize_t> &(<Node*> NULL).threshold,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).impurity,
  *         <Py_ssize_t> &(<Node*> NULL).n_node_samples,
  */
-  __pyx_t_13 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->threshold))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 79, __pyx_L1_error)
+  __pyx_t_13 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->threshold))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 80, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_13);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":80
+  /* "skgarden/mondrian/tree/_tree.pyx":81
  *         <Py_ssize_t> &(<Node*> NULL).feature,
  *         <Py_ssize_t> &(<Node*> NULL).threshold,
  *         <Py_ssize_t> &(<Node*> NULL).impurity,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).n_node_samples,
  *         <Py_ssize_t> &(<Node*> NULL).weighted_n_node_samples,
  */
-  __pyx_t_12 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->impurity))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 80, __pyx_L1_error)
+  __pyx_t_12 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->impurity))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 81, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_12);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":81
+  /* "skgarden/mondrian/tree/_tree.pyx":82
  *         <Py_ssize_t> &(<Node*> NULL).threshold,
  *         <Py_ssize_t> &(<Node*> NULL).impurity,
  *         <Py_ssize_t> &(<Node*> NULL).n_node_samples,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).weighted_n_node_samples,
  *         <Py_ssize_t> &(<Node*> NULL).tau,
  */
-  __pyx_t_11 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->n_node_samples))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 81, __pyx_L1_error)
+  __pyx_t_11 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->n_node_samples))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 82, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_11);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":82
+  /* "skgarden/mondrian/tree/_tree.pyx":83
  *         <Py_ssize_t> &(<Node*> NULL).impurity,
  *         <Py_ssize_t> &(<Node*> NULL).n_node_samples,
  *         <Py_ssize_t> &(<Node*> NULL).weighted_n_node_samples,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).tau,
  *         <Py_ssize_t> &(<Node*> NULL).variance,
  */
-  __pyx_t_10 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->weighted_n_node_samples))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 82, __pyx_L1_error)
+  __pyx_t_10 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->weighted_n_node_samples))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 83, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_10);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":83
+  /* "skgarden/mondrian/tree/_tree.pyx":84
  *         <Py_ssize_t> &(<Node*> NULL).n_node_samples,
  *         <Py_ssize_t> &(<Node*> NULL).weighted_n_node_samples,
  *         <Py_ssize_t> &(<Node*> NULL).tau,             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).variance,
  *     ]
  */
-  __pyx_t_9 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->tau))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 83, __pyx_L1_error)
+  __pyx_t_9 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->tau))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 84, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_9);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":84
+  /* "skgarden/mondrian/tree/_tree.pyx":85
  *         <Py_ssize_t> &(<Node*> NULL).weighted_n_node_samples,
  *         <Py_ssize_t> &(<Node*> NULL).tau,
  *         <Py_ssize_t> &(<Node*> NULL).variance,             # <<<<<<<<<<<<<<
  *     ]
  * })
  */
-  __pyx_t_8 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->variance))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
+  __pyx_t_8 = PyInt_FromSsize_t(((Py_ssize_t)(&((struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *)NULL)->variance))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 85, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_8);
 
-  /* "skgarden/mondrian/tree/_tree.pyx":75
+  /* "skgarden/mondrian/tree/_tree.pyx":76
  *     'formats': [np.intp, np.intp, np.intp, np.float64, np.float64, np.intp,
  *                 np.float64, np.float32, np.float64],
  *     'offsets': [             # <<<<<<<<<<<<<<
  *         <Py_ssize_t> &(<Node*> NULL).left_child,
  *         <Py_ssize_t> &(<Node*> NULL).right_child,
  */
-  __pyx_t_7 = PyList_New(9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
+  __pyx_t_7 = PyList_New(9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 76, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_7);
   __Pyx_GIVEREF(__pyx_t_4);
   PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
@@ -17873,47 +19837,57 @@
   __pyx_t_10 = 0;
   __pyx_t_9 = 0;
   __pyx_t_8 = 0;
-  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_offsets, __pyx_t_7) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_offsets, __pyx_t_7) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":70
+  /* "skgarden/mondrian/tree/_tree.pyx":71
  * 
  * # Repeat struct definition for numpy
  * NODE_DTYPE = np.dtype({             # <<<<<<<<<<<<<<
  *     'names': ['left_child', 'right_child', 'feature', 'threshold', 'impurity',
  *               'n_node_samples', 'weighted_n_node_samples', 'tau', 'variance'],
  */
-  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
+  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_7);
   __Pyx_GIVEREF(__pyx_t_2);
   PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
   __pyx_t_2 = 0;
-  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NODE_DTYPE, __pyx_t_2) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NODE_DTYPE, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "skgarden/mondrian/tree/_tree.pyx":467
+  /* "skgarden/mondrian/tree/_tree.pyx":520
  *     # XXX using (size_t)(-1) is ugly, but SIZE_MAX is not available in C89
  *     # (i.e., older MSVC).
  *     cdef int _resize_c(self, SIZE_t capacity=<SIZE_t>(-1)) nogil except -1:             # <<<<<<<<<<<<<<
  *         """Guts of _resize
  * 
  */
-  __pyx_k__4 = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L);
+  __pyx_k__7 = ((__pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t)-1L);
+
+  /* "(tree fragment)":1
+ * def __pyx_unpickle_TreeBuilder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
+ *     if __pyx_checksum != 0xedae8f4:
+ *         from pickle import PickleError as __pyx_PickleError
+ */
+  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8skgarden_8mondrian_4tree_5_tree_1__pyx_unpickle_TreeBuilder, NULL, __pyx_n_s_skgarden_mondrian_tree__tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_2);
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_TreeBuilder, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
   /* "skgarden/mondrian/tree/_tree.pyx":1
  * # cython: cdivision=True             # <<<<<<<<<<<<<<
  * # cython: boundscheck=False
  * # cython: wraparound=False
  */
-  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -17939,7 +19913,7 @@
   __Pyx_XDECREF(__pyx_t_15);
   if (__pyx_m) {
     if (__pyx_d) {
-      __Pyx_AddTraceback("init skgarden.mondrian.tree._tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
+      __Pyx_AddTraceback("init skgarden.mondrian.tree._tree", 0, __pyx_lineno, __pyx_filename);
     }
     Py_DECREF(__pyx_m); __pyx_m = 0;
   } else if (!PyErr_Occurred()) {
@@ -17947,10 +19921,12 @@
   }
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
-  #if PY_MAJOR_VERSION < 3
-  return;
-  #else
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  return (__pyx_m != NULL) ? 0 : -1;
+  #elif PY_MAJOR_VERSION >= 3
   return __pyx_m;
+  #else
+  return;
   #endif
 }
 
@@ -17992,7 +19968,7 @@
 static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                                PyObject *globals) {
     PyFrameObject *f;
-    PyThreadState *tstate = PyThreadState_GET();
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
     PyObject **fastlocals;
     Py_ssize_t i;
     PyObject *result;
@@ -18103,8 +20079,8 @@
     Py_LeaveRecursiveCall();
     return result;
 }
-#endif  // CPython < 3.6
-#endif  // CYTHON_FAST_PYCALL
+#endif
+#endif
 
 /* PyCFunctionFastCall */
 #if CYTHON_FAST_PYCCALL
@@ -18112,17 +20088,22 @@
     PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
     PyCFunction meth = PyCFunction_GET_FUNCTION(func);
     PyObject *self = PyCFunction_GET_SELF(func);
+    int flags = PyCFunction_GET_FLAGS(func);
     assert(PyCFunction_Check(func));
-    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
+    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
     assert(nargs >= 0);
     assert(nargs == 0 || args != NULL);
     /* _PyCFunction_FastCallDict() must not be called with an exception set,
        because it may clear it (directly or indirectly) and so the
        caller loses its exception */
     assert(!PyErr_Occurred());
-    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
+    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
+        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
+    } else {
+        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
+    }
 }
-#endif  // CYTHON_FAST_PYCCALL
+#endif
 
 /* PyObjectCall */
 #if CYTHON_COMPILING_IN_CPYTHON
@@ -18287,29 +20268,23 @@
 }
 
 /* ArgTypeTest */
-static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
-    PyErr_Format(PyExc_TypeError,
-        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
-        name, type->tp_name, Py_TYPE(obj)->tp_name);
-}
-static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
-    const char *name, int exact)
+static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
 {
     if (unlikely(!type)) {
         PyErr_SetString(PyExc_SystemError, "Missing type object");
         return 0;
     }
-    if (none_allowed && obj == Py_None) return 1;
     else if (exact) {
-        if (likely(Py_TYPE(obj) == type)) return 1;
         #if PY_MAJOR_VERSION == 2
-        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
+        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
         #endif
     }
     else {
-        if (likely(PyObject_TypeCheck(obj, type))) return 1;
+        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
     }
-    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
+    PyErr_Format(PyExc_TypeError,
+        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
+        name, type->tp_name, Py_TYPE(obj)->tp_name);
     return 0;
 }
 
@@ -18331,93 +20306,46 @@
     return result;
 }
 
-/* PyObjectCallMethO */
-  #if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
-    PyObject *self, *result;
-    PyCFunction cfunc;
-    cfunc = PyCFunction_GET_FUNCTION(func);
-    self = PyCFunction_GET_SELF(func);
-    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
-        return NULL;
-    result = cfunc(self, arg);
-    Py_LeaveRecursiveCall();
-    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
-        PyErr_SetString(
-            PyExc_SystemError,
-            "NULL result without error in PyObject_Call");
-    }
-    return result;
-}
-#endif
-
-/* PyObjectCallOneArg */
-  #if CYTHON_COMPILING_IN_CPYTHON
-static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
-    PyObject *result;
-    PyObject *args = PyTuple_New(1);
-    if (unlikely(!args)) return NULL;
-    Py_INCREF(arg);
-    PyTuple_SET_ITEM(args, 0, arg);
-    result = __Pyx_PyObject_Call(func, args, NULL);
-    Py_DECREF(args);
-    return result;
-}
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
-#if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(func)) {
-        return __Pyx_PyFunction_FastCall(func, &arg, 1);
-    }
-#endif
-#ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
-#else
-    if (likely(PyCFunction_Check(func))) {
-#endif
-        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
-            return __Pyx_PyObject_CallMethO(func, arg);
-#if CYTHON_FAST_PYCCALL
-        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
-            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
-#endif
-        }
+/* ExtTypeTest */
+  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
+    if (unlikely(!type)) {
+        PyErr_SetString(PyExc_SystemError, "Missing type object");
+        return 0;
     }
-    return __Pyx__PyObject_CallOneArg(func, arg);
-}
-#else
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
-    PyObject *result;
-    PyObject *args = PyTuple_Pack(1, arg);
-    if (unlikely(!args)) return NULL;
-    result = __Pyx_PyObject_Call(func, args, NULL);
-    Py_DECREF(args);
-    return result;
+    if (likely(__Pyx_TypeCheck(obj, type)))
+        return 1;
+    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
+                 Py_TYPE(obj)->tp_name, type->tp_name);
+    return 0;
 }
-#endif
-
-/* PyObjectCallNoArg */
-    #if CYTHON_COMPILING_IN_CPYTHON
-static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
-#if CYTHON_FAST_PYCALL
-    if (PyFunction_Check(func)) {
-        return __Pyx_PyFunction_FastCall(func, NULL, 0);
+
+/* PyErrExceptionMatches */
+  #if CYTHON_FAST_THREAD_STATE
+static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
+    Py_ssize_t i, n;
+    n = PyTuple_GET_SIZE(tuple);
+#if PY_MAJOR_VERSION >= 3
+    for (i=0; i<n; i++) {
+        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
     }
 #endif
-#ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
-#else
-    if (likely(PyCFunction_Check(func))) {
-#endif
-        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
-            return __Pyx_PyObject_CallMethO(func, NULL);
-        }
+    for (i=0; i<n; i++) {
+        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
     }
-    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
+    return 0;
+}
+static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
+    PyObject *exc_type = tstate->curexc_type;
+    if (exc_type == err) return 1;
+    if (unlikely(!exc_type)) return 0;
+    if (unlikely(PyTuple_Check(err)))
+        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
+    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
 }
 #endif
 
 /* PyErrFetchRestore */
-      #if CYTHON_FAST_THREAD_STATE
+  #if CYTHON_FAST_THREAD_STATE
 static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
     PyObject *tmp_type, *tmp_value, *tmp_tb;
     tmp_type = tstate->curexc_type;
@@ -18440,8 +20368,183 @@
 }
 #endif
 
+/* GetAttr */
+  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
+#if CYTHON_USE_TYPE_SLOTS
+#if PY_MAJOR_VERSION >= 3
+    if (likely(PyUnicode_Check(n)))
+#else
+    if (likely(PyString_Check(n)))
+#endif
+        return __Pyx_PyObject_GetAttrStr(o, n);
+#endif
+    return PyObject_GetAttr(o, n);
+}
+
+/* GetAttr3 */
+  static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
+        return NULL;
+    __Pyx_PyErr_Clear();
+    Py_INCREF(d);
+    return d;
+}
+static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
+    PyObject *r = __Pyx_GetAttr(o, n);
+    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
+}
+
+/* RaiseTooManyValuesToUnpack */
+  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
+    PyErr_Format(PyExc_ValueError,
+                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
+}
+
+/* RaiseNeedMoreValuesToUnpack */
+  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
+    PyErr_Format(PyExc_ValueError,
+                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
+                 index, (index == 1) ? "" : "s");
+}
+
+/* IterFinish */
+  static CYTHON_INLINE int __Pyx_IterFinish(void) {
+#if CYTHON_FAST_THREAD_STATE
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    PyObject* exc_type = tstate->curexc_type;
+    if (unlikely(exc_type)) {
+        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
+            PyObject *exc_value, *exc_tb;
+            exc_value = tstate->curexc_value;
+            exc_tb = tstate->curexc_traceback;
+            tstate->curexc_type = 0;
+            tstate->curexc_value = 0;
+            tstate->curexc_traceback = 0;
+            Py_DECREF(exc_type);
+            Py_XDECREF(exc_value);
+            Py_XDECREF(exc_tb);
+            return 0;
+        } else {
+            return -1;
+        }
+    }
+    return 0;
+#else
+    if (unlikely(PyErr_Occurred())) {
+        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
+            PyErr_Clear();
+            return 0;
+        } else {
+            return -1;
+        }
+    }
+    return 0;
+#endif
+}
+
+/* UnpackItemEndCheck */
+  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
+    if (unlikely(retval)) {
+        Py_DECREF(retval);
+        __Pyx_RaiseTooManyValuesError(expected);
+        return -1;
+    } else {
+        return __Pyx_IterFinish();
+    }
+    return 0;
+}
+
+/* GetItemInt */
+  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
+    PyObject *r;
+    if (!j) return NULL;
+    r = PyObject_GetItem(o, j);
+    Py_DECREF(j);
+    return r;
+}
+static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
+                                                              CYTHON_NCP_UNUSED int wraparound,
+                                                              CYTHON_NCP_UNUSED int boundscheck) {
+#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
+    Py_ssize_t wrapped_i = i;
+    if (wraparound & unlikely(i < 0)) {
+        wrapped_i += PyList_GET_SIZE(o);
+    }
+    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
+        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
+        Py_INCREF(r);
+        return r;
+    }
+    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
+#else
+    return PySequence_GetItem(o, i);
+#endif
+}
+static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
+                                                              CYTHON_NCP_UNUSED int wraparound,
+                                                              CYTHON_NCP_UNUSED int boundscheck) {
+#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
+    Py_ssize_t wrapped_i = i;
+    if (wraparound & unlikely(i < 0)) {
+        wrapped_i += PyTuple_GET_SIZE(o);
+    }
+    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
+        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
+        Py_INCREF(r);
+        return r;
+    }
+    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
+#else
+    return PySequence_GetItem(o, i);
+#endif
+}
+static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
+                                                     CYTHON_NCP_UNUSED int wraparound,
+                                                     CYTHON_NCP_UNUSED int boundscheck) {
+#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
+    if (is_list || PyList_CheckExact(o)) {
+        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
+        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
+            PyObject *r = PyList_GET_ITEM(o, n);
+            Py_INCREF(r);
+            return r;
+        }
+    }
+    else if (PyTuple_CheckExact(o)) {
+        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
+        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
+            PyObject *r = PyTuple_GET_ITEM(o, n);
+            Py_INCREF(r);
+            return r;
+        }
+    } else {
+        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
+        if (likely(m && m->sq_item)) {
+            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
+                Py_ssize_t l = m->sq_length(o);
+                if (likely(l >= 0)) {
+                    i += l;
+                } else {
+                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
+                        return NULL;
+                    PyErr_Clear();
+                }
+            }
+            return m->sq_item(o, i);
+        }
+    }
+#else
+    if (is_list || PySequence_Check(o)) {
+        return PySequence_GetItem(o, i);
+    }
+#endif
+    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
+}
+
 /* RaiseException */
-      #if PY_MAJOR_VERSION < 3
+  #if PY_MAJOR_VERSION < 3
 static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                         CYTHON_UNUSED PyObject *cause) {
     __Pyx_PyThreadState_declare
@@ -18543,141 +20646,64 @@
             if (!owned_instance)
                 goto bad;
             value = owned_instance;
-            if (!PyExceptionInstance_Check(value)) {
-                PyErr_Format(PyExc_TypeError,
-                             "calling %R should have returned an instance of "
-                             "BaseException, not %R",
-                             type, Py_TYPE(value));
-                goto bad;
-            }
-        }
-    } else {
-        PyErr_SetString(PyExc_TypeError,
-            "raise: exception class must be a subclass of BaseException");
-        goto bad;
-    }
-#if PY_VERSION_HEX >= 0x03030000
-    if (cause) {
-#else
-    if (cause && cause != Py_None) {
-#endif
-        PyObject *fixed_cause;
-        if (cause == Py_None) {
-            fixed_cause = NULL;
-        } else if (PyExceptionClass_Check(cause)) {
-            fixed_cause = PyObject_CallObject(cause, NULL);
-            if (fixed_cause == NULL)
-                goto bad;
-        } else if (PyExceptionInstance_Check(cause)) {
-            fixed_cause = cause;
-            Py_INCREF(fixed_cause);
-        } else {
-            PyErr_SetString(PyExc_TypeError,
-                            "exception causes must derive from "
-                            "BaseException");
-            goto bad;
-        }
-        PyException_SetCause(value, fixed_cause);
-    }
-    PyErr_SetObject(type, value);
-    if (tb) {
-#if CYTHON_COMPILING_IN_PYPY
-        PyObject *tmp_type, *tmp_value, *tmp_tb;
-        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
-        Py_INCREF(tb);
-        PyErr_Restore(tmp_type, tmp_value, tb);
-        Py_XDECREF(tmp_tb);
-#else
-        PyThreadState *tstate = PyThreadState_GET();
-        PyObject* tmp_tb = tstate->curexc_traceback;
-        if (tb != tmp_tb) {
-            Py_INCREF(tb);
-            tstate->curexc_traceback = tb;
-            Py_XDECREF(tmp_tb);
-        }
-#endif
-    }
-bad:
-    Py_XDECREF(owned_instance);
-    return;
-}
-#endif
-
-/* ExtTypeTest */
-        static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
-    if (unlikely(!type)) {
-        PyErr_SetString(PyExc_SystemError, "Missing type object");
-        return 0;
-    }
-    if (likely(PyObject_TypeCheck(obj, type)))
-        return 1;
-    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
-                 Py_TYPE(obj)->tp_name, type->tp_name);
-    return 0;
-}
-
-/* RaiseTooManyValuesToUnpack */
-        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
-    PyErr_Format(PyExc_ValueError,
-                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
-}
-
-/* RaiseNeedMoreValuesToUnpack */
-        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
-    PyErr_Format(PyExc_ValueError,
-                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
-                 index, (index == 1) ? "" : "s");
-}
-
-/* IterFinish */
-        static CYTHON_INLINE int __Pyx_IterFinish(void) {
-#if CYTHON_FAST_THREAD_STATE
-    PyThreadState *tstate = PyThreadState_GET();
-    PyObject* exc_type = tstate->curexc_type;
-    if (unlikely(exc_type)) {
-        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
-            PyObject *exc_value, *exc_tb;
-            exc_value = tstate->curexc_value;
-            exc_tb = tstate->curexc_traceback;
-            tstate->curexc_type = 0;
-            tstate->curexc_value = 0;
-            tstate->curexc_traceback = 0;
-            Py_DECREF(exc_type);
-            Py_XDECREF(exc_value);
-            Py_XDECREF(exc_tb);
-            return 0;
-        } else {
-            return -1;
+            if (!PyExceptionInstance_Check(value)) {
+                PyErr_Format(PyExc_TypeError,
+                             "calling %R should have returned an instance of "
+                             "BaseException, not %R",
+                             type, Py_TYPE(value));
+                goto bad;
+            }
         }
+    } else {
+        PyErr_SetString(PyExc_TypeError,
+            "raise: exception class must be a subclass of BaseException");
+        goto bad;
     }
-    return 0;
-#else
-    if (unlikely(PyErr_Occurred())) {
-        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
-            PyErr_Clear();
-            return 0;
+    if (cause) {
+        PyObject *fixed_cause;
+        if (cause == Py_None) {
+            fixed_cause = NULL;
+        } else if (PyExceptionClass_Check(cause)) {
+            fixed_cause = PyObject_CallObject(cause, NULL);
+            if (fixed_cause == NULL)
+                goto bad;
+        } else if (PyExceptionInstance_Check(cause)) {
+            fixed_cause = cause;
+            Py_INCREF(fixed_cause);
         } else {
-            return -1;
+            PyErr_SetString(PyExc_TypeError,
+                            "exception causes must derive from "
+                            "BaseException");
+            goto bad;
         }
+        PyException_SetCause(value, fixed_cause);
     }
-    return 0;
+    PyErr_SetObject(type, value);
+    if (tb) {
+#if CYTHON_COMPILING_IN_PYPY
+        PyObject *tmp_type, *tmp_value, *tmp_tb;
+        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
+        Py_INCREF(tb);
+        PyErr_Restore(tmp_type, tmp_value, tb);
+        Py_XDECREF(tmp_tb);
+#else
+        PyThreadState *tstate = __Pyx_PyThreadState_Current;
+        PyObject* tmp_tb = tstate->curexc_traceback;
+        if (tb != tmp_tb) {
+            Py_INCREF(tb);
+            tstate->curexc_traceback = tb;
+            Py_XDECREF(tmp_tb);
+        }
 #endif
-}
-
-/* UnpackItemEndCheck */
-        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
-    if (unlikely(retval)) {
-        Py_DECREF(retval);
-        __Pyx_RaiseTooManyValuesError(expected);
-        return -1;
-    } else {
-        return __Pyx_IterFinish();
     }
-    return 0;
+bad:
+    Py_XDECREF(owned_instance);
+    return;
 }
+#endif
 
 /* SliceObject */
-        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
+  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
         Py_ssize_t cstart, Py_ssize_t cstop,
         PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
         int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
@@ -18773,12 +20799,100 @@
     return NULL;
 }
 
-/* BufferFormatCheck */
-        static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
-  unsigned int n = 1;
-  return *(unsigned char*)(&n) != 0;
+/* PyObjectCallMethO */
+  #if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
+    PyObject *self, *result;
+    PyCFunction cfunc;
+    cfunc = PyCFunction_GET_FUNCTION(func);
+    self = PyCFunction_GET_SELF(func);
+    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
+        return NULL;
+    result = cfunc(self, arg);
+    Py_LeaveRecursiveCall();
+    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
+        PyErr_SetString(
+            PyExc_SystemError,
+            "NULL result without error in PyObject_Call");
+    }
+    return result;
 }
-static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
+#endif
+
+/* PyObjectCallOneArg */
+  #if CYTHON_COMPILING_IN_CPYTHON
+static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+    PyObject *result;
+    PyObject *args = PyTuple_New(1);
+    if (unlikely(!args)) return NULL;
+    Py_INCREF(arg);
+    PyTuple_SET_ITEM(args, 0, arg);
+    result = __Pyx_PyObject_Call(func, args, NULL);
+    Py_DECREF(args);
+    return result;
+}
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+#if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(func)) {
+        return __Pyx_PyFunction_FastCall(func, &arg, 1);
+    }
+#endif
+    if (likely(PyCFunction_Check(func))) {
+        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
+            return __Pyx_PyObject_CallMethO(func, arg);
+#if CYTHON_FAST_PYCCALL
+        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
+            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
+#endif
+        }
+    }
+    return __Pyx__PyObject_CallOneArg(func, arg);
+}
+#else
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
+    PyObject *result;
+    PyObject *args = PyTuple_Pack(1, arg);
+    if (unlikely(!args)) return NULL;
+    result = __Pyx_PyObject_Call(func, args, NULL);
+    Py_DECREF(args);
+    return result;
+}
+#endif
+
+/* PyObjectCallNoArg */
+  #if CYTHON_COMPILING_IN_CPYTHON
+static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
+#if CYTHON_FAST_PYCALL
+    if (PyFunction_Check(func)) {
+        return __Pyx_PyFunction_FastCall(func, NULL, 0);
+    }
+#endif
+#ifdef __Pyx_CyFunction_USED
+    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
+#else
+    if (likely(PyCFunction_Check(func))) {
+#endif
+        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
+            return __Pyx_PyObject_CallMethO(func, NULL);
+        }
+    }
+    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
+}
+#endif
+
+/* IsLittleEndian */
+    static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
+{
+  union {
+    uint32_t u32;
+    uint8_t u8[4];
+  } S;
+  S.u32 = 0x01020304;
+  return S.u8[0] == 4;
+}
+
+/* BufferFormatCheck */
+    static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                               __Pyx_BufFmt_StackElem* stack,
                               __Pyx_TypeInfo* type) {
   stack[0].field = &ctx->root;
@@ -19099,7 +21213,7 @@
   ctx->is_complex = 0;
   return 0;
 }
-static CYTHON_INLINE PyObject *
+static PyObject *
 __pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
 {
     const char *ts = *tsp;
@@ -19164,7 +21278,7 @@
         ++ts;
         break;
       case '<':
-        if (!__Pyx_IsLittleEndian()) {
+        if (!__Pyx_Is_Little_Endian()) {
           PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
           return NULL;
         }
@@ -19173,7 +21287,7 @@
         break;
       case '>':
       case '!':
-        if (__Pyx_IsLittleEndian()) {
+        if (__Pyx_Is_Little_Endian()) {
           PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
           return NULL;
         }
@@ -19276,24 +21390,30 @@
     }
   }
 }
-static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
+
+/* BufferGetAndValidate */
+      static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
+  if (unlikely(info->buf == NULL)) return;
+  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
+  __Pyx_ReleaseBuffer(info);
+}
+static void __Pyx_ZeroBuffer(Py_buffer* buf) {
   buf->buf = NULL;
   buf->obj = NULL;
   buf->strides = __Pyx_zeros;
   buf->shape = __Pyx_zeros;
   buf->suboffsets = __Pyx_minusones;
 }
-static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
+static int __Pyx__GetBufferAndValidate(
         Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
         int nd, int cast, __Pyx_BufFmt_StackElem* stack)
 {
-  if (obj == Py_None || obj == NULL) {
+  buf->buf = NULL;
+  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
     __Pyx_ZeroBuffer(buf);
-    return 0;
+    return -1;
   }
-  buf->buf = NULL;
-  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
-  if (buf->ndim != nd) {
+  if (unlikely(buf->ndim != nd)) {
     PyErr_Format(PyExc_ValueError,
                  "Buffer has wrong number of dimensions (expected %d, got %d)",
                  nd, buf->ndim);
@@ -19304,7 +21424,7 @@
     __Pyx_BufFmt_Init(&ctx, stack, dtype);
     if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
   }
-  if ((unsigned)buf->itemsize != dtype->size) {
+  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
     PyErr_Format(PyExc_ValueError,
       "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
       buf->itemsize, (buf->itemsize > 1) ? "s" : "",
@@ -19314,143 +21434,201 @@
   if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
   return 0;
 fail:;
-  __Pyx_ZeroBuffer(buf);
+  __Pyx_SafeReleaseBuffer(buf);
   return -1;
 }
-static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
-  if (info->buf == NULL) return;
-  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
-  __Pyx_ReleaseBuffer(info);
-}
 
-/* GetItemInt */
-          static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
-    PyObject *r;
-    if (!j) return NULL;
-    r = PyObject_GetItem(o, j);
-    Py_DECREF(j);
-    return r;
-}
-static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
-                                                              CYTHON_NCP_UNUSED int wraparound,
-                                                              CYTHON_NCP_UNUSED int boundscheck) {
-#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
-    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
-        PyObject *r = PyList_GET_ITEM(o, i);
-        Py_INCREF(r);
-        return r;
-    }
-    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
-#else
-    return PySequence_GetItem(o, i);
+/* WriteUnraisableException */
+      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
+                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
+                                  int full_traceback, CYTHON_UNUSED int nogil) {
+    PyObject *old_exc, *old_val, *old_tb;
+    PyObject *ctx;
+    __Pyx_PyThreadState_declare
+#ifdef WITH_THREAD
+    PyGILState_STATE state;
+    if (nogil)
+        state = PyGILState_Ensure();
+#ifdef _MSC_VER
+    else state = (PyGILState_STATE)-1;
 #endif
-}
-static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
-                                                              CYTHON_NCP_UNUSED int wraparound,
-                                                              CYTHON_NCP_UNUSED int boundscheck) {
-#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
-    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
-        PyObject *r = PyTuple_GET_ITEM(o, i);
-        Py_INCREF(r);
-        return r;
+#endif
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
+    if (full_traceback) {
+        Py_XINCREF(old_exc);
+        Py_XINCREF(old_val);
+        Py_XINCREF(old_tb);
+        __Pyx_ErrRestore(old_exc, old_val, old_tb);
+        PyErr_PrintEx(1);
     }
-    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
-#else
-    return PySequence_GetItem(o, i);
+    #if PY_MAJOR_VERSION < 3
+    ctx = PyString_FromString(name);
+    #else
+    ctx = PyUnicode_FromString(name);
+    #endif
+    __Pyx_ErrRestore(old_exc, old_val, old_tb);
+    if (!ctx) {
+        PyErr_WriteUnraisable(Py_None);
+    } else {
+        PyErr_WriteUnraisable(ctx);
+        Py_DECREF(ctx);
+    }
+#ifdef WITH_THREAD
+    if (nogil)
+        PyGILState_Release(state);
 #endif
 }
-static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
-                                                     CYTHON_NCP_UNUSED int wraparound,
-                                                     CYTHON_NCP_UNUSED int boundscheck) {
-#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
-    if (is_list || PyList_CheckExact(o)) {
-        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
-        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
-            PyObject *r = PyList_GET_ITEM(o, n);
-            Py_INCREF(r);
-            return r;
-        }
+
+/* BufferFallbackError */
+      static void __Pyx_RaiseBufferFallbackError(void) {
+  PyErr_SetString(PyExc_ValueError,
+     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
+}
+
+/* Import */
+      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
+    PyObject *empty_list = 0;
+    PyObject *module = 0;
+    PyObject *global_dict = 0;
+    PyObject *empty_dict = 0;
+    PyObject *list;
+    #if PY_MAJOR_VERSION < 3
+    PyObject *py_import;
+    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
+    if (!py_import)
+        goto bad;
+    #endif
+    if (from_list)
+        list = from_list;
+    else {
+        empty_list = PyList_New(0);
+        if (!empty_list)
+            goto bad;
+        list = empty_list;
     }
-    else if (PyTuple_CheckExact(o)) {
-        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
-        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
-            PyObject *r = PyTuple_GET_ITEM(o, n);
-            Py_INCREF(r);
-            return r;
-        }
-    } else {
-        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
-        if (likely(m && m->sq_item)) {
-            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
-                Py_ssize_t l = m->sq_length(o);
-                if (likely(l >= 0)) {
-                    i += l;
-                } else {
-                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
-                        return NULL;
+    global_dict = PyModule_GetDict(__pyx_m);
+    if (!global_dict)
+        goto bad;
+    empty_dict = PyDict_New();
+    if (!empty_dict)
+        goto bad;
+    {
+        #if PY_MAJOR_VERSION >= 3
+        if (level == -1) {
+            if (strchr(__Pyx_MODULE_NAME, '.')) {
+                module = PyImport_ImportModuleLevelObject(
+                    name, global_dict, empty_dict, list, 1);
+                if (!module) {
+                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
+                        goto bad;
                     PyErr_Clear();
                 }
             }
-            return m->sq_item(o, i);
+            level = 0;
+        }
+        #endif
+        if (!module) {
+            #if PY_MAJOR_VERSION < 3
+            PyObject *py_level = PyInt_FromLong(level);
+            if (!py_level)
+                goto bad;
+            module = PyObject_CallFunctionObjArgs(py_import,
+                name, global_dict, empty_dict, list, py_level, NULL);
+            Py_DECREF(py_level);
+            #else
+            module = PyImport_ImportModuleLevelObject(
+                name, global_dict, empty_dict, list, level);
+            #endif
         }
     }
-#else
-    if (is_list || PySequence_Check(o)) {
-        return PySequence_GetItem(o, i);
+bad:
+    #if PY_MAJOR_VERSION < 3
+    Py_XDECREF(py_import);
+    #endif
+    Py_XDECREF(empty_list);
+    Py_XDECREF(empty_dict);
+    return module;
+}
+
+/* ImportFrom */
+      static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
+    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
+    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Format(PyExc_ImportError,
+        #if PY_MAJOR_VERSION < 3
+            "cannot import name %.230s", PyString_AS_STRING(name));
+        #else
+            "cannot import name %S", name);
+        #endif
     }
-#endif
-    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
+    return value;
 }
 
-/* BufferFallbackError */
-          static void __Pyx_RaiseBufferFallbackError(void) {
-  PyErr_SetString(PyExc_ValueError,
-     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
+/* HasAttr */
+      static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
+    PyObject *r;
+    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
+        PyErr_SetString(PyExc_TypeError,
+                        "hasattr(): attribute name must be string");
+        return -1;
+    }
+    r = __Pyx_GetAttr(o, n);
+    if (unlikely(!r)) {
+        PyErr_Clear();
+        return 0;
+    } else {
+        Py_DECREF(r);
+        return 1;
+    }
 }
 
 /* RaiseNoneIterError */
-          static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
+      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
 }
 
 /* SaveResetException */
-          #if CYTHON_FAST_THREAD_STATE
+      #if CYTHON_FAST_THREAD_STATE
 static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    #if PY_VERSION_HEX >= 0x030700A2
+    *type = tstate->exc_state.exc_type;
+    *value = tstate->exc_state.exc_value;
+    *tb = tstate->exc_state.exc_traceback;
+    #else
     *type = tstate->exc_type;
     *value = tstate->exc_value;
     *tb = tstate->exc_traceback;
+    #endif
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
 }
 static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
     PyObject *tmp_type, *tmp_value, *tmp_tb;
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = type;
+    tstate->exc_state.exc_value = value;
+    tstate->exc_state.exc_traceback = tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = type;
     tstate->exc_value = value;
     tstate->exc_traceback = tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
 }
 #endif
 
-/* PyErrExceptionMatches */
-          #if CYTHON_FAST_THREAD_STATE
-static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
-    PyObject *exc_type = tstate->curexc_type;
-    if (exc_type == err) return 1;
-    if (unlikely(!exc_type)) return 0;
-    return PyErr_GivenExceptionMatches(exc_type, err);
-}
-#endif
-
 /* GetException */
-          #if CYTHON_FAST_THREAD_STATE
+      #if CYTHON_FAST_THREAD_STATE
 static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
 #else
 static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
@@ -19487,12 +21665,21 @@
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_FAST_THREAD_STATE
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = local_type;
+    tstate->exc_state.exc_value = local_value;
+    tstate->exc_state.exc_traceback = local_tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = local_type;
     tstate->exc_value = local_value;
     tstate->exc_traceback = local_tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -19511,7 +21698,7 @@
 }
 
 /* SetVTable */
-            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
+        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
 #if PY_VERSION_HEX >= 0x02070000
     PyObject *ob = PyCapsule_New(vtable, 0, 0);
 #else
@@ -19528,8 +21715,84 @@
     return -1;
 }
 
+/* SetupReduce */
+        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
+  int ret;
+  PyObject *name_attr;
+  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
+  if (likely(name_attr)) {
+      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
+  } else {
+      ret = -1;
+  }
+  if (unlikely(ret < 0)) {
+      PyErr_Clear();
+      ret = 0;
+  }
+  Py_XDECREF(name_attr);
+  return ret;
+}
+static int __Pyx_setup_reduce(PyObject* type_obj) {
+    int ret = 0;
+    PyObject *object_reduce = NULL;
+    PyObject *object_reduce_ex = NULL;
+    PyObject *reduce = NULL;
+    PyObject *reduce_ex = NULL;
+    PyObject *reduce_cython = NULL;
+    PyObject *setstate = NULL;
+    PyObject *setstate_cython = NULL;
+#if CYTHON_USE_PYTYPE_LOOKUP
+    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
+#else
+    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
+#endif
+#if CYTHON_USE_PYTYPE_LOOKUP
+    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#else
+    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#endif
+    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
+    if (reduce_ex == object_reduce_ex) {
+#if CYTHON_USE_PYTYPE_LOOKUP
+        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#else
+        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#endif
+        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
+        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
+            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
+            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
+            if (!setstate) PyErr_Clear();
+            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
+                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
+                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
+                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
+            }
+            PyType_Modified((PyTypeObject*)type_obj);
+        }
+    }
+    goto GOOD;
+BAD:
+    if (!PyErr_Occurred())
+        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
+    ret = -1;
+GOOD:
+#if !CYTHON_USE_PYTYPE_LOOKUP
+    Py_XDECREF(object_reduce);
+    Py_XDECREF(object_reduce_ex);
+#endif
+    Py_XDECREF(reduce);
+    Py_XDECREF(reduce_ex);
+    Py_XDECREF(reduce_cython);
+    Py_XDECREF(setstate);
+    Py_XDECREF(setstate_cython);
+    return ret;
+}
+
 /* GetVTable */
-            static void* __Pyx_GetVtable(PyObject *dict) {
+        static void* __Pyx_GetVtable(PyObject *dict) {
     void* ptr;
     PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
     if (!ob)
@@ -19548,96 +21811,45 @@
     return NULL;
 }
 
-/* Import */
-            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
-    PyObject *empty_list = 0;
-    PyObject *module = 0;
-    PyObject *global_dict = 0;
-    PyObject *empty_dict = 0;
-    PyObject *list;
-    #if PY_VERSION_HEX < 0x03030000
-    PyObject *py_import;
-    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
-    if (!py_import)
-        goto bad;
-    #endif
-    if (from_list)
-        list = from_list;
-    else {
-        empty_list = PyList_New(0);
-        if (!empty_list)
-            goto bad;
-        list = empty_list;
-    }
-    global_dict = PyModule_GetDict(__pyx_m);
-    if (!global_dict)
-        goto bad;
-    empty_dict = PyDict_New();
-    if (!empty_dict)
-        goto bad;
+/* CLineInTraceback */
+        #ifndef CYTHON_CLINE_IN_TRACEBACK
+static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
+    PyObject *use_cline;
+    PyObject *ptype, *pvalue, *ptraceback;
+#if CYTHON_COMPILING_IN_CPYTHON
+    PyObject **cython_runtime_dict;
+#endif
+    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
+#if CYTHON_COMPILING_IN_CPYTHON
+    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
+    if (likely(cython_runtime_dict)) {
+      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
+    } else
+#endif
     {
-        #if PY_MAJOR_VERSION >= 3
-        if (level == -1) {
-            if (strchr(__Pyx_MODULE_NAME, '.')) {
-                #if PY_VERSION_HEX < 0x03030000
-                PyObject *py_level = PyInt_FromLong(1);
-                if (!py_level)
-                    goto bad;
-                module = PyObject_CallFunctionObjArgs(py_import,
-                    name, global_dict, empty_dict, list, py_level, NULL);
-                Py_DECREF(py_level);
-                #else
-                module = PyImport_ImportModuleLevelObject(
-                    name, global_dict, empty_dict, list, 1);
-                #endif
-                if (!module) {
-                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
-                        goto bad;
-                    PyErr_Clear();
-                }
-            }
-            level = 0;
-        }
-        #endif
-        if (!module) {
-            #if PY_VERSION_HEX < 0x03030000
-            PyObject *py_level = PyInt_FromLong(level);
-            if (!py_level)
-                goto bad;
-            module = PyObject_CallFunctionObjArgs(py_import,
-                name, global_dict, empty_dict, list, py_level, NULL);
-            Py_DECREF(py_level);
-            #else
-            module = PyImport_ImportModuleLevelObject(
-                name, global_dict, empty_dict, list, level);
-            #endif
-        }
+      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
+      if (use_cline_obj) {
+        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
+        Py_DECREF(use_cline_obj);
+      } else {
+        PyErr_Clear();
+        use_cline = NULL;
+      }
     }
-bad:
-    #if PY_VERSION_HEX < 0x03030000
-    Py_XDECREF(py_import);
-    #endif
-    Py_XDECREF(empty_list);
-    Py_XDECREF(empty_dict);
-    return module;
-}
-
-/* ImportFrom */
-            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
-    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
-    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
-        PyErr_Format(PyExc_ImportError,
-        #if PY_MAJOR_VERSION < 3
-            "cannot import name %.230s", PyString_AS_STRING(name));
-        #else
-            "cannot import name %S", name);
-        #endif
+    if (!use_cline) {
+        c_line = 0;
+        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
     }
-    return value;
+    else if (PyObject_Not(use_cline) != 0) {
+        c_line = 0;
+    }
+    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
+    return c_line;
 }
+#endif
 
 /* CodeObjectCache */
-            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
+        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
     int start = 0, mid = 0, end = count - 1;
     if (end >= 0 && code_line > entries[end].code_line) {
         return count;
@@ -19717,7 +21929,7 @@
 }
 
 /* AddTraceback */
-            #include "compile.h"
+        #include "compile.h"
 #include "frameobject.h"
 #include "traceback.h"
 static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
@@ -19776,18 +21988,22 @@
                                int py_line, const char *filename) {
     PyCodeObject *py_code = 0;
     PyFrameObject *py_frame = 0;
-    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    if (c_line) {
+        c_line = __Pyx_CLineForTraceback(tstate, c_line);
+    }
+    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
     if (!py_code) {
         py_code = __Pyx_CreateCodeObjectForTraceback(
             funcname, c_line, py_line, filename);
         if (!py_code) goto bad;
-        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
+        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
     }
     py_frame = PyFrame_New(
-        PyThreadState_GET(), /*PyThreadState *tstate,*/
-        py_code,             /*PyCodeObject *code,*/
-        __pyx_d,      /*PyObject *globals,*/
-        0                    /*PyObject *locals*/
+        tstate,            /*PyThreadState *tstate,*/
+        py_code,           /*PyCodeObject *code,*/
+        __pyx_d,    /*PyObject *globals,*/
+        0                  /*PyObject *locals*/
     );
     if (!py_frame) goto bad;
     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
@@ -19797,76 +22013,8 @@
     Py_XDECREF(py_frame);
 }
 
-#if PY_MAJOR_VERSION < 3
-static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
-    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
-        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
-    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
-    return -1;
-}
-static void __Pyx_ReleaseBuffer(Py_buffer *view) {
-    PyObject *obj = view->obj;
-    if (!obj) return;
-    if (PyObject_CheckBuffer(obj)) {
-        PyBuffer_Release(view);
-        return;
-    }
-        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
-    Py_DECREF(obj);
-    view->obj = NULL;
-}
-#endif
-
-
-            /* CIntFromPyVerify */
-            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
-    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
-#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
-    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
-#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
-    {\
-        func_type value = func_value;\
-        if (sizeof(target_type) < sizeof(func_type)) {\
-            if (unlikely(value != (func_type) (target_type) value)) {\
-                func_type zero = 0;\
-                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
-                    return (target_type) -1;\
-                if (is_unsigned && unlikely(value < zero))\
-                    goto raise_neg_overflow;\
-                else\
-                    goto raise_overflow;\
-            }\
-        }\
-        return (target_type) value;\
-    }
-
-/* None */
-            static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
-    long t = b;
-    switch (e) {
-        case 3:
-            t *= b;
-        case 2:
-            t *= b;
-        case 1:
-            return t;
-        case 0:
-            return 1;
-    }
-    #if 1
-    if (unlikely(e<0)) return 0;
-    #endif
-    t = 1;
-    while (likely(e)) {
-        t *= (b * (e&1)) | ((~e)&1);
-        b *= b;
-        e >>= 1;
-    }
-    return t;
-}
-
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -19888,16 +22036,60 @@
 #endif
         }
     }
-    {
-        int one = 1; int little = (int)*(unsigned char *)&one;
-        unsigned char *bytes = (unsigned char *)&value;
-        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
-                                     little, !is_unsigned);
+    {
+        int one = 1; int little = (int)*(unsigned char *)&one;
+        unsigned char *bytes = (unsigned char *)&value;
+        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
+                                     little, !is_unsigned);
+    }
+}
+
+/* CIntFromPyVerify */
+        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
+    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
+#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
+    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
+#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
+    {\
+        func_type value = func_value;\
+        if (sizeof(target_type) < sizeof(func_type)) {\
+            if (unlikely(value != (func_type) (target_type) value)) {\
+                func_type zero = 0;\
+                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
+                    return (target_type) -1;\
+                if (is_unsigned && unlikely(value < zero))\
+                    goto raise_neg_overflow;\
+                else\
+                    goto raise_overflow;\
+            }\
+        }\
+        return (target_type) value;\
+    }
+
+#if PY_MAJOR_VERSION < 3
+static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
+    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
+        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
+    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
+    return -1;
+}
+static void __Pyx_ReleaseBuffer(Py_buffer *view) {
+    PyObject *obj = view->obj;
+    if (!obj) return;
+    if (PyObject_CheckBuffer(obj)) {
+        PyBuffer_Release(view);
+        return;
     }
+    if ((0)) {}
+        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
+    view->obj = NULL;
+    Py_DECREF(obj);
 }
+#endif
 
-/* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
+
+        /* CIntToPy */
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -19928,7 +22120,7 @@
 }
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -19959,7 +22151,34 @@
 }
 
 /* None */
-            static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
+        static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
+    long t = b;
+    switch (e) {
+        case 3:
+            t *= b;
+        CYTHON_FALLTHROUGH;
+        case 2:
+            t *= b;
+        CYTHON_FALLTHROUGH;
+        case 1:
+            return t;
+        case 0:
+            return 1;
+    }
+    #if 1
+    if (unlikely(e<0)) return 0;
+    #endif
+    t = 1;
+    while (likely(e)) {
+        t *= (b * (e&1)) | ((~e)&1);
+        b *= b;
+        e >>= 1;
+    }
+    return t;
+}
+
+/* None */
+        static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
   int err;
   #ifdef WITH_THREAD
   PyGILState_STATE _save = PyGILState_Ensure();
@@ -19971,39 +22190,8 @@
   return err;
 }
 
-/* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value) {
-    const npy_int32 neg_one = (npy_int32) -1, const_zero = (npy_int32) 0;
-    const int is_unsigned = neg_one > const_zero;
-    if (is_unsigned) {
-        if (sizeof(npy_int32) < sizeof(long)) {
-            return PyInt_FromLong((long) value);
-        } else if (sizeof(npy_int32) <= sizeof(unsigned long)) {
-            return PyLong_FromUnsignedLong((unsigned long) value);
-#ifdef HAVE_LONG_LONG
-        } else if (sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG)) {
-            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
-#endif
-        }
-    } else {
-        if (sizeof(npy_int32) <= sizeof(long)) {
-            return PyInt_FromLong((long) value);
-#ifdef HAVE_LONG_LONG
-        } else if (sizeof(npy_int32) <= sizeof(PY_LONG_LONG)) {
-            return PyLong_FromLongLong((PY_LONG_LONG) value);
-#endif
-        }
-    }
-    {
-        int one = 1; int little = (int)*(unsigned char *)&one;
-        unsigned char *bytes = (unsigned char *)&value;
-        return _PyLong_FromByteArray(bytes, sizeof(npy_int32),
-                                     little, !is_unsigned);
-    }
-}
-
 /* Declarations */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
       return ::std::complex< float >(x, y);
@@ -20023,7 +22211,7 @@
 #endif
 
 /* Arithmetic */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -20158,7 +22346,7 @@
 #endif
 
 /* Declarations */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
       return ::std::complex< double >(x, y);
@@ -20178,7 +22366,7 @@
 #endif
 
 /* Arithmetic */
-            #if CYTHON_CCOMPLEX
+        #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -20313,7 +22501,7 @@
 #endif
 
 /* CIntToPy */
-            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
+        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
     const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -20344,7 +22532,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
+        static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -20533,7 +22721,7 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
+        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -20722,19 +22910,19 @@
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE npy_int32 __Pyx_PyInt_As_npy_int32(PyObject *x) {
-    const npy_int32 neg_one = (npy_int32) -1, const_zero = (npy_int32) 0;
+        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
+    const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
     if (likely(PyInt_Check(x))) {
-        if (sizeof(npy_int32) < sizeof(long)) {
-            __PYX_VERIFY_RETURN_INT(npy_int32, long, PyInt_AS_LONG(x))
+        if (sizeof(long) < sizeof(long)) {
+            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
         } else {
             long val = PyInt_AS_LONG(x);
             if (is_unsigned && unlikely(val < 0)) {
                 goto raise_neg_overflow;
             }
-            return (npy_int32) val;
+            return (long) val;
         }
     } else
 #endif
@@ -20743,32 +22931,32 @@
 #if CYTHON_USE_PYLONG_INTERNALS
             const digit* digits = ((PyLongObject*)x)->ob_digit;
             switch (Py_SIZE(x)) {
-                case  0: return (npy_int32) 0;
-                case  1: __PYX_VERIFY_RETURN_INT(npy_int32, digit, digits[0])
+                case  0: return (long) 0;
+                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                 case 2:
-                    if (8 * sizeof(npy_int32) > 1 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) >= 2 * PyLong_SHIFT) {
-                            return (npy_int32) (((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
+                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
+                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                         }
                     }
                     break;
                 case 3:
-                    if (8 * sizeof(npy_int32) > 2 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) >= 3 * PyLong_SHIFT) {
-                            return (npy_int32) (((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
+                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
+                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                         }
                     }
                     break;
                 case 4:
-                    if (8 * sizeof(npy_int32) > 3 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) >= 4 * PyLong_SHIFT) {
-                            return (npy_int32) (((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
+                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
+                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                         }
                     }
                     break;
@@ -20782,86 +22970,86 @@
             {
                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                 if (unlikely(result < 0))
-                    return (npy_int32) -1;
+                    return (long) -1;
                 if (unlikely(result == 1))
                     goto raise_neg_overflow;
             }
 #endif
-            if (sizeof(npy_int32) <= sizeof(unsigned long)) {
-                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, unsigned long, PyLong_AsUnsignedLong(x))
+            if (sizeof(long) <= sizeof(unsigned long)) {
+                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
 #ifdef HAVE_LONG_LONG
-            } else if (sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG)) {
-                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
+            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
+                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
 #endif
             }
         } else {
 #if CYTHON_USE_PYLONG_INTERNALS
             const digit* digits = ((PyLongObject*)x)->ob_digit;
             switch (Py_SIZE(x)) {
-                case  0: return (npy_int32) 0;
-                case -1: __PYX_VERIFY_RETURN_INT(npy_int32, sdigit, (sdigit) (-(sdigit)digits[0]))
-                case  1: __PYX_VERIFY_RETURN_INT(npy_int32,  digit, +digits[0])
+                case  0: return (long) 0;
+                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
+                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                 case -2:
-                    if (8 * sizeof(npy_int32) - 1 > 1 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT) {
-                            return (npy_int32) (((npy_int32)-1)*(((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
+                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                         }
                     }
                     break;
                 case 2:
-                    if (8 * sizeof(npy_int32) > 1 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT) {
-                            return (npy_int32) ((((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
+                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                         }
                     }
                     break;
                 case -3:
-                    if (8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT) {
-                            return (npy_int32) (((npy_int32)-1)*(((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
+                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                         }
                     }
                     break;
                 case 3:
-                    if (8 * sizeof(npy_int32) > 2 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT) {
-                            return (npy_int32) ((((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
+                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                         }
                     }
                     break;
                 case -4:
-                    if (8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) - 1 > 4 * PyLong_SHIFT) {
-                            return (npy_int32) (((npy_int32)-1)*(((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
+                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                         }
                     }
                     break;
                 case 4:
-                    if (8 * sizeof(npy_int32) > 3 * PyLong_SHIFT) {
+                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(npy_int32) - 1 > 4 * PyLong_SHIFT) {
-                            return (npy_int32) ((((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
+                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                         }
                     }
                     break;
             }
 #endif
-            if (sizeof(npy_int32) <= sizeof(long)) {
-                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, long, PyLong_AsLong(x))
+            if (sizeof(long) <= sizeof(long)) {
+                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
 #ifdef HAVE_LONG_LONG
-            } else if (sizeof(npy_int32) <= sizeof(PY_LONG_LONG)) {
-                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, PY_LONG_LONG, PyLong_AsLongLong(x))
+            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
+                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
 #endif
             }
         }
@@ -20870,7 +23058,7 @@
             PyErr_SetString(PyExc_RuntimeError,
                             "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
 #else
-            npy_int32 val;
+            long val;
             PyObject *v = __Pyx_PyNumber_IntOrLong(x);
  #if PY_MAJOR_VERSION < 3
             if (likely(v) && !PyLong_Check(v)) {
@@ -20890,40 +23078,40 @@
                     return val;
             }
 #endif
-            return (npy_int32) -1;
+            return (long) -1;
         }
     } else {
-        npy_int32 val;
+        long val;
         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
-        if (!tmp) return (npy_int32) -1;
-        val = __Pyx_PyInt_As_npy_int32(tmp);
+        if (!tmp) return (long) -1;
+        val = __Pyx_PyInt_As_long(tmp);
         Py_DECREF(tmp);
         return val;
     }
 raise_overflow:
     PyErr_SetString(PyExc_OverflowError,
-        "value too large to convert to npy_int32");
-    return (npy_int32) -1;
+        "value too large to convert to long");
+    return (long) -1;
 raise_neg_overflow:
     PyErr_SetString(PyExc_OverflowError,
-        "can't convert negative value to npy_int32");
-    return (npy_int32) -1;
+        "can't convert negative value to long");
+    return (long) -1;
 }
 
 /* CIntFromPy */
-            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
-    const long neg_one = (long) -1, const_zero = (long) 0;
+        static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *x) {
+    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
     if (likely(PyInt_Check(x))) {
-        if (sizeof(long) < sizeof(long)) {
-            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
+        if (sizeof(npy_uint32) < sizeof(long)) {
+            __PYX_VERIFY_RETURN_INT(npy_uint32, long, PyInt_AS_LONG(x))
         } else {
             long val = PyInt_AS_LONG(x);
             if (is_unsigned && unlikely(val < 0)) {
                 goto raise_neg_overflow;
             }
-            return (long) val;
+            return (npy_uint32) val;
         }
     } else
 #endif
@@ -20932,32 +23120,32 @@
 #if CYTHON_USE_PYLONG_INTERNALS
             const digit* digits = ((PyLongObject*)x)->ob_digit;
             switch (Py_SIZE(x)) {
-                case  0: return (long) 0;
-                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
+                case  0: return (npy_uint32) 0;
+                case  1: __PYX_VERIFY_RETURN_INT(npy_uint32, digit, digits[0])
                 case 2:
-                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
-                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) >= 2 * PyLong_SHIFT) {
+                            return (npy_uint32) (((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                         }
                     }
                     break;
                 case 3:
-                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
-                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) >= 3 * PyLong_SHIFT) {
+                            return (npy_uint32) (((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                         }
                     }
                     break;
                 case 4:
-                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
-                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) >= 4 * PyLong_SHIFT) {
+                            return (npy_uint32) (((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                         }
                     }
                     break;
@@ -20971,86 +23159,86 @@
             {
                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                 if (unlikely(result < 0))
-                    return (long) -1;
+                    return (npy_uint32) -1;
                 if (unlikely(result == 1))
                     goto raise_neg_overflow;
             }
 #endif
-            if (sizeof(long) <= sizeof(unsigned long)) {
-                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
+            if (sizeof(npy_uint32) <= sizeof(unsigned long)) {
+                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned long, PyLong_AsUnsignedLong(x))
 #ifdef HAVE_LONG_LONG
-            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
-                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
+            } else if (sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG)) {
+                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
 #endif
             }
         } else {
 #if CYTHON_USE_PYLONG_INTERNALS
             const digit* digits = ((PyLongObject*)x)->ob_digit;
             switch (Py_SIZE(x)) {
-                case  0: return (long) 0;
-                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
-                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
+                case  0: return (npy_uint32) 0;
+                case -1: __PYX_VERIFY_RETURN_INT(npy_uint32, sdigit, (sdigit) (-(sdigit)digits[0]))
+                case  1: __PYX_VERIFY_RETURN_INT(npy_uint32,  digit, +digits[0])
                 case -2:
-                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) - 1 > 1 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
-                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
+                            return (npy_uint32) (((npy_uint32)-1)*(((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                         }
                     }
                     break;
                 case 2:
-                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
-                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
+                            return (npy_uint32) ((((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                         }
                     }
                     break;
                 case -3:
-                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
-                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
+                            return (npy_uint32) (((npy_uint32)-1)*(((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                         }
                     }
                     break;
                 case 3:
-                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
-                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
+                            return (npy_uint32) ((((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                         }
                     }
                     break;
                 case -4:
-                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
-                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT) {
+                            return (npy_uint32) (((npy_uint32)-1)*(((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                         }
                     }
                     break;
                 case 4:
-                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
+                    if (8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT) {
                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
-                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
-                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
-                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
+                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
+                        } else if (8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT) {
+                            return (npy_uint32) ((((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                         }
                     }
                     break;
             }
 #endif
-            if (sizeof(long) <= sizeof(long)) {
-                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
+            if (sizeof(npy_uint32) <= sizeof(long)) {
+                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, long, PyLong_AsLong(x))
 #ifdef HAVE_LONG_LONG
-            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
-                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
+            } else if (sizeof(npy_uint32) <= sizeof(PY_LONG_LONG)) {
+                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, PY_LONG_LONG, PyLong_AsLongLong(x))
 #endif
             }
         }
@@ -21059,7 +23247,7 @@
             PyErr_SetString(PyExc_RuntimeError,
                             "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
 #else
-            long val;
+            npy_uint32 val;
             PyObject *v = __Pyx_PyNumber_IntOrLong(x);
  #if PY_MAJOR_VERSION < 3
             if (likely(v) && !PyLong_Check(v)) {
@@ -21079,28 +23267,100 @@
                     return val;
             }
 #endif
-            return (long) -1;
+            return (npy_uint32) -1;
         }
     } else {
-        long val;
+        npy_uint32 val;
         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
-        if (!tmp) return (long) -1;
-        val = __Pyx_PyInt_As_long(tmp);
+        if (!tmp) return (npy_uint32) -1;
+        val = __Pyx_PyInt_As_npy_uint32(tmp);
         Py_DECREF(tmp);
         return val;
     }
 raise_overflow:
     PyErr_SetString(PyExc_OverflowError,
-        "value too large to convert to long");
-    return (long) -1;
+        "value too large to convert to npy_uint32");
+    return (npy_uint32) -1;
 raise_neg_overflow:
     PyErr_SetString(PyExc_OverflowError,
-        "can't convert negative value to long");
-    return (long) -1;
+        "can't convert negative value to npy_uint32");
+    return (npy_uint32) -1;
+}
+
+/* FastTypeChecks */
+        #if CYTHON_COMPILING_IN_CPYTHON
+static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
+    while (a) {
+        a = a->tp_base;
+        if (a == b)
+            return 1;
+    }
+    return b == &PyBaseObject_Type;
+}
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
+    PyObject *mro;
+    if (a == b) return 1;
+    mro = a->tp_mro;
+    if (likely(mro)) {
+        Py_ssize_t i, n;
+        n = PyTuple_GET_SIZE(mro);
+        for (i = 0; i < n; i++) {
+            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
+                return 1;
+        }
+        return 0;
+    }
+    return __Pyx_InBases(a, b);
+}
+#if PY_MAJOR_VERSION == 2
+static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
+    PyObject *exception, *value, *tb;
+    int res;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&exception, &value, &tb);
+    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
+    if (unlikely(res == -1)) {
+        PyErr_WriteUnraisable(err);
+        res = 0;
+    }
+    if (!res) {
+        res = PyObject_IsSubclass(err, exc_type2);
+        if (unlikely(res == -1)) {
+            PyErr_WriteUnraisable(err);
+            res = 0;
+        }
+    }
+    __Pyx_ErrRestore(exception, value, tb);
+    return res;
+}
+#else
+static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
+    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
+    if (!res) {
+        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
+    }
+    return res;
+}
+#endif
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
+    if (likely(err == exc_type)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
+    }
+    return PyErr_GivenExceptionMatches(err, exc_type);
 }
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
+    if (likely(err == exc_type1 || err == exc_type2)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
+    }
+    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
+}
+#endif
 
 /* CheckBinaryVersion */
-            static int __Pyx_check_binary_version(void) {
+        static int __Pyx_check_binary_version(void) {
     char ctversion[4], rtversion[4];
     PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
     PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
@@ -21116,7 +23376,7 @@
 }
 
 /* ModuleImport */
-            #ifndef __PYX_HAVE_RT_ImportModule
+        #ifndef __PYX_HAVE_RT_ImportModule
 #define __PYX_HAVE_RT_ImportModule
 static PyObject *__Pyx_ImportModule(const char *name) {
     PyObject *py_name = 0;
@@ -21134,7 +23394,7 @@
 #endif
 
 /* TypeImport */
-            #ifndef __PYX_HAVE_RT_ImportType
+        #ifndef __PYX_HAVE_RT_ImportType
 #define __PYX_HAVE_RT_ImportType
 static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
     size_t size, int strict)
@@ -21199,7 +23459,7 @@
 #endif
 
 /* FunctionImport */
-            #ifndef __PYX_HAVE_RT_ImportFunction
+        #ifndef __PYX_HAVE_RT_ImportFunction
 #define __PYX_HAVE_RT_ImportFunction
 static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
     PyObject *d = 0;
@@ -21253,7 +23513,7 @@
 #endif
 
 /* InitStrings */
-            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
     while (t->p) {
         #if PY_MAJOR_VERSION < 3
         if (t->is_unicode) {
@@ -21278,6 +23538,8 @@
         #endif
         if (!*t->p)
             return -1;
+        if (PyObject_Hash(*t->p) == -1)
+            PyErr_Clear();
         ++t;
     }
     return 0;
@@ -21286,50 +23548,57 @@
 static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
     return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
     Py_ssize_t ignore;
     return __Pyx_PyObject_AsStringAndSize(o, &ignore);
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
-#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
-    if (
-#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-            __Pyx_sys_getdefaultencoding_not_ascii &&
-#endif
-            PyUnicode_Check(o)) {
-#if PY_VERSION_HEX < 0x03030000
-        char* defenc_c;
-        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
-        if (!defenc) return NULL;
-        defenc_c = PyBytes_AS_STRING(defenc);
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+#if !CYTHON_PEP393_ENABLED
+static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    char* defenc_c;
+    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
+    if (!defenc) return NULL;
+    defenc_c = PyBytes_AS_STRING(defenc);
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        {
-            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
-            char* c;
-            for (c = defenc_c; c < end; c++) {
-                if ((unsigned char) (*c) >= 128) {
-                    PyUnicode_AsASCIIString(o);
-                    return NULL;
-                }
+    {
+        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
+        char* c;
+        for (c = defenc_c; c < end; c++) {
+            if ((unsigned char) (*c) >= 128) {
+                PyUnicode_AsASCIIString(o);
+                return NULL;
             }
         }
+    }
 #endif
-        *length = PyBytes_GET_SIZE(defenc);
-        return defenc_c;
+    *length = PyBytes_GET_SIZE(defenc);
+    return defenc_c;
+}
 #else
-        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
+static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        if (PyUnicode_IS_ASCII(o)) {
-            *length = PyUnicode_GET_LENGTH(o);
-            return PyUnicode_AsUTF8(o);
-        } else {
-            PyUnicode_AsASCIIString(o);
-            return NULL;
-        }
+    if (likely(PyUnicode_IS_ASCII(o))) {
+        *length = PyUnicode_GET_LENGTH(o);
+        return PyUnicode_AsUTF8(o);
+    } else {
+        PyUnicode_AsASCIIString(o);
+        return NULL;
+    }
 #else
-        return PyUnicode_AsUTF8AndSize(o, length);
+    return PyUnicode_AsUTF8AndSize(o, length);
 #endif
+}
+#endif
+#endif
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+    if (
+#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
+            __Pyx_sys_getdefaultencoding_not_ascii &&
 #endif
+            PyUnicode_Check(o)) {
+        return __Pyx_PyUnicode_AsStringAndSize(o, length);
     } else
 #endif
 #if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
@@ -21353,6 +23622,26 @@
    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
    else return PyObject_IsTrue(x);
 }
+static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
+#if PY_MAJOR_VERSION >= 3
+    if (PyLong_Check(result)) {
+        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
+                "__int__ returned non-int (type %.200s).  "
+                "The ability to return an instance of a strict subclass of int "
+                "is deprecated, and may be removed in a future version of Python.",
+                Py_TYPE(result)->tp_name)) {
+            Py_DECREF(result);
+            return NULL;
+        }
+        return result;
+    }
+#endif
+    PyErr_Format(PyExc_TypeError,
+                 "__%.4s__ returned non-%.4s (type %.200s)",
+                 type_name, type_name, Py_TYPE(result)->tp_name);
+    Py_DECREF(result);
+    return NULL;
+}
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
 #if CYTHON_USE_TYPE_SLOTS
   PyNumberMethods *m;
@@ -21360,9 +23649,9 @@
   const char *name = NULL;
   PyObject *res = NULL;
 #if PY_MAJOR_VERSION < 3
-  if (PyInt_Check(x) || PyLong_Check(x))
+  if (likely(PyInt_Check(x) || PyLong_Check(x)))
 #else
-  if (PyLong_Check(x))
+  if (likely(PyLong_Check(x)))
 #endif
     return __Pyx_NewRef(x);
 #if CYTHON_USE_TYPE_SLOTS
@@ -21370,32 +23659,30 @@
   #if PY_MAJOR_VERSION < 3
   if (m && m->nb_int) {
     name = "int";
-    res = PyNumber_Int(x);
+    res = m->nb_int(x);
   }
   else if (m && m->nb_long) {
     name = "long";
-    res = PyNumber_Long(x);
+    res = m->nb_long(x);
   }
   #else
-  if (m && m->nb_int) {
+  if (likely(m && m->nb_int)) {
     name = "int";
-    res = PyNumber_Long(x);
+    res = m->nb_int(x);
   }
   #endif
 #else
-  res = PyNumber_Int(x);
+  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
+    res = PyNumber_Int(x);
+  }
 #endif
-  if (res) {
+  if (likely(res)) {
 #if PY_MAJOR_VERSION < 3
-    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
 #else
-    if (!PyLong_Check(res)) {
+    if (unlikely(!PyLong_CheckExact(res))) {
 #endif
-      PyErr_Format(PyExc_TypeError,
-                   "__%.4s__ returned non-%.4s (type %.200s)",
-                   name, name, Py_TYPE(res)->tp_name);
-      Py_DECREF(res);
-      return NULL;
+        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
     }
   }
   else if (!PyErr_Occurred()) {
diff -ruN orig/skgarden/mondrian/tree/_tree.pxd new/skgarden/mondrian/tree/_tree.pxd
--- orig/skgarden/mondrian/tree/_tree.pxd	2017-06-07 04:55:21.000000000 -0700
+++ new/skgarden/mondrian/tree/_tree.pxd	2017-12-27 11:16:05.000000000 -0800
@@ -58,6 +58,7 @@
     cdef double* value                   # (capacity, n_outputs, max_n_classes) array of values
     cdef SIZE_t value_stride             # = n_outputs * max_n_classes
 
+    cdef SIZE_t root
     # Methods
     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,
                           SIZE_t feature, double threshold, double impurity,
@@ -76,14 +77,26 @@
 
     cpdef np.ndarray apply(self, object X)
     cdef np.ndarray _apply_dense(self, object X)
-    cdef np.ndarray _apply_sparse_csr(self, object X)
 
     cpdef object decision_path(self, object X)
     cdef object _decision_path_dense(self, object X)
-    cdef object _decision_path_sparse_csr(self, object X)
     cpdef object weighted_decision_path(self, object X)
-
-
+    cdef void _init(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_stride)
+    cdef void extend(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t x_start,
+                     SIZE_t X_f_stride, SIZE_t y_stride, UINT32_t random_state,
+                     SIZE_t min_samples_split)
+    cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,
+                                  SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+                                  DTYPE_t tau, SIZE_t n_node_samples,
+                                  DOUBLE_t weighted_n_node_samples, DOUBLE_t impurity,
+                                  DOUBLE_t variance, SIZE_t X_start,
+                                  SIZE_t X_f_stride, DTYPE_t* X_ptr,
+                                  DOUBLE_t* y_ptr, SIZE_t child_ind=?,
+                                  SIZE_t y_start=?)
+    cdef void update_node_extent(self, SIZE_t node_ind, SIZE_t child_ind,
+                                 DTYPE_t* X_ptr, SIZE_t X_start, SIZE_t X_f_stride)
+    cdef void _update_node_info(self, SIZE_t parent_id, SIZE_t child_id,
+                                DOUBLE_t* y_ptr, SIZE_t y_start)
 # =============================================================================
 # Tree builder
 # =============================================================================
@@ -102,6 +115,7 @@
     cdef SIZE_t min_samples_leaf    # Minimum number of samples in a leaf
     cdef double min_weight_leaf     # Minimum weight in a leaf
     cdef SIZE_t max_depth           # Maximal tree depth
+    cdef object random_state
 
     cpdef build(self, Tree tree, object X, np.ndarray y,
                 np.ndarray sample_weight=*,
diff -ruN orig/skgarden/mondrian/tree/_tree.pyx new/skgarden/mondrian/tree/_tree.pyx
--- orig/skgarden/mondrian/tree/_tree.pyx	2017-06-07 04:55:21.000000000 -0700
+++ new/skgarden/mondrian/tree/_tree.pyx	2017-12-27 11:16:05.000000000 -0800
@@ -19,7 +19,6 @@
 from cpython cimport Py_INCREF, PyObject
 
 from libc.math cimport exp
-from libc.math cimport fmax
 from libc.math cimport sqrt
 from libc.stdlib cimport free
 from libc.stdlib cimport malloc
@@ -30,14 +29,16 @@
 cimport numpy as np
 np.import_array()
 
-from scipy.sparse import issparse
-from scipy.sparse import csc_matrix
 from scipy.sparse import csr_matrix
 
 from ._utils cimport Stack
 from ._utils cimport StackRecord
 from ._utils cimport safe_realloc
 from ._utils cimport sizet_ptr_to_ndarray
+from ._utils cimport rand_exponential
+from ._utils cimport rand_multinomial
+from ._utils cimport rand_uniform
+from ._utils cimport RAND_R_MAX
 
 cdef extern from "numpy/arrayobject.h":
     object PyArray_NewFromDescr(object subtype, np.dtype descr,
@@ -85,6 +86,14 @@
     ]
 })
 
+cdef inline double fmax(double left, double right) nogil:
+    return left if left > right else right
+
+
+cdef inline double fmin(double left, double right) nogil:
+    return left if left < right else right
+
+
 # =============================================================================
 # TreeBuilder
 # =============================================================================
@@ -101,18 +110,7 @@
     cdef inline _check_input(self, object X, np.ndarray y,
                              np.ndarray sample_weight):
         """Check input dtype, layout and format"""
-        if issparse(X):
-            X = X.tocsc()
-            X.sort_indices()
-
-            if X.data.dtype != DTYPE:
-                X.data = np.ascontiguousarray(X.data, dtype=DTYPE)
-
-            if X.indices.dtype != np.int32 or X.indptr.dtype != np.int32:
-                raise ValueError("No support for np.int64 index based "
-                                 "sparse matrices")
-
-        elif X.dtype != DTYPE:
+        if X.dtype != DTYPE:
             # since we have to copy we will make it fortran for efficiency
             X = np.asfortranarray(X, dtype=DTYPE)
 
@@ -127,6 +125,51 @@
 
         return X, y, sample_weight
 
+cdef class PartialFitTreeBuilder(TreeBuilder):
+    """Build a decision tree incrementally."""
+
+    def __cinit__(self, SIZE_t min_samples_split, SIZE_t max_depth,
+                  object random_state):
+        self.min_samples_split = min_samples_split
+        self.max_depth = max_depth
+        self.random_state = random_state
+
+    cpdef build(self, Tree tree, object X, np.ndarray y,
+                np.ndarray sample_weight=None,
+                np.ndarray X_idx_sorted=None):
+        X, y, sample_weight = self._check_input(X, y, None)
+
+        cdef UINT32_t rand_r_state = self.random_state.randint(0, RAND_R_MAX)
+        cdef int n_samples = X.shape[0]
+
+        # Allocate memory for tree.
+        cdef int init_capacity
+        if tree.max_depth <= 10:
+            init_capacity = (2 ** (tree.max_depth + 1)) - 1
+            tree._resize(init_capacity)
+
+        cdef np.ndarray X_ndarray = X
+        cdef DTYPE_t* X_ptr = <DTYPE_t*> X_ndarray.data
+        cdef DOUBLE_t* y_ptr = <DOUBLE_t*> y.data
+        cdef SIZE_t X_f_stride = X.strides[1] / X.itemsize
+        cdef SIZE_t X_s_stride = X.strides[0] / X.itemsize
+        cdef SIZE_t y_stride = y.strides[0] / y.itemsize
+        cdef SIZE_t sample_ind
+        cdef SIZE_t start
+
+        # Initialize the tree when the first sample is inserted.
+        if tree.node_count == 0:
+            tree._init(X_ptr, y_ptr, X_f_stride)
+            start = 1
+        else:
+            start = 0
+
+        for sample_ind in range(start, n_samples):
+            tree.extend(X_ptr, y_ptr, sample_ind*X_s_stride,
+                        X_f_stride,
+                        sample_ind*y_stride, rand_r_state,
+                        self.min_samples_split)
+
 # Depth first builder ---------------------------------------------------------
 
 cdef class DepthFirstTreeBuilder(TreeBuilder):
@@ -152,12 +195,10 @@
 
         # Initial capacity
         cdef int init_capacity
-
         if tree.max_depth <= 10:
             init_capacity = (2 ** (tree.max_depth + 1)) - 1
         else:
             init_capacity = 2047
-
         tree._resize(init_capacity)
 
         # Parameters
@@ -212,19 +253,22 @@
                 n_node_samples = end - start
                 splitter.node_reset(start, end, &weighted_n_node_samples)
 
-                is_leaf = (depth >= max_depth or
-                           n_node_samples < min_samples_split)
-
                 if first:
                     impurity = splitter.node_impurity()
                     first = 0
 
+                is_leaf = (depth >= max_depth or
+                           n_node_samples < min_samples_split)
+
                 if not is_leaf:
                     is_leaf = splitter.node_split(impurity, &split, &n_constant_features)
                     is_leaf = is_leaf or (split.pos >= end)
                 else:
                     splitter.set_bounds()
 
+                # Check if the node is pure.
+                is_leaf = is_leaf or splitter.criterion.is_pure()
+
                 node_id = tree._add_node(parent, is_left, is_leaf, split.feature,
                                          split.threshold, impurity, n_node_samples,
                                          weighted_n_node_samples,
@@ -374,6 +418,10 @@
         def __get__(self):
             return self._get_node_ndarray()["variance"][:self.node_count]
 
+    property root:
+        def __get__(self):
+            return self.root
+
     def __cinit__(self, int n_features, np.ndarray[SIZE_t, ndim=1] n_classes,
                   int n_outputs):
         """Constructor."""
@@ -397,6 +445,9 @@
         self.value = NULL
         self.nodes = NULL
 
+        # Used only in partial_fit
+        self.root = 0
+
     def __dealloc__(self):
         """Destructor."""
         # Free all inner structures
@@ -418,12 +469,14 @@
         d["node_count"] = self.node_count
         d["nodes"] = self._get_node_ndarray()
         d["values"] = self._get_value_ndarray()
+        d["root"] = self.root
         return d
 
     def __setstate__(self, d):
         """Setstate re-implementation, for unpickling."""
         self.max_depth = d["max_depth"]
         self.node_count = d["node_count"]
+        self.root = d["root"]
 
         if 'nodes' not in d:
             raise ValueError('You have loaded Tree version which '
@@ -495,6 +548,283 @@
         self.capacity = capacity
         return 0
 
+    cdef void update_node_extent(self, SIZE_t node_ind, SIZE_t child_ind,
+                                 DTYPE_t* X_ptr, SIZE_t X_start, SIZE_t X_f_stride):
+        """
+        Updates the lower_bound and given_bound of the node at node_ind.
+        The lower bound is the minimum of the lower bound at child_ind
+        and the value of X_ptr.
+        """
+        cdef SIZE_t f_ind
+        cdef DTYPE_t x_val
+        cdef Node* node = &self.nodes[node_ind]
+        cdef Node* prev_node = &self.nodes[child_ind]
+
+        for f_ind in range(self.n_features):
+            x_val = X_ptr[X_start + X_f_stride*f_ind]
+            node.lower_bounds[f_ind] = fmin(x_val, prev_node.lower_bounds[f_ind])
+            node.upper_bounds[f_ind] = fmax(x_val, prev_node.upper_bounds[f_ind])
+
+    cdef void _update_node_info(self, SIZE_t parent_id, SIZE_t child_id,
+                                DOUBLE_t* y_ptr, SIZE_t y_start):
+        """
+        Update the value at node parent_ind given the values at node
+        child_id and y_ptr[y_start]
+        """
+        cdef SIZE_t is_regression = self.n_classes[0] == 1
+        cdef SIZE_t child_ptr = child_id*self.value_stride
+        cdef SIZE_t parent_ptr = parent_id*self.value_stride
+        cdef SIZE_t c_ind
+        cdef Node* child = &self.nodes[child_id]
+        cdef Node* parent = &self.nodes[parent_id]
+        cdef DTYPE_t new_sum
+        cdef DTYPE_t old_mean
+        cdef DTYPE_t new_mean
+        cdef DTYPE_t ss
+
+        if is_regression:
+            # Update mean
+            old_mean = self.value[child_ptr]
+            new_sum = old_mean*child.n_node_samples + y_ptr[y_start]
+            new_mean = new_sum / (child.n_node_samples + 1)
+            self.value[parent_ptr] = new_mean
+
+            # Update variance
+            ss = (child.variance + old_mean**2)*child.n_node_samples
+            parent.variance = (
+                (ss + y_ptr[y_start]**2) / (child.n_node_samples + 1) -
+                new_mean**2)
+        else:
+            # Update class counts.
+            self.value[parent_ptr + <SIZE_t> y_ptr[y_start]] += 1.0
+
+            if child_id != parent_id:
+                for c_ind in range(self.n_classes[0]):
+                    self.value[parent_ptr + c_ind] += self.value[child_ptr + c_ind]
+
+    cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,
+                                  SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+                                  DTYPE_t tau, SIZE_t n_node_samples,
+                                  DOUBLE_t weighted_n_node_samples, DOUBLE_t impurity,
+                                  DOUBLE_t variance, SIZE_t X_start,
+                                  SIZE_t X_f_stride, DTYPE_t* X_ptr,
+                                  DOUBLE_t* y_ptr, SIZE_t child_ind=-1,
+                                  SIZE_t y_start=0):
+        """
+        Sets the left_child, right_child, feature, threshold, time of split,
+        number of samples, impurity, variance of the node at node_ind.
+
+        If child_ind is not provided, the node at node_ind is assumed to be a
+        leaf node with X_ptr[X_start: X_start+n_features*X_f_stride]
+
+        If child ind is provided, the node at node_ind is assumed to be
+        the parent of the node at child_ind and the leaf node with
+        X_ptr[X_start: X_start + n_features*X_f_stride]
+        """
+        cdef Node* node = &self.nodes[node_ind]
+        cdef Node* prev_node
+        cdef DTYPE_t x_val
+        cdef SIZE_t f_ind
+        cdef SIZE_t val_ptr = node_ind*self.value_stride
+
+        node.left_child = left_child
+        node.right_child = right_child
+        node.feature = feature
+        node.threshold = threshold
+        node.tau = tau
+        node.n_node_samples = n_node_samples
+        node.weighted_n_node_samples = weighted_n_node_samples
+        node.impurity = impurity
+        node.variance = variance
+        node.lower_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+        node.upper_bounds = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+
+        # Set bounds.
+        # If child_ind is -1, its a leaf, else update the extent of each node.
+        if child_ind == -1:
+            for f_ind in range(self.n_features):
+                x_val = X_ptr[X_start + X_f_stride*f_ind]
+                node.lower_bounds[f_ind] = node.upper_bounds[f_ind] = x_val
+        else:
+            self.update_node_extent(
+                node_ind, child_ind, X_ptr, X_start, X_f_stride)
+
+        # Set value at node_ind
+        if child_ind == -1:
+            # Regression
+            if self.n_classes[0] == 1:
+                self.value[val_ptr] = y_ptr[y_start]
+            else:
+                self.value[val_ptr + <SIZE_t> y_ptr[y_start]] = 1.0
+
+    cdef void _init(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_f_stride):
+        """
+        Parameters
+        ----------
+        X_ptr: DTYPE_t*, pointer to X
+
+        y_ptr: DTYPE_t* pointer to y
+
+        X_f_stride: SIZE_t, stride to reach consecutive feature.
+        """
+        self.set_node_attributes(0, _TREE_LEAF, _TREE_LEAF, _TREE_UNDEFINED,
+                                 _TREE_UNDEFINED, INFINITY, 1, 1, 0.0, 0.0,
+                                 0, X_f_stride, X_ptr, y_ptr)
+        self.node_count += 1
+
+    cdef void extend(self, DTYPE_t* X_ptr, DOUBLE_t* y_ptr, SIZE_t X_start,
+                     SIZE_t X_f_stride, SIZE_t y_start, UINT32_t random_state,
+                     SIZE_t min_samples_split):
+        """
+        Extends the tree given a new sample.
+        (X_ptr[X_start: X_start+ n_features*X_f_stride], y_ptr[y_start])
+
+        References
+        ----------
+        1. Algorithm 5.5, Decision Trees and Forests: A Probabilistic Perspective,
+           Balaji Lakshminarayanan
+           http://www.gatsby.ucl.ac.uk/~balaji/balaji-phd-thesis.pdf
+        """
+        # Traverse the tree
+        cdef SIZE_t curr_id = self.root
+        cdef SIZE_t parent_id = -1
+        cdef SIZE_t left_id
+        cdef SIZE_t right_id
+        cdef SIZE_t new_child_id
+        cdef SIZE_t new_parent_id
+        cdef SIZE_t f_ind
+        cdef SIZE_t feature
+        cdef SIZE_t delta
+
+        cdef Node* curr_node
+        cdef Node* parent_node
+        cdef Node* node
+
+        cdef DTYPE_t x
+        cdef DTYPE_t x_val
+        cdef DTYPE_t new_rate
+        cdef DTYPE_t* e_l = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+        cdef DTYPE_t* e_u = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+        cdef DTYPE_t* extent = <DTYPE_t*> malloc(self.n_features * sizeof(DTYPE_t))
+        cdef DTYPE_t E
+        cdef DTYPE_t tau_parent = 0.0
+        cdef DTYPE_t threshold
+        cdef DTYPE_t l_b
+        cdef DTYPE_t u_b
+        cdef int c_ind
+        cdef SIZE_t rc
+
+        while True:
+            curr_node = &self.nodes[curr_id]
+
+            # Step 1: Calculate e^l, e^u and rate.
+            # If x belongs to the bounding box, this is zero.
+            new_rate = 0.0
+            for f_ind in range(self.n_features):
+                x = X_ptr[X_start + f_ind*X_f_stride]
+                e_l[f_ind] = fmax(curr_node.lower_bounds[f_ind] - x, 0)
+                e_u[f_ind] = fmax(x - curr_node.upper_bounds[f_ind], 0)
+                extent[f_ind] = e_l[f_ind] + e_u[f_ind]
+                new_rate += extent[f_ind]
+
+            # Step 2: Sample E from an exponential distribution.
+            E = rand_exponential(new_rate, &random_state)
+
+            # Step 3: Induce split.
+            # 2 new nodes are created.
+            # 1. A child node with the new sample.
+            # 2. A parent node with the new child node and the node at
+            # curr_id as children.
+            if (tau_parent + E < curr_node.tau and
+                curr_node.n_node_samples + 1 >= min_samples_split):
+
+                new_child_id = self.node_count
+                new_parent_id = self.node_count + 1
+
+                # Step 4: Sample delta from a multinomial.
+                delta = rand_multinomial(extent, self.n_features, &random_state)
+
+                # Step 5: Sample xi uniformly between bounds.
+                x_val = X_ptr[X_start + delta * X_f_stride]
+                l_b = curr_node.lower_bounds[delta]
+                u_b = curr_node.upper_bounds[delta]
+                if x_val > u_b:
+                    xi = rand_uniform(u_b, x_val, &random_state)
+                else:
+                    xi = rand_uniform(x_val, l_b, &random_state)
+
+                # Step 7: Split criteria.
+                if x_val < xi:
+                    left_child = new_child_id
+                    right_child = curr_id
+                else:
+                    left_child = curr_id
+                    right_child = new_child_id
+
+                # Allocate memory for the new parent and child.
+                # Store leaf in nodes[self.node_count]
+                # Store parent in nodes[self.node_count + 1]
+                rc = self._resize_c(self.node_count + 2)
+                if rc == -1:
+                    raise MemoryError()
+
+                # xxx: We need to get the pointer to curr_id again
+                # because of the resizing above.
+                curr_node = &self.nodes[curr_id]
+
+                # Step 7-8: Create new leaf node j'' and update value.
+                self.set_node_attributes(
+                    new_child_id, _TREE_LEAF, _TREE_LEAF, _TREE_UNDEFINED,
+                    _TREE_UNDEFINED, INFINITY, 1, 1, 0.0, 0.0, X_start,
+                    X_f_stride, X_ptr, y_ptr, -1, y_start)
+
+                # Step 6 : Create new parent node j'
+                self.set_node_attributes(
+                    new_parent_id, left_child, right_child, delta, xi,
+                    tau_parent + E, curr_node.n_node_samples + 1,
+                    curr_node.weighted_n_node_samples + 1, 0.0, 0.0, X_start,
+                    X_f_stride, X_ptr, y_ptr, curr_id)
+                self._update_node_info(new_parent_id, curr_id, y_ptr, y_start)
+
+                # New root if curr_id is root.
+                if curr_id == self.root:
+                    self.root = new_parent_id
+                else:
+                    # Link to the newly created node j' (new_parent_id)
+                    # as the child of the parent of node j (curr_id)
+                    parent_node = &self.nodes[parent_id]
+                    if parent_node.left_child == curr_id:
+                        parent_node.left_child = new_parent_id
+                    else:
+                        parent_node.right_child = new_parent_id
+                self.max_depth += 1
+                self.node_count += 2
+                break
+
+            # Absorb new sample into curr_id and Traverse further down the
+            # tree.
+            else:
+                # Step 10: Update extent, value at node curr_id and increment
+                # the number of samples.
+                self.update_node_extent(curr_id, curr_id, X_ptr, X_start, X_f_stride)
+                self._update_node_info(curr_id, curr_id, y_ptr, y_start)
+                curr_node.n_node_samples += 1
+                curr_node.weighted_n_node_samples += 1
+
+                if curr_node.left_child == -1:
+                    break
+
+                # Step 12 - 13: Recurse down the tree.
+                parent_id = curr_id
+                if X_ptr[X_start + curr_node.feature*X_f_stride] < curr_node.threshold:
+                    curr_id = curr_node.left_child
+                else:
+                    curr_id = curr_node.right_child
+                tau_parent = curr_node.tau
+        free(e_l)
+        free(e_u)
+        free(extent)
+
     cdef SIZE_t _add_node(self, SIZE_t parent, bint is_left, bint is_leaf,
                           SIZE_t feature, double threshold, double impurity,
                           SIZE_t n_node_samples,
@@ -552,10 +882,7 @@
 
     cpdef np.ndarray apply(self, object X):
         """Finds the terminal region (=leaf node) for each sample in X."""
-        if issparse(X):
-            return self._apply_sparse_csr(X)
-        else:
-            return self._apply_dense(X)
+        return self._apply_dense(X)
 
     cpdef tuple predict(self, object X, bint return_std=False, bint is_regression=True):
         """Predicts the regressor and standard deviation for all samples."""
@@ -611,7 +938,7 @@
                 # Step 3
                 parent_tau = 0.0
                 p_nsy = 1.0
-                node_id = 0
+                node_id = self.root
 
                 while True:
                     node = &self.nodes[node_id]
@@ -699,104 +1026,33 @@
         # Initialize auxiliary data-structure
         cdef Node* node = NULL
         cdef SIZE_t i = 0
+        cdef SIZE_t curr_node_id
 
         with nogil:
             for i in range(n_samples):
-                node = self.nodes
-                # While node not a leaf
-                while node.left_child != _TREE_LEAF:
-                    # ... and node.right_child != _TREE_LEAF:
-                    if X_ptr[X_sample_stride * i +
-                             X_fx_stride * node.feature] <= node.threshold:
-                        node = &self.nodes[node.left_child]
-                    else:
-                        node = &self.nodes[node.right_child]
+                curr_node_id = self.root
 
-                out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset
-
-        return out
-
-    cdef inline np.ndarray _apply_sparse_csr(self, object X):
-        """Finds the terminal region (=leaf node) for each sample in sparse X.
-        """
-        # Check input
-        if not isinstance(X, csr_matrix):
-            raise ValueError("X should be in csr_matrix format, got %s"
-                             % type(X))
-
-        if X.dtype != DTYPE:
-            raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
-
-        # Extract input
-        cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data
-        cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices
-        cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
-
-        cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
-        cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data
-        cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
-
-        cdef SIZE_t n_samples = X.shape[0]
-        cdef SIZE_t n_features = X.shape[1]
-
-        # Initialize output
-        cdef np.ndarray[SIZE_t, ndim=1] out = np.zeros((n_samples,),
-                                                       dtype=np.intp)
-        cdef SIZE_t* out_ptr = <SIZE_t*> out.data
-
-        # Initialize auxiliary data-structure
-        cdef DTYPE_t feature_value = 0.
-        cdef Node* node = NULL
-        cdef DTYPE_t* X_sample = NULL
-        cdef SIZE_t i = 0
-        cdef INT32_t k = 0
-
-        # feature_to_sample as a data structure records the last seen sample
-        # for each feature; functionally, it is an efficient way to identify
-        # which features are nonzero in the present sample.
-        cdef SIZE_t* feature_to_sample = NULL
-
-        safe_realloc(&X_sample, n_features)
-        safe_realloc(&feature_to_sample, n_features)
+                while True:
 
-        with nogil:
-            memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
+                    node = &self.nodes[curr_node_id]
 
-            for i in range(n_samples):
-                node = self.nodes
-
-                for k in range(X_indptr[i], X_indptr[i + 1]):
-                    feature_to_sample[X_indices[k]] = i
-                    X_sample[X_indices[k]] = X_data[k]
+                    if X_ptr[X_sample_stride * i +
+                             X_fx_stride * node.feature] <= node.threshold:
 
-                # While node not a leaf
-                while node.left_child != _TREE_LEAF:
-                    # ... and node.right_child != _TREE_LEAF:
-                    if feature_to_sample[node.feature] == i:
-                        feature_value = X_sample[node.feature]
+                        if node.left_child == _TREE_LEAF:
+                            break
+                        curr_node_id = node.left_child
 
                     else:
-                        feature_value = 0.
-
-                    if feature_value <= node.threshold:
-                        node = &self.nodes[node.left_child]
-                    else:
-                        node = &self.nodes[node.right_child]
-
-                out_ptr[i] = <SIZE_t>(node - self.nodes)  # node offset
-
-            # Free auxiliary arrays
-            free(X_sample)
-            free(feature_to_sample)
-
+                        if node.right_child == _TREE_LEAF:
+                            break
+                        curr_node_id = node.right_child
+                out_ptr[i] = curr_node_id
         return out
 
     cpdef object decision_path(self, object X):
         """Finds the decision path (=node) for each sample in X."""
-        if issparse(X):
-            return self._decision_path_sparse_csr(X)
-        else:
-            return self._decision_path_dense(X)
+        return self._decision_path_dense(X)
 
     cpdef object weighted_decision_path(self, object X):
         """Returns the weight at each node for each sample in X."""
@@ -836,20 +1092,21 @@
         cdef DTYPE_t parent_tau
         cdef DTYPE_t delta
         cdef DTYPE_t eta
-        cdef SIZE_t f_ind
         cdef DTYPE_t X_val
         cdef DTYPE_t p_s
         cdef DTYPE_t p_nsy
+        cdef SIZE_t f_ind
+        cdef SIZE_t curr_node_id
 
         with nogil:
             for i in range(n_samples):
                 p_nsy = 1.0
-                node = self.nodes
                 parent_tau = 0.0
-
                 indptr_ptr[i + 1] = indptr_ptr[i]
 
-                # Add all external nodes
+                curr_node_id = self.root
+                node = &self.nodes[curr_node_id]
+
                 while node.left_child != _TREE_LEAF:
 
                     delta = node.tau - parent_tau
@@ -863,20 +1120,20 @@
                     p_s = 1 - exp(-delta*eta)
 
                     if p_s > 0:
-                        # ... and node.right_child != _TREE_LEAF:
-                        indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
+                        indices_ptr[indptr_ptr[i + 1]] = curr_node_id
                         values_ptr[indptr_ptr[i + 1]] = p_s * p_nsy
                         indptr_ptr[i + 1] += 1
 
+                    p_nsy *= (1 - p_s)
                     if X_ptr[X_sample_stride * i +
                              X_fx_stride * node.feature] <= node.threshold:
-                        node = &self.nodes[node.left_child]
+                        curr_node_id = node.left_child
                     else:
-                        node = &self.nodes[node.right_child]
-                    p_nsy *= (1 - p_s)
+                        curr_node_id = node.right_child
+                    node = &self.nodes[curr_node_id]
 
                 # Add the leave node
-                indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
+                indices_ptr[indptr_ptr[i + 1]] = curr_node_id
                 values_ptr[indptr_ptr[i + 1]] = p_nsy
                 indptr_ptr[i + 1] += 1
 
@@ -887,8 +1144,6 @@
 
         return out
 
-
-
     cdef inline object _decision_path_dense(self, object X):
         """Finds the decision path (=node) for each sample in X."""
 
@@ -919,119 +1174,26 @@
         # Initialize auxiliary data-structure
         cdef Node* node = NULL
         cdef SIZE_t i = 0
+        cdef SIZE_t curr_node_id
 
         with nogil:
             for i in range(n_samples):
-                node = self.nodes
+                curr_node_id = self.root
                 indptr_ptr[i + 1] = indptr_ptr[i]
 
                 # Add all external nodes
-                while node.left_child != _TREE_LEAF:
+                while curr_node_id != _TREE_LEAF:
+                    node = &self.nodes[curr_node_id]
+
                     # ... and node.right_child != _TREE_LEAF:
                     indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
                     indptr_ptr[i + 1] += 1
 
                     if X_ptr[X_sample_stride * i +
                              X_fx_stride * node.feature] <= node.threshold:
-                        node = &self.nodes[node.left_child]
-                    else:
-                        node = &self.nodes[node.right_child]
-
-                # Add the leave node
-                indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
-                indptr_ptr[i + 1] += 1
-
-        indices = indices[:indptr[n_samples]]
-        cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
-                                               dtype=np.intp)
-        out = csr_matrix((data, indices, indptr),
-                         shape=(n_samples, self.node_count))
-
-        return out
-
-    cdef inline object _decision_path_sparse_csr(self, object X):
-        """Finds the decision path (=node) for each sample in X."""
-
-        # Check input
-        if not isinstance(X, csr_matrix):
-            raise ValueError("X should be in csr_matrix format, got %s"
-                             % type(X))
-
-        if X.dtype != DTYPE:
-            raise ValueError("X.dtype should be np.float32, got %s" % X.dtype)
-
-        # Extract input
-        cdef np.ndarray[ndim=1, dtype=DTYPE_t] X_data_ndarray = X.data
-        cdef np.ndarray[ndim=1, dtype=INT32_t] X_indices_ndarray  = X.indices
-        cdef np.ndarray[ndim=1, dtype=INT32_t] X_indptr_ndarray  = X.indptr
-
-        cdef DTYPE_t* X_data = <DTYPE_t*>X_data_ndarray.data
-        cdef INT32_t* X_indices = <INT32_t*>X_indices_ndarray.data
-        cdef INT32_t* X_indptr = <INT32_t*>X_indptr_ndarray.data
-
-        cdef SIZE_t n_samples = X.shape[0]
-        cdef SIZE_t n_features = X.shape[1]
-
-        # Initialize output
-        cdef np.ndarray[SIZE_t] indptr = np.zeros(n_samples + 1, dtype=np.intp)
-        cdef SIZE_t* indptr_ptr = <SIZE_t*> indptr.data
-
-        cdef np.ndarray[SIZE_t] indices = np.zeros(n_samples *
-                                                   (1 + self.max_depth),
-                                                   dtype=np.intp)
-        cdef SIZE_t* indices_ptr = <SIZE_t*> indices.data
-
-        # Initialize auxiliary data-structure
-        cdef DTYPE_t feature_value = 0.
-        cdef Node* node = NULL
-        cdef DTYPE_t* X_sample = NULL
-        cdef SIZE_t i = 0
-        cdef INT32_t k = 0
-
-        # feature_to_sample as a data structure records the last seen sample
-        # for each feature; functionally, it is an efficient way to identify
-        # which features are nonzero in the present sample.
-        cdef SIZE_t* feature_to_sample = NULL
-
-        safe_realloc(&X_sample, n_features)
-        safe_realloc(&feature_to_sample, n_features)
-
-        with nogil:
-            memset(feature_to_sample, -1, n_features * sizeof(SIZE_t))
-
-            for i in range(n_samples):
-                node = self.nodes
-                indptr_ptr[i + 1] = indptr_ptr[i]
-
-                for k in range(X_indptr[i], X_indptr[i + 1]):
-                    feature_to_sample[X_indices[k]] = i
-                    X_sample[X_indices[k]] = X_data[k]
-
-                # While node not a leaf
-                while node.left_child != _TREE_LEAF:
-                    # ... and node.right_child != _TREE_LEAF:
-
-                    indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
-                    indptr_ptr[i + 1] += 1
-
-                    if feature_to_sample[node.feature] == i:
-                        feature_value = X_sample[node.feature]
-
+                        curr_node_id = node.left_child
                     else:
-                        feature_value = 0.
-
-                    if feature_value <= node.threshold:
-                        node = &self.nodes[node.left_child]
-                    else:
-                        node = &self.nodes[node.right_child]
-
-                # Add the leave node
-                indices_ptr[indptr_ptr[i + 1]] = <SIZE_t>(node - self.nodes)
-                indptr_ptr[i + 1] += 1
-
-            # Free auxiliary arrays
-            free(X_sample)
-            free(feature_to_sample)
+                        curr_node_id = node.right_child
 
         indices = indices[:indptr[n_samples]]
         cdef np.ndarray[SIZE_t] data = np.ones(shape=len(indices),
diff -ruN orig/skgarden/mondrian/tree/_utils.c new/skgarden/mondrian/tree/_utils.c
--- orig/skgarden/mondrian/tree/_utils.c	2017-06-07 04:59:00.000000000 -0700
+++ new/skgarden/mondrian/tree/_utils.c	2017-12-27 11:16:29.000000000 -0800
@@ -1,20 +1,24 @@
-/* Generated by Cython 0.25.2 */
+/* Generated by Cython 0.27.3 */
 
 /* BEGIN: Cython Metadata
 {
     "distutils": {
         "depends": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/arrayobject.h",
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include/numpy/ufuncobject.h"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h"
         ],
         "extra_compile_args": [
             "-O3"
         ],
         "include_dirs": [
-            "/usr/local/lib/python3.5/dist-packages/numpy/core/include"
+            "/Users/ukaratay/miniconda3/lib/python3.6/site-packages/numpy/core/include"
         ],
         "libraries": [
             "m"
+        ],
+        "name": "skgarden.mondrian.tree._utils",
+        "sources": [
+            "skgarden/mondrian/tree/_utils.pyx"
         ]
     },
     "module_name": "skgarden.mondrian.tree._utils"
@@ -25,10 +29,11 @@
 #include "Python.h"
 #ifndef Py_PYTHON_H
     #error Python headers needed to compile C extensions, please install development version of Python.
-#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
-    #error Cython requires Python 2.6+ or Python 3.2+.
+#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
+    #error Cython requires Python 2.6+ or Python 3.3+.
 #else
-#define CYTHON_ABI "0_25_2"
+#define CYTHON_ABI "0_27_3"
+#define CYTHON_FUTURE_DIVISION 0
 #include <stddef.h>
 #ifndef offsetof
   #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
@@ -50,8 +55,9 @@
 #ifndef DL_EXPORT
   #define DL_EXPORT(t) t
 #endif
+#define __PYX_COMMA ,
 #ifndef HAVE_LONG_LONG
-  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
+  #if PY_VERSION_HEX >= 0x02070000
     #define HAVE_LONG_LONG
   #endif
 #endif
@@ -67,8 +73,14 @@
   #define CYTHON_COMPILING_IN_CPYTHON 0
   #undef CYTHON_USE_TYPE_SLOTS
   #define CYTHON_USE_TYPE_SLOTS 0
-  #undef CYTHON_USE_ASYNC_SLOTS
-  #define CYTHON_USE_ASYNC_SLOTS 0
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #if PY_VERSION_HEX < 0x03050000
+    #undef CYTHON_USE_ASYNC_SLOTS
+    #define CYTHON_USE_ASYNC_SLOTS 0
+  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
+    #define CYTHON_USE_ASYNC_SLOTS 1
+  #endif
   #undef CYTHON_USE_PYLIST_INTERNALS
   #define CYTHON_USE_PYLIST_INTERNALS 0
   #undef CYTHON_USE_UNICODE_INTERNALS
@@ -87,6 +99,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #elif defined(PYSTON_VERSION)
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 1
@@ -94,6 +110,8 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #undef CYTHON_USE_PYTYPE_LOOKUP
+  #define CYTHON_USE_PYTYPE_LOOKUP 0
   #undef CYTHON_USE_ASYNC_SLOTS
   #define CYTHON_USE_ASYNC_SLOTS 0
   #undef CYTHON_USE_PYLIST_INTERNALS
@@ -118,6 +136,10 @@
   #define CYTHON_FAST_THREAD_STATE 0
   #undef CYTHON_FAST_PYCALL
   #define CYTHON_FAST_PYCALL 0
+  #undef CYTHON_PEP489_MULTI_PHASE_INIT
+  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
+  #undef CYTHON_USE_TP_FINALIZE
+  #define CYTHON_USE_TP_FINALIZE 0
 #else
   #define CYTHON_COMPILING_IN_PYPY 0
   #define CYTHON_COMPILING_IN_PYSTON 0
@@ -125,6 +147,12 @@
   #ifndef CYTHON_USE_TYPE_SLOTS
     #define CYTHON_USE_TYPE_SLOTS 1
   #endif
+  #if PY_VERSION_HEX < 0x02070000
+    #undef CYTHON_USE_PYTYPE_LOOKUP
+    #define CYTHON_USE_PYTYPE_LOOKUP 0
+  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
+    #define CYTHON_USE_PYTYPE_LOOKUP 1
+  #endif
   #if PY_MAJOR_VERSION < 3
     #undef CYTHON_USE_ASYNC_SLOTS
     #define CYTHON_USE_ASYNC_SLOTS 0
@@ -164,6 +192,12 @@
   #ifndef CYTHON_FAST_PYCALL
     #define CYTHON_FAST_PYCALL 1
   #endif
+  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
+    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
+  #endif
+  #ifndef CYTHON_USE_TP_FINALIZE
+    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
+  #endif
 #endif
 #if !defined(CYTHON_FAST_PYCCALL)
 #define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
@@ -202,19 +236,44 @@
 #ifndef Py_TPFLAGS_HAVE_FINALIZE
   #define Py_TPFLAGS_HAVE_FINALIZE 0
 #endif
-#ifndef METH_FASTCALL
-  #define METH_FASTCALL 0x80
-  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
-                                              Py_ssize_t nargs, PyObject *kwnames);
+#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
+  #ifndef METH_FASTCALL
+     #define METH_FASTCALL 0x80
+  #endif
+  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
+  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
+                                                          Py_ssize_t nargs, PyObject *kwnames);
 #else
   #define __Pyx_PyCFunctionFast _PyCFunctionFast
+  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
 #endif
 #if CYTHON_FAST_PYCCALL
 #define __Pyx_PyFastCFunction_Check(func)\
-    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
+    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
 #else
 #define __Pyx_PyFastCFunction_Check(func) 0
 #endif
+#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#elif PY_VERSION_HEX >= 0x03060000
+  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
+#elif PY_VERSION_HEX >= 0x03000000
+  #define __Pyx_PyThreadState_Current PyThreadState_GET()
+#else
+  #define __Pyx_PyThreadState_Current _PyThreadState_Current
+#endif
+#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
+#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
+#else
+#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
+#endif
+#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
+#else
+  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
+  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
+#endif
 #if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
   #define CYTHON_PEP393_ENABLED 1
   #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
@@ -298,7 +357,6 @@
 #ifndef PySet_CheckExact
   #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
 #endif
-#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
 #define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
 #if PY_MAJOR_VERSION >= 3
   #define PyIntObject                  PyLongObject
@@ -338,20 +396,28 @@
 #else
   #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
 #endif
+#ifndef __has_attribute
+  #define __has_attribute(x) 0
+#endif
+#ifndef __has_cpp_attribute
+  #define __has_cpp_attribute(x) 0
+#endif
 #if CYTHON_USE_ASYNC_SLOTS
   #if PY_VERSION_HEX >= 0x030500B1
     #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
     #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
   #else
+    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
+  #endif
+#else
+  #define __Pyx_PyType_AsAsync(obj) NULL
+#endif
+#ifndef __Pyx_PyAsyncMethodsStruct
     typedef struct {
         unaryfunc am_await;
         unaryfunc am_aiter;
         unaryfunc am_anext;
     } __Pyx_PyAsyncMethodsStruct;
-    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
-  #endif
-#else
-  #define __Pyx_PyType_AsAsync(obj) NULL
 #endif
 #ifndef CYTHON_RESTRICT
   #if defined(__GNUC__)
@@ -392,6 +458,43 @@
 # endif
 #endif
 #define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
+#ifdef _MSC_VER
+    #ifndef _MSC_STDINT_H_
+        #if _MSC_VER < 1300
+           typedef unsigned char     uint8_t;
+           typedef unsigned int      uint32_t;
+        #else
+           typedef unsigned __int8   uint8_t;
+           typedef unsigned __int32  uint32_t;
+        #endif
+    #endif
+#else
+   #include <stdint.h>
+#endif
+#ifndef CYTHON_FALLTHROUGH
+  #if defined(__cplusplus) && __cplusplus >= 201103L
+    #if __has_cpp_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH [[fallthrough]]
+    #elif __has_cpp_attribute(clang::fallthrough)
+      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
+    #elif __has_cpp_attribute(gnu::fallthrough)
+      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
+    #endif
+  #endif
+  #ifndef CYTHON_FALLTHROUGH
+    #if __has_attribute(fallthrough)
+      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
+    #else
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+  #if defined(__clang__ ) && defined(__apple_build_version__)
+    #if __apple_build_version__ < 7000000
+      #undef  CYTHON_FALLTHROUGH
+      #define CYTHON_FALLTHROUGH
+    #endif
+  #endif
+#endif
 
 #ifndef CYTHON_INLINE
   #if defined(__clang__)
@@ -432,14 +535,6 @@
   __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
 }
 
-#if PY_MAJOR_VERSION >= 3
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
-#else
-  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
-  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
-#endif
-
 #ifndef __PYX_EXTERN_C
   #ifdef __cplusplus
     #define __PYX_EXTERN_C extern "C"
@@ -452,15 +547,15 @@
 #define __PYX_HAVE_API__skgarden__mondrian__tree___utils
 #include <string.h>
 #include <stdio.h>
-#include <stdlib.h>
 #include "numpy/arrayobject.h"
 #include "numpy/ufuncobject.h"
+#include <stdlib.h>
 #include <math.h>
 #ifdef _OPENMP
 #include <omp.h>
 #endif /* _OPENMP */
 
-#ifdef PYREX_WITHOUT_ASSERTIONS
+#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
 #define CYTHON_WITHOUT_ASSERTIONS
 #endif
 
@@ -491,8 +586,8 @@
     #define __Pyx_sst_abs(value) abs(value)
 #elif SIZEOF_LONG >= SIZEOF_SIZE_T
     #define __Pyx_sst_abs(value) labs(value)
-#elif defined (_MSC_VER) && defined (_M_X64)
-    #define __Pyx_sst_abs(value) _abs64(value)
+#elif defined (_MSC_VER)
+    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
 #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
     #define __Pyx_sst_abs(value) llabs(value)
 #elif defined (__GNUC__)
@@ -500,8 +595,8 @@
 #else
     #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
 #endif
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
 #define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
 #define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
 #define __Pyx_PyBytes_FromString        PyBytes_FromString
@@ -514,23 +609,27 @@
     #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
     #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
 #endif
-#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
-#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
+#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
+#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
 #define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
 #define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
 #define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
 #define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
 #define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
-#if PY_MAJOR_VERSION < 3
-static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
-{
+static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
     const Py_UNICODE *u_end = u;
     while (*u_end++) ;
     return (size_t)(u_end - u - 1);
 }
-#else
-#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
-#endif
 #define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
 #define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
 #define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
@@ -539,6 +638,8 @@
 #define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
 static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
+#define __Pyx_PySequence_Tuple(obj)\
+    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
 static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
 static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
 #if CYTHON_ASSUME_SAFE_MACROS
@@ -637,10 +738,12 @@
   #define likely(x)   (x)
   #define unlikely(x) (x)
 #endif /* __GNUC__ */
+static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
 
-static PyObject *__pyx_m;
+static PyObject *__pyx_m = NULL;
 static PyObject *__pyx_d;
 static PyObject *__pyx_b;
+static PyObject *__pyx_cython_runtime;
 static PyObject *__pyx_empty_tuple;
 static PyObject *__pyx_empty_bytes;
 static PyObject *__pyx_empty_unicode;
@@ -674,14 +777,27 @@
 
 static const char *__pyx_f[] = {
   "skgarden/mondrian/tree/_utils.pyx",
+  "stringsource",
   "__init__.pxd",
   "type.pxd",
   "skgarden/mondrian/tree/_criterion.pxd",
   "skgarden/mondrian/tree/_splitter.pxd",
   "skgarden/mondrian/tree/_tree.pxd",
 };
+/* ForceInitThreads.proto */
+#ifndef __PYX_FORCE_INIT_THREADS
+  #define __PYX_FORCE_INIT_THREADS 0
+#endif
+
+/* NoFastGil.proto */
+#define __Pyx_PyGILState_Ensure PyGILState_Ensure
+#define __Pyx_PyGILState_Release PyGILState_Release
+#define __Pyx_FastGIL_Remember()
+#define __Pyx_FastGIL_Forget()
+#define __Pyx_FastGilFuncInit()
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":725
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":743
  * # in Cython to enable them only on the right systems.
  * 
  * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
@@ -690,7 +806,7 @@
  */
 typedef npy_int8 __pyx_t_5numpy_int8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":726
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
  * 
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
@@ -699,7 +815,7 @@
  */
 typedef npy_int16 __pyx_t_5numpy_int16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":727
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
@@ -708,7 +824,7 @@
  */
 typedef npy_int32 __pyx_t_5numpy_int32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":728
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":746
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t
  * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
@@ -717,7 +833,7 @@
  */
 typedef npy_int64 __pyx_t_5numpy_int64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":732
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":750
  * #ctypedef npy_int128     int128_t
  * 
  * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
@@ -726,7 +842,7 @@
  */
 typedef npy_uint8 __pyx_t_5numpy_uint8_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":733
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
  * 
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
@@ -735,7 +851,7 @@
  */
 typedef npy_uint16 __pyx_t_5numpy_uint16_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":734
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":752
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
@@ -744,7 +860,7 @@
  */
 typedef npy_uint32 __pyx_t_5numpy_uint32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":735
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t
  * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
@@ -753,7 +869,7 @@
  */
 typedef npy_uint64 __pyx_t_5numpy_uint64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":739
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":757
  * #ctypedef npy_uint128    uint128_t
  * 
  * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
@@ -762,7 +878,7 @@
  */
 typedef npy_float32 __pyx_t_5numpy_float32_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":740
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
  * 
  * ctypedef npy_float32    float32_t
  * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
@@ -771,7 +887,7 @@
  */
 typedef npy_float64 __pyx_t_5numpy_float64_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":749
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
  * # The int types are mapped a bit surprising --
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
@@ -780,7 +896,7 @@
  */
 typedef npy_long __pyx_t_5numpy_int_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":750
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
  * # numpy.int corresponds to 'l' and numpy.long to 'q'
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
@@ -789,7 +905,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_long_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":751
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t
  * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
@@ -798,7 +914,7 @@
  */
 typedef npy_longlong __pyx_t_5numpy_longlong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":753
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
  * ctypedef npy_longlong   longlong_t
  * 
  * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
@@ -807,7 +923,7 @@
  */
 typedef npy_ulong __pyx_t_5numpy_uint_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":754
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":772
  * 
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
@@ -816,7 +932,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":755
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t
  * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
@@ -825,7 +941,7 @@
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":757
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
  * ctypedef npy_ulonglong  ulonglong_t
  * 
  * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
@@ -834,7 +950,7 @@
  */
 typedef npy_intp __pyx_t_5numpy_intp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":758
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
  * 
  * ctypedef npy_intp       intp_t
  * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
@@ -843,7 +959,7 @@
  */
 typedef npy_uintp __pyx_t_5numpy_uintp_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":760
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
  * ctypedef npy_uintp      uintp_t
  * 
  * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
@@ -852,7 +968,7 @@
  */
 typedef npy_double __pyx_t_5numpy_float_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":761
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
  * 
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
@@ -861,7 +977,7 @@
  */
 typedef npy_double __pyx_t_5numpy_double_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":762
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t
  * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
@@ -1081,7 +1197,7 @@
 struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
 struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":764
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
  * ctypedef npy_longdouble longdouble_t
  * 
  * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
@@ -1090,7 +1206,7 @@
  */
 typedef npy_cfloat __pyx_t_5numpy_cfloat_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":765
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
  * 
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
@@ -1099,7 +1215,7 @@
  */
 typedef npy_cdouble __pyx_t_5numpy_cdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":766
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t
  * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
@@ -1108,7 +1224,7 @@
  */
 typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":768
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":786
  * ctypedef npy_clongdouble clongdouble_t
  * 
  * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
@@ -1150,6 +1266,7 @@
 struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree__resize_c;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict;
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes;
 struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_11TreeBuilder_build;
 
 /* "_tree.pxd":25
@@ -1173,7 +1290,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t variance;
 };
 
-/* "_tree.pxd":70
+/* "_tree.pxd":71
  *                           double E) nogil except -1
  *     cdef int _resize(self, SIZE_t capacity) nogil except -1
  *     cdef int _resize_c(self, SIZE_t capacity=*) nogil except -1             # <<<<<<<<<<<<<<
@@ -1185,7 +1302,7 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t capacity;
 };
 
-/* "_tree.pxd":75
+/* "_tree.pxd":76
  *     cdef np.ndarray _get_node_ndarray(self)
  * 
  *     cpdef tuple predict(self, object X, bint return_std=*, bint is_regression=*)             # <<<<<<<<<<<<<<
@@ -1198,8 +1315,21 @@
   int is_regression;
 };
 
-/* "_tree.pxd":106
- *     cdef SIZE_t max_depth           # Maximal tree depth
+/* "_tree.pxd":88
+ *                      SIZE_t X_f_stride, SIZE_t y_stride, UINT32_t random_state,
+ *                      SIZE_t min_samples_split)
+ *     cdef void set_node_attributes(self, SIZE_t node_ind, SIZE_t left_child,             # <<<<<<<<<<<<<<
+ *                                   SIZE_t right_child, SIZE_t feature, DOUBLE_t threshold,
+ *                                   DTYPE_t tau, SIZE_t n_node_samples,
+ */
+struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes {
+  int __pyx_n;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t child_ind;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t y_start;
+};
+
+/* "_tree.pxd":120
+ *     cdef object random_state
  * 
  *     cpdef build(self, Tree tree, object X, np.ndarray y,             # <<<<<<<<<<<<<<
  *                 np.ndarray sample_weight=*,
@@ -1223,7 +1353,7 @@
   __pyx_e_8skgarden_8mondrian_4tree_6_utils_RAND_R_MAX = 0x7FFFFFFF
 };
 
-/* "skgarden/mondrian/tree/_utils.pxd":65
+/* "skgarden/mondrian/tree/_utils.pxd":69
  * 
  * # A record on the stack for depth-first tree growing
  * cdef struct StackRecord:             # <<<<<<<<<<<<<<
@@ -1322,10 +1452,11 @@
   struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node *nodes;
   double *value;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t value_stride;
+  __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t root;
 };
 
 
-/* "_tree.pxd":91
+/* "_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1340,10 +1471,11 @@
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t min_samples_leaf;
   double min_weight_leaf;
   __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t max_depth;
+  PyObject *random_state;
 };
 
 
-/* "skgarden/mondrian/tree/_utils.pxd":74
+/* "skgarden/mondrian/tree/_utils.pxd":78
  *     SIZE_t n_constant_features
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1378,6 +1510,7 @@
   void (*node_value)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double *);
   double (*impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *, double);
   double (*proxy_impurity_improvement)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
+  int (*is_pure)(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion *);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion *__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion;
 
@@ -1418,16 +1551,19 @@
   PyObject *(*predict)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_predict *__pyx_optional_args);
   PyArrayObject *(*apply)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyArrayObject *(*_apply_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyArrayObject *(*_apply_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
   PyObject *(*_decision_path_dense)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
-  PyObject *(*_decision_path_sparse_csr)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *);
   PyObject *(*weighted_decision_path)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, PyObject *, int __pyx_skip_dispatch);
+  void (*_init)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*extend)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_UINT32_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*set_node_attributes)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, struct __pyx_opt_args_8skgarden_8mondrian_4tree_5_tree_4Tree_set_node_attributes *__pyx_optional_args);
+  void (*update_node_extent)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
+  void (*_update_node_info)(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_5_tree_DOUBLE_t *, __pyx_t_8skgarden_8mondrian_4tree_5_tree_SIZE_t);
 };
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree;
 
 
-/* "_tree.pxd":91
+/* "_tree.pxd":104
  * # =============================================================================
  * 
  * cdef class TreeBuilder:             # <<<<<<<<<<<<<<
@@ -1442,7 +1578,7 @@
 static struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder *__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder;
 
 
-/* "skgarden/mondrian/tree/_utils.pyx":93
+/* "skgarden/mondrian/tree/_utils.pyx":119
  * # =============================================================================
  * 
  * cdef class Stack:             # <<<<<<<<<<<<<<
@@ -1540,11 +1676,6 @@
 /* GetBuiltinName.proto */
 static PyObject *__Pyx_GetBuiltinName(PyObject *name);
 
-/* ForceInitThreads.proto */
-#ifndef __PYX_FORCE_INIT_THREADS
-  #define __PYX_FORCE_INIT_THREADS 0
-#endif
-
 /* PyObjectCall.proto */
 #if CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
@@ -1555,23 +1686,35 @@
 /* PyThreadStateGet.proto */
 #if CYTHON_FAST_THREAD_STATE
 #define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
-#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
+#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
+#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
 #else
 #define __Pyx_PyThreadState_declare
 #define __Pyx_PyThreadState_assign
+#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
 #endif
 
 /* PyErrFetchRestore.proto */
 #if CYTHON_FAST_THREAD_STATE
+#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
 static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
 static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
+#else
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
+#endif
 #else
+#define __Pyx_PyErr_Clear() PyErr_Clear()
+#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
 #define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
+#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
+#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
 #define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
 #define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
 #endif
@@ -1687,12 +1830,22 @@
 /* SetVTable.proto */
 static int __Pyx_SetVtable(PyObject *dict, void *vtable);
 
+/* SetupReduce.proto */
+static int __Pyx_setup_reduce(PyObject* type_obj);
+
 /* GetVTable.proto */
 static void* __Pyx_GetVtable(PyObject *dict);
 
 /* Import.proto */
 static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);
 
+/* CLineInTraceback.proto */
+#ifdef CYTHON_CLINE_IN_TRACEBACK
+#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
+#else
+static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
+#endif
+
 /* CodeObjectCache.proto */
 typedef struct {
     PyCodeObject* code_object;
@@ -1712,6 +1865,9 @@
 static void __Pyx_AddTraceback(const char *funcname, int c_line,
                                int py_line, const char *filename);
 
+/* CIntToPy.proto */
+static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);
+
 /* None.proto */
 static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void); /* proto */
 
@@ -1831,6 +1987,18 @@
 /* CIntFromPy.proto */
 static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);
 
+/* FastTypeChecks.proto */
+#if CYTHON_COMPILING_IN_CPYTHON
+#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
+#else
+#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
+#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
+#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
+#endif
+
 /* CheckBinaryVersion.proto */
 static int __Pyx_check_binary_version(void);
 
@@ -1876,7 +2044,7 @@
 
 /* Module declarations from 'cpython.ref' */
 
-/* Module declarations from 'libc.stdlib' */
+/* Module declarations from 'cpython.mem' */
 
 /* Module declarations from 'numpy' */
 
@@ -1899,10 +2067,13 @@
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = 0;
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = 0;
 
+/* Module declarations from 'libc.stdlib' */
+
 /* Module declarations from 'libc.math' */
 
 /* Module declarations from 'skgarden.mondrian.tree._utils' */
 static PyTypeObject *__pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = 0;
+static CYTHON_INLINE double __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(double, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
 static CYTHON_INLINE __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t __pyx_f_8skgarden_8mondrian_4tree_6_utils_our_rand_r(__pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *); /*proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t); /*proto*/
 static __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t); /*proto*/
@@ -1913,40 +2084,52 @@
 static struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node **__pyx_fuse_6__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc(struct __pyx_t_8skgarden_8mondrian_4tree_5_tree_Node ***, size_t); /*proto*/
 static struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *__pyx_fuse_7__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc(struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord **, size_t); /*proto*/
 #define __Pyx_MODULE_NAME "skgarden.mondrian.tree._utils"
+extern int __pyx_module_is_main_skgarden__mondrian__tree___utils;
 int __pyx_module_is_main_skgarden__mondrian__tree___utils = 0;
 
 /* Implementation of 'skgarden.mondrian.tree._utils' */
 static PyObject *__pyx_builtin_MemoryError;
-static PyObject *__pyx_builtin_ValueError;
 static PyObject *__pyx_builtin_range;
+static PyObject *__pyx_builtin_TypeError;
+static PyObject *__pyx_builtin_ValueError;
 static PyObject *__pyx_builtin_RuntimeError;
 static PyObject *__pyx_builtin_ImportError;
 static const char __pyx_k_p[] = "p";
 static const char __pyx_k_np[] = "np";
 static const char __pyx_k_copy[] = "copy";
 static const char __pyx_k_main[] = "__main__";
+static const char __pyx_k_name[] = "__name__";
 static const char __pyx_k_test[] = "__test__";
 static const char __pyx_k_numpy[] = "numpy";
 static const char __pyx_k_range[] = "range";
 static const char __pyx_k_import[] = "__import__";
+static const char __pyx_k_reduce[] = "__reduce__";
 static const char __pyx_k_capacity[] = "capacity";
+static const char __pyx_k_getstate[] = "__getstate__";
+static const char __pyx_k_setstate[] = "__setstate__";
+static const char __pyx_k_TypeError[] = "TypeError";
+static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
 static const char __pyx_k_ValueError[] = "ValueError";
 static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
 static const char __pyx_k_ImportError[] = "ImportError";
 static const char __pyx_k_MemoryError[] = "MemoryError";
 static const char __pyx_k_RuntimeError[] = "RuntimeError";
 static const char __pyx_k_realloc_test[] = "_realloc_test";
+static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
+static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
+static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
 static const char __pyx_k_could_not_allocate_d_bytes[] = "could not allocate %d bytes";
 static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
 static const char __pyx_k_could_not_allocate_d_d_bytes[] = "could not allocate (%d * %d) bytes";
 static const char __pyx_k_skgarden_mondrian_tree__utils[] = "skgarden.mondrian.tree._utils";
-static const char __pyx_k_home_manoj_scikit_garden_skgard[] = "/home/manoj/scikit-garden/skgarden/mondrian/tree/_utils.pyx";
 static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
 static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
 static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
 static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
 static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
+static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
 static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
+static const char __pyx_k_skgarden_mondrian_tree__utils_py[] = "skgarden/mondrian/tree/_utils.pyx";
 static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
 static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
 static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
@@ -1954,16 +2137,20 @@
 static PyObject *__pyx_n_s_MemoryError;
 static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
 static PyObject *__pyx_n_s_RuntimeError;
+static PyObject *__pyx_n_s_TypeError;
 static PyObject *__pyx_n_s_ValueError;
 static PyObject *__pyx_n_s_capacity;
+static PyObject *__pyx_n_s_cline_in_traceback;
 static PyObject *__pyx_n_s_copy;
 static PyObject *__pyx_kp_s_could_not_allocate_d_bytes;
 static PyObject *__pyx_kp_s_could_not_allocate_d_d_bytes;
-static PyObject *__pyx_kp_s_home_manoj_scikit_garden_skgard;
+static PyObject *__pyx_n_s_getstate;
 static PyObject *__pyx_n_s_import;
 static PyObject *__pyx_n_s_main;
+static PyObject *__pyx_n_s_name;
 static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
 static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
+static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
 static PyObject *__pyx_n_s_np;
 static PyObject *__pyx_n_s_numpy;
 static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
@@ -1972,12 +2159,20 @@
 static PyObject *__pyx_n_s_pyx_vtable;
 static PyObject *__pyx_n_s_range;
 static PyObject *__pyx_n_s_realloc_test;
+static PyObject *__pyx_n_s_reduce;
+static PyObject *__pyx_n_s_reduce_cython;
+static PyObject *__pyx_n_s_reduce_ex;
+static PyObject *__pyx_n_s_setstate;
+static PyObject *__pyx_n_s_setstate_cython;
 static PyObject *__pyx_n_s_skgarden_mondrian_tree__utils;
+static PyObject *__pyx_kp_s_skgarden_mondrian_tree__utils_py;
 static PyObject *__pyx_n_s_test;
 static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
 static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_6_utils__realloc_test(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
 static int __pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack___cinit__(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_v_capacity); /* proto */
 static void __pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_2__dealloc__(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self); /* proto */
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
 static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
 static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
 static PyObject *__pyx_tp_new_8skgarden_8mondrian_4tree_6_utils_Stack(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
@@ -1991,7 +2186,9 @@
 static PyObject *__pyx_tuple__8;
 static PyObject *__pyx_tuple__9;
 static PyObject *__pyx_tuple__10;
-static PyObject *__pyx_codeobj__11;
+static PyObject *__pyx_tuple__11;
+static PyObject *__pyx_tuple__12;
+static PyObject *__pyx_codeobj__13;
 
 /* "skgarden/mondrian/tree/_utils.pyx":27
  * # =============================================================================
@@ -2044,7 +2241,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2101,7 +2298,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2145,7 +2342,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2184,7 +2381,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2230,13 +2427,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -2261,7 +2458,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -2309,7 +2506,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2366,7 +2563,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2410,7 +2607,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2449,7 +2646,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2495,13 +2692,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -2526,7 +2723,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -2574,7 +2771,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2631,7 +2828,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2675,7 +2872,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2714,7 +2911,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2760,13 +2957,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -2791,7 +2988,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -2839,7 +3036,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2896,7 +3093,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -2940,7 +3137,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -2979,7 +3176,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3025,13 +3222,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -3056,7 +3253,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -3104,7 +3301,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3161,7 +3358,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3205,7 +3402,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3244,7 +3441,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3290,13 +3487,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -3321,7 +3518,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -3369,7 +3566,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3426,7 +3623,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3470,7 +3667,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3509,7 +3706,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3555,13 +3752,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -3586,7 +3783,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -3634,7 +3831,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3691,7 +3888,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3735,7 +3932,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3774,7 +3971,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -3820,13 +4017,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -3851,7 +4048,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -3899,7 +4096,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -3956,7 +4153,7 @@
           /*finally:*/ {
             __pyx_L8_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -4000,7 +4197,7 @@
  */
       {
           #ifdef WITH_THREAD
-          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
           #endif
           /*try:*/ {
 
@@ -4039,7 +4236,7 @@
           /*finally:*/ {
             __pyx_L12_error: {
               #ifdef WITH_THREAD
-              PyGILState_Release(__pyx_gilstate_save);
+              __Pyx_PyGILState_Release(__pyx_gilstate_save);
               #endif
               goto __pyx_L4_error;
             }
@@ -4085,13 +4282,13 @@
   /*finally:*/ {
     __pyx_L3_return: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L0;
     }
     __pyx_L4_error: {
       #ifdef WITH_THREAD
-      __pyx_gilstate_save = PyGILState_Ensure();
+      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
       #endif
       goto __pyx_L1_error;
     }
@@ -4116,7 +4313,7 @@
   __pyx_r = 0;
   __pyx_L0:;
   #ifdef WITH_THREAD
-  PyGILState_Release(__pyx_gilstate_save);
+  __Pyx_PyGILState_Release(__pyx_gilstate_save);
   #endif
   return __pyx_r;
 }
@@ -4464,7 +4661,7 @@
  * cdef inline double log(double x) nogil:
  *     return ln(x) / ln(2.0)             # <<<<<<<<<<<<<<
  * 
- * 
+ * cdef inline int rand_multinomial(DTYPE_t* pvals, SIZE_t n_features,
  */
   __pyx_r = (log(__pyx_v_x) / log(2.0));
   goto __pyx_L0;
@@ -4482,7 +4679,230 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_utils.pyx":109
+/* "skgarden/mondrian/tree/_utils.pyx":88
+ *     return ln(x) / ln(2.0)
+ * 
+ * cdef inline int rand_multinomial(DTYPE_t* pvals, SIZE_t n_features,             # <<<<<<<<<<<<<<
+ *                                  UINT32_t* random_state) nogil:
+ *     """Sample n=1 from a multinomial where pvals is not normalized and cumulative"""
+ */
+
+static CYTHON_INLINE int __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *__pyx_v_pvals, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_v_n_features, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *__pyx_v_random_state) {
+  double __pyx_v_search;
+  __pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *__pyx_v_cum_pvals;
+  __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_v_f_j;
+  double __pyx_v_lower_bound;
+  int __pyx_r;
+  __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_t_1;
+  __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t __pyx_t_2;
+  int __pyx_t_3;
+  int __pyx_t_4;
+
+  /* "skgarden/mondrian/tree/_utils.pyx":92
+ *     """Sample n=1 from a multinomial where pvals is not normalized and cumulative"""
+ *     cdef double search
+ *     cdef DTYPE_t* cum_pvals = <DTYPE_t*> malloc(n_features * sizeof(DTYPE_t))             # <<<<<<<<<<<<<<
+ *     cdef SIZE_t f_j
+ *     cdef double lower_bound
+ */
+  __pyx_v_cum_pvals = ((__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *)malloc((__pyx_v_n_features * (sizeof(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t)))));
+
+  /* "skgarden/mondrian/tree/_utils.pyx":96
+ *     cdef double lower_bound
+ * 
+ *     cum_pvals[0] = pvals[0]             # <<<<<<<<<<<<<<
+ *     for f_j in range(1, n_features):
+ *         cum_pvals[f_j] = cum_pvals[f_j - 1] + pvals[f_j]
+ */
+  (__pyx_v_cum_pvals[0]) = (__pyx_v_pvals[0]);
+
+  /* "skgarden/mondrian/tree/_utils.pyx":97
+ * 
+ *     cum_pvals[0] = pvals[0]
+ *     for f_j in range(1, n_features):             # <<<<<<<<<<<<<<
+ *         cum_pvals[f_j] = cum_pvals[f_j - 1] + pvals[f_j]
+ * 
+ */
+  __pyx_t_1 = __pyx_v_n_features;
+  for (__pyx_t_2 = 1; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
+    __pyx_v_f_j = __pyx_t_2;
+
+    /* "skgarden/mondrian/tree/_utils.pyx":98
+ *     cum_pvals[0] = pvals[0]
+ *     for f_j in range(1, n_features):
+ *         cum_pvals[f_j] = cum_pvals[f_j - 1] + pvals[f_j]             # <<<<<<<<<<<<<<
+ * 
+ *     search = rand_uniform(0.0, cum_pvals[n_features-1], random_state)
+ */
+    (__pyx_v_cum_pvals[__pyx_v_f_j]) = ((__pyx_v_cum_pvals[(__pyx_v_f_j - 1)]) + (__pyx_v_pvals[__pyx_v_f_j]));
+  }
+
+  /* "skgarden/mondrian/tree/_utils.pyx":100
+ *         cum_pvals[f_j] = cum_pvals[f_j - 1] + pvals[f_j]
+ * 
+ *     search = rand_uniform(0.0, cum_pvals[n_features-1], random_state)             # <<<<<<<<<<<<<<
+ * 
+ *     for f_j in range(n_features):
+ */
+  __pyx_v_search = __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(0.0, (__pyx_v_cum_pvals[(__pyx_v_n_features - 1)]), __pyx_v_random_state);
+
+  /* "skgarden/mondrian/tree/_utils.pyx":102
+ *     search = rand_uniform(0.0, cum_pvals[n_features-1], random_state)
+ * 
+ *     for f_j in range(n_features):             # <<<<<<<<<<<<<<
+ *         if f_j == 0:
+ *             lower_bound = 0.0
+ */
+  __pyx_t_1 = __pyx_v_n_features;
+  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
+    __pyx_v_f_j = __pyx_t_2;
+
+    /* "skgarden/mondrian/tree/_utils.pyx":103
+ * 
+ *     for f_j in range(n_features):
+ *         if f_j == 0:             # <<<<<<<<<<<<<<
+ *             lower_bound = 0.0
+ *         else:
+ */
+    __pyx_t_3 = ((__pyx_v_f_j == 0) != 0);
+    if (__pyx_t_3) {
+
+      /* "skgarden/mondrian/tree/_utils.pyx":104
+ *     for f_j in range(n_features):
+ *         if f_j == 0:
+ *             lower_bound = 0.0             # <<<<<<<<<<<<<<
+ *         else:
+ *             lower_bound = cum_pvals[f_j - 1]
+ */
+      __pyx_v_lower_bound = 0.0;
+
+      /* "skgarden/mondrian/tree/_utils.pyx":103
+ * 
+ *     for f_j in range(n_features):
+ *         if f_j == 0:             # <<<<<<<<<<<<<<
+ *             lower_bound = 0.0
+ *         else:
+ */
+      goto __pyx_L7;
+    }
+
+    /* "skgarden/mondrian/tree/_utils.pyx":106
+ *             lower_bound = 0.0
+ *         else:
+ *             lower_bound = cum_pvals[f_j - 1]             # <<<<<<<<<<<<<<
+ *         if cum_pvals[f_j] >= search and lower_bound < search:
+ *             break
+ */
+    /*else*/ {
+      __pyx_v_lower_bound = (__pyx_v_cum_pvals[(__pyx_v_f_j - 1)]);
+    }
+    __pyx_L7:;
+
+    /* "skgarden/mondrian/tree/_utils.pyx":107
+ *         else:
+ *             lower_bound = cum_pvals[f_j - 1]
+ *         if cum_pvals[f_j] >= search and lower_bound < search:             # <<<<<<<<<<<<<<
+ *             break
+ *     free(cum_pvals)
+ */
+    __pyx_t_4 = (((__pyx_v_cum_pvals[__pyx_v_f_j]) >= __pyx_v_search) != 0);
+    if (__pyx_t_4) {
+    } else {
+      __pyx_t_3 = __pyx_t_4;
+      goto __pyx_L9_bool_binop_done;
+    }
+    __pyx_t_4 = ((__pyx_v_lower_bound < __pyx_v_search) != 0);
+    __pyx_t_3 = __pyx_t_4;
+    __pyx_L9_bool_binop_done:;
+    if (__pyx_t_3) {
+
+      /* "skgarden/mondrian/tree/_utils.pyx":108
+ *             lower_bound = cum_pvals[f_j - 1]
+ *         if cum_pvals[f_j] >= search and lower_bound < search:
+ *             break             # <<<<<<<<<<<<<<
+ *     free(cum_pvals)
+ *     return f_j
+ */
+      goto __pyx_L6_break;
+
+      /* "skgarden/mondrian/tree/_utils.pyx":107
+ *         else:
+ *             lower_bound = cum_pvals[f_j - 1]
+ *         if cum_pvals[f_j] >= search and lower_bound < search:             # <<<<<<<<<<<<<<
+ *             break
+ *     free(cum_pvals)
+ */
+    }
+  }
+  __pyx_L6_break:;
+
+  /* "skgarden/mondrian/tree/_utils.pyx":109
+ *         if cum_pvals[f_j] >= search and lower_bound < search:
+ *             break
+ *     free(cum_pvals)             # <<<<<<<<<<<<<<
+ *     return f_j
+ * 
+ */
+  free(__pyx_v_cum_pvals);
+
+  /* "skgarden/mondrian/tree/_utils.pyx":110
+ *             break
+ *     free(cum_pvals)
+ *     return f_j             # <<<<<<<<<<<<<<
+ * 
+ * cdef inline double rand_exponential(DTYPE_t rate, UINT32_t* random_state) nogil:
+ */
+  __pyx_r = __pyx_v_f_j;
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_utils.pyx":88
+ *     return ln(x) / ln(2.0)
+ * 
+ * cdef inline int rand_multinomial(DTYPE_t* pvals, SIZE_t n_features,             # <<<<<<<<<<<<<<
+ *                                  UINT32_t* random_state) nogil:
+ *     """Sample n=1 from a multinomial where pvals is not normalized and cumulative"""
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_utils.pyx":112
+ *     return f_j
+ * 
+ * cdef inline double rand_exponential(DTYPE_t rate, UINT32_t* random_state) nogil:             # <<<<<<<<<<<<<<
+ *     return -ln(rand_uniform(0.0, 1.0, random_state)) / rate
+ * 
+ */
+
+static CYTHON_INLINE double __pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t __pyx_v_rate, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *__pyx_v_random_state) {
+  double __pyx_r;
+
+  /* "skgarden/mondrian/tree/_utils.pyx":113
+ * 
+ * cdef inline double rand_exponential(DTYPE_t rate, UINT32_t* random_state) nogil:
+ *     return -ln(rand_uniform(0.0, 1.0, random_state)) / rate             # <<<<<<<<<<<<<<
+ * 
+ * # =============================================================================
+ */
+  __pyx_r = ((-log(__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform(0.0, 1.0, __pyx_v_random_state))) / __pyx_v_rate);
+  goto __pyx_L0;
+
+  /* "skgarden/mondrian/tree/_utils.pyx":112
+ *     return f_j
+ * 
+ * cdef inline double rand_exponential(DTYPE_t rate, UINT32_t* random_state) nogil:             # <<<<<<<<<<<<<<
+ *     return -ln(rand_uniform(0.0, 1.0, random_state)) / rate
+ * 
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  return __pyx_r;
+}
+
+/* "skgarden/mondrian/tree/_utils.pyx":135
  *     """
  * 
  *     def __cinit__(self, SIZE_t capacity):             # <<<<<<<<<<<<<<
@@ -4505,6 +4925,7 @@
       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
       switch (pos_args) {
         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+        CYTHON_FALLTHROUGH;
         case  0: break;
         default: goto __pyx_L5_argtuple_error;
       }
@@ -4515,18 +4936,18 @@
         else goto __pyx_L5_argtuple_error;
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 135, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
       goto __pyx_L5_argtuple_error;
     } else {
       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
     }
-    __pyx_v_capacity = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_capacity == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
+    __pyx_v_capacity = __Pyx_PyInt_As_Py_intptr_t(values[0]); if (unlikely((__pyx_v_capacity == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L3_error)
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 135, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("skgarden.mondrian.tree._utils.Stack.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -4544,7 +4965,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__cinit__", 0);
 
-  /* "skgarden/mondrian/tree/_utils.pyx":110
+  /* "skgarden/mondrian/tree/_utils.pyx":136
  * 
  *     def __cinit__(self, SIZE_t capacity):
  *         self.capacity = capacity             # <<<<<<<<<<<<<<
@@ -4553,7 +4974,7 @@
  */
   __pyx_v_self->capacity = __pyx_v_capacity;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":111
+  /* "skgarden/mondrian/tree/_utils.pyx":137
  *     def __cinit__(self, SIZE_t capacity):
  *         self.capacity = capacity
  *         self.top = 0             # <<<<<<<<<<<<<<
@@ -4562,7 +4983,7 @@
  */
   __pyx_v_self->top = 0;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":112
+  /* "skgarden/mondrian/tree/_utils.pyx":138
  *         self.capacity = capacity
  *         self.top = 0
  *         self.stack_ = <StackRecord*> malloc(capacity * sizeof(StackRecord))             # <<<<<<<<<<<<<<
@@ -4571,7 +4992,7 @@
  */
   __pyx_v_self->stack_ = ((struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *)malloc((__pyx_v_capacity * (sizeof(struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord)))));
 
-  /* "skgarden/mondrian/tree/_utils.pyx":109
+  /* "skgarden/mondrian/tree/_utils.pyx":135
  *     """
  * 
  *     def __cinit__(self, SIZE_t capacity):             # <<<<<<<<<<<<<<
@@ -4585,7 +5006,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_utils.pyx":114
+/* "skgarden/mondrian/tree/_utils.pyx":140
  *         self.stack_ = <StackRecord*> malloc(capacity * sizeof(StackRecord))
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -4608,7 +5029,7 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__dealloc__", 0);
 
-  /* "skgarden/mondrian/tree/_utils.pyx":115
+  /* "skgarden/mondrian/tree/_utils.pyx":141
  * 
  *     def __dealloc__(self):
  *         free(self.stack_)             # <<<<<<<<<<<<<<
@@ -4617,7 +5038,7 @@
  */
   free(__pyx_v_self->stack_);
 
-  /* "skgarden/mondrian/tree/_utils.pyx":114
+  /* "skgarden/mondrian/tree/_utils.pyx":140
  *         self.stack_ = <StackRecord*> malloc(capacity * sizeof(StackRecord))
  * 
  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
@@ -4629,7 +5050,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "skgarden/mondrian/tree/_utils.pyx":117
+/* "skgarden/mondrian/tree/_utils.pyx":143
  *         free(self.stack_)
  * 
  *     cdef bint is_empty(self) nogil:             # <<<<<<<<<<<<<<
@@ -4640,7 +5061,7 @@
 static int __pyx_f_8skgarden_8mondrian_4tree_6_utils_5Stack_is_empty(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self) {
   int __pyx_r;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":118
+  /* "skgarden/mondrian/tree/_utils.pyx":144
  * 
  *     cdef bint is_empty(self) nogil:
  *         return self.top <= 0             # <<<<<<<<<<<<<<
@@ -4650,7 +5071,7 @@
   __pyx_r = (__pyx_v_self->top <= 0);
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":117
+  /* "skgarden/mondrian/tree/_utils.pyx":143
  *         free(self.stack_)
  * 
  *     cdef bint is_empty(self) nogil:             # <<<<<<<<<<<<<<
@@ -4663,7 +5084,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_utils.pyx":120
+/* "skgarden/mondrian/tree/_utils.pyx":146
  *         return self.top <= 0
  * 
  *     cdef int push(self, SIZE_t start, SIZE_t end, SIZE_t depth, SIZE_t parent,             # <<<<<<<<<<<<<<
@@ -4679,7 +5100,7 @@
   int __pyx_t_2;
   struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *__pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":128
+  /* "skgarden/mondrian/tree/_utils.pyx":154
  *         or 0 otherwise.
  *         """
  *         cdef SIZE_t top = self.top             # <<<<<<<<<<<<<<
@@ -4689,7 +5110,7 @@
   __pyx_t_1 = __pyx_v_self->top;
   __pyx_v_top = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":129
+  /* "skgarden/mondrian/tree/_utils.pyx":155
  *         """
  *         cdef SIZE_t top = self.top
  *         cdef StackRecord* stack = NULL             # <<<<<<<<<<<<<<
@@ -4698,7 +5119,7 @@
  */
   __pyx_v_stack = NULL;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":132
+  /* "skgarden/mondrian/tree/_utils.pyx":158
  * 
  *         # Resize if capacity not sufficient
  *         if top >= self.capacity:             # <<<<<<<<<<<<<<
@@ -4708,7 +5129,7 @@
   __pyx_t_2 = ((__pyx_v_top >= __pyx_v_self->capacity) != 0);
   if (__pyx_t_2) {
 
-    /* "skgarden/mondrian/tree/_utils.pyx":133
+    /* "skgarden/mondrian/tree/_utils.pyx":159
  *         # Resize if capacity not sufficient
  *         if top >= self.capacity:
  *             self.capacity *= 2             # <<<<<<<<<<<<<<
@@ -4717,16 +5138,16 @@
  */
     __pyx_v_self->capacity = (__pyx_v_self->capacity * 2);
 
-    /* "skgarden/mondrian/tree/_utils.pyx":135
+    /* "skgarden/mondrian/tree/_utils.pyx":161
  *             self.capacity *= 2
  *             # Since safe_realloc can raise MemoryError, use `except -1`
  *             safe_realloc(&self.stack_, self.capacity)             # <<<<<<<<<<<<<<
  * 
  *         stack = self.stack_
  */
-    __pyx_fuse_7__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->stack_), __pyx_v_self->capacity); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 135, __pyx_L1_error)
+    __pyx_fuse_7__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc((&__pyx_v_self->stack_), __pyx_v_self->capacity); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 161, __pyx_L1_error)
 
-    /* "skgarden/mondrian/tree/_utils.pyx":132
+    /* "skgarden/mondrian/tree/_utils.pyx":158
  * 
  *         # Resize if capacity not sufficient
  *         if top >= self.capacity:             # <<<<<<<<<<<<<<
@@ -4735,7 +5156,7 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_utils.pyx":137
+  /* "skgarden/mondrian/tree/_utils.pyx":163
  *             safe_realloc(&self.stack_, self.capacity)
  * 
  *         stack = self.stack_             # <<<<<<<<<<<<<<
@@ -4745,7 +5166,7 @@
   __pyx_t_3 = __pyx_v_self->stack_;
   __pyx_v_stack = __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":138
+  /* "skgarden/mondrian/tree/_utils.pyx":164
  * 
  *         stack = self.stack_
  *         stack[top].start = start             # <<<<<<<<<<<<<<
@@ -4754,7 +5175,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).start = __pyx_v_start;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":139
+  /* "skgarden/mondrian/tree/_utils.pyx":165
  *         stack = self.stack_
  *         stack[top].start = start
  *         stack[top].end = end             # <<<<<<<<<<<<<<
@@ -4763,7 +5184,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).end = __pyx_v_end;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":140
+  /* "skgarden/mondrian/tree/_utils.pyx":166
  *         stack[top].start = start
  *         stack[top].end = end
  *         stack[top].depth = depth             # <<<<<<<<<<<<<<
@@ -4772,7 +5193,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).depth = __pyx_v_depth;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":141
+  /* "skgarden/mondrian/tree/_utils.pyx":167
  *         stack[top].end = end
  *         stack[top].depth = depth
  *         stack[top].parent = parent             # <<<<<<<<<<<<<<
@@ -4781,7 +5202,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).parent = __pyx_v_parent;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":142
+  /* "skgarden/mondrian/tree/_utils.pyx":168
  *         stack[top].depth = depth
  *         stack[top].parent = parent
  *         stack[top].is_left = is_left             # <<<<<<<<<<<<<<
@@ -4790,7 +5211,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).is_left = __pyx_v_is_left;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":143
+  /* "skgarden/mondrian/tree/_utils.pyx":169
  *         stack[top].parent = parent
  *         stack[top].is_left = is_left
  *         stack[top].impurity = impurity             # <<<<<<<<<<<<<<
@@ -4799,7 +5220,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).impurity = __pyx_v_impurity;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":144
+  /* "skgarden/mondrian/tree/_utils.pyx":170
  *         stack[top].is_left = is_left
  *         stack[top].impurity = impurity
  *         stack[top].n_constant_features = n_constant_features             # <<<<<<<<<<<<<<
@@ -4808,7 +5229,7 @@
  */
   (__pyx_v_stack[__pyx_v_top]).n_constant_features = __pyx_v_n_constant_features;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":147
+  /* "skgarden/mondrian/tree/_utils.pyx":173
  * 
  *         # Increment stack pointer
  *         self.top = top + 1             # <<<<<<<<<<<<<<
@@ -4817,7 +5238,7 @@
  */
   __pyx_v_self->top = (__pyx_v_top + 1);
 
-  /* "skgarden/mondrian/tree/_utils.pyx":148
+  /* "skgarden/mondrian/tree/_utils.pyx":174
  *         # Increment stack pointer
  *         self.top = top + 1
  *         return 0             # <<<<<<<<<<<<<<
@@ -4827,7 +5248,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":120
+  /* "skgarden/mondrian/tree/_utils.pyx":146
  *         return self.top <= 0
  * 
  *     cdef int push(self, SIZE_t start, SIZE_t end, SIZE_t depth, SIZE_t parent,             # <<<<<<<<<<<<<<
@@ -4839,11 +5260,11 @@
   __pyx_L1_error:;
   {
     #ifdef WITH_THREAD
-    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
+    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
     #endif
     __Pyx_AddTraceback("skgarden.mondrian.tree._utils.Stack.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
     #ifdef WITH_THREAD
-    PyGILState_Release(__pyx_gilstate_save);
+    __Pyx_PyGILState_Release(__pyx_gilstate_save);
     #endif
   }
   __pyx_r = -1;
@@ -4851,7 +5272,7 @@
   return __pyx_r;
 }
 
-/* "skgarden/mondrian/tree/_utils.pyx":150
+/* "skgarden/mondrian/tree/_utils.pyx":176
  *         return 0
  * 
  *     cdef int pop(self, StackRecord* res) nogil:             # <<<<<<<<<<<<<<
@@ -4867,7 +5288,7 @@
   struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *__pyx_t_2;
   int __pyx_t_3;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":156
+  /* "skgarden/mondrian/tree/_utils.pyx":182
  *         otherwise.
  *         """
  *         cdef SIZE_t top = self.top             # <<<<<<<<<<<<<<
@@ -4877,7 +5298,7 @@
   __pyx_t_1 = __pyx_v_self->top;
   __pyx_v_top = __pyx_t_1;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":157
+  /* "skgarden/mondrian/tree/_utils.pyx":183
  *         """
  *         cdef SIZE_t top = self.top
  *         cdef StackRecord* stack = self.stack_             # <<<<<<<<<<<<<<
@@ -4887,7 +5308,7 @@
   __pyx_t_2 = __pyx_v_self->stack_;
   __pyx_v_stack = __pyx_t_2;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":159
+  /* "skgarden/mondrian/tree/_utils.pyx":185
  *         cdef StackRecord* stack = self.stack_
  * 
  *         if top <= 0:             # <<<<<<<<<<<<<<
@@ -4897,7 +5318,7 @@
   __pyx_t_3 = ((__pyx_v_top <= 0) != 0);
   if (__pyx_t_3) {
 
-    /* "skgarden/mondrian/tree/_utils.pyx":160
+    /* "skgarden/mondrian/tree/_utils.pyx":186
  * 
  *         if top <= 0:
  *             return -1             # <<<<<<<<<<<<<<
@@ -4907,7 +5328,7 @@
     __pyx_r = -1;
     goto __pyx_L0;
 
-    /* "skgarden/mondrian/tree/_utils.pyx":159
+    /* "skgarden/mondrian/tree/_utils.pyx":185
  *         cdef StackRecord* stack = self.stack_
  * 
  *         if top <= 0:             # <<<<<<<<<<<<<<
@@ -4916,7 +5337,7 @@
  */
   }
 
-  /* "skgarden/mondrian/tree/_utils.pyx":162
+  /* "skgarden/mondrian/tree/_utils.pyx":188
  *             return -1
  * 
  *         res[0] = stack[top - 1]             # <<<<<<<<<<<<<<
@@ -4925,7 +5346,7 @@
  */
   (__pyx_v_res[0]) = (__pyx_v_stack[(__pyx_v_top - 1)]);
 
-  /* "skgarden/mondrian/tree/_utils.pyx":163
+  /* "skgarden/mondrian/tree/_utils.pyx":189
  * 
  *         res[0] = stack[top - 1]
  *         self.top = top - 1             # <<<<<<<<<<<<<<
@@ -4934,7 +5355,7 @@
  */
   __pyx_v_self->top = (__pyx_v_top - 1);
 
-  /* "skgarden/mondrian/tree/_utils.pyx":165
+  /* "skgarden/mondrian/tree/_utils.pyx":191
  *         self.top = top - 1
  * 
  *         return 0             # <<<<<<<<<<<<<<
@@ -4942,7 +5363,7 @@
   __pyx_r = 0;
   goto __pyx_L0;
 
-  /* "skgarden/mondrian/tree/_utils.pyx":150
+  /* "skgarden/mondrian/tree/_utils.pyx":176
  *         return 0
  * 
  *     cdef int pop(self, StackRecord* res) nogil:             # <<<<<<<<<<<<<<
@@ -4955,57 +5376,164 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
- *         # experimental exception made for __getbuffer__ and __releasebuffer__
- *         # -- the details of this may change.
- *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
- *             # This implementation of getbuffer is geared towards Cython
- *             # requirements, and does not yet fullfill the PEP.
+/* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
  */
 
 /* Python wrapper */
-static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
-static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
-  int __pyx_r;
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_6_utils_5Stack_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_6_utils_5Stack_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
+  PyObject *__pyx_r = 0;
   __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
-  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
+  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_4__reduce_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_self));
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
-  int __pyx_v_copy_shape;
-  int __pyx_v_i;
-  int __pyx_v_ndim;
-  int __pyx_v_endian_detector;
-  int __pyx_v_little_endian;
-  int __pyx_v_t;
-  char *__pyx_v_f;
-  PyArray_Descr *__pyx_v_descr = 0;
-  int __pyx_v_offset;
-  int __pyx_v_hasfields;
-  int __pyx_r;
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self) {
+  PyObject *__pyx_r = NULL;
   __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  int __pyx_t_2;
-  PyObject *__pyx_t_3 = NULL;
-  int __pyx_t_4;
-  int __pyx_t_5;
-  PyObject *__pyx_t_6 = NULL;
-  char *__pyx_t_7;
-  __Pyx_RefNannySetupContext("__getbuffer__", 0);
-  if (__pyx_v_info != NULL) {
-    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
-    __Pyx_GIVEREF(__pyx_v_info->obj);
-  }
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":203
- *             # of flags
- * 
- *             if info == NULL: return             # <<<<<<<<<<<<<<
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 2, __pyx_L1_error)
+
+  /* "(tree fragment)":1
+ * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._utils.Stack.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+
+/* Python wrapper */
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_6_utils_5Stack_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
+static PyObject *__pyx_pw_8skgarden_8mondrian_4tree_6_utils_5Stack_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = 0;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_6__setstate_cython__(((struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static PyObject *__pyx_pf_8skgarden_8mondrian_4tree_6_utils_5Stack_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_1);
+  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
+  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
+  __PYX_ERR(1, 4, __pyx_L1_error)
+
+  /* "(tree fragment)":3
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+
+  /* function exit code */
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("skgarden.mondrian.tree._utils.Stack.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
+ *         # experimental exception made for __getbuffer__ and __releasebuffer__
+ *         # -- the details of this may change.
+ *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
+ *             # This implementation of getbuffer is geared towards Cython
+ *             # requirements, and does not yet fullfill the PEP.
+ */
+
+/* Python wrapper */
+static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
+static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
+  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
+
+  /* function exit code */
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
+  int __pyx_v_copy_shape;
+  int __pyx_v_i;
+  int __pyx_v_ndim;
+  int __pyx_v_endian_detector;
+  int __pyx_v_little_endian;
+  int __pyx_v_t;
+  char *__pyx_v_f;
+  PyArray_Descr *__pyx_v_descr = 0;
+  int __pyx_v_offset;
+  int __pyx_v_hasfields;
+  int __pyx_r;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  int __pyx_t_2;
+  PyObject *__pyx_t_3 = NULL;
+  int __pyx_t_4;
+  int __pyx_t_5;
+  PyObject *__pyx_t_6 = NULL;
+  char *__pyx_t_7;
+  __Pyx_RefNannySetupContext("__getbuffer__", 0);
+  if (__pyx_v_info != NULL) {
+    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
+    __Pyx_GIVEREF(__pyx_v_info->obj);
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
+ *             # of flags
+ * 
+ *             if info == NULL: return             # <<<<<<<<<<<<<<
  * 
  *             cdef int copy_shape, i, ndim
  */
@@ -5015,7 +5543,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":206
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
  * 
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -5024,7 +5552,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":207
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":224
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -5033,7 +5561,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":209
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
  * 
  *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
@@ -5042,7 +5570,7 @@
  */
   __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -5052,7 +5580,7 @@
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":212
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  *                 copy_shape = 1             # <<<<<<<<<<<<<<
@@ -5061,7 +5589,7 @@
  */
     __pyx_v_copy_shape = 1;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":211
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
  *             ndim = PyArray_NDIM(self)
  * 
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
@@ -5071,7 +5599,7 @@
     goto __pyx_L4;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":214
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
  *                 copy_shape = 1
  *             else:
  *                 copy_shape = 0             # <<<<<<<<<<<<<<
@@ -5083,7 +5611,7 @@
   }
   __pyx_L4:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -5097,7 +5625,7 @@
     goto __pyx_L6_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":217
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":234
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -5108,7 +5636,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L6_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -5117,20 +5645,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 235, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(1, 218, __pyx_L1_error)
+    __PYX_ERR(2, 235, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":216
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
  *                 copy_shape = 0
  * 
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -5139,7 +5667,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -5153,7 +5681,7 @@
     goto __pyx_L9_bool_binop_done;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":221
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":238
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
@@ -5164,7 +5692,7 @@
   __pyx_t_1 = __pyx_t_2;
   __pyx_L9_bool_binop_done:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -5173,20 +5701,20 @@
  */
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 239, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __PYX_ERR(1, 222, __pyx_L1_error)
+    __PYX_ERR(2, 239, __pyx_L1_error)
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":220
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
  *                 raise ValueError(u"ndarray is not C contiguous")
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
@@ -5195,7 +5723,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":224
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
  * 
  *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
@@ -5204,7 +5732,7 @@
  */
   __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":225
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
  * 
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim             # <<<<<<<<<<<<<<
@@ -5213,7 +5741,7 @@
  */
   __pyx_v_info->ndim = __pyx_v_ndim;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -5223,26 +5751,26 @@
   __pyx_t_1 = (__pyx_v_copy_shape != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":229
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
  *                 # Allocate new buffer for strides and shape info.
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  */
-    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));
+    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":230
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
  *                 # This is allocated as one block, strides first.
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  */
     __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":231
- *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
+ *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):             # <<<<<<<<<<<<<<
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
@@ -5252,7 +5780,7 @@
     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
       __pyx_v_i = __pyx_t_5;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":232
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
  *                 info.shape = info.strides + ndim
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
@@ -5261,7 +5789,7 @@
  */
       (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":233
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
  *                 for i in range(ndim):
  *                     info.strides[i] = PyArray_STRIDES(self)[i]
  *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
@@ -5271,7 +5799,7 @@
       (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":226
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim
  *             if copy_shape:             # <<<<<<<<<<<<<<
@@ -5281,7 +5809,7 @@
     goto __pyx_L11;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":235
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":252
  *                     info.shape[i] = PyArray_DIMS(self)[i]
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
@@ -5291,7 +5819,7 @@
   /*else*/ {
     __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":236
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
  *             else:
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
@@ -5302,7 +5830,7 @@
   }
   __pyx_L11:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":237
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
@@ -5311,7 +5839,7 @@
  */
   __pyx_v_info->suboffsets = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":238
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
@@ -5320,7 +5848,7 @@
  */
   __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":239
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)
  *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
@@ -5329,7 +5857,7 @@
  */
   __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":242
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
  * 
  *             cdef int t
  *             cdef char* f = NULL             # <<<<<<<<<<<<<<
@@ -5338,7 +5866,7 @@
  */
   __pyx_v_f = NULL;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":243
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
  *             cdef int t
  *             cdef char* f = NULL
  *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
@@ -5350,7 +5878,7 @@
   __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
   __pyx_t_3 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":246
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
  *             cdef int offset
  * 
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
@@ -5359,7 +5887,7 @@
  */
   __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -5377,7 +5905,7 @@
   __pyx_L15_bool_binop_done:;
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":250
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
  *             if not hasfields and not copy_shape:
  *                 # do not call releasebuffer
  *                 info.obj = None             # <<<<<<<<<<<<<<
@@ -5390,7 +5918,7 @@
     __Pyx_DECREF(__pyx_v_info->obj);
     __pyx_v_info->obj = Py_None;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":248
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
  * 
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
@@ -5400,7 +5928,7 @@
     goto __pyx_L14;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":253
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
  *             else:
  *                 # need to call releasebuffer
  *                 info.obj = self             # <<<<<<<<<<<<<<
@@ -5416,7 +5944,7 @@
   }
   __pyx_L14:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -5426,7 +5954,7 @@
   __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":256
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
  * 
  *             if not hasfields:
  *                 t = descr.type_num             # <<<<<<<<<<<<<<
@@ -5436,7 +5964,7 @@
     __pyx_t_4 = __pyx_v_descr->type_num;
     __pyx_v_t = __pyx_t_4;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5456,7 +5984,7 @@
     }
     __pyx_L20_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":258
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -5473,7 +6001,7 @@
     __pyx_t_1 = __pyx_t_2;
     __pyx_L19_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5482,20 +6010,20 @@
  */
     if (__pyx_t_1) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(1, 259, __pyx_L1_error)
+      __PYX_ERR(2, 276, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":257
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
  *             if not hasfields:
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -5504,7 +6032,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":260
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
@@ -5516,7 +6044,7 @@
       __pyx_v_f = ((char *)"b");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":261
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
  *                     raise ValueError(u"Non-native byte order not supported")
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
@@ -5527,7 +6055,7 @@
       __pyx_v_f = ((char *)"B");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":262
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
@@ -5538,7 +6066,7 @@
       __pyx_v_f = ((char *)"h");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":263
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
  *                 elif t == NPY_UBYTE:       f = "B"
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
@@ -5549,7 +6077,7 @@
       __pyx_v_f = ((char *)"H");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":264
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":281
  *                 elif t == NPY_SHORT:       f = "h"
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
@@ -5560,7 +6088,7 @@
       __pyx_v_f = ((char *)"i");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":265
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
  *                 elif t == NPY_USHORT:      f = "H"
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
@@ -5571,7 +6099,7 @@
       __pyx_v_f = ((char *)"I");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":266
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
  *                 elif t == NPY_INT:         f = "i"
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
@@ -5582,7 +6110,7 @@
       __pyx_v_f = ((char *)"l");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":267
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
  *                 elif t == NPY_UINT:        f = "I"
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
@@ -5593,7 +6121,7 @@
       __pyx_v_f = ((char *)"L");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":268
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
  *                 elif t == NPY_LONG:        f = "l"
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
@@ -5604,7 +6132,7 @@
       __pyx_v_f = ((char *)"q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":269
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
  *                 elif t == NPY_ULONG:       f = "L"
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
@@ -5615,7 +6143,7 @@
       __pyx_v_f = ((char *)"Q");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":270
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
  *                 elif t == NPY_LONGLONG:    f = "q"
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
@@ -5626,7 +6154,7 @@
       __pyx_v_f = ((char *)"f");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":271
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
  *                 elif t == NPY_ULONGLONG:   f = "Q"
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
@@ -5637,7 +6165,7 @@
       __pyx_v_f = ((char *)"d");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":272
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
  *                 elif t == NPY_FLOAT:       f = "f"
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
@@ -5648,7 +6176,7 @@
       __pyx_v_f = ((char *)"g");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":273
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
  *                 elif t == NPY_DOUBLE:      f = "d"
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
@@ -5659,7 +6187,7 @@
       __pyx_v_f = ((char *)"Zf");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":274
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
  *                 elif t == NPY_LONGDOUBLE:  f = "g"
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
@@ -5670,7 +6198,7 @@
       __pyx_v_f = ((char *)"Zd");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":275
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
  *                 elif t == NPY_CFLOAT:      f = "Zf"
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
@@ -5681,7 +6209,7 @@
       __pyx_v_f = ((char *)"Zg");
       break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":276
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
  *                 elif t == NPY_CDOUBLE:     f = "Zd"
  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
  *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
@@ -5693,33 +6221,33 @@
       break;
       default:
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":278
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
  *                 elif t == NPY_OBJECT:      f = "O"
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
  *                 info.format = f
  *                 return
  */
-      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_GIVEREF(__pyx_t_6);
       PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
       __pyx_t_6 = 0;
-      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 295, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       __Pyx_Raise(__pyx_t_6, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __PYX_ERR(1, 278, __pyx_L1_error)
+      __PYX_ERR(2, 295, __pyx_L1_error)
       break;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":279
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
  *                 else:
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f             # <<<<<<<<<<<<<<
@@ -5728,17 +6256,17 @@
  */
     __pyx_v_info->format = __pyx_v_f;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":280
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *                 info.format = f
  *                 return             # <<<<<<<<<<<<<<
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  */
     __pyx_r = 0;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":255
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
  *                 info.obj = self
  * 
  *             if not hasfields:             # <<<<<<<<<<<<<<
@@ -5747,27 +6275,27 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":282
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":299
  *                 return
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  */
   /*else*/ {
-    __pyx_v_info->format = ((char *)malloc(0xFF));
+    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":283
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":300
  *             else:
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,
  */
     (__pyx_v_info->format[0]) = '^';
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":284
- *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":301
+ *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0             # <<<<<<<<<<<<<<
  *                 f = _util_dtypestring(descr, info.format + 1,
@@ -5775,17 +6303,17 @@
  */
     __pyx_v_offset = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":285
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
  *                 info.format[0] = c'^' # Native data types, manual alignment
  *                 offset = 0
  *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  */
-    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
+    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 302, __pyx_L1_error)
     __pyx_v_f = __pyx_t_7;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":288
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":305
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
@@ -5795,7 +6323,7 @@
     (__pyx_v_f[0]) = '\x00';
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":197
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
  *         # experimental exception made for __getbuffer__ and __releasebuffer__
  *         # -- the details of this may change.
  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
@@ -5827,12 +6355,12 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
 /* Python wrapper */
@@ -5851,75 +6379,75 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("__releasebuffer__", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":292
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":309
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  */
-    free(__pyx_v_info->format);
+    PyObject_Free(__pyx_v_info->format);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":291
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":294
- *                 stdlib.free(info.format)
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":311
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
- *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
+ *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
  *                 # info.shape was stored after info.strides in the same block
  * 
  */
-    free(__pyx_v_info->strides);
+    PyObject_Free(__pyx_v_info->strides);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":293
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
- *                 stdlib.free(info.strides)
+ *                 PyObject_Free(info.strides)
  *                 # info.shape was stored after info.strides in the same block
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":290
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
  *                 f[0] = c'\0' # Terminate format string
  * 
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
- *                 stdlib.free(info.format)
+ *                 PyObject_Free(info.format)
  */
 
   /* function exit code */
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -5933,7 +6461,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":771
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":789
  * 
  * cdef inline object PyArray_MultiIterNew1(a):
  *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
@@ -5941,13 +6469,13 @@
  * cdef inline object PyArray_MultiIterNew2(a, b):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 789, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":770
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
  * ctypedef npy_cdouble     complex_t
  * 
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
@@ -5966,7 +6494,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -5980,7 +6508,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":774
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
@@ -5988,13 +6516,13 @@
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 792, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":773
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
  *     return PyArray_MultiIterNew(1, <void*>a)
  * 
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
@@ -6013,7 +6541,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -6027,7 +6555,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":777
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
@@ -6035,13 +6563,13 @@
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 795, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":776
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
  * 
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
@@ -6060,7 +6588,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -6074,7 +6602,7 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":780
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
@@ -6082,13 +6610,13 @@
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 798, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":779
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
  * 
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
@@ -6107,7 +6635,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -6121,21 +6649,21 @@
   PyObject *__pyx_t_1 = NULL;
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":783
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
  * 
- * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
+  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 801, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_r = __pyx_t_1;
   __pyx_t_1 = 0;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":782
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
  * 
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
@@ -6154,9 +6682,83 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
  * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
+  PyObject *__pyx_r = NULL;
+  __Pyx_RefNannyDeclarations
+  int __pyx_t_1;
+  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
+  if (__pyx_t_1) {
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
+ *     else:
+ *         return ()
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
+    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
+    goto __pyx_L0;
+
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):
+ *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
+ *         return <tuple>d.subarray.shape
+ *     else:
+ */
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
+ *         return <tuple>d.subarray.shape
+ *     else:
+ *         return ()             # <<<<<<<<<<<<<<
+ * 
+ * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
+ */
+  /*else*/ {
+    __Pyx_XDECREF(__pyx_r);
+    __Pyx_INCREF(__pyx_empty_tuple);
+    __pyx_r = __pyx_empty_tuple;
+    goto __pyx_L0;
+  }
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
+ *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+ * 
+ * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
+ *     if PyDataType_HASSUBARRAY(d):
+ *         return <tuple>d.subarray.shape
+ */
+
+  /* function exit code */
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
+ * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
  *     # string. The new location in the format string is returned.
@@ -6183,7 +6785,7 @@
   char *__pyx_t_9;
   __Pyx_RefNannySetupContext("_util_dtypestring", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":790
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
  * 
  *     cdef dtype child
  *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
@@ -6192,7 +6794,7 @@
  */
   __pyx_v_endian_detector = 1;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":791
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
  *     cdef dtype child
  *     cdef int endian_detector = 1
  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
@@ -6201,7 +6803,7 @@
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -6210,21 +6812,21 @@
  */
   if (unlikely(__pyx_v_descr->names == Py_None)) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
-    __PYX_ERR(1, 794, __pyx_L1_error)
+    __PYX_ERR(2, 818, __pyx_L1_error)
   }
   __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
   for (;;) {
     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
-    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
+    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 818, __pyx_L1_error)
     #else
-    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
+    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 818, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     #endif
     __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":795
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":819
  * 
  *     for childname in descr.names:
  *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
@@ -6233,15 +6835,15 @@
  */
     if (unlikely(__pyx_v_descr->fields == Py_None)) {
       PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
-      __PYX_ERR(1, 795, __pyx_L1_error)
+      __PYX_ERR(2, 819, __pyx_L1_error)
     }
-    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 819, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
-    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
+    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 819, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
     __pyx_t_3 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":796
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
  *     for childname in descr.names:
  *         fields = descr.fields[childname]
  *         child, new_offset = fields             # <<<<<<<<<<<<<<
@@ -6258,7 +6860,7 @@
       if (unlikely(size != 2)) {
         if (size > 2) __Pyx_RaiseTooManyValuesError(2);
         else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
-        __PYX_ERR(1, 796, __pyx_L1_error)
+        __PYX_ERR(2, 820, __pyx_L1_error)
       }
       #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
       __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
@@ -6266,51 +6868,51 @@
       __Pyx_INCREF(__pyx_t_3);
       __Pyx_INCREF(__pyx_t_4);
       #else
-      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
+      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
+      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 820, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       #endif
     } else {
-      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
+      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 820, __pyx_L1_error)
     }
-    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
+    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 820, __pyx_L1_error)
     __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
     __pyx_t_3 = 0;
     __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
     __pyx_t_4 = 0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  */
-    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
+    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
+    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 822, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 822, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 823, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(1, 799, __pyx_L1_error)
+      __PYX_ERR(2, 823, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":798
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
  *         child, new_offset = fields
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
@@ -6319,7 +6921,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6339,7 +6941,7 @@
     }
     __pyx_L8_next_or:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":802
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
@@ -6356,7 +6958,7 @@
     __pyx_t_6 = __pyx_t_7;
     __pyx_L7_bool_binop_done:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6365,20 +6967,20 @@
  */
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 827, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
       __Pyx_Raise(__pyx_t_3, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __PYX_ERR(1, 803, __pyx_L1_error)
+      __PYX_ERR(2, 827, __pyx_L1_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":801
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
  * 
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
@@ -6387,7 +6989,7 @@
  */
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":813
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
  * 
  *         # Output padding bytes
  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
@@ -6395,15 +6997,15 @@
  *             f += 1
  */
     while (1) {
-      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (!__pyx_t_6) break;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":814
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
  *         # Output padding bytes
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
@@ -6412,7 +7014,7 @@
  */
       (__pyx_v_f[0]) = 0x78;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":815
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
  *         while offset[0] < new_offset:
  *             f[0] = 120 # "x"; pad byte
  *             f += 1             # <<<<<<<<<<<<<<
@@ -6421,7 +7023,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":816
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
  *             f[0] = 120 # "x"; pad byte
  *             f += 1
  *             offset[0] += 1             # <<<<<<<<<<<<<<
@@ -6432,7 +7034,7 @@
       (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":818
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
  *             offset[0] += 1
  * 
  *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
@@ -6442,7 +7044,7 @@
     __pyx_t_8 = 0;
     (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -6452,19 +7054,19 @@
     __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
     if (__pyx_t_6) {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":821
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
  * 
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num             # <<<<<<<<<<<<<<
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")
  */
-      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
       __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
       __pyx_t_4 = 0;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -6474,20 +7076,20 @@
       __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
       if (__pyx_t_6) {
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
+        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_Raise(__pyx_t_4, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-        __PYX_ERR(1, 823, __pyx_L1_error)
+        __PYX_ERR(2, 847, __pyx_L1_error)
 
-        /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":822
+        /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
@@ -6496,252 +7098,252 @@
  */
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":826
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 98;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":827
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":828
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x68;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":829
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 72;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":830
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":854
  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 854, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 854, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x69;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":831
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 855, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 73;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":832
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
  *             elif t == NPY_INT:         f[0] = 105 #"i"
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 856, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 856, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x6C;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":833
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":857
  *             elif t == NPY_UINT:        f[0] =  73 #"I"
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 857, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 857, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 76;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":834
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
  *             elif t == NPY_LONG:        f[0] = 108 #"l"
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 858, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 858, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x71;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":835
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":859
  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 859, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 859, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 81;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":836
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 860, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 860, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x66;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":837
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 861, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 861, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x64;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":838
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":862
  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 862, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 862, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 0x67;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":839
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":863
  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 863, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 863, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -6750,18 +7352,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":840
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":864
  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 864, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 864, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -6770,18 +7372,18 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":841
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":865
  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  */
-      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
+      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 865, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
+      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 865, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 90;
@@ -6790,25 +7392,25 @@
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":842
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":866
  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  */
-      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
+      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 866, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
+      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
+      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 866, __pyx_L1_error)
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       if (__pyx_t_6) {
         (__pyx_v_f[0]) = 79;
         goto __pyx_L15;
       }
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":844
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":868
  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
@@ -6816,23 +7418,23 @@
  *         else:
  */
       /*else*/ {
-        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
+        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
-        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
+        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_4);
         __Pyx_GIVEREF(__pyx_t_3);
         PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
         __pyx_t_3 = 0;
-        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
+        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 868, __pyx_L1_error)
         __Pyx_GOTREF(__pyx_t_3);
         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
         __Pyx_Raise(__pyx_t_3, 0, 0, 0);
         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-        __PYX_ERR(1, 844, __pyx_L1_error)
+        __PYX_ERR(2, 868, __pyx_L1_error)
       }
       __pyx_L15:;
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":845
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":869
  *             else:
  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
  *             f += 1             # <<<<<<<<<<<<<<
@@ -6841,7 +7443,7 @@
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":820
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
  *         offset[0] += child.itemsize
  * 
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
@@ -6851,7 +7453,7 @@
       goto __pyx_L13;
     }
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":849
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":873
  *             # Cython ignores struct boundary information ("T{...}"),
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
@@ -6859,12 +7461,12 @@
  * 
  */
     /*else*/ {
-      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
+      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 873, __pyx_L1_error)
       __pyx_v_f = __pyx_t_9;
     }
     __pyx_L13:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":794
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *     cdef tuple fields
  * 
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
@@ -6874,7 +7476,7 @@
   }
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":850
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":874
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)
  *     return f             # <<<<<<<<<<<<<<
@@ -6884,8 +7486,8 @@
   __pyx_r = __pyx_v_f;
   goto __pyx_L0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":785
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
+ *         return ()
  * 
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
@@ -6909,7 +7511,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -6924,7 +7526,7 @@
   int __pyx_t_2;
   __Pyx_RefNannySetupContext("set_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -6935,7 +7537,7 @@
   __pyx_t_2 = (__pyx_t_1 != 0);
   if (__pyx_t_2) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":969
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":993
  *      cdef PyObject* baseptr
  *      if base is None:
  *          baseptr = NULL             # <<<<<<<<<<<<<<
@@ -6944,7 +7546,7 @@
  */
     __pyx_v_baseptr = NULL;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":968
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
  * cdef inline void set_array_base(ndarray arr, object base):
  *      cdef PyObject* baseptr
  *      if base is None:             # <<<<<<<<<<<<<<
@@ -6954,7 +7556,7 @@
     goto __pyx_L3;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":971
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
  *          baseptr = NULL
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
@@ -6964,7 +7566,7 @@
   /*else*/ {
     Py_INCREF(__pyx_v_base);
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":972
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
  *      else:
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
@@ -6975,7 +7577,7 @@
   }
   __pyx_L3:;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":973
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
  *          Py_INCREF(base) # important to do this before decref below!
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
@@ -6984,7 +7586,7 @@
  */
   Py_XDECREF(__pyx_v_arr->base);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":974
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)
  *      arr.base = baseptr             # <<<<<<<<<<<<<<
@@ -6993,7 +7595,7 @@
  */
   __pyx_v_arr->base = __pyx_v_baseptr;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":966
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
  * 
  * 
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
@@ -7005,7 +7607,7 @@
   __Pyx_RefNannyFinishContext();
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -7019,7 +7621,7 @@
   int __pyx_t_1;
   __Pyx_RefNannySetupContext("get_array_base", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -7029,7 +7631,7 @@
   __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
   if (__pyx_t_1) {
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":978
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:
  *         return None             # <<<<<<<<<<<<<<
@@ -7041,7 +7643,7 @@
     __pyx_r = Py_None;
     goto __pyx_L0;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":977
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
  * 
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
@@ -7050,7 +7652,7 @@
  */
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":980
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
  *         return None
  *     else:
  *         return <object>arr.base             # <<<<<<<<<<<<<<
@@ -7064,7 +7666,7 @@
     goto __pyx_L0;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":976
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
  *      arr.base = baseptr
  * 
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
@@ -7079,7 +7681,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -7100,7 +7702,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_array", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7116,16 +7718,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":987
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
  * cdef inline int import_array() except -1:
  *     try:
  *         _import_array()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")
  */
-      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)
+      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1011, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7136,11 +7738,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":988
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
  *     try:
  *         _import_array()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -7150,44 +7751,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1012, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1013, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 989, __pyx_L5_except_error)
+      __PYX_ERR(2, 1013, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":986
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
  * # Cython code.
  * cdef inline int import_array() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_array()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":985
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
  * # Versions of the import_* functions which are more suitable for
  * # Cython code.
  * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
@@ -7210,7 +7810,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -7231,7 +7831,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_umath", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7247,16 +7847,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":993
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1017
  * cdef inline int import_umath() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1017, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7267,11 +7867,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":994
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1018
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -7281,44 +7880,43 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1018, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1019, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 995, __pyx_L5_except_error)
+      __PYX_ERR(2, 1019, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":992
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
  * 
  * cdef inline int import_umath() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":991
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
  *         raise ImportError("numpy.core.multiarray failed to import")
  * 
  * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
@@ -7341,7 +7939,7 @@
   return __pyx_r;
 }
 
-/* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+/* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -7362,7 +7960,7 @@
   PyObject *__pyx_t_8 = NULL;
   __Pyx_RefNannySetupContext("import_ufunc", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7378,16 +7976,16 @@
     __Pyx_XGOTREF(__pyx_t_3);
     /*try:*/ {
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":999
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1023
  * cdef inline int import_ufunc() except -1:
  *     try:
  *         _import_umath()             # <<<<<<<<<<<<<<
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")
  */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)
+      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1023, __pyx_L3_error)
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
@@ -7398,11 +7996,10 @@
     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
     __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L10_try_end;
+    goto __pyx_L8_try_end;
     __pyx_L3_error:;
-    __Pyx_PyThreadState_assign
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1000
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1024
  *     try:
  *         _import_umath()
  *     except Exception:             # <<<<<<<<<<<<<<
@@ -7411,42 +8008,41 @@
     __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
     if (__pyx_t_4) {
       __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
+      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1024, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_5);
       __Pyx_GOTREF(__pyx_t_6);
       __Pyx_GOTREF(__pyx_t_7);
 
-      /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+      /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
+      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1025, __pyx_L5_except_error)
       __Pyx_GOTREF(__pyx_t_8);
       __Pyx_Raise(__pyx_t_8, 0, 0, 0);
       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 1001, __pyx_L5_except_error)
+      __PYX_ERR(2, 1025, __pyx_L5_except_error)
     }
     goto __pyx_L5_except_error;
     __pyx_L5_except_error:;
 
-    /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":998
+    /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
  * 
  * cdef inline int import_ufunc() except -1:
  *     try:             # <<<<<<<<<<<<<<
  *         _import_umath()
  *     except Exception:
  */
-    __Pyx_PyThreadState_assign
     __Pyx_XGIVEREF(__pyx_t_1);
     __Pyx_XGIVEREF(__pyx_t_2);
     __Pyx_XGIVEREF(__pyx_t_3);
     __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
     goto __pyx_L1_error;
-    __pyx_L10_try_end:;
+    __pyx_L8_try_end:;
   }
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -7489,8 +8085,8 @@
 }
 
 static void __pyx_tp_dealloc_8skgarden_8mondrian_4tree_6_utils_Stack(PyObject *o) {
-  #if PY_VERSION_HEX >= 0x030400a1
-  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
+  #if CYTHON_USE_TP_FINALIZE
+  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
     if (PyObject_CallFinalizerFromDealloc(o)) return;
   }
   #endif
@@ -7506,6 +8102,8 @@
 }
 
 static PyMethodDef __pyx_methods_8skgarden_8mondrian_4tree_6_utils_Stack[] = {
+  {"__reduce_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_6_utils_5Stack_5__reduce_cython__, METH_NOARGS, 0},
+  {"__setstate_cython__", (PyCFunction)__pyx_pw_8skgarden_8mondrian_4tree_6_utils_5Stack_7__setstate_cython__, METH_O, 0},
   {0, 0, 0, 0}
 };
 
@@ -7572,17 +8170,31 @@
 };
 
 #if PY_MAJOR_VERSION >= 3
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
+static int __pyx_pymod_exec__utils(PyObject* module); /*proto*/
+static PyModuleDef_Slot __pyx_moduledef_slots[] = {
+  {Py_mod_create, (void*)__pyx_pymod_create},
+  {Py_mod_exec, (void*)__pyx_pymod_exec__utils},
+  {0, NULL}
+};
+#endif
+
 static struct PyModuleDef __pyx_moduledef = {
-  #if PY_VERSION_HEX < 0x03020000
-    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
-  #else
     PyModuleDef_HEAD_INIT,
-  #endif
     "_utils",
     0, /* m_doc */
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    0, /* m_size */
+  #else
     -1, /* m_size */
+  #endif
     __pyx_methods /* m_methods */,
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+    __pyx_moduledef_slots, /* m_slots */
+  #else
     NULL, /* m_reload */
+  #endif
     NULL, /* m_traverse */
     NULL, /* m_clear */
     NULL /* m_free */
@@ -7596,16 +8208,20 @@
   {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
   {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
   {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
+  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
   {&__pyx_n_s_capacity, __pyx_k_capacity, sizeof(__pyx_k_capacity), 0, 0, 1, 1},
+  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
   {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
   {&__pyx_kp_s_could_not_allocate_d_bytes, __pyx_k_could_not_allocate_d_bytes, sizeof(__pyx_k_could_not_allocate_d_bytes), 0, 0, 1, 0},
   {&__pyx_kp_s_could_not_allocate_d_d_bytes, __pyx_k_could_not_allocate_d_d_bytes, sizeof(__pyx_k_could_not_allocate_d_d_bytes), 0, 0, 1, 0},
-  {&__pyx_kp_s_home_manoj_scikit_garden_skgard, __pyx_k_home_manoj_scikit_garden_skgard, sizeof(__pyx_k_home_manoj_scikit_garden_skgard), 0, 0, 1, 0},
+  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
   {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
+  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
   {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
   {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
+  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
   {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
   {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
   {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
@@ -7614,17 +8230,24 @@
   {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
   {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
   {&__pyx_n_s_realloc_test, __pyx_k_realloc_test, sizeof(__pyx_k_realloc_test), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
+  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
+  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
   {&__pyx_n_s_skgarden_mondrian_tree__utils, __pyx_k_skgarden_mondrian_tree__utils, sizeof(__pyx_k_skgarden_mondrian_tree__utils), 0, 0, 1, 1},
+  {&__pyx_kp_s_skgarden_mondrian_tree__utils_py, __pyx_k_skgarden_mondrian_tree__utils_py, sizeof(__pyx_k_skgarden_mondrian_tree__utils_py), 0, 0, 1, 0},
   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
   {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
   {0, 0, 0, 0, 0, 0, 0}
 };
 static int __Pyx_InitCachedBuiltins(void) {
   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 34, __pyx_L1_error)
-  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
-  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 231, __pyx_L1_error)
-  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
-  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
+  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 97, __pyx_L1_error)
+  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
+  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 235, __pyx_L1_error)
+  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 823, __pyx_L1_error)
+  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1013, __pyx_L1_error)
   return 0;
   __pyx_L1_error:;
   return -1;
@@ -7634,102 +8257,121 @@
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":218
+  /* "(tree fragment)":2
+ * def __reduce_cython__(self):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ */
+  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple_);
+  __Pyx_GIVEREF(__pyx_tuple_);
+
+  /* "(tree fragment)":4
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
+ * def __setstate_cython__(self, __pyx_state):
+ *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
+ */
+  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__2);
+  __Pyx_GIVEREF(__pyx_tuple__2);
+
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
  * 
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
-  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 218, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple_);
-  __Pyx_GIVEREF(__pyx_tuple_);
+  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 235, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__3);
+  __Pyx_GIVEREF(__pyx_tuple__3);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":222
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
  * 
  *             info.buf = PyArray_DATA(self)
  */
-  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 222, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__2);
-  __Pyx_GIVEREF(__pyx_tuple__2);
+  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 239, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__4);
+  __Pyx_GIVEREF(__pyx_tuple__4);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":259
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
  *                 if ((descr.byteorder == c'>' and little_endian) or
  *                     (descr.byteorder == c'<' and not little_endian)):
  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *                 if   t == NPY_BYTE:        f = "b"
  *                 elif t == NPY_UBYTE:       f = "B"
  */
-  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 259, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__3);
-  __Pyx_GIVEREF(__pyx_tuple__3);
+  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 276, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__5);
+  __Pyx_GIVEREF(__pyx_tuple__5);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":799
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
  * 
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
  * 
  *         if ((child.byteorder == c'>' and little_endian) or
  */
-  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 799, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__4);
-  __Pyx_GIVEREF(__pyx_tuple__4);
+  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 823, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__6);
+  __Pyx_GIVEREF(__pyx_tuple__6);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":803
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
  *             # One could encode it in the format string and have Cython
  *             # complain instead, BUT: < and > in format strings also imply
  */
-  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 803, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__5);
-  __Pyx_GIVEREF(__pyx_tuple__5);
+  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 827, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__7);
+  __Pyx_GIVEREF(__pyx_tuple__7);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":823
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
  * 
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
-  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 823, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__6);
-  __Pyx_GIVEREF(__pyx_tuple__6);
+  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 847, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__8);
+  __Pyx_GIVEREF(__pyx_tuple__8);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":989
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
  *         _import_array()
  *     except Exception:
  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_umath() except -1:
  */
-  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 989, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__7);
-  __Pyx_GIVEREF(__pyx_tuple__7);
+  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 1013, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__9);
+  __Pyx_GIVEREF(__pyx_tuple__9);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":995
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  * 
  * cdef inline int import_ufunc() except -1:
  */
-  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 995, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__8);
-  __Pyx_GIVEREF(__pyx_tuple__8);
+  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 1019, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__10);
+  __Pyx_GIVEREF(__pyx_tuple__10);
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
  *         _import_umath()
  *     except Exception:
  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
  */
-  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1001, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__9);
-  __Pyx_GIVEREF(__pyx_tuple__9);
+  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 1025, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__11);
+  __Pyx_GIVEREF(__pyx_tuple__11);
 
   /* "skgarden/mondrian/tree/_utils.pyx":45
  * 
@@ -7738,10 +8380,10 @@
  *     # Helper for tests. Tries to allocate <size_t>(-1) / 2 * sizeof(size_t)
  *     # bytes, which will always overflow.
  */
-  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_p); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 45, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__10);
-  __Pyx_GIVEREF(__pyx_tuple__10);
-  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_manoj_scikit_garden_skgard, __pyx_n_s_realloc_test, 45, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 45, __pyx_L1_error)
+  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_p); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 45, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple__12);
+  __Pyx_GIVEREF(__pyx_tuple__12);
+  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_skgarden_mondrian_tree__utils_py, __pyx_n_s_realloc_test, 45, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 45, __pyx_L1_error)
   __Pyx_RefNannyFinishContext();
   return 0;
   __pyx_L1_error:;
@@ -7762,11 +8404,55 @@
 #else
 PyMODINIT_FUNC PyInit__utils(void); /*proto*/
 PyMODINIT_FUNC PyInit__utils(void)
+#if CYTHON_PEP489_MULTI_PHASE_INIT
+{
+  return PyModuleDef_Init(&__pyx_moduledef);
+}
+static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
+    PyObject *value = PyObject_GetAttrString(spec, from_name);
+    int result = 0;
+    if (likely(value)) {
+        result = PyDict_SetItemString(moddict, to_name, value);
+        Py_DECREF(value);
+    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
+        PyErr_Clear();
+    } else {
+        result = -1;
+    }
+    return result;
+}
+static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
+    PyObject *module = NULL, *moddict, *modname;
+    if (__pyx_m)
+        return __Pyx_NewRef(__pyx_m);
+    modname = PyObject_GetAttrString(spec, "name");
+    if (unlikely(!modname)) goto bad;
+    module = PyModule_NewObject(modname);
+    Py_DECREF(modname);
+    if (unlikely(!module)) goto bad;
+    moddict = PyModule_GetDict(module);
+    if (unlikely(!moddict)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
+    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
+    return module;
+bad:
+    Py_XDECREF(module);
+    return NULL;
+}
+
+
+static int __pyx_pymod_exec__utils(PyObject *__pyx_pyinit_module)
+#endif
 #endif
 {
   PyObject *__pyx_t_1 = NULL;
   int __pyx_t_2;
   __Pyx_RefNannyDeclarations
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
+  #endif
   #if CYTHON_REFNANNY
   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
   if (!__Pyx_RefNanny) {
@@ -7793,6 +8479,9 @@
   #ifdef __Pyx_Generator_USED
   if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
+  #ifdef __Pyx_AsyncGen_USED
+  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   #ifdef __Pyx_StopAsyncIteration_USED
   if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
@@ -7804,15 +8493,21 @@
   #endif
   #endif
   /*--- Module creation code ---*/
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  __pyx_m = __pyx_pyinit_module;
+  Py_INCREF(__pyx_m);
+  #else
   #if PY_MAJOR_VERSION < 3
   __pyx_m = Py_InitModule4("_utils", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
   #else
   __pyx_m = PyModule_Create(&__pyx_moduledef);
   #endif
   if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
+  #endif
   __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
   Py_INCREF(__pyx_d);
   __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
   #if CYTHON_COMPILING_IN_PYPY
   Py_INCREF(__pyx_b);
   #endif
@@ -7843,6 +8538,8 @@
   if (__Pyx_ExportFunction("sizet_ptr_to_ndarray", (void (*)(void))__pyx_f_8skgarden_8mondrian_4tree_6_utils_sizet_ptr_to_ndarray, "PyArrayObject *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ExportFunction("rand_int", (void (*)(void))__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_int, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ExportFunction("rand_uniform", (void (*)(void))__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_uniform, "double (double, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ExportFunction("rand_multinomial", (void (*)(void))__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_multinomial, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t (__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
+  if (__Pyx_ExportFunction("rand_exponential", (void (*)(void))__pyx_f_8skgarden_8mondrian_4tree_6_utils_rand_exponential, "double (__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_UINT32_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ExportFunction("log", (void (*)(void))__pyx_f_8skgarden_8mondrian_4tree_6_utils_log, "double (double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ExportFunction("__pyx_fuse_0safe_realloc", (void (*)(void))__pyx_fuse_0__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_DTYPE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   if (__Pyx_ExportFunction("__pyx_fuse_1safe_realloc", (void (*)(void))__pyx_fuse_1__pyx_f_8skgarden_8mondrian_4tree_6_utils_safe_realloc, "__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t *(__pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
@@ -7857,10 +8554,11 @@
   __pyx_vtable_8skgarden_8mondrian_4tree_6_utils_Stack.is_empty = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *))__pyx_f_8skgarden_8mondrian_4tree_6_utils_5Stack_is_empty;
   __pyx_vtable_8skgarden_8mondrian_4tree_6_utils_Stack.push = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t, int, double, __pyx_t_8skgarden_8mondrian_4tree_6_utils_SIZE_t))__pyx_f_8skgarden_8mondrian_4tree_6_utils_5Stack_push;
   __pyx_vtable_8skgarden_8mondrian_4tree_6_utils_Stack.pop = (int (*)(struct __pyx_obj_8skgarden_8mondrian_4tree_6_utils_Stack *, struct __pyx_t_8skgarden_8mondrian_4tree_6_utils_StackRecord *))__pyx_f_8skgarden_8mondrian_4tree_6_utils_5Stack_pop;
-  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
+  if (PyType_Ready(&__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
   __pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack.tp_print = 0;
-  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
-  if (PyObject_SetAttrString(__pyx_m, "Stack", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
+  if (__Pyx_SetVtable(__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack.tp_dict, __pyx_vtabptr_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
+  if (PyObject_SetAttrString(__pyx_m, "Stack", (PyObject *)&__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
+  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
   __pyx_ptype_8skgarden_8mondrian_4tree_6_utils_Stack = &__pyx_type_8skgarden_8mondrian_4tree_6_utils_Stack;
   /*--- Type import code ---*/
   __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
@@ -7869,20 +8567,20 @@
   #else
   sizeof(PyHeapTypeObject),
   #endif
-  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
-  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
-  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
-  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
-  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
-  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = __Pyx_ImportType("skgarden.mondrian.tree._criterion", "Criterion", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(3, 21, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(3, 21, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = __Pyx_ImportType("skgarden.mondrian.tree._splitter", "Splitter", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(4, 35, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(4, 35, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = __Pyx_ImportType("skgarden.mondrian.tree._tree", "Tree", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(5, 41, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(5, 41, __pyx_L1_error)
-  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = __Pyx_ImportType("skgarden.mondrian.tree._tree", "TreeBuilder", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(5, 91, __pyx_L1_error)
-  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(5, 91, __pyx_L1_error)
+  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
+  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 163, __pyx_L1_error)
+  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 185, __pyx_L1_error)
+  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 189, __pyx_L1_error)
+  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 198, __pyx_L1_error)
+  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 885, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion = __Pyx_ImportType("skgarden.mondrian.tree._criterion", "Criterion", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_10_criterion_Criterion), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(4, 21, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_10_criterion_Criterion*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_10_criterion_Criterion->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_10_criterion_Criterion)) __PYX_ERR(4, 21, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter = __Pyx_ImportType("skgarden.mondrian.tree._splitter", "Splitter", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_9_splitter_Splitter), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(5, 35, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_9_splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_9_splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_9_splitter_Splitter)) __PYX_ERR(5, 35, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree = __Pyx_ImportType("skgarden.mondrian.tree._tree", "Tree", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_Tree), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(6, 41, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_Tree*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_Tree)) __PYX_ERR(6, 41, __pyx_L1_error)
+  __pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = __Pyx_ImportType("skgarden.mondrian.tree._tree", "TreeBuilder", sizeof(struct __pyx_obj_8skgarden_8mondrian_4tree_5_tree_TreeBuilder), 1); if (unlikely(!__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(6, 104, __pyx_L1_error)
+  __pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder = (struct __pyx_vtabstruct_8skgarden_8mondrian_4tree_5_tree_TreeBuilder*)__Pyx_GetVtable(__pyx_ptype_8skgarden_8mondrian_4tree_5_tree_TreeBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8skgarden_8mondrian_4tree_5_tree_TreeBuilder)) __PYX_ERR(6, 104, __pyx_L1_error)
   /*--- Variable import code ---*/
   /*--- Function import code ---*/
   /*--- Execution code ---*/
@@ -7909,7 +8607,7 @@
  * 
  * # =============================================================================
  */
-  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 21, __pyx_L1_error)
+  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 21, __pyx_L1_error)
 
   /* "skgarden/mondrian/tree/_utils.pyx":45
  * 
@@ -7928,12 +8626,12 @@
  * # cython: boundscheck=False
  * # cython: wraparound=False
  */
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "../../../usr/local/lib/python3.5/dist-packages/Cython/Includes/numpy/__init__.pxd":997
+  /* "../../miniconda3/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
  *         raise ImportError("numpy.core.umath failed to import")
  * 
  * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
@@ -7948,7 +8646,7 @@
   __Pyx_XDECREF(__pyx_t_1);
   if (__pyx_m) {
     if (__pyx_d) {
-      __Pyx_AddTraceback("init skgarden.mondrian.tree._utils", __pyx_clineno, __pyx_lineno, __pyx_filename);
+      __Pyx_AddTraceback("init skgarden.mondrian.tree._utils", 0, __pyx_lineno, __pyx_filename);
     }
     Py_DECREF(__pyx_m); __pyx_m = 0;
   } else if (!PyErr_Occurred()) {
@@ -7956,10 +8654,12 @@
   }
   __pyx_L0:;
   __Pyx_RefNannyFinishContext();
-  #if PY_MAJOR_VERSION < 3
-  return;
-  #else
+  #if CYTHON_PEP489_MULTI_PHASE_INIT
+  return (__pyx_m != NULL) ? 0 : -1;
+  #elif PY_MAJOR_VERSION >= 3
   return __pyx_m;
+  #else
+  return;
   #endif
 }
 
@@ -8155,11 +8855,7 @@
             "raise: exception class must be a subclass of BaseException");
         goto bad;
     }
-#if PY_VERSION_HEX >= 0x03030000
     if (cause) {
-#else
-    if (cause && cause != Py_None) {
-#endif
         PyObject *fixed_cause;
         if (cause == Py_None) {
             fixed_cause = NULL;
@@ -8187,7 +8883,7 @@
         PyErr_Restore(tmp_type, tmp_value, tb);
         Py_XDECREF(tmp_tb);
 #else
-        PyThreadState *tstate = PyThreadState_GET();
+        PyThreadState *tstate = __Pyx_PyThreadState_Current;
         PyObject* tmp_tb = tstate->curexc_traceback;
         if (tb != tmp_tb) {
             Py_INCREF(tb);
@@ -8203,30 +8899,35 @@
 #endif
 
 /* PyCFunctionFastCall */
-  #if CYTHON_FAST_PYCCALL
+#if CYTHON_FAST_PYCCALL
 static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
     PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
     PyCFunction meth = PyCFunction_GET_FUNCTION(func);
     PyObject *self = PyCFunction_GET_SELF(func);
+    int flags = PyCFunction_GET_FLAGS(func);
     assert(PyCFunction_Check(func));
-    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
+    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
     assert(nargs >= 0);
     assert(nargs == 0 || args != NULL);
     /* _PyCFunction_FastCallDict() must not be called with an exception set,
        because it may clear it (directly or indirectly) and so the
        caller loses its exception */
     assert(!PyErr_Occurred());
-    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
+    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
+        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
+    } else {
+        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
+    }
 }
-#endif  // CYTHON_FAST_PYCCALL
+#endif
 
 /* PyFunctionFastCall */
-  #if CYTHON_FAST_PYCALL
+#if CYTHON_FAST_PYCALL
 #include "frameobject.h"
 static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                                PyObject *globals) {
     PyFrameObject *f;
-    PyThreadState *tstate = PyThreadState_GET();
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
     PyObject **fastlocals;
     Py_ssize_t i;
     PyObject *result;
@@ -8337,11 +9038,11 @@
     Py_LeaveRecursiveCall();
     return result;
 }
-#endif  // CPython < 3.6
-#endif  // CYTHON_FAST_PYCALL
+#endif
+#endif
 
 /* PyObjectCallMethO */
-  #if CYTHON_COMPILING_IN_CPYTHON
+#if CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
     PyObject *self, *result;
     PyCFunction cfunc;
@@ -8361,7 +9062,7 @@
 #endif
 
 /* PyObjectCallOneArg */
-  #if CYTHON_COMPILING_IN_CPYTHON
+#if CYTHON_COMPILING_IN_CPYTHON
 static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
     PyObject *result;
     PyObject *args = PyTuple_New(1);
@@ -8378,11 +9079,7 @@
         return __Pyx_PyFunction_FastCall(func, &arg, 1);
     }
 #endif
-#ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
-#else
     if (likely(PyCFunction_Check(func))) {
-#endif
         if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
             return __Pyx_PyObject_CallMethO(func, arg);
 #if CYTHON_FAST_PYCCALL
@@ -8405,7 +9102,7 @@
 #endif
 
 /* PyObjectCallNoArg */
-    #if CYTHON_COMPILING_IN_CPYTHON
+#if CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
 #if CYTHON_FAST_PYCALL
     if (PyFunction_Check(func)) {
@@ -8413,7 +9110,7 @@
     }
 #endif
 #ifdef __Pyx_CyFunction_USED
-    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
+    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
 #else
     if (likely(PyCFunction_Check(func))) {
 #endif
@@ -8426,12 +9123,12 @@
 #endif
 
 /* ExtTypeTest */
-      static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
+  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
     if (unlikely(!type)) {
         PyErr_SetString(PyExc_SystemError, "Missing type object");
         return 0;
     }
-    if (likely(PyObject_TypeCheck(obj, type)))
+    if (likely(__Pyx_TypeCheck(obj, type)))
         return 1;
     PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                  Py_TYPE(obj)->tp_name, type->tp_name);
@@ -8439,7 +9136,7 @@
 }
 
 /* RaiseDoubleKeywords */
-      static void __Pyx_RaiseDoubleKeywordsError(
+  static void __Pyx_RaiseDoubleKeywordsError(
     const char* func_name,
     PyObject* kw_name)
 {
@@ -8453,7 +9150,7 @@
 }
 
 /* ParseKeywords */
-      static int __Pyx_ParseOptionalKeywords(
+  static int __Pyx_ParseOptionalKeywords(
     PyObject *kwds,
     PyObject **argnames[],
     PyObject *kwds2,
@@ -8555,7 +9252,7 @@
 }
 
 /* RaiseArgTupleInvalid */
-      static void __Pyx_RaiseArgtupleInvalid(
+  static void __Pyx_RaiseArgtupleInvalid(
     const char* func_name,
     int exact,
     Py_ssize_t num_min,
@@ -8581,41 +9278,56 @@
 }
 
 /* RaiseTooManyValuesToUnpack */
-      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
+  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
     PyErr_Format(PyExc_ValueError,
                  "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
 }
 
 /* RaiseNeedMoreValuesToUnpack */
-      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
+  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
     PyErr_Format(PyExc_ValueError,
                  "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                  index, (index == 1) ? "" : "s");
 }
 
 /* RaiseNoneIterError */
-      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
+  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
 }
 
 /* SaveResetException */
-      #if CYTHON_FAST_THREAD_STATE
+  #if CYTHON_FAST_THREAD_STATE
 static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
+    #if PY_VERSION_HEX >= 0x030700A2
+    *type = tstate->exc_state.exc_type;
+    *value = tstate->exc_state.exc_value;
+    *tb = tstate->exc_state.exc_traceback;
+    #else
     *type = tstate->exc_type;
     *value = tstate->exc_value;
     *tb = tstate->exc_traceback;
+    #endif
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
 }
 static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
     PyObject *tmp_type, *tmp_value, *tmp_tb;
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = type;
+    tstate->exc_state.exc_value = value;
+    tstate->exc_state.exc_traceback = tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = type;
     tstate->exc_value = value;
     tstate->exc_traceback = tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -8623,17 +9335,32 @@
 #endif
 
 /* PyErrExceptionMatches */
-      #if CYTHON_FAST_THREAD_STATE
+  #if CYTHON_FAST_THREAD_STATE
+static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
+    Py_ssize_t i, n;
+    n = PyTuple_GET_SIZE(tuple);
+#if PY_MAJOR_VERSION >= 3
+    for (i=0; i<n; i++) {
+        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
+    }
+#endif
+    for (i=0; i<n; i++) {
+        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
+    }
+    return 0;
+}
 static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
     PyObject *exc_type = tstate->curexc_type;
     if (exc_type == err) return 1;
     if (unlikely(!exc_type)) return 0;
-    return PyErr_GivenExceptionMatches(exc_type, err);
+    if (unlikely(PyTuple_Check(err)))
+        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
+    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
 }
 #endif
 
 /* GetException */
-      #if CYTHON_FAST_THREAD_STATE
+  #if CYTHON_FAST_THREAD_STATE
 static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
 #else
 static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
@@ -8670,12 +9397,21 @@
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_FAST_THREAD_STATE
+    #if PY_VERSION_HEX >= 0x030700A2
+    tmp_type = tstate->exc_state.exc_type;
+    tmp_value = tstate->exc_state.exc_value;
+    tmp_tb = tstate->exc_state.exc_traceback;
+    tstate->exc_state.exc_type = local_type;
+    tstate->exc_state.exc_value = local_value;
+    tstate->exc_state.exc_traceback = local_tb;
+    #else
     tmp_type = tstate->exc_type;
     tmp_value = tstate->exc_value;
     tmp_tb = tstate->exc_traceback;
     tstate->exc_type = local_type;
     tstate->exc_value = local_value;
     tstate->exc_traceback = local_tb;
+    #endif
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -8694,7 +9430,7 @@
 }
 
 /* SetVTable */
-        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
+    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
 #if PY_VERSION_HEX >= 0x02070000
     PyObject *ob = PyCapsule_New(vtable, 0, 0);
 #else
@@ -8711,8 +9447,84 @@
     return -1;
 }
 
+/* SetupReduce */
+    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
+  int ret;
+  PyObject *name_attr;
+  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
+  if (likely(name_attr)) {
+      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
+  } else {
+      ret = -1;
+  }
+  if (unlikely(ret < 0)) {
+      PyErr_Clear();
+      ret = 0;
+  }
+  Py_XDECREF(name_attr);
+  return ret;
+}
+static int __Pyx_setup_reduce(PyObject* type_obj) {
+    int ret = 0;
+    PyObject *object_reduce = NULL;
+    PyObject *object_reduce_ex = NULL;
+    PyObject *reduce = NULL;
+    PyObject *reduce_ex = NULL;
+    PyObject *reduce_cython = NULL;
+    PyObject *setstate = NULL;
+    PyObject *setstate_cython = NULL;
+#if CYTHON_USE_PYTYPE_LOOKUP
+    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
+#else
+    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
+#endif
+#if CYTHON_USE_PYTYPE_LOOKUP
+    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#else
+    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
+#endif
+    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
+    if (reduce_ex == object_reduce_ex) {
+#if CYTHON_USE_PYTYPE_LOOKUP
+        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#else
+        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
+#endif
+        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
+        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
+            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
+            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
+            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
+            if (!setstate) PyErr_Clear();
+            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
+                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
+                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
+                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
+            }
+            PyType_Modified((PyTypeObject*)type_obj);
+        }
+    }
+    goto GOOD;
+BAD:
+    if (!PyErr_Occurred())
+        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
+    ret = -1;
+GOOD:
+#if !CYTHON_USE_PYTYPE_LOOKUP
+    Py_XDECREF(object_reduce);
+    Py_XDECREF(object_reduce_ex);
+#endif
+    Py_XDECREF(reduce);
+    Py_XDECREF(reduce_ex);
+    Py_XDECREF(reduce_cython);
+    Py_XDECREF(setstate);
+    Py_XDECREF(setstate_cython);
+    return ret;
+}
+
 /* GetVTable */
-        static void* __Pyx_GetVtable(PyObject *dict) {
+    static void* __Pyx_GetVtable(PyObject *dict) {
     void* ptr;
     PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
     if (!ob)
@@ -8732,13 +9544,13 @@
 }
 
 /* Import */
-        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
+    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
     PyObject *empty_list = 0;
     PyObject *module = 0;
     PyObject *global_dict = 0;
     PyObject *empty_dict = 0;
     PyObject *list;
-    #if PY_VERSION_HEX < 0x03030000
+    #if PY_MAJOR_VERSION < 3
     PyObject *py_import;
     py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
     if (!py_import)
@@ -8762,17 +9574,8 @@
         #if PY_MAJOR_VERSION >= 3
         if (level == -1) {
             if (strchr(__Pyx_MODULE_NAME, '.')) {
-                #if PY_VERSION_HEX < 0x03030000
-                PyObject *py_level = PyInt_FromLong(1);
-                if (!py_level)
-                    goto bad;
-                module = PyObject_CallFunctionObjArgs(py_import,
-                    name, global_dict, empty_dict, list, py_level, NULL);
-                Py_DECREF(py_level);
-                #else
                 module = PyImport_ImportModuleLevelObject(
                     name, global_dict, empty_dict, list, 1);
-                #endif
                 if (!module) {
                     if (!PyErr_ExceptionMatches(PyExc_ImportError))
                         goto bad;
@@ -8783,7 +9586,7 @@
         }
         #endif
         if (!module) {
-            #if PY_VERSION_HEX < 0x03030000
+            #if PY_MAJOR_VERSION < 3
             PyObject *py_level = PyInt_FromLong(level);
             if (!py_level)
                 goto bad;
@@ -8797,7 +9600,7 @@
         }
     }
 bad:
-    #if PY_VERSION_HEX < 0x03030000
+    #if PY_MAJOR_VERSION < 3
     Py_XDECREF(py_import);
     #endif
     Py_XDECREF(empty_list);
@@ -8805,8 +9608,45 @@
     return module;
 }
 
+/* CLineInTraceback */
+    #ifndef CYTHON_CLINE_IN_TRACEBACK
+static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
+    PyObject *use_cline;
+    PyObject *ptype, *pvalue, *ptraceback;
+#if CYTHON_COMPILING_IN_CPYTHON
+    PyObject **cython_runtime_dict;
+#endif
+    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
+#if CYTHON_COMPILING_IN_CPYTHON
+    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
+    if (likely(cython_runtime_dict)) {
+      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
+    } else
+#endif
+    {
+      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
+      if (use_cline_obj) {
+        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
+        Py_DECREF(use_cline_obj);
+      } else {
+        PyErr_Clear();
+        use_cline = NULL;
+      }
+    }
+    if (!use_cline) {
+        c_line = 0;
+        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
+    }
+    else if (PyObject_Not(use_cline) != 0) {
+        c_line = 0;
+    }
+    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
+    return c_line;
+}
+#endif
+
 /* CodeObjectCache */
-        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
+    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
     int start = 0, mid = 0, end = count - 1;
     if (end >= 0 && code_line > entries[end].code_line) {
         return count;
@@ -8886,7 +9726,7 @@
 }
 
 /* AddTraceback */
-        #include "compile.h"
+    #include "compile.h"
 #include "frameobject.h"
 #include "traceback.h"
 static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
@@ -8945,18 +9785,22 @@
                                int py_line, const char *filename) {
     PyCodeObject *py_code = 0;
     PyFrameObject *py_frame = 0;
-    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
+    PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    if (c_line) {
+        c_line = __Pyx_CLineForTraceback(tstate, c_line);
+    }
+    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
     if (!py_code) {
         py_code = __Pyx_CreateCodeObjectForTraceback(
             funcname, c_line, py_line, filename);
         if (!py_code) goto bad;
-        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
+        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
     }
     py_frame = PyFrame_New(
-        PyThreadState_GET(), /*PyThreadState *tstate,*/
-        py_code,             /*PyCodeObject *code,*/
-        __pyx_d,      /*PyObject *globals,*/
-        0                    /*PyObject *locals*/
+        tstate,            /*PyThreadState *tstate,*/
+        py_code,           /*PyCodeObject *code,*/
+        __pyx_d,    /*PyObject *globals,*/
+        0                  /*PyObject *locals*/
     );
     if (!py_frame) goto bad;
     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
@@ -8967,7 +9811,7 @@
 }
 
 /* CIntFromPyVerify */
-        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
+    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
 #define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
     __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
@@ -8988,8 +9832,39 @@
         return (target_type) value;\
     }
 
+/* CIntToPy */
+    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
+    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
+    const int is_unsigned = neg_one > const_zero;
+    if (is_unsigned) {
+        if (sizeof(Py_intptr_t) < sizeof(long)) {
+            return PyInt_FromLong((long) value);
+        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
+            return PyLong_FromUnsignedLong((unsigned long) value);
+#ifdef HAVE_LONG_LONG
+        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
+            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
+#endif
+        }
+    } else {
+        if (sizeof(Py_intptr_t) <= sizeof(long)) {
+            return PyInt_FromLong((long) value);
+#ifdef HAVE_LONG_LONG
+        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
+            return PyLong_FromLongLong((PY_LONG_LONG) value);
+#endif
+        }
+    }
+    {
+        int one = 1; int little = (int)*(unsigned char *)&one;
+        unsigned char *bytes = (unsigned char *)&value;
+        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
+                                     little, !is_unsigned);
+    }
+}
+
 /* None */
-        static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
+    static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
   int err;
   #ifdef WITH_THREAD
   PyGILState_STATE _save = PyGILState_Ensure();
@@ -9002,7 +9877,7 @@
 }
 
 /* Declarations */
-        #if CYTHON_CCOMPLEX
+    #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
       return ::std::complex< float >(x, y);
@@ -9022,7 +9897,7 @@
 #endif
 
 /* Arithmetic */
-        #if CYTHON_CCOMPLEX
+    #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -9157,7 +10032,7 @@
 #endif
 
 /* Declarations */
-        #if CYTHON_CCOMPLEX
+    #if CYTHON_CCOMPLEX
   #ifdef __cplusplus
     static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
       return ::std::complex< double >(x, y);
@@ -9177,7 +10052,7 @@
 #endif
 
 /* Arithmetic */
-        #if CYTHON_CCOMPLEX
+    #if CYTHON_CCOMPLEX
 #else
     static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        return (a.real == b.real) && (a.imag == b.imag);
@@ -9312,7 +10187,7 @@
 #endif
 
 /* CIntToPy */
-        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
+    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -9343,7 +10218,7 @@
 }
 
 /* CIntToPy */
-        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
+    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
     const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -9374,7 +10249,7 @@
 }
 
 /* CIntFromPy */
-        static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
+    static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9563,7 +10438,7 @@
 }
 
 /* CIntFromPy */
-        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
+    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
     const int neg_one = (int) -1, const_zero = (int) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9752,7 +10627,7 @@
 }
 
 /* CIntToPy */
-        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
+    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
     if (is_unsigned) {
@@ -9783,7 +10658,7 @@
 }
 
 /* CIntFromPy */
-        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
+    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
     const long neg_one = (long) -1, const_zero = (long) 0;
     const int is_unsigned = neg_one > const_zero;
 #if PY_MAJOR_VERSION < 3
@@ -9971,8 +10846,80 @@
     return (long) -1;
 }
 
+/* FastTypeChecks */
+    #if CYTHON_COMPILING_IN_CPYTHON
+static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
+    while (a) {
+        a = a->tp_base;
+        if (a == b)
+            return 1;
+    }
+    return b == &PyBaseObject_Type;
+}
+static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
+    PyObject *mro;
+    if (a == b) return 1;
+    mro = a->tp_mro;
+    if (likely(mro)) {
+        Py_ssize_t i, n;
+        n = PyTuple_GET_SIZE(mro);
+        for (i = 0; i < n; i++) {
+            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
+                return 1;
+        }
+        return 0;
+    }
+    return __Pyx_InBases(a, b);
+}
+#if PY_MAJOR_VERSION == 2
+static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
+    PyObject *exception, *value, *tb;
+    int res;
+    __Pyx_PyThreadState_declare
+    __Pyx_PyThreadState_assign
+    __Pyx_ErrFetch(&exception, &value, &tb);
+    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
+    if (unlikely(res == -1)) {
+        PyErr_WriteUnraisable(err);
+        res = 0;
+    }
+    if (!res) {
+        res = PyObject_IsSubclass(err, exc_type2);
+        if (unlikely(res == -1)) {
+            PyErr_WriteUnraisable(err);
+            res = 0;
+        }
+    }
+    __Pyx_ErrRestore(exception, value, tb);
+    return res;
+}
+#else
+static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
+    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
+    if (!res) {
+        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
+    }
+    return res;
+}
+#endif
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
+    if (likely(err == exc_type)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
+    }
+    return PyErr_GivenExceptionMatches(err, exc_type);
+}
+static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
+    if (likely(err == exc_type1 || err == exc_type2)) return 1;
+    if (likely(PyExceptionClass_Check(err))) {
+        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
+    }
+    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
+}
+#endif
+
 /* CheckBinaryVersion */
-        static int __Pyx_check_binary_version(void) {
+    static int __Pyx_check_binary_version(void) {
     char ctversion[4], rtversion[4];
     PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
     PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
@@ -9988,7 +10935,7 @@
 }
 
 /* FunctionExport */
-        static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
+    static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
     PyObject *d = 0;
     PyObject *cobj = 0;
     union {
@@ -10025,7 +10972,7 @@
 }
 
 /* ModuleImport */
-        #ifndef __PYX_HAVE_RT_ImportModule
+    #ifndef __PYX_HAVE_RT_ImportModule
 #define __PYX_HAVE_RT_ImportModule
 static PyObject *__Pyx_ImportModule(const char *name) {
     PyObject *py_name = 0;
@@ -10043,7 +10990,7 @@
 #endif
 
 /* TypeImport */
-        #ifndef __PYX_HAVE_RT_ImportType
+    #ifndef __PYX_HAVE_RT_ImportType
 #define __PYX_HAVE_RT_ImportType
 static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
     size_t size, int strict)
@@ -10108,7 +11055,7 @@
 #endif
 
 /* InitStrings */
-        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
+    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
     while (t->p) {
         #if PY_MAJOR_VERSION < 3
         if (t->is_unicode) {
@@ -10133,6 +11080,8 @@
         #endif
         if (!*t->p)
             return -1;
+        if (PyObject_Hash(*t->p) == -1)
+            PyErr_Clear();
         ++t;
     }
     return 0;
@@ -10141,50 +11090,57 @@
 static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
     return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
+static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
     Py_ssize_t ignore;
     return __Pyx_PyObject_AsStringAndSize(o, &ignore);
 }
-static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
-#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
-    if (
-#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-            __Pyx_sys_getdefaultencoding_not_ascii &&
-#endif
-            PyUnicode_Check(o)) {
-#if PY_VERSION_HEX < 0x03030000
-        char* defenc_c;
-        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
-        if (!defenc) return NULL;
-        defenc_c = PyBytes_AS_STRING(defenc);
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+#if !CYTHON_PEP393_ENABLED
+static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    char* defenc_c;
+    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
+    if (!defenc) return NULL;
+    defenc_c = PyBytes_AS_STRING(defenc);
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        {
-            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
-            char* c;
-            for (c = defenc_c; c < end; c++) {
-                if ((unsigned char) (*c) >= 128) {
-                    PyUnicode_AsASCIIString(o);
-                    return NULL;
-                }
+    {
+        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
+        char* c;
+        for (c = defenc_c; c < end; c++) {
+            if ((unsigned char) (*c) >= 128) {
+                PyUnicode_AsASCIIString(o);
+                return NULL;
             }
         }
+    }
 #endif
-        *length = PyBytes_GET_SIZE(defenc);
-        return defenc_c;
+    *length = PyBytes_GET_SIZE(defenc);
+    return defenc_c;
+}
 #else
-        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
+static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
 #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
-        if (PyUnicode_IS_ASCII(o)) {
-            *length = PyUnicode_GET_LENGTH(o);
-            return PyUnicode_AsUTF8(o);
-        } else {
-            PyUnicode_AsASCIIString(o);
-            return NULL;
-        }
+    if (likely(PyUnicode_IS_ASCII(o))) {
+        *length = PyUnicode_GET_LENGTH(o);
+        return PyUnicode_AsUTF8(o);
+    } else {
+        PyUnicode_AsASCIIString(o);
+        return NULL;
+    }
 #else
-        return PyUnicode_AsUTF8AndSize(o, length);
+    return PyUnicode_AsUTF8AndSize(o, length);
+#endif
+}
 #endif
 #endif
+static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
+#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
+    if (
+#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
+            __Pyx_sys_getdefaultencoding_not_ascii &&
+#endif
+            PyUnicode_Check(o)) {
+        return __Pyx_PyUnicode_AsStringAndSize(o, length);
     } else
 #endif
 #if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
@@ -10208,6 +11164,26 @@
    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
    else return PyObject_IsTrue(x);
 }
+static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
+#if PY_MAJOR_VERSION >= 3
+    if (PyLong_Check(result)) {
+        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
+                "__int__ returned non-int (type %.200s).  "
+                "The ability to return an instance of a strict subclass of int "
+                "is deprecated, and may be removed in a future version of Python.",
+                Py_TYPE(result)->tp_name)) {
+            Py_DECREF(result);
+            return NULL;
+        }
+        return result;
+    }
+#endif
+    PyErr_Format(PyExc_TypeError,
+                 "__%.4s__ returned non-%.4s (type %.200s)",
+                 type_name, type_name, Py_TYPE(result)->tp_name);
+    Py_DECREF(result);
+    return NULL;
+}
 static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
 #if CYTHON_USE_TYPE_SLOTS
   PyNumberMethods *m;
@@ -10215,9 +11191,9 @@
   const char *name = NULL;
   PyObject *res = NULL;
 #if PY_MAJOR_VERSION < 3
-  if (PyInt_Check(x) || PyLong_Check(x))
+  if (likely(PyInt_Check(x) || PyLong_Check(x)))
 #else
-  if (PyLong_Check(x))
+  if (likely(PyLong_Check(x)))
 #endif
     return __Pyx_NewRef(x);
 #if CYTHON_USE_TYPE_SLOTS
@@ -10225,32 +11201,30 @@
   #if PY_MAJOR_VERSION < 3
   if (m && m->nb_int) {
     name = "int";
-    res = PyNumber_Int(x);
+    res = m->nb_int(x);
   }
   else if (m && m->nb_long) {
     name = "long";
-    res = PyNumber_Long(x);
+    res = m->nb_long(x);
   }
   #else
-  if (m && m->nb_int) {
+  if (likely(m && m->nb_int)) {
     name = "int";
-    res = PyNumber_Long(x);
+    res = m->nb_int(x);
   }
   #endif
 #else
-  res = PyNumber_Int(x);
+  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
+    res = PyNumber_Int(x);
+  }
 #endif
-  if (res) {
+  if (likely(res)) {
 #if PY_MAJOR_VERSION < 3
-    if (!PyInt_Check(res) && !PyLong_Check(res)) {
+    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
 #else
-    if (!PyLong_Check(res)) {
+    if (unlikely(!PyLong_CheckExact(res))) {
 #endif
-      PyErr_Format(PyExc_TypeError,
-                   "__%.4s__ returned non-%.4s (type %.200s)",
-                   name, name, Py_TYPE(res)->tp_name);
-      Py_DECREF(res);
-      return NULL;
+        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
     }
   }
   else if (!PyErr_Occurred()) {
diff -ruN orig/skgarden/mondrian/tree/_utils.pxd new/skgarden/mondrian/tree/_utils.pxd
--- orig/skgarden/mondrian/tree/_utils.pxd	2017-06-07 04:33:08.000000000 -0700
+++ new/skgarden/mondrian/tree/_utils.pxd	2017-12-27 11:16:05.000000000 -0800
@@ -54,6 +54,10 @@
 cdef double rand_uniform(double low, double high,
                          UINT32_t* random_state) nogil
 
+cdef SIZE_t rand_multinomial(DTYPE_t* pvals, SIZE_t n_features,
+                             UINT32_t* random_state) nogil
+
+cdef double rand_exponential(DTYPE_t rate, UINT32_t* random_state) nogil
 
 cdef double log(double x) nogil
 
diff -ruN orig/skgarden/mondrian/tree/_utils.pyx new/skgarden/mondrian/tree/_utils.pyx
--- orig/skgarden/mondrian/tree/_utils.pyx	2017-06-07 04:33:08.000000000 -0700
+++ new/skgarden/mondrian/tree/_utils.pyx	2017-12-27 11:16:05.000000000 -0800
@@ -85,6 +85,32 @@
 cdef inline double log(double x) nogil:
     return ln(x) / ln(2.0)
 
+cdef inline int rand_multinomial(DTYPE_t* pvals, SIZE_t n_features,
+                                 UINT32_t* random_state) nogil:
+    """Sample n=1 from a multinomial where pvals is not normalized and cumulative"""
+    cdef double search
+    cdef DTYPE_t* cum_pvals = <DTYPE_t*> malloc(n_features * sizeof(DTYPE_t))
+    cdef SIZE_t f_j
+    cdef double lower_bound
+
+    cum_pvals[0] = pvals[0]
+    for f_j in range(1, n_features):
+        cum_pvals[f_j] = cum_pvals[f_j - 1] + pvals[f_j]
+
+    search = rand_uniform(0.0, cum_pvals[n_features-1], random_state)
+
+    for f_j in range(n_features):
+        if f_j == 0:
+            lower_bound = 0.0
+        else:
+            lower_bound = cum_pvals[f_j - 1]
+        if cum_pvals[f_j] >= search and lower_bound < search:
+            break
+    free(cum_pvals)
+    return f_j
+
+cdef inline double rand_exponential(DTYPE_t rate, UINT32_t* random_state) nogil:
+    return -ln(rand_uniform(0.0, 1.0, random_state)) / rate
 
 # =============================================================================
 # Stack data structure
diff -ruN orig/skgarden/mondrian/tree/setup.py new/skgarden/mondrian/tree/setup.py
--- orig/skgarden/mondrian/tree/setup.py	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/mondrian/tree/setup.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,37 +0,0 @@
-import os
-
-import numpy
-from numpy.distutils.misc_util import Configuration
-
-
-def configuration(parent_package="", top_path=None):
-    config = Configuration("tree", parent_package, top_path)
-    libraries = []
-    if os.name == 'posix':
-        libraries.append('m')
-    config.add_extension("_tree",
-                         sources=["_tree.pyx"],
-                         include_dirs=[numpy.get_include()],
-                         libraries=libraries,
-                         extra_compile_args=["-O3"])
-    config.add_extension("_splitter",
-                         sources=["_splitter.pyx"],
-                         include_dirs=[numpy.get_include()],
-                         libraries=libraries,
-                         extra_compile_args=["-O3"])
-    config.add_extension("_criterion",
-                         sources=["_criterion.pyx"],
-                         include_dirs=[numpy.get_include()],
-                         libraries=libraries,
-                         extra_compile_args=["-O3"])
-    config.add_extension("_utils",
-                         sources=["_utils.pyx"],
-                         include_dirs=[numpy.get_include()],
-                         libraries=libraries,
-                         extra_compile_args=["-O3"])
-
-    return config
-
-if __name__ == "__main__":
-    from numpy.distutils.core import setup
-    setup(**configuration(top_path="").todict())
diff -ruN orig/skgarden/mondrian/tree/tree.py new/skgarden/mondrian/tree/tree.py
--- orig/skgarden/mondrian/tree/tree.py	2017-06-07 04:55:21.000000000 -0700
+++ new/skgarden/mondrian/tree/tree.py	2017-12-27 11:16:05.000000000 -0800
@@ -29,6 +29,7 @@
 from sklearn.base import ClassifierMixin
 from sklearn.base import RegressorMixin
 from sklearn.externals import six
+from sklearn.preprocessing import LabelEncoder
 from sklearn.utils import check_random_state
 from sklearn.utils import compute_sample_weight
 from sklearn.utils.multiclass import check_classification_targets
@@ -40,6 +41,7 @@
 from ._criterion import Criterion
 from ._splitter import Splitter
 from ._tree import DepthFirstTreeBuilder
+from ._tree import PartialFitTreeBuilder
 from ._tree import Tree
 from . import _tree, _splitter, _criterion
 
@@ -90,7 +92,6 @@
 
     def fit(self, X, y, sample_weight=None, check_input=True,
             X_idx_sorted=None):
-
         random_state = check_random_state(self.random_state)
         if check_input:
             X, y = check_X_y(X, y, dtype=DTYPE, multi_output=False)
@@ -199,9 +200,7 @@
         if not isinstance(self.splitter, Splitter):
             splitter = SPLITTERS[self.splitter](criterion,
                                                 random_state)
-
         self.tree_ = Tree(self.n_features_, self.n_classes_, self.n_outputs_)
-
         builder = DepthFirstTreeBuilder(splitter, min_samples_split,
                                         max_depth)
         builder.build(self.tree_, X, y, sample_weight, X_idx_sorted)
@@ -329,6 +328,7 @@
         X = self._validate_X_predict(X, check_input)
         return self.tree_.decision_path(X)
 
+
 class BaseMondrianTree(BaseDecisionTree):
     """A Mondrian tree.
 
@@ -375,6 +375,76 @@
         If None, the random number generator is the RandomState instance used
         by `np.random`.
     """
+    def partial_fit(self, X, y, classes=None):
+        """
+        Incremental building of Mondrian Trees.
+
+        Parameters
+        ----------
+        X : array_like, shape = [n_samples, n_features]
+            The input samples. Internally, it will be converted to
+            ``dtype=np.float32``
+
+        y: array_like, shape = [n_samples]
+            Input targets.
+
+        classes: array_like, shape = [n_classes]
+            Ignored for a regression problem. For a classification
+            problem, if not provided this is inferred from y.
+            This is taken into account for only the first call to
+            partial_fit and ignored for subsequent calls.
+
+        Returns
+        -------
+        self: instance of MondrianTree
+        """
+        random_state = check_random_state(self.random_state)
+        X, y = check_X_y(X, y, dtype=DTYPE, multi_output=False, order="C")
+        is_classifier = isinstance(self, ClassifierMixin)
+        random_state = check_random_state(self.random_state)
+        max_depth = ((2 ** 31) - 1 if self.max_depth is None
+                     else self.max_depth)
+
+        # This is necessary to rebuild the tree if partial_fit is called
+        # after fit.
+        first_call = not hasattr(self, "first_")
+        if not hasattr(self, "first_"):
+            self.first_ = True
+
+        if is_classifier:
+            check_classification_targets(y)
+
+            # First call to partial_fit
+            if first_call:
+                if len(y) == 1 and classes is None:
+                    raise ValueError("Unable to infer classes. Should be "
+                                     "provided at the first call to partial_fit.")
+                self.le_ = LabelEncoder()
+                if classes is not None:
+                    self.le_.fit(classes)
+                else:
+                    self.le_.fit(y)
+                self.classes_ = self.le_.classes_
+            y = self.le_.transform(y)
+            n_classes = [len(self.le_.classes_)]
+        else:
+            n_classes = [1]
+
+        # To be consistent with sklearns tree architecture, we reshape.
+        y = np.array(y, dtype=np.float64)
+        y = np.reshape(y, (-1, 1))
+
+        # First call to partial_fit, initalize tree
+        if first_call:
+            self.n_features_ = X.shape[1]
+            self.n_classes_ = np.array(n_classes, dtype=np.intp)
+            self.n_outputs_ = 1
+            self.tree_ = Tree(self.n_features_, self.n_classes_, self.n_outputs_)
+
+        builder = PartialFitTreeBuilder(
+            self.min_samples_split, max_depth, random_state)
+        builder.build(self.tree_, X, y)
+        return self
 
     def weighted_decision_path(self, X, check_input=True):
         """
@@ -385,7 +455,7 @@
 
         Parameters
         ----------
-        X : array_like or sparse matrix, shape = [n_samples, n_features]
+        X : array_like, shape = [n_samples, n_features]
             The input samples. Internally, it will be converted to
             ``dtype=np.float32`` and if a sparse matrix is provided
             to a sparse ``csr_matrix``.
@@ -416,6 +486,24 @@
             min_samples_split=min_samples_split,
             random_state=random_state)
 
+    def partial_fit(self, X, y):
+        """
+        Incremental building of Mondrian Tree Regressors.
+
+        Parameters
+        ----------
+        X : array_like, shape = [n_samples, n_features]
+            The input samples. Internally, it will be converted to
+            ``dtype=np.float32``
+
+        y: array_like, shape = [n_samples]
+            Input targets.
+
+        Returns
+        -------
+        self: instance of MondrianTree
+        """
+        return super(MondrianTreeRegressor, self).partial_fit(X, y)
 
 class MondrianTreeClassifier(BaseMondrianTree, ClassifierMixin):
     def __init__(self,
@@ -452,3 +540,29 @@
         X = self._validate_X_predict(X, check_input)
 
         return self.tree_.predict(X, return_std=False, is_regression=False)[0]
+
+    def partial_fit(self, X, y, classes=None):
+        """
+        Incremental building of Mondrian Tree Classifiers.
+
+        Parameters
+        ----------
+        X : array_like, shape = [n_samples, n_features]
+            The input samples. Internally, it will be converted to
+            ``dtype=np.float32``
+
+        y: array_like, shape = [n_samples]
+            Input targets.
+
+        classes: array_like, shape = [n_classes]
+            Ignored for a regression problem. For a classification
+            problem, if not provided this is inferred from y.
+            This is taken into account for only the first call to
+            partial_fit and ignored for subsequent calls.
+
+        Returns
+        -------
+        self: instance of MondrianTree
+        """
+        return super(MondrianTreeClassifier, self).partial_fit(
+            X, y, classes=classes)
diff -ruN orig/skgarden/quantile/ensemble.py new/skgarden/quantile/ensemble.py
--- orig/skgarden/quantile/ensemble.py	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/quantile/ensemble.py	2017-12-27 11:16:05.000000000 -0800
@@ -1,3 +1,4 @@
+from __future__ import division
 import numpy as np
 from numpy import ma
 from sklearn.ensemble import ExtraTreesRegressor
diff -ruN orig/skgarden/quantile/setup.py new/skgarden/quantile/setup.py
--- orig/skgarden/quantile/setup.py	2017-06-06 04:04:49.000000000 -0700
+++ new/skgarden/quantile/setup.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,17 +0,0 @@
-import os
-
-import numpy
-from numpy.distutils.misc_util import Configuration
-
-
-def configuration(parent_package="", top_path=None):
-    config = Configuration("quantile", parent_package, top_path)
-    libraries = []
-    if os.name == 'posix':
-        libraries.append('m')
-    return config
-
-
-if __name__ == "__main__":
-    from numpy.distutils.core import setup
-    setup(**configuration(top_path="").todict())
diff -ruN orig/skgarden/setup.py new/skgarden/setup.py
--- orig/skgarden/setup.py	2017-06-07 04:57:18.000000000 -0700
+++ new/skgarden/setup.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-import os
-
-import numpy
-from numpy.distutils.misc_util import Configuration
-
-
-def configuration(parent_package="", top_path=None):
-    config = Configuration("skgarden", parent_package, top_path)
-    config.add_subpackage("mondrian")
-    config.add_subpackage("quantile")
-    libraries = []
-    if os.name == 'posix':
-        libraries.append('m')
-    return config
-
-
-if __name__ == "__main__":
-    from numpy.distutils.core import setup
-    setup(**configuration(top_path="").todict())
