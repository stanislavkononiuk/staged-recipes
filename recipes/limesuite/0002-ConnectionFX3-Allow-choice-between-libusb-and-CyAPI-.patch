From 0f4b40f8d65a82fa460212144d24cd3a9b694305 Mon Sep 17 00:00:00 2001
From: Ryan Volz <ryan.volz@gmail.com>
Date: Wed, 3 Mar 2021 15:54:25 -0500
Subject: [PATCH 2/2] ConnectionFX3: Allow choice between libusb and CyAPI at
 compile time.

---
 cmake/Modules/Findlibusb-1.0.cmake       |  4 +--
 src/ConnectionFX3/CMakeLists.txt         | 23 ++++++++++++--
 src/ConnectionFX3/ConnectionFX3.cpp      | 38 ++++++++++++------------
 src/ConnectionFX3/ConnectionFX3.h        | 18 +++++------
 src/ConnectionFX3/ConnectionFX3Entry.cpp | 10 +++----
 5 files changed, 56 insertions(+), 37 deletions(-)

diff --git a/cmake/Modules/Findlibusb-1.0.cmake b/cmake/Modules/Findlibusb-1.0.cmake
index 8b28d8db..7ae68f21 100644
--- a/cmake/Modules/Findlibusb-1.0.cmake
+++ b/cmake/Modules/Findlibusb-1.0.cmake
@@ -45,7 +45,7 @@
 
 if (LIBUSB_1_LIBRARIES AND LIBUSB_1_INCLUDE_DIRS)
   # in cache already
-  set(LIBUSB_FOUND TRUE)
+  set(LIBUSB_1_FOUND TRUE)
 else (LIBUSB_1_LIBRARIES AND LIBUSB_1_INCLUDE_DIRS)
   find_path(LIBUSB_1_INCLUDE_DIR
     NAMES
@@ -59,7 +59,7 @@ else (LIBUSB_1_LIBRARIES AND LIBUSB_1_INCLUDE_DIRS)
 	  libusb-1.0
   )
 
-  set(LIBUSB_1_LIBRARY_NAME usb-1.0)
+  set(LIBUSB_1_LIBRARY_NAME usb-1.0 libusb-1.0)
   if(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
     set(LIBUSB_1_LIBRARY_NAME usb)
   endif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
diff --git a/src/ConnectionFX3/CMakeLists.txt b/src/ConnectionFX3/CMakeLists.txt
index c33bd26e..351a4cbc 100644
--- a/src/ConnectionFX3/CMakeLists.txt
+++ b/src/ConnectionFX3/CMakeLists.txt
@@ -2,16 +2,35 @@
 ## Support for USB STREAM connection
 ########################################################################
 
-if(WIN32)
+
+option(ENABLE_BACKEND_CYAPI
+    "Enable CYAPI backend support for USB STREAM connection"
+    ${WIN32}
+)
+
+option(ENABLE_BACKEND_LIBUSB
+    "Enable libusb backend support for USB STREAM connection"
+    $<NOT:${ENABLE_BACKEND_CYAPI}>
+)
+
+if(ENABLE_BACKEND_CYAPI AND ENABLE_BACKEND_LIBUSB)
+    message(FATAL_ERROR
+        "Can't build both the CYAPI and LIBUSB backends at the same time"
+    )
+endif()
+
+if(ENABLE_BACKEND_CYAPI)
     find_package(CyAPI)
     set(USB_FOUND ${CYAPI_FOUND})
     set(USB_INCLUDE_DIRS ${CYAPI_INCLUDE_DIRS})
     set(USB_LIBRARIES ${CYAPI_LIBRARIES} SetupAPI)
-elseif(UNIX)
+    add_compile_definitions(CYAPI_ENABLED)
+elseif(ENABLE_BACKEND_LIBUSB)
     find_package(libusb-1.0)
     set(USB_FOUND ${LIBUSB_1_FOUND})
     set(USB_INCLUDE_DIRS ${LIBUSB_1_INCLUDE_DIRS})
     set(USB_LIBRARIES ${LIBUSB_1_LIBRARIES})
+    add_compile_definitions(LIBUSB_ENABLED)
 endif()
 
 message(STATUS "USB_INCLUDE_DIRS: ${USB_INCLUDE_DIRS}")
diff --git a/src/ConnectionFX3/ConnectionFX3.cpp b/src/ConnectionFX3/ConnectionFX3.cpp
index 56ff9a94..838f9181 100644
--- a/src/ConnectionFX3/ConnectionFX3.cpp
+++ b/src/ConnectionFX3/ConnectionFX3.cpp
@@ -56,7 +56,7 @@ ConnectionFX3::ConnectionFX3(void *arg, const std::string &vidpid, const std::st
     bulkCtrlAvailable = false;
     bulkCtrlInProgress = false;
     isConnected = false;
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     if(arg == nullptr)
         USBDevicePrimary = new CCyFX3Device();
     else
@@ -113,7 +113,7 @@ ConnectionFX3::ConnectionFX3(void *arg, const std::string &vidpid, const std::st
 ConnectionFX3::~ConnectionFX3()
 {
     Close();
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     delete USBDevicePrimary;
 #endif
 }
@@ -124,7 +124,7 @@ ConnectionFX3::~ConnectionFX3()
 int ConnectionFX3::Open(const std::string &vidpid, const std::string &serial, const unsigned index)
 {
     bulkCtrlAvailable = false;
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     if(index > USBDevicePrimary->DeviceCount())
         return ReportError(ERANGE, "ConnectionSTREAM: Device index out of range");
 
@@ -279,7 +279,7 @@ int ConnectionFX3::Open(const std::string &vidpid, const std::string &serial, co
 */
 void ConnectionFX3::Close()
 {
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     USBDevicePrimary->Close();
     for (int i = 0; i < MAX_EP_CNT; i++)
         InEndPt[i] = OutEndPt[i] = nullptr;
@@ -311,7 +311,7 @@ void ConnectionFX3::Close()
 */
 bool ConnectionFX3::IsOpen()
 {
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     return USBDevicePrimary->IsOpen() && isConnected;
     #else
     return isConnected;
@@ -334,7 +334,7 @@ int ConnectionFX3::Write(const unsigned char *buffer, const int length, int time
     unsigned char* wbuffer = new unsigned char[length];
     memcpy(wbuffer, buffer, length);
     bulkCtrlInProgress = false;
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     if(bulkCtrlAvailable
         && commandsToBulkCtrl.find(buffer[0]) != commandsToBulkCtrl.end())
     {
@@ -375,7 +375,7 @@ int ConnectionFX3::Read(unsigned char *buffer, const int length, int timeout_ms)
     if(IsOpen() == false)
         return 0;
 
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     if(bulkCtrlAvailable && bulkCtrlInProgress)
     {
         InCtrlBulkEndPt->XferData(buffer, len);
@@ -403,7 +403,7 @@ int ConnectionFX3::Read(unsigned char *buffer, const int length, int timeout_ms)
     return len;
 }
 
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
 /**	@brief Function for handling libusb callbacks
 */
 void callback_libusbtransfer(libusb_transfer *trans)
@@ -471,7 +471,7 @@ int ConnectionFX3::BeginDataReading(char *buffer, uint32_t length, int ep)
         return -1;
     }
     contexts[i].used = true;
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     if (InEndPt[streamBulkInAddr & 0xF])
     {
         contexts[i].EndPt = InEndPt[streamBulkInAddr & 0xF];
@@ -504,7 +504,7 @@ bool ConnectionFX3::WaitForReading(int contextHandle, unsigned int timeout_ms)
 {
     if(contextHandle >= 0 && contexts[contextHandle].used == true)
     {
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     int status = 0;
     status = contexts[contextHandle].EndPt->WaitForXfer(contexts[contextHandle].inOvLap, timeout_ms);
 	return status;
@@ -528,7 +528,7 @@ int ConnectionFX3::FinishDataReading(char *buffer, uint32_t length, int contextH
 {
     if(contextHandle >= 0 && contexts[contextHandle].used == true)
     {
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     int status = 0;
     long len = length;
     status = contexts[contextHandle].EndPt->FinishDataXfer((unsigned char*)buffer, len, contexts[contextHandle].inOvLap, contexts[contextHandle].context);
@@ -551,7 +551,7 @@ int ConnectionFX3::FinishDataReading(char *buffer, uint32_t length, int contextH
 */
 void ConnectionFX3::AbortReading(int ep)
 {
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     for (int i = 0; i < MAX_EP_CNT; i++)
         if (InEndPt[i] && InEndPt[i]->Address == 0x81)
 	        InEndPt[i]->Abort();
@@ -596,7 +596,7 @@ int ConnectionFX3::BeginDataSending(const char *buffer, uint32_t length, int ep)
     if(!contextFound)
         return -1;
     contextsToSend[i].used = true;
-    #ifndef __unix__
+    #ifdef CYAPI_ENABLED
     if (OutEndPt[streamBulkOutAddr])
     {
         contextsToSend[i].EndPt = OutEndPt[streamBulkOutAddr];
@@ -629,7 +629,7 @@ bool ConnectionFX3::WaitForSending(int contextHandle, unsigned int timeout_ms)
 {
     if(contextHandle >= 0 && contextsToSend[contextHandle].used == true )
     {
-#   ifndef __unix__
+#   ifdef CYAPI_ENABLED
 	int status = 0;
 	status = contextsToSend[contextHandle].EndPt->WaitForXfer(contextsToSend[contextHandle].inOvLap, timeout_ms);
 	return status;
@@ -653,7 +653,7 @@ int ConnectionFX3::FinishDataSending(const char *buffer, uint32_t length, int co
 {
     if(contextHandle >= 0 && contextsToSend[contextHandle].used == true)
     {
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
         long len = length;
         contextsToSend[contextHandle].EndPt->FinishDataXfer((unsigned char*)buffer, len, contextsToSend[contextHandle].inOvLap, contextsToSend[contextHandle].context);
         contextsToSend[contextHandle].used = false;
@@ -675,7 +675,7 @@ int ConnectionFX3::FinishDataSending(const char *buffer, uint32_t length, int co
 */
 void ConnectionFX3::AbortSending(int ep)
 {
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     for (int i = 0; i < MAX_EP_CNT; i++)
         if (OutEndPt[i] && OutEndPt[i]->Address == 0x01)
             OutEndPt[i]->Abort();
@@ -728,7 +728,7 @@ int ConnectionFX3::ProgramWrite(const char *buffer, const size_t length, const i
 {
     if (device == LMS64CProtocol::FX3 && programmingMode == 1)
     {
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
         libusb_device_descriptor desc;
         int ret = libusb_get_device_descriptor(libusb_get_device(dev_handle), &desc);
         if(ret<0)
@@ -738,7 +738,7 @@ int ConnectionFX3::ProgramWrite(const char *buffer, const size_t length, const i
         if (USBDevicePrimary->ProductID == 243)
 #endif
         {
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
             return fx3_usbboot_download((unsigned char*)buffer,length);
 #else
             char* filename = "fx3fw_image_tmp.img";
@@ -785,7 +785,7 @@ int ConnectionFX3::ResetStreamBuffers()
     return TransferPacket(ctrPkt);
 }
 
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
 
 #define MAX_FWIMG_SIZE  (512 * 1024)		// Maximum size of the firmware binary.
 #define GET_LSW(v)	((unsigned short)((v) & 0xFFFF))
diff --git a/src/ConnectionFX3/ConnectionFX3.h b/src/ConnectionFX3/ConnectionFX3.h
index 98fa9562..a139a2c1 100644
--- a/src/ConnectionFX3/ConnectionFX3.h
+++ b/src/ConnectionFX3/ConnectionFX3.h
@@ -16,7 +16,7 @@
 #include <thread>
 #include <ciso646>
 
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
 #include "windows.h"
 #include "CyAPI.h"
 #else
@@ -36,7 +36,7 @@ class USBTransferContext
 public:
     USBTransferContext() : used(false)
     {
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
         inOvLap = new OVERLAPPED;
         memset(inOvLap, 0, sizeof(OVERLAPPED));
         inOvLap->hEvent = CreateEvent(NULL, false, false, NULL);
@@ -50,7 +50,7 @@ public:
     }
     ~USBTransferContext()
     {
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
         CloseHandle(inOvLap->hEvent);
         delete inOvLap;
 #else
@@ -61,7 +61,7 @@ public:
     {
         if(used)
             return false;
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
         CloseHandle(inOvLap->hEvent);
         memset(inOvLap, 0, sizeof(OVERLAPPED));
         inOvLap->hEvent = CreateEvent(NULL, false, false, NULL);
@@ -69,7 +69,7 @@ public:
         return true;
     }
     bool used;
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     PUCHAR context;
     CCyUSBEndPoint* EndPt;
     OVERLAPPED* inOvLap;
@@ -116,15 +116,15 @@ protected:
 
     int ResetStreamBuffers() override;
     eConnectionType GetType(void) {return USB_PORT;}
-    
+
     static const int USB_MAX_CONTEXTS = 16; //maximum number of contexts for asynchronous transfers
-    
+
     USBTransferContext contexts[USB_MAX_CONTEXTS];
     USBTransferContext contextsToSend[USB_MAX_CONTEXTS];
 
     bool isConnected;
 
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     static const int MAX_EP_CNT = 16;
     CCyFX3Device* USBDevicePrimary;
     //control endpoints
@@ -162,7 +162,7 @@ public:
     std::vector<ConnectionHandle> enumerate(const ConnectionHandle& hint);
     IConnection* make(const ConnectionHandle& handle);
 protected:
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
     void *ctx; //not used, just for mirroring unix
 #else
     libusb_context* ctx; //a libusb session
diff --git a/src/ConnectionFX3/ConnectionFX3Entry.cpp b/src/ConnectionFX3/ConnectionFX3Entry.cpp
index bfa33b68..a7879db4 100644
--- a/src/ConnectionFX3/ConnectionFX3Entry.cpp
+++ b/src/ConnectionFX3/ConnectionFX3Entry.cpp
@@ -10,7 +10,7 @@
 
 using namespace lime;
 
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
 void ConnectionFX3Entry::handle_libusb_events()
 {
     struct timeval tv;
@@ -22,7 +22,7 @@ void ConnectionFX3Entry::handle_libusb_events()
         if(r != 0) lime::error("error libusb_handle_events %s", libusb_strerror(libusb_error(r)));
     }
 }
-#endif // __UNIX__
+#endif // LIBUSB_ENABLED
 
 //! make a static-initialized entry in the registry
 void __loadConnectionFX3Entry(void) //TODO fixme replace with LoadLibrary/dlopen
@@ -33,7 +33,7 @@ static ConnectionFX3Entry FX3Entry;
 ConnectionFX3Entry::ConnectionFX3Entry(void):
     ConnectionRegistryEntry("FX3")
 {
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
     int r = libusb_init(&ctx); //initialize the library for the session we just declared
     if(r < 0)
         lime::error("Init Error %i", r); //there was an error
@@ -50,7 +50,7 @@ ConnectionFX3Entry::ConnectionFX3Entry(void):
 
 ConnectionFX3Entry::~ConnectionFX3Entry(void)
 {
-#ifdef __unix__
+#ifdef LIBUSB_ENABLED
     mProcessUSBEvents.store(false);
     mUSBProcessingThread.join();
     libusb_exit(ctx);
@@ -61,7 +61,7 @@ std::vector<ConnectionHandle> ConnectionFX3Entry::enumerate(const ConnectionHand
 {
     std::vector<ConnectionHandle> handles;
 
-#ifndef __unix__
+#ifdef CYAPI_ENABLED
 	CCyUSBDevice device;
 	if (device.DeviceCount())
     {
-- 
2.25.1

