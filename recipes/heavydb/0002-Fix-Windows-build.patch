From ccd291e114fb912987d9e6c90d28abc7e6b919eb Mon Sep 17 00:00:00 2001
From: Guilherme Leobas <guilhermeleobas@gmail.com>
Date: Sat, 12 Mar 2022 00:11:28 -0300
Subject: [PATCH] Fix Windows build

---
 CMakeLists.txt                                 |  8 +++++---
 Catalog/OptionsContainer.h                     |  2 +-
 DataMgr/BufferMgr/BufferMgr.h                  |  3 +++
 .../AbstractFileStorageDataWrapper.cpp         |  4 ++--
 DataMgr/ForeignStorage/ArrowForeignStorage.cpp |  8 ++++----
 Shared/ThriftClient.cpp                        | 18 ++++++++++--------
 StringDictionary/DictRef.h                     |  1 +
 StringDictionary/StringDictionary.cpp          |  6 ++++++
 ThirdParty/rapidjson/rapidjson/document.h      | 17 +++++++++++++++++
 ThirdParty/sqlite3/CMakeLists.txt              |  6 +++++-
 ThirdParty/sqlite3/sqlite3.c                   |  2 +-
 ThriftHandler/CommandLineOptions.cpp           |  1 +
 UdfCompiler/UdfCompiler.cpp                    |  2 +-
 13 files changed, 57 insertions(+), 21 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index bef1af9a53..270567b27d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,7 +8,7 @@ if(DEFINED ENV{CONDA_PREFIX})
   set(ENABLE_CONDA ON)
   list(APPEND CMAKE_PREFIX_PATH "$ENV{CONDA_PREFIX}")
   # resolves link issue for zlib 
-  link_directories("$ENV{CONDA_PREFIX}/lib")
+  link_directories("$ENV{CONDA_PREFIX}/lib" "$ENV{CONDA_PREFIX}/Library/lib")
   # various fixes and workarounds
   add_definitions("-Dsecure_getenv=getenv")
   # fixes `undefined reference to `boost::system::detail::system_category_instance'`:
@@ -16,7 +16,9 @@ if(DEFINED ENV{CONDA_PREFIX})
   # Adding formating macros
   add_definitions("-D__STDC_FORMAT_MACROS=1")
   # fixes always_inline attribute errors
-  add_compile_options("-fno-semantic-interposition")
+  if (DEFINED MSVC)
+    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:-fno-semantic-interposition>")
+  endif()
   # Adding `--sysroot=...` resolves `no member named 'signbit' in the global namespace` error:
   set(CMAKE_SYSROOT "$ENV{CONDA_BUILD_SYSROOT}")
 endif(DEFINED ENV{CONDA_PREFIX})
@@ -389,7 +391,7 @@ if(MSVC)
   option(ENABLE_NO_WINWARNINGS "disable most windows warnings" ON)
   add_compile_definitions("NOMINMAX")
   if(ENABLE_NO_WINWARNINGS)
-    add_compile_definitions("_STL_EXTRA_DISABLED_WARNINGS=4146 4242 4244 4267 4355 4365 4458 4624 4820 4996 5204 5219" "NOMINMAX")
+    add_compile_definitions("_STL_EXTRA_DISABLED_WARNINGS=4146 4242 4244 4267 4355 4365 4458 4624 4820 4996 5204 5219 4571 4582 4583 4623 4625 4626 4710 4711 4774 5026 5027" "NOMINMAX")
     # disable 4702 unreachable code warning
     # with /Qspectre set, disable the warning C5045
     add_compile_options(/W0 /wd4702 /wd5045)
diff --git a/Catalog/OptionsContainer.h b/Catalog/OptionsContainer.h
index da92e454b0..9a6ba6d55c 100644
--- a/Catalog/OptionsContainer.h
+++ b/Catalog/OptionsContainer.h
@@ -71,7 +71,7 @@ struct OptionsContainer {
     if (clear) {
       options.clear();
     }
-    for (const auto& member : ddl_options.GetObject()) {
+    for (const auto& member : ddl_options.GetObj()) {
       std::string key = to_upper(member.name.GetString());
       options[key] = member.value.GetString();
     }
diff --git a/DataMgr/BufferMgr/BufferMgr.h b/DataMgr/BufferMgr/BufferMgr.h
index 1df594918b..cfbdad4159 100644
--- a/DataMgr/BufferMgr/BufferMgr.h
+++ b/DataMgr/BufferMgr/BufferMgr.h
@@ -34,6 +34,9 @@
 #include "DataMgr/AbstractBuffer.h"
 #include "DataMgr/AbstractBufferMgr.h"
 #include "DataMgr/BufferMgr/BufferSeg.h"
+#if defined(_WIN32)
+#include <WinSock2.h>
+#endif
 #include "Shared/boost_stacktrace.hpp"
 #include "Shared/types.h"
 
diff --git a/DataMgr/ForeignStorage/AbstractFileStorageDataWrapper.cpp b/DataMgr/ForeignStorage/AbstractFileStorageDataWrapper.cpp
index 2967a01631..549b7fea6e 100644
--- a/DataMgr/ForeignStorage/AbstractFileStorageDataWrapper.cpp
+++ b/DataMgr/ForeignStorage/AbstractFileStorageDataWrapper.cpp
@@ -77,7 +77,7 @@ void AbstractFileStorageDataWrapper::validateFilePath(const ForeignTable* foreig
 namespace {
 std::string append_file_path(const std::optional<std::string>& base,
                              const std::optional<std::string>& subdirectory) {
-  const std::string separator{boost::filesystem::path::preferred_separator};
+  const std::string separator{char(boost::filesystem::path::preferred_separator)};
   return std::regex_replace(
       (base ? *base + separator : "") + (subdirectory ? *subdirectory : ""),
       std::regex{separator + "{2,}"},
@@ -97,7 +97,7 @@ std::string AbstractFileStorageDataWrapper::getFullFilePath(
   auto storage_type = foreign_server->getOption(STORAGE_TYPE_KEY);
   CHECK(storage_type);
 
-  const std::string separator{boost::filesystem::path::preferred_separator};
+  const std::string separator{char(boost::filesystem::path::preferred_separator)};
   if (*storage_type == LOCAL_FILE_STORAGE_TYPE) {
     base_path = foreign_server->getOption(BASE_PATH_KEY);
   }
diff --git a/DataMgr/ForeignStorage/ArrowForeignStorage.cpp b/DataMgr/ForeignStorage/ArrowForeignStorage.cpp
index 2ac4b41d4f..a68f46d3e6 100644
--- a/DataMgr/ForeignStorage/ArrowForeignStorage.cpp
+++ b/DataMgr/ForeignStorage/ArrowForeignStorage.cpp
@@ -978,11 +978,11 @@ void ArrowCsvForeignStorage::registerTable(Catalog_Namespace::Catalog* catalog,
     df_td = df_td_owned.get();
   }
 
-#ifdef ENABLE_ARROW_4
+// #ifdef ENABLE_ARROW_4
   auto io_context = arrow::io::default_io_context();
-#else
-  auto io_context = arrow::default_memory_pool();
-#endif
+// #else
+//   auto io_context = arrow::default_memory_pool();
+// #endif
   auto arrow_parse_options = arrow::csv::ParseOptions::Defaults();
   arrow_parse_options.quoting = false;
   arrow_parse_options.escaping = false;
diff --git a/Shared/ThriftClient.cpp b/Shared/ThriftClient.cpp
index 546369c2d5..ba703be814 100644
--- a/Shared/ThriftClient.cpp
+++ b/Shared/ThriftClient.cpp
@@ -132,18 +132,20 @@ class ProxyTHttpClient : public THttpClient {
     uint32_t len;
     writeBuffer_.getBuffer(&buf, &len);
 
+    constexpr static const char* CRLF = "\r\n";
+
     std::ostringstream h;
-    h << "POST " << path_ << " HTTP/1.1" << THttpClient::CRLF << "Host: " << host_
-      << THttpClient::CRLF << "Content-Type: application/x-thrift" << THttpClient::CRLF
-      << "Content-Length: " << len << THttpClient::CRLF << "Accept: application/x-thrift"
-      << THttpClient::CRLF << "User-Agent: Thrift/" << THRIFT_PACKAGE_VERSION
-      << " (C++/THttpClient)" << THttpClient::CRLF << "Connection: keep-alive"
-      << THttpClient::CRLF;
+    h << "POST " << path_ << " HTTP/1.1" << CRLF << "Host: " << host_
+      << CRLF << "Content-Type: application/x-thrift" << CRLF
+      << "Content-Length: " << len << CRLF << "Accept: application/x-thrift"
+      << CRLF << "User-Agent: Thrift/" << THRIFT_PACKAGE_VERSION
+      << " (C++/THttpClient)" << CRLF << "Connection: keep-alive"
+      << CRLF;
     if (!cookies_.empty()) {
       std::string cookie = "Cookie:" + boost::algorithm::join(cookies_, ";");
-      h << cookie << THttpClient::CRLF;
+      h << cookie << CRLF;
     }
-    h << THttpClient::CRLF;
+    h << CRLF;
 
     cookies_.clear();
     std::string header = h.str();
diff --git a/StringDictionary/DictRef.h b/StringDictionary/DictRef.h
index 62456859ee..5e9f8cb1dc 100644
--- a/StringDictionary/DictRef.h
+++ b/StringDictionary/DictRef.h
@@ -4,6 +4,7 @@
 #include <cstdint>
 #include <cstdlib>
 #include <functional>
+#include <string>
 
 struct dict_ref_t {
   int32_t dbId;
diff --git a/StringDictionary/StringDictionary.cpp b/StringDictionary/StringDictionary.cpp
index 23cf7262b1..4cb401ade7 100644
--- a/StringDictionary/StringDictionary.cpp
+++ b/StringDictionary/StringDictionary.cpp
@@ -43,6 +43,12 @@
 
 #include "LeafHostInfo.h"
 
+#ifdef _WIN32
+#if defined(ERROR) || defined(INFO) || defined(WARNING) || defined(FATAL)
+#include "Shared/cleanup_global_namespace.h"
+#endif
+#endif
+
 bool g_cache_string_hash{true};
 
 namespace {
diff --git a/ThirdParty/rapidjson/rapidjson/document.h b/ThirdParty/rapidjson/rapidjson/document.h
index eb4be3a38e..90bb46ed92 100644
--- a/ThirdParty/rapidjson/rapidjson/document.h
+++ b/ThirdParty/rapidjson/rapidjson/document.h
@@ -44,6 +44,15 @@ RAPIDJSON_DIAG_OFF(terminate) // ignore throwing RAPIDJSON_ASSERT in RAPIDJSON_N
 #endif
 #endif // __GNUC__
 
+#ifdef GetObject
+// see https://github.com/Tencent/rapidjson/issues/1448
+// a former included windows.h might have defined a macro called GetObject, which affects
+// GetObject defined here. This ensures the macro does not get applied
+#pragma push_macro("GetObject")
+#define RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED
+#undef GetObject
+#endif
+
 #ifndef RAPIDJSON_NOMEMBERITERATORCLASS
 #include <iterator> // std::iterator, std::random_access_iterator_tag
 #endif
@@ -1456,7 +1465,9 @@ public:
     }
 
     Object GetObject() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }
+    Object GetObj() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }
     ConstObject GetObject() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }
+    ConstObject GetObj() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }
 
     //@}
 
@@ -2584,4 +2595,10 @@ private:
 RAPIDJSON_NAMESPACE_END
 RAPIDJSON_DIAG_POP
 
+
+#ifdef RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED
+#pragma pop_macro("GetObject")
+#undef RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED
+#endif
+
 #endif // RAPIDJSON_DOCUMENT_H_
diff --git a/ThirdParty/sqlite3/CMakeLists.txt b/ThirdParty/sqlite3/CMakeLists.txt
index 8cc388235e..066ef8d2b2 100644
--- a/ThirdParty/sqlite3/CMakeLists.txt
+++ b/ThirdParty/sqlite3/CMakeLists.txt
@@ -6,5 +6,9 @@ else()
   set_source_files_properties(sqlite3.c PROPERTIES COMPILE_FLAGS "-O0 -Wno-unused-value")
 endif()
 
-add_library(sqlite3 sqlite3.c sqlite3.h)
+if(DEFINED ENV{CONDA_PREFIX})
+  add_library(sqlite3 SHARED sqlite3.c sqlite3.h)
+else()
+  add_library(sqlite3 sqlite3.c sqlite3.h)
+endif()
 target_link_libraries(sqlite3 ${CMAKE_DL_LIBS})
diff --git a/ThirdParty/sqlite3/sqlite3.c b/ThirdParty/sqlite3/sqlite3.c
index 38874ce409..31125ebdc1 100644
--- a/ThirdParty/sqlite3/sqlite3.c
+++ b/ThirdParty/sqlite3/sqlite3.c
@@ -1097,7 +1097,7 @@ extern "C" {
 # define SQLITE_EXTERN extern
 #endif
 #ifndef SQLITE_API
-# define SQLITE_API
+# define SQLITE_API __declspec(dllexport)
 #endif
 #ifndef SQLITE_CDECL
 # define SQLITE_CDECL
diff --git a/ThriftHandler/CommandLineOptions.cpp b/ThriftHandler/CommandLineOptions.cpp
index 4705a5a60d..e76474497c 100644
--- a/ThriftHandler/CommandLineOptions.cpp
+++ b/ThriftHandler/CommandLineOptions.cpp
@@ -31,6 +31,7 @@
 
 #ifdef _WIN32
 #include <io.h>
+#include <process.h>
 #endif
 
 const std::string CommandLineOptions::nodeIds_token = {"node_id"};
diff --git a/UdfCompiler/UdfCompiler.cpp b/UdfCompiler/UdfCompiler.cpp
index 52acbcfc88..c540311a12 100644
--- a/UdfCompiler/UdfCompiler.cpp
+++ b/UdfCompiler/UdfCompiler.cpp
@@ -254,7 +254,7 @@ UdfClangDriver::UdfClangDriver(
   clang_resource_dir.erase(
       std::find_if(clang_resource_dir.rbegin(),
                    clang_resource_dir.rend(),
-                   [](unsigned char ch) { return !std::isspace(ch); })
+                   [](unsigned char ch) { return !::isspace(ch); })
           .base(),
       clang_resource_dir.end());
 
-- 
2.33.0.windows.1

