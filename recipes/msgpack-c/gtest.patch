From 4a1db60af8d6bdb258a34352f5cd8d9800544372 Mon Sep 17 00:00:00 2001
From: Luiz Silva <luizs@cpqd.com.br>
Date: Thu, 10 Nov 2016 10:59:26 -0200
Subject: [PATCH] Fix compilation with Gtest 1.8.0 and GCC 5.4.1

---
 test/carray.cpp                  |  8 +++----
 test/iterator_cpp11.cpp          |  4 ++--
 test/msgpack_c.cpp               |  6 ++---
 test/msgpack_tuple.cpp           | 10 ++++----
 test/pack_unpack.cpp             | 16 ++++++-------
 test/reference.cpp               | 52 ++++++++++++++++++++--------------------
 test/reference_wrapper_cpp11.cpp |  2 +-
 test/visitor.cpp                 |  8 +++----
 11 files changed, 59 insertions(+), 59 deletions(-)

diff --git a/test/carray.cpp b/test/carray.cpp
index 56b874f..0c419fb 100644
--- a/test/carray.cpp
+++ b/test/carray.cpp
@@ -113,7 +113,7 @@ TEST(carray, pack_unpack_char_as_str)
     msgpack::pack(ss, v1);
     msgpack::object_handle oh = msgpack::unpack(ss.str().data(), ss.str().size());
     EXPECT_EQ(oh.get().type, msgpack::type::STR);
-    EXPECT_EQ(oh.get().via.str.size, 1);
+    EXPECT_EQ(oh.get().via.str.size, (size_t) 1);
 
     char v2[2] = { 2, 3 };
     oh.get().convert(v2);
@@ -143,7 +143,7 @@ TEST(carray, obj_with_zone_char_as_str)
 
     msgpack::object o(v1, z);
     EXPECT_EQ(o.type, msgpack::type::STR);
-    EXPECT_EQ(o.via.str.size, 1);
+    EXPECT_EQ(o.via.str.size, (size_t) 1);
 
     char v2[2];
     o.convert(v2);
@@ -175,7 +175,7 @@ TEST(carray, pack_unpack_unsigned_char_as_bin)
     msgpack::pack(ss, v1);
     msgpack::object_handle oh = msgpack::unpack(ss.str().data(), ss.str().size());
     EXPECT_EQ(oh.get().type, msgpack::type::BIN);
-    EXPECT_EQ(oh.get().via.bin.size, 2);
+    EXPECT_EQ(oh.get().via.bin.size, (size_t) 2);
 
     unsigned char v2[2];
     oh.get().convert(v2);
@@ -205,7 +205,7 @@ TEST(carray, obj_with_zone_unsigned_char_as_bin)
 
     msgpack::object o(v1, z);
     EXPECT_EQ(o.type, msgpack::type::BIN);
-    EXPECT_EQ(o.via.bin.size, 2);
+    EXPECT_EQ(o.via.bin.size, (size_t) 2);
 
     unsigned char v2[2];
     o.convert(v2);
diff --git a/test/iterator_cpp11.cpp b/test/iterator_cpp11.cpp
index b01c5e9..e06f5ca 100644
--- a/test/iterator_cpp11.cpp
+++ b/test/iterator_cpp11.cpp
@@ -32,7 +32,7 @@ TEST(iterator, vector)
     auto const& msgarr = oh.get().via.array;
     auto dist = std::distance(begin(msgarr), end(msgarr));
     auto vecSize = vec.size();
-    EXPECT_EQ(dist, vecSize);
+    EXPECT_EQ((size_t) dist, vecSize);
 
     vec_type::const_iterator correct = std::begin(vec);
     for (auto const& obj : msgarr) {
@@ -58,7 +58,7 @@ TEST(iterator, map)
     auto const& msgmap = oh.get().via.map;
     auto dist = std::distance(begin(msgmap), end(msgmap));
     auto mapSize = map.size();
-    EXPECT_EQ(dist, mapSize);
+    EXPECT_EQ((size_t) dist, mapSize);
 
     for (auto const& kv : msgmap) {
         auto key = kv.key.as<unsigned int>();
diff --git a/test/msgpack_c.cpp b/test/msgpack_c.cpp
index abb9796..7ae9e52 100644
--- a/test/msgpack_c.cpp
+++ b/test/msgpack_c.cpp
@@ -368,7 +368,7 @@ TEST(MSGPACKC, simple_buffer_false)
         msgpack_unpack(sbuf.data, sbuf.size, NULL, &z, &obj);
     EXPECT_EQ(MSGPACK_UNPACK_SUCCESS, ret);
     EXPECT_EQ(MSGPACK_OBJECT_BOOLEAN, obj.type);
-    EXPECT_EQ(false, obj.via.boolean);
+    EXPECT_FALSE(obj.via.boolean);
     msgpack_zone_destroy(&z);
     msgpack_sbuffer_destroy(&sbuf);
 }
@@ -663,7 +663,7 @@ TEST(MSGPACKC, simple_buffer_array)
             break;
         case 2:
             EXPECT_EQ(MSGPACK_OBJECT_BOOLEAN, o.type);
-            EXPECT_EQ(false, o.via.boolean);
+            EXPECT_FALSE(o.via.boolean);
             break;
         case 3:
             EXPECT_EQ(MSGPACK_OBJECT_POSITIVE_INTEGER, o.type);
@@ -711,7 +711,7 @@ TEST(MSGPACKC, simple_buffer_map)
             EXPECT_EQ(MSGPACK_OBJECT_BOOLEAN, key.type);
             EXPECT_EQ(true, key.via.boolean);
             EXPECT_EQ(MSGPACK_OBJECT_BOOLEAN, val.type);
-            EXPECT_EQ(false, val.via.boolean);
+            EXPECT_FALSE(val.via.boolean);
             break;
         case 1:
             EXPECT_EQ(MSGPACK_OBJECT_POSITIVE_INTEGER, key.type);
diff --git a/test/msgpack_tuple.cpp b/test/msgpack_tuple.cpp
index 07b431b..f68dcf2 100644
--- a/test/msgpack_tuple.cpp
+++ b/test/msgpack_tuple.cpp
@@ -12,7 +12,7 @@ TEST(msgpack_tuple, member_get)
     t1.get<1>() = false;
     t1.get<2>() = "DEFG";
     EXPECT_EQ(40, t1.get<0>());
-    EXPECT_EQ(false, t1.get<1>());
+    EXPECT_FALSE(t1.get<1>());
     EXPECT_EQ("DEFG", t1.get<2>());
 }
 
@@ -26,7 +26,7 @@ TEST(msgpack_tuple, non_member_get)
     msgpack::type::get<1>(t1) = false;
     msgpack::type::get<2>(t1) = "DEFG";
     EXPECT_EQ(40, msgpack::type::get<0>(t1));
-    EXPECT_EQ(false, msgpack::type::get<1>(t1));
+    EXPECT_FALSE(msgpack::type::get<1>(t1));
     EXPECT_EQ("DEFG", msgpack::type::get<2>(t1));
 }
 
@@ -41,7 +41,7 @@ TEST(msgpack_tuple, std_non_member_get)
     std::get<1>(t1) = false;
     std::get<2>(t1) = "DEFG";
     EXPECT_EQ(40, std::get<0>(t1));
-    EXPECT_EQ(false, std::get<1>(t1));
+    EXPECT_FALSE(std::get<1>(t1));
     EXPECT_EQ("DEFG", std::get<2>(t1));
 }
 
@@ -55,7 +55,7 @@ TEST(msgpack_tuple, make_tuple)
     t1.get<1>() = false;
     t1.get<2>() = "DEFG";
     EXPECT_EQ(40, t1.get<0>());
-    EXPECT_EQ(false, t1.get<1>());
+    EXPECT_FALSE(t1.get<1>());
     EXPECT_EQ("DEFG", t1.get<2>());
 }
 
@@ -97,7 +97,7 @@ TEST(msgpack_tuple, swap)
     EXPECT_EQ(true, t2.get<1>());
     EXPECT_EQ("ABC", t2.get<2>());
     EXPECT_EQ(40, t1.get<0>());
-    EXPECT_EQ(false, t1.get<1>());
+    EXPECT_FALSE(t1.get<1>());
     EXPECT_EQ("DEFG", t1.get<2>());
 }
 #endif
diff --git a/test/pack_unpack.cpp b/test/pack_unpack.cpp
index 16ccc3f..403609e 100644
--- a/test/pack_unpack.cpp
+++ b/test/pack_unpack.cpp
@@ -79,7 +79,7 @@ TEST(unpack, int_ret_no_offset_ref)
 
     msgpack::object_handle oh = msgpack::unpack(sbuf.data(), sbuf.size(), referenced);
     EXPECT_EQ(1, oh.get().as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
 }
 
 TEST(unpack, int_ret_offset_ref)
@@ -91,7 +91,7 @@ TEST(unpack, int_ret_offset_ref)
 
     msgpack::object_handle oh = msgpack::unpack(sbuf.data(), sbuf.size(), off, referenced);
     EXPECT_EQ(1, oh.get().as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
     EXPECT_EQ(off, sbuf.size());
 }
 
@@ -128,7 +128,7 @@ TEST(unpack, int_no_offset_ref)
 
     msgpack::unpack(oh, sbuf.data(), sbuf.size(), referenced);
     EXPECT_EQ(1, oh.get().as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
 }
 
 TEST(unpack, int_offset_ref)
@@ -141,7 +141,7 @@ TEST(unpack, int_offset_ref)
 
     msgpack::unpack(oh, sbuf.data(), sbuf.size(), off, referenced);
     EXPECT_EQ(1, oh.get().as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
     EXPECT_EQ(off, sbuf.size());
 }
 
@@ -185,7 +185,7 @@ TEST(unpack, int_pointer_no_off_ref)
     // obsolete
     msgpack::unpack(&oh, sbuf.data(), sbuf.size(), MSGPACK_NULLPTR, &referenced);
     EXPECT_EQ(1, oh.get().as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
 }
 
 TEST(unpack, int_pointer_off_ref)
@@ -200,7 +200,7 @@ TEST(unpack, int_pointer_off_ref)
     msgpack::unpack(&oh, sbuf.data(), sbuf.size(), &off, &referenced);
     EXPECT_EQ(1, oh.get().as<int>());
     EXPECT_EQ(off, sbuf.size());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
 }
 
 
@@ -249,7 +249,7 @@ TEST(unpack, int_zone_no_offset_ref)
     msgpack::zone z;
     msgpack::object obj = msgpack::unpack(z, sbuf.data(), sbuf.size(), referenced);
     EXPECT_EQ(1, obj.as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
 }
 
 TEST(unpack, int_zone_offset_ref)
@@ -262,7 +262,7 @@ TEST(unpack, int_zone_offset_ref)
     msgpack::zone z;
     msgpack::object obj = msgpack::unpack(z, sbuf.data(), sbuf.size(), off, referenced);
     EXPECT_EQ(1, obj.as<int>());
-    EXPECT_EQ(false, referenced);
+    EXPECT_FALSE(referenced);
     EXPECT_EQ(off, sbuf.size());
 }
 
diff --git a/test/reference.cpp b/test/reference.cpp
index d1ccbd5..2bbd8fa 100644
--- a/test/reference.cpp
+++ b/test/reference.cpp
@@ -5,7 +5,7 @@ TEST(reference, unpack_int)
 {
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, 1);
-    bool referenced;
+    bool referenced = false;
 
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced);
@@ -16,7 +16,7 @@ TEST(reference, unpack_string)
 {
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, std::string("abcdefg"));
-    bool referenced;
+    bool referenced = false;
 
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced);
@@ -31,7 +31,7 @@ TEST(reference, unpack_bin)
     packer.pack_bin(sizeof(c));
     packer.pack_bin_body(c, sizeof(c));
 
-    bool referenced;
+    bool referenced = false;
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced);
     EXPECT_FALSE(referenced);
@@ -45,7 +45,7 @@ TEST(reference, unpack_ext)
 
     packer.pack_ext(sizeof(buf), 1);
     packer.pack_ext_body(buf, sizeof(buf));
-    bool referenced;
+    bool referenced = false;
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced);
     EXPECT_FALSE(referenced);
@@ -66,7 +66,7 @@ TEST(reference, unpack_int_ref)
 {
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, 1);
-    bool referenced;
+    bool referenced = false;
 
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, never_called);
@@ -77,7 +77,7 @@ TEST(reference, unpack_string_ref)
 {
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, std::string("abcdefg"));
-    bool referenced;
+    bool referenced = false;
 
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, always_reference);
@@ -92,7 +92,7 @@ TEST(reference, unpack_bin_ref)
     packer.pack_bin(sizeof(c));
     packer.pack_bin_body(c, sizeof(c));
 
-    bool referenced;
+    bool referenced = false;
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, always_reference);
     EXPECT_TRUE(referenced);
@@ -106,7 +106,7 @@ TEST(reference, unpack_ext_ref)
 
     packer.pack_ext(sizeof(buf), 1);
     packer.pack_ext_body(buf, sizeof(buf));
-    bool referenced;
+    bool referenced = false;
 
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, always_reference);
@@ -139,7 +139,7 @@ TEST(reference, unpack_int_sized_ref)
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, 1);
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
 
     msgpack::object_handle oh =
@@ -153,7 +153,7 @@ TEST(reference, unpack_string_sized_ref_4)
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, std::string("1234"));
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
     // the last argument sbuf is any pointer as a user data.
     // That is stored to s_p in sized_reference
@@ -169,7 +169,7 @@ TEST(reference, unpack_string_sized_ref_5)
     msgpack::sbuffer sbuf;
     msgpack::pack(sbuf, std::string("12345"));
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
 
     msgpack::object_handle oh =
@@ -187,7 +187,7 @@ TEST(reference, unpack_bin_sized_ref_5)
     packer.pack_bin(sizeof(c));
     packer.pack_bin_body(c, sizeof(c));
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
 
     msgpack::object_handle oh =
@@ -204,7 +204,7 @@ TEST(reference, unpack_bin_sized_ref_6)
     packer.pack_bin(sizeof(c));
     packer.pack_bin_body(c, sizeof(c));
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, sized_reference, &sbuf);
@@ -221,7 +221,7 @@ TEST(reference, unpack_ext_sized_ref_6)
     packer.pack_ext(sizeof(buf), 1); // 5 + 1(type) = 6
     packer.pack_ext_body(buf, sizeof(buf));
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, sized_reference, &sbuf);
@@ -238,7 +238,7 @@ TEST(reference, unpack_ext_sized_ref_7)
     packer.pack_ext(sizeof(buf), 1); // 6 + 1(type) = 7
     packer.pack_ext_body(buf, sizeof(buf));
 
-    bool referenced;
+    bool referenced = false;
     s_p = MSGPACK_NULLPTR;
     msgpack::object_handle oh =
         msgpack::unpack(sbuf.data(), sbuf.size(), referenced, sized_reference, &sbuf);
@@ -256,7 +256,7 @@ TEST(reference, unpacker_int)
 
     msgpack::unpacker unp;
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -272,7 +272,7 @@ TEST(reference, unpacker_string)
 
     msgpack::unpacker unp;
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -291,7 +291,7 @@ TEST(reference, unpacker_bin)
 
     msgpack::unpacker unp;
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -311,7 +311,7 @@ TEST(reference, unpacker_ext)
 
     msgpack::unpacker unp;
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -329,7 +329,7 @@ TEST(reference, unpacker_int_sized_ref)
 
     msgpack::unpacker unp(never_called, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -347,7 +347,7 @@ TEST(reference, unpacker_string_sized_ref_4)
 
     msgpack::unpacker unp(sized_reference, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -365,7 +365,7 @@ TEST(reference, unpacker_string_sized_ref_5)
 
     msgpack::unpacker unp(sized_reference, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -387,7 +387,7 @@ TEST(reference, unpacker_bin_sized_ref_5)
 
     msgpack::unpacker unp(sized_reference, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -408,7 +408,7 @@ TEST(reference, unpacker_bin_sized_ref_6)
 
     msgpack::unpacker unp(sized_reference, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -430,7 +430,7 @@ TEST(reference, unpacker_ext_sized_ref_6)
 
     msgpack::unpacker unp(sized_reference, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
@@ -452,7 +452,7 @@ TEST(reference, unpacker_ext_sized_ref_7)
 
     msgpack::unpacker unp(sized_reference, &sbuf);
     msgpack::object_handle oh;
-    bool referenced;
+    bool referenced = false;
     unp.reserve_buffer(sbuf.size());
     std::memcpy(unp.buffer(), sbuf.data(), sbuf.size());
     unp.buffer_consumed(sbuf.size());
diff --git a/test/reference_wrapper_cpp11.cpp b/test/reference_wrapper_cpp11.cpp
index 6550af3..4bc4ae0 100644
--- a/test/reference_wrapper_cpp11.cpp
+++ b/test/reference_wrapper_cpp11.cpp
@@ -42,7 +42,7 @@ TEST(MSGPACK_REFERENCE_WRAPPER, pack_vector)
     msgpack::pack(ss, val1);
     msgpack::object_handle oh = msgpack::unpack(ss.str().data(), ss.str().size());
     std::vector<int> val2 = oh.get().as<std::vector<int>>();
-    EXPECT_EQ(val2.size(), 1);
+    EXPECT_EQ(val2.size(), (size_t) 1);
     EXPECT_EQ(val1[0], val2[0]);
 }

diff --git a/test/visitor.cpp b/test/visitor.cpp
index 61e6794..6a6cd9e 100644
--- a/test/visitor.cpp
+++ b/test/visitor.cpp
@@ -99,8 +99,8 @@ TEST(visitor, json_like)
 struct parse_error_check_visitor : msgpack::v2::null_visitor {
     parse_error_check_visitor(bool& called):m_called(called) {}
     void parse_error(size_t parsed_offset, size_t error_offset) {
-        EXPECT_EQ(1, parsed_offset);
-        EXPECT_EQ(2, error_offset);
+        EXPECT_EQ((size_t) 1, parsed_offset);
+        EXPECT_EQ((size_t) 2, error_offset);
         m_called = true;
     }
     bool& m_called;
@@ -120,8 +120,8 @@ TEST(visitor, parse_error)
 struct insuf_bytes_check_visitor : msgpack::v2::null_visitor {
     insuf_bytes_check_visitor(bool& called):m_called(called) {}
     void insufficient_bytes(size_t parsed_offset, size_t error_offset) {
-        EXPECT_EQ(2, parsed_offset);
-        EXPECT_EQ(3, error_offset);
+        EXPECT_EQ((size_t) 2, parsed_offset);
+        EXPECT_EQ((size_t) 3, error_offset);
         m_called = true;
     }
     bool& m_called;
