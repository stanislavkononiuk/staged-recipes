# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "cachetools" %}
{% set version = "2.0.0" %}
{% set sha256 = "715a7202240dc20dbe83abdb2d804d543e2d4f07af146f53c82166bd75f3a628" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  imports:
    - cachetools

about:
  home: https://github.com/tkem/cachetools
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Extensible memoizing collections and decorators'

  # The remaining entries in this section are optional, but recommended
  description: |
    This module provides various memoizing collections and decorators, including variants of the Python 3 Standard Library @lru_cache function decorator.
  doc_url: http://pythonhosted.org/cachetools/
  dev_url: https://github.com/tkem/cachetools

extra:
  recipe-maintainers:
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - MaartenBreddels
    