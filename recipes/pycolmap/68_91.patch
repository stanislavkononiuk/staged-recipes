diff --git a/pipeline/extract_features.cc b/pipeline/extract_features.cc
index d4ce3fc..342804e 100644
--- a/pipeline/extract_features.cc
+++ b/pipeline/extract_features.cc
@@ -129,10 +129,6 @@ void init_extract_features(py::module& m) {
                            &SEOpts::max_num_features,
                            "Maximum number of features to detect, keeping "
                            "larger-scale features.")
-            .def_readwrite("max_num_features",
-                           &SEOpts::max_num_features,
-                           "Maximum number of features to detect, keeping "
-                           "larger-scale features.")
             .def_readwrite("first_octave",
                            &SEOpts::first_octave,
                            "First octave in the pyramid, i.e. -1 upsamples the "
diff --git a/pipeline/images.cc b/pipeline/images.cc
index e72a6c9..e8327d2 100644
--- a/pipeline/images.cc
+++ b/pipeline/images.cc
@@ -206,6 +206,18 @@ void init_images(py::module& m) {
             .def_readwrite("camera_model",
                            &IROpts::camera_model,
                            "Name of the camera model.")
+            .def_readwrite("mask_path",
+                           &IROpts::mask_path,
+                           "Optional root path to folder which contains image"
+                           "masks. For a given image, the corresponding mask"
+                           "must have the same sub-path below this root as the"
+                           "image has below image_path. The filename must be"
+                           "equal, aside from the added extension .png. "
+                           "For example, for an image image_path/abc/012.jpg,"
+                           "the mask would be mask_path/abc/012.jpg.png. No"
+                           "features will be extracted in regions where the"
+                           "mask image is black (pixel intensity value 0 in"
+                           "grayscale).")
             .def_readwrite("existing_camera_id",
                            &IROpts::existing_camera_id,
                            "Whether to explicitly use an existing camera for "
diff --git a/reconstruction/image.cc b/reconstruction/image.cc
index 87b17e8..7c00fae 100644
--- a/reconstruction/image.cc
+++ b/reconstruction/image.cc
@@ -49,12 +49,12 @@ void init_image(py::module& m) {
 
     py::class_<colmap::Image, std::shared_ptr<colmap::Image>>(m, "Image")
         .def(py::init<>())
-        .def(py::init([](const std::string& name, const std::vector<Eigen::Vector2d>& keypoints,
+        .def(py::init([](const std::string& name, const std::vector<Point2D>& points2D,
                          const Eigen::Vector3d& tvec, const Eigen::Vector4d& qvec, size_t camera_id,
                          colmap::image_t image_id) {
                  std::unique_ptr<Image> image = std::unique_ptr<Image>(new Image());
                  image->SetName(name);
-                 image->SetPoints2D(keypoints);
+                 image->SetPoints2D(points2D);
                  image->SetTvec(tvec);
                  image->SetQvec(qvec);
                  if (camera_id != kInvalidCameraId) {
@@ -63,16 +63,16 @@ void init_image(py::module& m) {
                  image->SetImageId(image_id);
                  return image;
              }),
-             py::arg("name") = "", py::arg("keypoints") = std::vector<Eigen::Vector2d>(),
+             py::arg("name") = "", py::arg("points2D") = std::vector<Point2D>(),
              py::arg("tvec") = Eigen::Vector3d(0.0, 0.0, 0.0),
              py::arg("qvec") = Eigen::Vector4d(1.0, 0.0, 0.0, 0.0),
              py::arg("camera_id") = kInvalidCameraId, py::arg("id") = kInvalidImageId)
-        .def(py::init([](const std::string& name, const std::vector<Point2D>& points2D,
+        .def(py::init([](const std::string& name, const std::vector<Eigen::Vector2d>& keypoints,
                          const Eigen::Vector3d& tvec, const Eigen::Vector4d& qvec, size_t camera_id,
                          colmap::image_t image_id) {
                  std::unique_ptr<Image> image = std::unique_ptr<Image>(new Image());
                  image->SetName(name);
-                 image->SetPoints2D(points2D);
+                 image->SetPoints2D(keypoints);
                  image->SetTvec(tvec);
                  image->SetQvec(qvec);
                  if (camera_id != kInvalidCameraId) {
@@ -81,7 +81,7 @@ void init_image(py::module& m) {
                  image->SetImageId(image_id);
                  return image;
              }),
-             py::arg("name") = "", py::arg("points2D") = std::vector<Point2D>(),
+             py::arg("name") = "", py::arg("keypoints") = std::vector<Eigen::Vector2d>(),
              py::arg("tvec") = Eigen::Vector3d(0.0, 0.0, 0.0),
              py::arg("qvec") = Eigen::Vector4d(1.0, 0.0, 0.0, 0.0),
              py::arg("camera_id") = kInvalidCameraId, py::arg("id") = kInvalidImageId)
