--- src/vincenty.geodesics.c	2014-08-05 06:29:35.000000000 -0300
+++ new/vincenty.geodesics.c	2018-01-18 11:13:49.078385005 -0200
@@ -7,7 +7,7 @@
 #include <math.h>
 
 //define some global constants
-double a = 6378137, b = 6356752.3142,  f = 1/298.257223563;  // WGS-84 ellipsiod
+double a = 6378137, bbb = 6356752.3142,  f = 1/298.257223563;  // WGS-84 ellipsiod
 
 /*
  * Calculate destination point given start point lat/long (numeric degrees), 
@@ -39,11 +39,11 @@
 	sigma1 = atan2(tanU1, cosAlpha1);
 	sinAlpha = cosU1 * sinAlpha1;
 	cosSqAlpha = 1 - sinAlpha*sinAlpha;
-	uSq = cosSqAlpha * (a*a - b*b) / (b*b);
+	uSq = cosSqAlpha * (a*a - bbb*bbb) / (bbb*bbb);
 	A = 1 + uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)));
 	B = uSq/1024 * (256+uSq*(-128+uSq*(74-47*uSq)));
 
-	sigma = s / (b*A), sigmaP = 2*PI;
+	sigma = s / (bbb*A), sigmaP = 2*PI;
 	cos2SigmaM = cos(2*sigma1 + sigma);
 	sinSigma = sin(sigma);
 	cosSigma = cos(sigma);
@@ -53,7 +53,7 @@
 		cosSigma = cos(sigma);
 		deltaSigma = B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM)));
 		sigmaP = sigma;
-		sigma = s / (b*A) + deltaSigma;
+		sigma = s / (bbb*A) + deltaSigma;
 	}
 
 	tmp = sinU1*sinSigma - cosU1*cosSigma*cosAlpha1;
@@ -125,11 +125,11 @@
 				lambda = L + (1-C) * f * sinAlpha * (sigma + C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)));
 			} while (abs(lambda-lambdaP) > 1e-12 && --iterLimit>0);
 
-			double uSq = cosSqAlpha * (a*a - b*b) / (b*b);
+			double uSq = cosSqAlpha * (a*a - bbb*bbb) / (bbb*bbb);
 			double A = 1 + uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)));
 			double B = uSq/1024 * (256+uSq*(-128+uSq*(74-47*uSq)));
 			double deltaSigma = B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM)));
-			double s = b*A*(sigma-deltaSigma);
+			double s = bbb*A*(sigma-deltaSigma);
 			if (iterLimit==0) s=-9999;  // formula failed to converge
 			out[ii] = s;
 		}
