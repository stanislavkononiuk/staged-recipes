diff --git a/entwine/types/srs.cpp b/entwine/types/srs.cpp
index 6f93bc0..a544c95 100644
--- a/entwine/types/srs.cpp
+++ b/entwine/types/srs.cpp
@@ -10,20 +10,24 @@

 #include <entwine/types/srs.hpp>

-#include <regex>
+//#include <regex>

 namespace entwine
 {

+/**
 namespace
 {
     const std::regex authCodeRegex("(\\w+):(\\d+)(\\+\\d+)?");
 }
+**/

 Srs::Srs(const std::string full)
     : m_spatialReference(full)
     , m_wkt(m_spatialReference.getWKT())
 {
+// Our regex is busted on GCC 4.8.
+/**
     std::smatch match;
     if (std::regex_match(full, match, authCodeRegex))
     {
@@ -35,6 +39,32 @@ Srs::Srs(const std::string full)
             m_vertical = match[3].str().substr(1);
         }
     }
+**/
+    auto isint = [](const std::string s)
+    {
+        return (s.find_first_not_of("0123456789") == std::string::npos);
+    };
+
+    auto pos = full.find(':');
+    if (pos != std::string::npos)
+    {
+        m_authority = full.substr(0, pos);
+        std::string code = full.substr(pos + 1);
+        pos = code.find('+');
+        if (pos != std::string::npos)
+        {
+            m_horizontal = code.substr(0, pos);
+            m_vertical = code.substr(pos + 1);
+        }
+        else
+            m_horizontal = code;
+        // Make sure that horizontal and vertical are digits
+        if (!isint(m_horizontal))
+            m_horizontal.clear();
+        if (!isint(m_vertical))
+            m_vertical.clear();
+    }
+//

     if (m_horizontal.empty())
     {
