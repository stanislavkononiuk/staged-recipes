# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "validobj" %}
{% set version = "0.3.8" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive: 
  # url: https://github.com/simplejson/simplejson/archive/{{ version }}.tar.gz
  sha256: 1e790b811c8c9c00dca49b5d66a64dfaa0c8e20c2e6ec76c8ebc7353f840ea41
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "flit install"

requirements:
  host:
    - python >=3.7
    - pip
    - flit
  run:
    - python >=3.7

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - validobj

about:
  home: https://github.com/Zaharid/validobj
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Validobj gives you valid objects'

  # The remaining entries in this section are optional, but recommended.
  description: |
    Validobj is library that takes semistructured data (for example JSON and YAML
    configuration files) and converts it to more structured Python objects. It
    places the emphasis on:

      - [Good error messages](https://validobj.readthedocs.io/en/latest/errors.html)
        (rather than avoiding extra work in the error handling
        code).
      - Schema defined in terms of
        [dataclasses](https://docs.python.org/3/library/dataclasses.html) and other
        high level objects such as
        [enums](https://docs.python.org/3/library/enum.html), as well as a subset of
        the [typing](https://docs.python.org/3/library/typing.html) module.
      - Simplicity of implementation (rather than full generality).

    Validobj requires Python 3.7 and has no other dependencies.
  doc_url: https://validobj.readthedocs.io/
  dev_url: https://github.com/Zaharid/validobj

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - Zaharid
