# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "contexter" %}
{% set version = "0.1.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
    sha256: c730890b1a915051414a6350d8ea1cddca7d01d8f756badedb30b9bf305ea0a8
    folder: pkg
  - url: https://raw.githubusercontent.com/defnull/{{ name }}/{{ version }}/LICENSE.txt
    sha256: de6c16a58caef8f4cf4c3473c9308d1ddb2d029b8a31f73cb5a944f486f05343
    folder: pkg

build:
  noarch: python
  number: 0
  script: "{{ PYTHON }} -m pip install ./package -vv"

requirements:
  host:
    - python
    - pip
  run:
    - python

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - contexter

about:
  home: https://github.com/defnull/contexter
  license: MIT
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: pkg/LICENSE.txt
  summary: 'Contexter: A better contextlib'
  description: |
    Contexter is a full replacement of the contextlib
    <http://docs.python.org/3/library/contextlib.html> standard library module.
    It comes with more features, a nicer API and full support for Python 2.5 up
    to 3.x from a single source file. To keep it short: Contexter allows you to
    nest and stack context managers in an easy and intuitive way.
  dev_url: https://github.com/defnull/contexter

extra:
  recipe-maintainers:
    - althonos
