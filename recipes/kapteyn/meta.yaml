# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "kapteyn" %}
{% set version = "2.3" %}
{% set sha256 = "87ab1809880ea6ede12bb41e675d76d66264f6e66619e1727c65e36254a4d9af" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  skip: true  # [win]
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    - cython
    - numpy
  run:
    - python
    - numpy
    - six

test:
  # Some package might need a `test/commands` key to check CLI.
  imports:
    - kapteyn
    - kapteyn.wcs
    - kapteyn.ascarray
    - kapteyn.profiles
    - kapteyn._nd_image
    - kapteyn.kmpfit

about:
  home: https://www.astro.rug.nl/software/kapteyn/
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: BSD
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.txt
  summary: 'Astronomical package for spatial and spectral coordinates, WCS projections and transformation, and more...'

  # The remaining entries in this section are optional, but recommended
  description: |
        The Kapteyn Package is a collection of Python modules and applications
        developed by members of the computer group (*) of the Kapteyn
        Astronomical Institute, University of Groningen, The Netherlands.  The
        purpose of the package is to provide tools for the development of
        astronomical applications with Python.

        The package is suitable for both inexperienced and experienced users and
        developers and documentation is provided for both groups.  The
        documentation also provides in-depth chapters about celestial
        transformations and spectral translations.

        Some of the package's features:

           * The handling of spatial and spectral coordinates, WCS projections
             and transformations between different sky systems.  Spectral
             translations (e.g., between frequencies and velocities) are supported
             and also mixed coordinates.  (Modules wcs and celestial. Module wcs
             uses Mark Calabretta's WCSLIB which is distributed with the package.)

           * Versatile tools for writing small and dedicated applications for
             the inspection of FITS headers, the extraction and display of (FITS)
             data, interactive inspection of this data (color editing) and for the
             creation of plots with world coordinate information.  (Module maputils)
             As one example, a gallery of all-sky plots is provided.

           * A class for the efficient reading, writing and manipulating simple
             table-like structures in text files.  (Module tabarray)

           * Utilities for use with matplotlib such as obtaining coordinate
             information from plots, interactively modifiable colormaps and timer
             events (module mplutil); tools for parsing and interpreting coordinate
             information entered by the user (module positions).

           * A function to search for gaussian components in a profile
             (module profiles) and a class for non-linear least squares fitting
             (module kmpfit).
  doc_url: https://www.astro.rug.nl/software/kapteyn/
  dev_url: https://github.com/kapteyn-astro/kapteyn

extra:
  recipe-maintainers:
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - MaartenBreddels
