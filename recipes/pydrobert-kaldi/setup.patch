diff --git a/setup.py b/setup.py
index cba385d..22be4d8 100644
--- a/setup.py
+++ b/setup.py
@@ -90,17 +90,16 @@ def mkl_setup(roots, mkl_threading=None):
         for root_name, _, base_names in walk(root):
             for base_name in base_names:
                 if ON_WINDOWS:
-                    if base_name.endswith(".dll"):
-                        # this is a windows runtime library. We want to link
-                        # the static .lib stub, so skip this
-                        continue
-                    library_name = base_name.split(".")[0]
+                    if base_name.endswith(".lib"):
+                        library_name = base_name.split(".")[0]
+                    else:
+                        library_name = None
                 else:
                     library_name = base_name[3:].split(".")[0]
                 if library_name in found_mkl_libs and not found_mkl_libs[library_name]:
                     found_mkl_libs[library_name] = True
                     blas_library_dirs.add(root_name)
-                elif base_name == "mkl.h" and not blas_includes:
+                if base_name == "mkl.h" and not blas_includes:
                     blas_includes.add(root_name)
     if not blas_includes:
         raise Exception("Could not find mkl.h")
@@ -159,17 +158,16 @@ def blas_setup(roots, library_names, headers, extra_entries_on_success):
         for root_name, _, base_names in walk(root):
             for base_name in base_names:
                 if ON_WINDOWS:
-                    if base_name.endswith(".dll"):
-                        # this is a windows runtime library. We want to link
-                        # the static .lib stub, so skip this
-                        continue
-                    library_name = base_name.split(".")[0]
+                    if base_name.endswith(".lib"):
+                        library_name = base_name.split(".")[0]
+                    else:
+                        library_name = None
                 else:
                     library_name = base_name[3:].split(".")[0]
                 if library_name in library_names and not library_names[library_name]:
                     library_names[library_name] = True
                     library_dirs.add(root_name)
-                elif base_name in headers and not headers[base_name]:
+                if base_name in headers and not headers[base_name]:
                     headers[base_name] = True
                     include_dirs.add(root_name)
     if not all(library_names.values()):
@@ -210,11 +208,13 @@ def atlas_setup(roots):
 
 
 def lapacke_setup(roots):
+    # Openblas follows netlib lapacke.h and cblas.h, so it should be basically
+    # the same thing
     return blas_setup(
         roots,
-        ("blas", "lapack", "lapacke"),
+        ("cblas", "blas", "lapack"),
         ("cblas.h", "lapacke.h"),
-        {"DEFINES": [("HAVE_LAPACKE", None)]},
+        {"DEFINES": [("HAVE_OPENBLAS", None)]},
     )
 
 
