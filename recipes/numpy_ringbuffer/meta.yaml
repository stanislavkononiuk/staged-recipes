{% set name = "numpy_ringbuffer" %}
{% set version = "0.2.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/numpy_ringbuffer-{{ version }}.tar.gz
  sha256: ac79c60b6d92a688ad152a11d351d9efc2e0749973f71e18a8c9b3b1241a3cef
  patches:
    - 0001-use-pypandoc.convert_file_crlf.patch # [not osx]
    - 0001-use-pypandoc.convert_file_lf.patch # [osx]
    - 0002-fix-from-collections-import-Sequence.patch

build:
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  host:
    - pip
    - pypandoc
    - python >=2.7
  run:
    - python >=2.7
    - numpy

test:
  imports:
    - numpy_ringbuffer
  commands:
    - pip check
  requires:
    - pip

about:
  home: https://github.com/eric-wieser/numpy_ringbuffer
  summary: Ring buffer implementation for numpy
  description: |
    Ring (aka circular) buffers backed by a numpy array, supporting:

    * Operations from `collections.deque`
      * `b.append(val)`
      * `b.appendleft(val)`
      * `b.extend(val)`
      * `b.extendleft(val)`
      * `b.pop(val)`
      * `b.popleft(val)`
    * The `collections.Sequence` protocol (unoptimized)
    * C-side unwrapping into an array with `np.array(b)`
    * Arbitrary element dtypes, including extra dimensions like `RingBuffer(N, dtype=(int, 3))`
  license: MIT
  license_file: LICENSE.txt

extra:
  recipe-maintainers:
    - julienmalik
