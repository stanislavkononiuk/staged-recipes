{% set name = "maltpynt" %}
{% set version = "2.0" %}
{% set hash_type = "sha256" %}
{% set hash_value = "350d66f4f26189870b26d6a743d0e5fba0dfc1c0343a1da556af6b7f17ce7d78" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  entry_points:
    - MPreadevents = maltpynt.read_events:main
    - MPlcurve = maltpynt.lcurve:main
    - MPcalibrate = maltpynt.calibrate:main
    - MPcreategti = maltpynt.create_gti:main
    - MPdumpdyn = maltpynt.fspec:dumpdyn_main
    - MPfake = maltpynt.fake:main
    - MPexposure = maltpynt.exposure:main
    - MPfspec = maltpynt.fspec:main
    - MPlags = maltpynt.lags:main
    - MPplot = maltpynt.plot:main
    - MPreadfile = maltpynt.io:main
    - MPrebin = maltpynt.rebin:main
    - MPscrunchlc = maltpynt.lcurve:scrunch_main
    - MPsumfspec = maltpynt.sum_fspec:main
    - MP2xspec = maltpynt.save_as_xspec:main
  script: python setup.py install --offline --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python
    - matplotlib
    - scipy
    - numpy
    - astropy

test:
  imports:
    - maltpynt
  commands:
    - MPreadevents --help
    - MPlcurve --help
    - MPcalibrate --help
    - MPcreategti --help
    - MPdumpdyn --help
    - MPfake --help
    - MPexposure --help
    - MPfspec --help
    - MPlags --help
    - MPplot --help
    - MPreadfile --help
    - MPrebin --help
    - MPscrunchlc --help
    - MPsumfspec --help
    - MP2xspec --help

about:
  home: https://bitbucket.org/mbachett/maltpynt
  license: BSD 3-clause
  license_family: BSD
  license_file: LICENSE.rst
  summary: '"Matteo''s library and tools in Python for NuSTAR timing"'
  description: |
    The MaLTPyNT (Matteoâ€™s Libraries and Tools in Python for NuSTAR Timing)
    suite is designed for the quick-look timing analysis of NuSTAR data. It
    treats properly orbital gaps (e.g., occultation, SAA passages) and
    performs the standard aperiodic timing analysis (power density spectrum,
    lags, etc.), plus the cospectrum, a proxy for the power density spectrum
    that uses the signals from two detectors instead of a single one.
  doc_url: http://maltpynt.readthedocs.org/
  dev_url: https://bitbucket.org/mbachett/maltpynt

extra:
  recipe-maintainers:
    - mwcraig
    - bsipocz
    - matteobachetti
