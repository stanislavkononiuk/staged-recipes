--- src/CMakeLists.txt.orig	2022-07-22 22:23:44.000000000 +0200
+++ src/CMakeLists.txt	2022-07-22 22:31:53.000000000 +0200
@@ -95,7 +95,8 @@
 set(HAS_128_INT ${HAS_128_INT} PARENT_SCOPE)
 
 # Eigen
-target_include_directories(DIP PRIVATE "${PROJECT_SOURCE_DIR}/dependencies/eigen3")
+find_package(EIGEN3 REQUIRED)
+target_include_directories(DIP PRIVATE "${CMAKE_INSTALL_PREFIX}/include/eigen3")
 target_compile_definitions(DIP PRIVATE
                            EIGEN_MPL2_ONLY # This makes sure we only use parts of the Eigen library that use the MPL2 license or more permissive ones.
                            EIGEN_DONT_PARALLELIZE) # This to prevent Eigen algorithms trying to run in parallel -- we parallelize at a larger scale.
@@ -104,6 +105,7 @@
 set(DIP_ENABLE_ZLIB ON CACHE BOOL "Enable zlib compression in ICS and TIFF (deflate)")
 if(DIP_ENABLE_ZLIB)
    add_subdirectory("${PROJECT_SOURCE_DIR}/dependencies/zlib" "${PROJECT_BINARY_DIR}/zlib" EXCLUDE_FROM_ALL)
+   find_package(ZLIB REQUIRED)
 endif()
 
 # libjpeg (for use in libtiff)
@@ -118,7 +120,8 @@
 set(DIP_ENABLE_ICS ON CACHE BOOL "Enable ICS file support")
 if(DIP_ENABLE_ICS)
    set(LIBICS_INCLUDE_CPP Off) # TODO: we should start using the C++ interface
-   add_subdirectory("${PROJECT_SOURCE_DIR}/dependencies/libics" "${PROJECT_BINARY_DIR}/libics" EXCLUDE_FROM_ALL)
+   # add_subdirectory("${PROJECT_SOURCE_DIR}/dependencies/libics" "${PROJECT_BINARY_DIR}/libics" EXCLUDE_FROM_ALL)
+   find_package(LIBICS REQUIRED)
    target_link_libraries(DIP PRIVATE libics)
    target_compile_definitions(DIP PRIVATE DIP_CONFIG_HAS_ICS)
 endif()
@@ -126,7 +129,8 @@
 # libtiff
 set(DIP_ENABLE_TIFF ON CACHE BOOL "Enable TIFF file support")
 if(DIP_ENABLE_TIFF)
-   add_subdirectory("${PROJECT_SOURCE_DIR}/dependencies/libtiff" "${PROJECT_BINARY_DIR}/libtiff" EXCLUDE_FROM_ALL)
+   # add_subdirectory("${PROJECT_SOURCE_DIR}/dependencies/libtiff" "${PROJECT_BINARY_DIR}/libtiff" EXCLUDE_FROM_ALL)
+   find_package(TIFF REQUIRED)
    target_link_libraries(DIP PRIVATE tiff)
    target_compile_definitions(DIP PRIVATE DIP_CONFIG_HAS_TIFF)
 endif()
