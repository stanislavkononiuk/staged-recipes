# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "rockpool" %}
{% set version = "1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://test-files.pythonhosted.org/packages/f8/d8/3468c3bd92134e218553dfa4b8afdec826fc0ccacc2f5c6c928cdc8cb094/rockpool-1.0.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed.
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: 82ec45281ee3f75fa654221e26a32e3284e52ff5ffcba79df7038a411a85d293
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [py<36]
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    # - {{ compiler('c') }}
  host:
    - python
    - pip
  run:
    - python

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - rockpool
    - rockpool.tests

about:
  home: https://gitlab.com/ai-ctx/rockpool
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: AGPL-3.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family:
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Python package for developing, simulating and training spiking neural networks, and deploying on Neuromorphic hardware'

  # The remaining entries in this section are optional, but recommended.
  description: |
    Rockpool is a Python package for working with dynamical neural network architectures, particularly for designing event-driven networks for Neuromorphic computing hardware. Rockpool provides a convenient interface for designing, training and evaluating recurrent networks, which can operate both with continuous-time dynamics and event-driven dynamics.
    Rockpool is an open-source project managed by aiCTX AG
  doc_url: https://rockpool.readthedocs.io/
  dev_url: https://github.com/rockpool/rockpool

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - Dacian Herbei
    - Dylan Richard Muir
    - Felix Bauer
    - Marco Reato
    - Philipp Weidel
