# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "nestly" %}
{% set version = "0.6" %}
{% set sha256 = "209adc1ea67c124a88952dc2d2286b465a0d6516c34c2a81a834f0b094bd2ff3" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for Python 2.7, 3.4, and above, for all major OSs.
  # Add the line "skip: True  # [py<34]" (for example) to limit to Python 3.4 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [py != 27 or win]
  script: python setup.py install --single-version-externally-managed --record record.txt
  
requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - nestly

about:
  home: https://github.com/fhcrc/nestly
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  #license_file: LICENSE.txt
  summary: 'A collection of functions designed to make running software with combinatorial choices of parameters easier.'

  # The remaining entries in this section are optional, but recommended
  description: |
    nestly is a collection of functions designed to ease running software
    with combinatorial choices of parameters. It can easily do so for
    "cartesian products" of parameter choices, but can do much more--
    arbitrary "backwards-looking" dependencies can be used.

    The vision here is that we take a fixed set of parameters and generate
    a single type of output for each defined combination, which can then
    be combined in some way for comparison and retrieval. We would like to
    set things up tidily with nested directories for output reflecting
    nested parameter choices.

  doc_url: http://nestly.readthedocs.org/
  dev_url: https://github.com/fhcrc/nestly

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - cswarth
    # - LukeSkywalker
