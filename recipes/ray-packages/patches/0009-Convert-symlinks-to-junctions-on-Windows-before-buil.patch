From d2c6fcdc5c5dd2b43c62309b0ab4a02b2cffb786 Mon Sep 17 00:00:00 2001
From: Vasilij Litvinov <vasilij.n.litvinov@intel.com>
Date: Fri, 20 Nov 2020 15:32:19 +0300
Subject: [PATCH 09/12] Convert symlinks to junctions on Windows before
 building

Signed-off-by: Vasilij Litvinov <vasilij.n.litvinov@intel.com>
---
 python/setup.py | 40 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)

diff --git a/python/setup.py b/python/setup.py
index 024657039..1e8ae41f7 100644
--- a/python/setup.py
+++ b/python/setup.py
@@ -225,6 +225,45 @@ def download_pickle5(pickle5_dir):
             finally:
                 wzf.close()
 
+def replace_symlinks_with_junctions():
+    _LINKS = {
+        r'ray\new_dashboard': '../../dashboard',
+        r'ray\rllib': '../../rllib',
+        r'ray\streaming': '../../streaming/python/',
+    }
+    root_dir = os.path.dirname(__file__)
+    for link, default in _LINKS.items():
+        path = os.path.join(root_dir, link)
+        try:
+            out = subprocess.check_output('DIR /A:LD /B', shell=True, cwd=os.path.dirname(path))
+        except subprocess.CalledProcessError:
+            out = b''
+        if os.path.basename(path) in out.decode('utf8').splitlines():
+            print('"{}" is already converted to junction point'.format(link))
+        else:
+            print('Converting "{}" to junction point...'.format(link))
+            if os.path.isfile(path):
+                with open(path) as inp:
+                    target = inp.read()
+                os.unlink(path)
+            elif os.path.isdir(path):
+                target = default
+                try:
+                    # unlink() works on links as well as on regular files,
+                    # and links to directories are considered directories now
+                    os.unlink(path)
+                except OSError as err:
+                    if err.errno != errno.EIO:
+                        raise
+                    os.rmdir(path)
+            else:
+                raise ValueError('Unexpected type of entry: "{}"'.format(path))
+            target = os.path.abspath(os.path.join(os.path.dirname(path), target))
+            print('Setting {} -> {}'.format(link, target))
+            subprocess.check_call('MKLINK /J "{}" "{}"'.format(os.path.basename(link), target), shell=True, cwd=os.path.dirname(path))
+
+if is_native_windows_or_msys():
+    replace_symlinks_with_junctions()
 
 def build(build_python, build_java):
     if tuple(sys.version_info[:2]) not in SUPPORTED_PYTHONS:
@@ -243,6 +282,7 @@ def build(build_python, build_java):
     bazel_env = dict(os.environ, PYTHON3_BIN_PATH=sys.executable)
 
     if is_native_windows_or_msys():
+        replace_symlinks_with_junctions()
         SHELL = bazel_env.get("SHELL")
         if SHELL:
             bazel_env.setdefault("BAZEL_SH", os.path.normpath(SHELL))
-- 
2.11.0

