{% set version = '1.17.1' %}
{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-randtoolbox
  version: {{ version|replace("-", "_") }}

source:
  fn: randtoolbox_{{ version }}.tar.gz
  url:
    - {{ cran_mirror }}/src/contrib/randtoolbox_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/randtoolbox/randtoolbox_{{ version }}.tar.gz
  sha256: 9a1e10326a779ca671405efbb707981f87450e28a0faab5e92d093884770538d

build:
  merge_build_host: True  # [win]
  number: 0
  skip: true  # [win32]
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}        # [not win]
    - {{ compiler('fortran') }}  # [not win]
    - {{native}}toolchain        # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}sed               # [win]
    - {{posix}}grep              # [win]
    - {{posix}}autoconf
    - {{posix}}automake          # [not win]
    - {{posix}}automake-wrapper  # [win]
    - {{posix}}pkg-config
    - {{posix}}make
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]
  host:
    - r-base
    - r-rngwell >=0.10_1
  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rngwell >=0.10_1

test:
  commands:
    - $R -e "library('randtoolbox')"           # [not win]
    - "\"%R%\" -e \"library('randtoolbox')\""  # [win]

about:
  home: https://CRAN.R-project.org/package=randtoolbox
  license: BSD_3_clause
  summary: 'Provides (1) pseudo random generators - general linear congruential generators, multiple
    recursive generators and generalized feedback shift register (SF-Mersenne Twister
    algorithm and WELL generators); (2) quasi random generators - the Torus algorithm,
    the Sobol sequence, the Halton sequence (including the Van der Corput sequence)
    and (3) some RNG tests - the gap test, the serial test, the poker test. The package
    depends on rngWELL package but it can be provided without this dependency on demand
    to the maintainer. For true random number generation, use the ''random'' package,
    for Latin Hypercube Sampling (a hybrid QMC method), use the ''lhs'' package. A number
    of RNGs and tests for RNGs are also provided by ''RDieHarder'', all available on
    CRAN. There is also a small stand-alone package ''rngwell19937'' for the WELL19937a
    RNG. '
  license_family: BSD

extra:
  recipe-maintainers:
    - johanneskoester
    - bgruening
    - daler
    - jdblischak
    - cbrueffer
