# Based on blas metapackage: https://github.com/conda-forge/blas-feedstock
# Some useful notes can be found at https://conda-forge.hackpad.com/BLAS-Numpy-Friends-86De62hoNdT

{% set variant = os.environ.get('MPI_VARIANT', 'mpich') %}

# The version should be in the form X.Y, where X denotes major infrastructural change to how mpi is managed,
# and Y denoting mpi priority. Currently Y=0 not default, Y=1 default mpi.
# TODO: decide on mpich vs openmpi priority once both are packaged:
{% set Y = 1 if variant == 'undecided' else 0 %}
package:
  name: mpi
  version: 1.{{ Y }}

build:
  # We mustn't use the build number in the mpi package - because we are defining the string,
  # manually we would not be producing unique filenames.
  number: 0
  string: {{ variant }}
  # TODO: support Windows when msmpi is packaged
  skip: true  # [win]
  track_features:
    # The "mpi" package must always track a feature, else it will be
    # prioritised over all others.
    - mpi_{{ variant }}

requirements:
  run:
    - {{ variant }}

test:
  

about:
  home: https://github.com/conda-forge/mpi-feedstock
  license: BSD 3-clause
  summary: Metapackage to select the MPI variant. Use conda's pinning mechanism in your environment to control which variant you want.

extra:
  recipe-maintainers:
    - minrk
    - ocefpaf
