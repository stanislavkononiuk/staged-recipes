# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 13 is conviniet
# when copying and paster from another recipe, but not really needed.
{% set name = "resonATe" %}
{% set version = "0.3.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: 9078f6a46f48ce1a577a0f261682df9ac9e102ef07d7e74a49ce7ab5c375e972
  # sha256 is the prefered checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: python
  number: 3
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python -m pip install --no-deps --ignore-installed .

python:
  - 2.7
  - 3.5
  - 3.6
  - 3.7

requirements:
  build:
    # if your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # compilers are named 'c', 'cxx' and 'fortran'.
    - python {{ python }}
    - setuptools
    - pandas
    - numpy
    - sphinx
    - geopy
    - simplejson
    - nose
    - colorama
    - plotly
    - nbconvert
  host:
    - python
    - pip
  run:
    - python
    - setuptools
    - pandas
    - numpy
    - sphinx
    - geopy
    - simplejson
    - pytest
    - colorama
    - plotly
    - nbconvert

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - resonate

about:
  home: https://gitlab.oceantrack.org/otndc/resonate
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: GPL
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Acoustic telemetry analysis and processing toolkit in Python'

  # The remaining entries in this section are optional, but recommended
  description: |
    resonATe is the Ocean Tracking Network's acoustic telemetry
    analysis toolkit. It can be used to filter, compress, visualize
    and analyze acoustic detection extracts from OTN and other marine
    telemetry data.

  doc_url: http://resonate.readthedocs.io/
  dev_url: https://gitlab.oceantrack.org/otndc/resonate

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - alexetnunes
