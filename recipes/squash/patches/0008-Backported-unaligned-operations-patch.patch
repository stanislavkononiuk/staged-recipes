From 652a43af5b2d2442a8ff76fe6d76e58c1bfa3ac2 Mon Sep 17 00:00:00 2001
From: Rolando Espinoza <rndmax84@gmail.com>
Date: Sun, 12 Feb 2017 14:56:06 -0400
Subject: [PATCH 8/9] Backported unaligned operations patch.

See https://github.com/IlyaGrebnov/libbsc/pull/5
---
 plugins/bsc/libbsc/libbsc/coder/coder.cpp           |  5 +++++
 plugins/bsc/libbsc/libbsc/coder/common/rangecoder.h | 10 ++++++++++
 plugins/bsc/libbsc/libbsc/lzp/lzp.cpp               | 10 +++++++++-
 3 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/plugins/bsc/libbsc/libbsc/coder/coder.cpp b/plugins/bsc/libbsc/libbsc/coder/coder.cpp
index 7aaaf00..ab7389d 100644
--- a/plugins/bsc/libbsc/libbsc/coder/coder.cpp
+++ b/plugins/bsc/libbsc/libbsc/coder/coder.cpp
@@ -139,8 +139,13 @@ int bsc_coder_compress_serial(const unsigned char * input, unsigned char * outpu
             result = inputSize; memcpy(output + outputPtr, input + inputStart, inputSize);
         }
 
+#if defined(BSC_ALLOW_UNALIGNED)
         *(int *)(output + 1 + 8 * blockId + 0) = inputSize;
         *(int *)(output + 1 + 8 * blockId + 4) = result;
+#else
+        memcpy(output + 1 + 8 * blockId + 0, &inputSize, sizeof(int));
+        memcpy(output + 1 + 8 * blockId + 4, &result, sizeof(int));
+#endif
 
         outputPtr += result;
     }
diff --git a/plugins/bsc/libbsc/libbsc/coder/common/rangecoder.h b/plugins/bsc/libbsc/libbsc/coder/common/rangecoder.h
index da99fe1..a329078 100644
--- a/plugins/bsc/libbsc/libbsc/coder/common/rangecoder.h
+++ b/plugins/bsc/libbsc/libbsc/coder/common/rangecoder.h
@@ -62,12 +62,22 @@ private:
 
     INLINE void OutputShort(unsigned short s)
     {
+#if defined(BSC_ALLOW_UNALIGNED)
         *ari_output++ = s;
+#else
+        memcpy(ari_output++, &s, sizeof(unsigned short));
+#endif
     };
 
     INLINE unsigned short InputShort()
     {
+#if defined(BSC_ALLOW_UNALIGNED)
         return *ari_input++;
+#else
+        unsigned short ret;
+        memcpy(&ret, ari_input++, sizeof(unsigned short));
+        return ret;
+#endif
     };
 
     INLINE void ShiftLow()
diff --git a/plugins/bsc/libbsc/libbsc/lzp/lzp.cpp b/plugins/bsc/libbsc/libbsc/lzp/lzp.cpp
index a2cb1dd..8399afe 100644
--- a/plugins/bsc/libbsc/libbsc/lzp/lzp.cpp
+++ b/plugins/bsc/libbsc/libbsc/lzp/lzp.cpp
@@ -79,7 +79,11 @@ int bsc_lzp_encode_block(const unsigned char * input, const unsigned char * inpu
             if (value > 0)
             {
                 const unsigned char * reference = inputStart + value;
+#if defined(BSC_ALLOW_UNALIGNED)
                 if ((*(unsigned int *)(input + minLen - 4) == *(unsigned int *)(reference + minLen - 4)) && (*(unsigned int *)(input) == *(unsigned int *)(reference)))
+#else
+                if ((memcmp(input + minLen - 4, reference + minLen - 4, sizeof(unsigned int)) == 0) && (memcmp(input, reference, sizeof(unsigned int)) == 0))
+#endif
                 {
                     if ((heuristic > input) && (*(unsigned int *)heuristic != *(unsigned int *)(reference + (heuristic - input))))
                     {
@@ -229,9 +233,13 @@ int bsc_lzp_compress_serial(const unsigned char * input, unsigned char * output,
             if (outputPtr + inputSize >= n) return LIBBSC_NOT_COMPRESSIBLE;
             result = inputSize; memcpy(output + outputPtr, input + inputStart, inputSize);
         }
-
+#if defined(BSC_ALLOW_UNALIGNED)
         *(int *)(output + 1 + 8 * blockId + 0) = inputSize;
         *(int *)(output + 1 + 8 * blockId + 4) = result;
+#else
+        memcpy(output + 1 + 8 * blockId + 0, &inputSize, sizeof(int));
+        memcpy(output + 1 + 8 * blockId + 4, &result, sizeof(int));
+#endif
 
         outputPtr += result;
     }
-- 
2.6.2

