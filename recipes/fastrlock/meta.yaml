{% set name = "fastrlock" %}
{% set version = "0.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 6abdbb35205792e2d2a8c441aaa41a613d43ee2d88b3af4fd9735ae7a5f7db6b

build:
  number: 0
  # We need to pass --with-cython to force cython to regenerate the .c file
  script: "{{ PYTHON }} -m pip install . --global-option=\"--with-cython\" --no-deps --ignore-installed --no-cache-dir -vvv"

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
  host:
    - python
    - pip
    - cython
  run:
    - python

test:
  imports:
    - fastrlock

about:
  home: https://github.com/scoder/fastrlock
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: 'This is a C-level implementation of a fast, re-entrant, optimistic lock for CPython'
  description: |
    This is a C-level implementation of a fast, re-entrant,
    optimistic lock for CPython. It is a drop-in replacement for
    threading.RLock. FastRLock is implemented in Cython and also provides a
    C-API for direct use from Cython code via from fastrlock cimport rlock.

    Under normal conditions, it is about 10x faster than threading.RLock in
    Python 2.7 because it avoids all locking unless two or more threads try to
    acquire it at the same time. Under congestion, it is still about 10% faster
    than RLock due to being implemented in Cython.

    This is mostly equivalent to the revised RLock implementation in Python
    3.2, but still faster due to being implemented in Cython. Note that the
    threading.RLock implementation in Python 3.4 and later tends to be as fast
    or even faster than the lock provided by this package, when called through
    the Python API. FastRLock is still faster also on these systems when called
    through its Cython API.
  dev_url: https://github.com/scoder/fastrlock

extra:
  recipe-maintainers:
    - hmaarrfk
