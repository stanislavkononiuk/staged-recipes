package:
  name: openimageio
  version: 1.8.9

source:
  fn: Release-1.8.9.tar.gz
  url: https://github.com/OpenImageIO/oiio/archive/Release-1.8.9.tar.gz
  sha256: 6b785abc890a95c600903bd67d6746e14ee363a8bbea23842d2175d4e7a837f3
  patches:
    - 0001-bigobj.patch

build:
  number: 0
  skip: true  # [win]

requirements:
  build:
    - cmake
    - {{ compiler('cxx') }}
  host:
    - boost ==1.69.0
    - ffmpeg >=3.4.2,<3.5
    - giflib
    - jpeg
    - libpng >=1.6.0,<1.7
    - libtiff >=4.0.0,<4.1.0
    - libwebp ==1.0.1
    - openexr ==2.3.*
  run:
    # boost and libwebp don't have a run_exports section
    - boost ==1.69.0
    - libwebp ==1.0.1

test:
  commands:
    - test -d ${PREFIX}/include/OpenImageIO  # [unix]
    - test -f ${PREFIX}/include/OpenImageIO/oiioversion.h  # [unix]
    - test -f ${PREFIX}/lib/libOpenImageIO.so  # [linux]
    - test -f ${PREFIX}/lib/libOpenImageIO.dylib  # [osx]

about:
  home: https://sites.google.com/site/openimageio/home
  license: BSD-3-Clause
  license_family: BSD
  summary: Simple but powerful APIs for reading & writing many image formats
  description: |
    OpenImageIO consists of:
    - Simple but powerful ImageInput and ImageOutput APIs that provide an abstraction
      for reading and writing image files of nearly any format, without the calling
      application needing to know any of the details of these file formats, and indeed
      without the calling application needing to be aware of which formats are available.
    - Plugins implementing I/O for several popular image file formats, including TIFF,
      JPEG/JFIF, OpenEXR, PNG, HDR/RGBE, ICO, BMP, Targa, JPEG-2000, RMan Zfile, FITS, DDS,
      Softimage PIC, PNM, DPX, Cineon, IFF, Field3D, Ptex, Photoshop PSD, Wavefront RLA, SGI,
      WebP, GIF, DICOM, many \"RAW\" digital camera formats, and a variety of movie formats
      (readable as individual frames). More are being developed all the time.
    - An ImageCache class that transparently manages a cache so that it can access truly
      vast amounts of image data (tens of thousands of image files totaling multiple TB)
      very efficiently using only a tiny amount (tens of megabytes at most) of runtime memory.

extra:
  recipe-maintainers:
    - SylvainCorlay
    - JohanMabille
    - wolfv
