{% set name = "edit_distance" %}
{% set version = "1.0.1" %}
{% set sha256 = "d40437c98873bc72338e713d61888efb71c4d6a4f317f31fa8d746d9206ba512" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  noarch: python
  entry_points:
    - edit-distance = edit_distance.code:main
  script: python -m pip install --no-deps --ignore-installed . 

requirements:
  host:
    - python
    - pip
  run:
    - python

test:
  imports:
    - edit_distance
  commands:
    - edit-distance --help

about:
  home: https://github.com/belambert/editdistance
  license: BSD -2-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: Computing edit distance on arbitrary Python sequences.
  description: |
    Python module for computing edit distances and alignments between sequences.
    I needed a way to compute edit distances between sequences in Python. I 
    wasn't able to find any appropriate libraries that do this so I wrote my 
    own. There appear to be numerous edit distance libraries available for 
    computing edit distances between two strings, but not between two sequences.
    This is written entirely in Python. This implementation could likely be 
    optimized to be faster within Python. And could probably be much faster if
    implemented in C. 
    The library API is modeled after difflib.SequenceMatcher. This is very 
    similar to difflib, except that this module computes edit distance 
    (Levenshtein distance) rather than the Ratcliff and Oberhelp method 
    that Python's difflib uses.
  doc_url: https://github.com/belambert/edit-distance
  dev_url: https://github.com/belambert/edit-distance

extra:
  recipe-maintainers:
    - CurtLH
