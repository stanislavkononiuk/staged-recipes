{% set version = '0.1.1' %}
{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-curry
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/curry_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/curry/curry_{{ version }}.tar.gz
  sha256: 4930c6d5cdb6fa319b888d2220b9ded2c7bf786d8a700ad102558065d78649df

build:
  merge_build_host: True  # [win]
  number: 0
  noarch: generic
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
    - cross-r-base {{ r_base }}    # [build_platform != target_platform]
  host:
    - r-base
  run:
    - r-base

test:
  commands:
    - $R -e "library('curry')"           # [not win]
    - "\"%R%\" -e \"library('curry')\""  # [win]

about:
  home: https://github.com/thomasp85/curry
  license: GPL-2.0-or-later
  summary: Partial application is the process of reducing the arity of a function by fixing one
    or more arguments, thus creating a new function lacking the fixed arguments. The
    curry package provides three different ways of performing partial function application
    by fixing arguments from either end of the argument list (currying and tail currying)
    or by fixing multiple named arguments (partial application). This package provides
    this functionality through the %<%, %-<%, and %><% operators which allows for a
    programming style comparable to modern functional languages. Compared to other implementations
    such a purrr::partial() the operators in curry composes functions with named arguments,
    aiding in autocomplete etc.
  license_family: GPL2
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2

extra:
  recipe-maintainers:
    - conda-forge/r
