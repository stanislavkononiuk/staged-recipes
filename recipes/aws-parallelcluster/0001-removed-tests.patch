From 7cebb89cfa58515b0ae056a627aa7161133d697c Mon Sep 17 00:00:00 2001
From: Ilya Shlyakhter <ilya_shl@alum.mit.edu>
Date: Thu, 6 Jun 2019 14:03:51 -0400
Subject: [PATCH] removed tests

---
 aws_parallelcluster.egg-info/SOURCES.txt      |   4 -
 aws_parallelcluster.egg-info/top_level.txt    |   1 -
 tests/__init__.py                             |  10 -
 tests/__pycache__/__init__.cpython-36.pyc     | Bin 150 -> 0 bytes
 tests/pcluster/__init__.py                    |  10 -
 .../__pycache__/__init__.cpython-36.pyc       | Bin 159 -> 0 bytes
 .../efs_test.cpython-36-PYTEST.pyc            | Bin 3368 -> 0 bytes
 tests/pcluster/efs_test.py                    |  71 ----
 tests/pcluster/pcluster-unittest.py           | 311 ------------------
 9 files changed, 407 deletions(-)
 delete mode 100644 tests/__init__.py
 delete mode 100644 tests/__pycache__/__init__.cpython-36.pyc
 delete mode 100644 tests/pcluster/__init__.py
 delete mode 100644 tests/pcluster/__pycache__/__init__.cpython-36.pyc
 delete mode 100644 tests/pcluster/__pycache__/efs_test.cpython-36-PYTEST.pyc
 delete mode 100644 tests/pcluster/efs_test.py
 delete mode 100644 tests/pcluster/pcluster-unittest.py

diff --git a/aws_parallelcluster.egg-info/SOURCES.txt b/aws_parallelcluster.egg-info/SOURCES.txt
index 11cfde6..9e0ee56 100644
--- a/aws_parallelcluster.egg-info/SOURCES.txt
+++ b/aws_parallelcluster.egg-info/SOURCES.txt
@@ -40,7 +40,3 @@ pcluster/resources/batch/docker/scripts/entrypoint.sh
 pcluster/resources/batch/docker/scripts/generate_hostfile.sh
 pcluster/resources/batch/docker/scripts/mount_efs.sh
 pcluster/resources/batch/docker/scripts/mount_nfs.sh
-tests/__init__.py
-tests/pcluster/__init__.py
-tests/pcluster/efs_test.py
-tests/pcluster/pcluster-unittest.py
\ No newline at end of file
diff --git a/aws_parallelcluster.egg-info/top_level.txt b/aws_parallelcluster.egg-info/top_level.txt
index ac91a51..dc101ec 100644
--- a/aws_parallelcluster.egg-info/top_level.txt
+++ b/aws_parallelcluster.egg-info/top_level.txt
@@ -1,3 +1,2 @@
 awsbatch
 pcluster
-tests
diff --git a/tests/__init__.py b/tests/__init__.py
deleted file mode 100644
index 492c81b..0000000
--- a/tests/__init__.py
+++ /dev/null
@@ -1,10 +0,0 @@
-# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
-# with the License. A copy of the License is located at
-#
-# http://aws.amazon.com/apache2.0/
-#
-# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
-# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
-# limitations under the License.
diff --git a/tests/__pycache__/__init__.cpython-36.pyc b/tests/__pycache__/__init__.cpython-36.pyc
deleted file mode 100644
index babf978c3ade4ed5704ce671658f506537059739..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 150
zcmXr!<>i`?yCg=7iGkrU0}@~avK@f9m<33rFa$GbGWxA#C;|y1h+oe7DTyVC`o-n?
z#U+X9sVTZesmYlIsm1z<<;A)MiA9MyIjK3xIi<xVsYSX*dd7N&`X#BwCB^#j@tJv<
aCGqik1(mlrY;yBcN^?@}K!z6sF#`ZcFePpP

diff --git a/tests/pcluster/__init__.py b/tests/pcluster/__init__.py
deleted file mode 100644
index 1d44f1e..0000000
--- a/tests/pcluster/__init__.py
+++ /dev/null
@@ -1,10 +0,0 @@
-# Copyright 2013-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
-# with the License. A copy of the License is located at
-#
-# http://aws.amazon.com/apache2.0/
-#
-# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
-# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
-# limitations under the License.
diff --git a/tests/pcluster/__pycache__/__init__.cpython-36.pyc b/tests/pcluster/__pycache__/__init__.cpython-36.pyc
deleted file mode 100644
index e47a3f0fb47354767f8817e8f0b227f7def2fd07..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 159
zcmXr!<>i`?yCg=RiGkrU0}@~avK@f9m<33rFa$GbGWxA#C;|y1h+jVXDTyVC`o-n?
z#U+X9sVTZesmYlIsm1z<<;A)MiA9MyIjK3xIi<xVsYSX*dd7N&`X#BwCB^y$P(l6p
e_{_Y_lK6PNg34PQHo5sJr8%i~AX|!om;nIL)F~YR

diff --git a/tests/pcluster/__pycache__/efs_test.cpython-36-PYTEST.pyc b/tests/pcluster/__pycache__/efs_test.cpython-36-PYTEST.pyc
deleted file mode 100644
index 6a2e6931f41903fa39d4aafb265090e1eea5bcc1..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3368
zcmeHJOK;mo5MDkcQIs4zww1)rqfFDZ6%b2y9!Sv!K>*h+S`<zIHy5D=!EjeHWxldY
z#u4H4P~}>nz4Zt5(*Mw((bHag@?XfQGo)la5GMh0>7lZBIGmjw&d%f8y|u7l{u=!8
z!(TN*{vlI89ry<@#Lqw|p^8sBO8!*)T3_#!a=zRt=g&%~0#DU9f@-I#5UO=ds&{Iv
z(ytGRv%t(`!8Tb9=owm~<(H(hNGsHU=hD}NR;l@tP?MGWXNOv6nXS;;fy#e^_thZ*
zYswyJ){nstvfET-)$N9E6n4E{ww5rFh<5DysYn=a7h;=rg*4L8OK{r7b>p7`%r*>x
z+so~$*%v!OoD8gP8oG%Wg;o+-!V6O0Ntl)FGt1=+*^_xMw8kH7?fywPnwpST-?gce
zIBjv*7Kzhibb~Y3i<xLUhhigkxa0fGA33~nvvsSr)t=i0xNoDV6%S;&`1%?2Sp`B=
zUIzN!n@VHw^0ZA&b~DA5;Ipz^tXlzo>`rCg9dz>nDp){RUNs$+DjkigRD+D`RHr3)
zLLER}D{|#~*z3+$d)s+VA30nwp51;7>9a5jUf8pOh^9Vx8*vLFC{P3oEY2`V)QVzE
zoM^e2Ui@h=Fid%>{{|)@iDIh>6mFsnl@|(CsQQu|Dg6@F)=0lh^`Y`5ff@CP^eaay
zEv*q+#uEKSQ^-hG1(``}GqO6!7U-E7*&@i6=-C<BGRRiw>Wr)bvUBwOjO+r)*68{~
zmKaCsP@xy;rGh(0hTsvs457P{eR~om@wVVthx=?&xZ|SsgymvE(n;(veHgzz7-AJj
z5BC3K{e=S2B17_<`c&U5>K%HqBogk$O;xI`O{qa1<_hMOdC&Kt2csaqZ=pf7UMAVy
z*W|o~*~Z?ri<)oU^CNIh+y`cCLz<BHhef(yDK|JKT$;E>>^q#%tnoNx&tv9dSrj6h
zdK^5}0?|80^~~ssjjfxvZr{mPr<BnK{Co5mU6iH3dH&7A?BbM0%s3Qa;Dj!-p&;2Y
zMoH=iY_OHBP3fVfg8&8_pgDvGsc&uG+{~^{X~jHx<_RcUM(t#uM`>?APLt!j%k+e&
zY}UKb<%1YDb&O>#Yg4PU^(m_pONEODXlK7qDTHb8gmEkC<_&~!6fi(e@ws(fSmw?+
zbf00Ljizo`cdY_gQ|>&0Hk?d3A+@$9@6eFYyU!r>MW>3qQ-dfC6Dy89pa6-8s(`SG
z;~wlbt2vrU-QhhUb%a=+hrjV?1eDtavKQDO&B>>s^kUyjWX%!q&1C0k>iAOgS=iL1
zE|}j1=*$5{)-WL>h?px+xj0vI7a?Ba3J{`|6;oMPR%iZnrL3rms%F>Tp??2Iqtl^!
z4vj{q(R-p1uR`9MDmUT5;XX5UDs${BUI%gq#=D_V;neF;h%cZuJd<+(;)}qYiadM?
z_0FQoTabq@qb8oMZ^Rvrpv)Vnb~^0vbEtG4mEMjz`~oVkq4EqQjzNd7<2?4po4|%&
zLWTb{*x+4-Uq*sGo<j})067cERU{uGxdx=E@sE(dj^tw`lZ#%C(i7|`DrFON-XA*(
zTf5D&G;BKr2)1o$+KA?G0|LHo+X!`|nTl=G$hB?$2|D=cte3gJdEw(RfH@X;dKikX
z8V!yz{6^q-p=~!C(s+`3K3unitUrhc_Q~6t9S;yDTLsd>k=5etkb4P})f17djAbS)
z&QaCjJU<}~0C&J`!K5+1Hy0pZD*)Q=dOqtk@-?G-F<gIx81Htnx(gu?vE#BlZ=I!i
zjr;)Nm{@5bC~rG(9N^w~6J<JXZz^*qF_Ff-BBuB8QXsH)4N@nDYN&NpS9HYytS@Uu
K$tW$i4CP;R1DoIg

diff --git a/tests/pcluster/efs_test.py b/tests/pcluster/efs_test.py
deleted file mode 100644
index 3d97519..0000000
--- a/tests/pcluster/efs_test.py
+++ /dev/null
@@ -1,71 +0,0 @@
-import unittest
-
-import argparse
-
-from pcluster import cfnconfig
-
-config_file = "tests/pcluster/config_efs"
-test_cluster_template = "unittest"
-args = argparse.Namespace()
-args.config_file = config_file
-args.cluster_template = test_cluster_template
-
-
-def create():
-    """Empty function to simulate the create function in pcluster."""
-    return
-
-
-def update():
-    """Empty function to simulate the update function in pcluster."""
-    return
-
-
-class TestEFSConfigParser(unittest.TestCase):
-    """Unit testing module for parsing EFS related options."""
-
-    def test_efs_create(self):
-        """Unit tests for parsing EFS related options when pcluster create is called."""
-        global args
-        args.func = create
-        config = cfnconfig.ParallelClusterConfig(args)
-        efs_options = [opt.strip() for opt in config.parameters["EFSOptions"].split(",")]
-        self.assertEqual(efs_options[0], "efs_shared", msg="Unexpected shared_dir")
-        self.assertEqual(efs_options[1], "fs-12345", msg="Unexpected efs_fs_id")
-        self.assertEqual(efs_options[2], "maxIO", msg="Unexpected performance_mode")
-        self.assertEqual(efs_options[3], "key1", msg="Unexpected efs_kms_key_id")
-        self.assertEqual(efs_options[4], "1020", msg="Unexpected provisioned_throughput")
-        self.assertEqual(efs_options[5], "true", msg="Unexpected encrypted")
-        self.assertEqual(efs_options[6], "provisioned", msg="Unexpected throughput_mode")
-        self.assertEqual(
-            len(efs_options),
-            8,
-            "Unexpected number of EFS parameters: %s "
-            "\nExpected 8 parameters, 7 configurable parameters"
-            "and 1 parameter reserved for passing mount point state to stack" % len(efs_options),
-        )
-
-    def test_efs_update(self):
-        """Unit tests for parsing EFS related options when pcluster update is called."""
-        global args
-        args.func = update
-        config = cfnconfig.ParallelClusterConfig(args)
-        efs_options = [opt.strip() for opt in config.parameters["EFSOptions"].split(",")]
-        self.assertEqual(efs_options[0], "efs_shared", msg="Unexpected shared_dir")
-        self.assertEqual(efs_options[1], "fs-12345", msg="Unexpected efs_fs_id")
-        self.assertEqual(efs_options[2], "maxIO", msg="Unexpected performance_mode")
-        self.assertEqual(efs_options[3], "key1", msg="Unexpected efs_kms_key_id")
-        self.assertEqual(efs_options[4], "1020", msg="Unexpected provisioned_throughput")
-        self.assertEqual(efs_options[5], "true", msg="Unexpected encrypted")
-        self.assertEqual(efs_options[6], "provisioned", msg="Unexpected throughput_mode")
-        self.assertEqual(
-            len(efs_options),
-            8,
-            "Unexpected number of EFS parameters: %s "
-            "\nExpected 8 parameters, 7 configurable parameters"
-            "and 1 parameter reserved for passing mount point state to stack" % len(efs_options),
-        )
-
-
-if __name__ == "__main__":
-    unittest.main()
diff --git a/tests/pcluster/pcluster-unittest.py b/tests/pcluster/pcluster-unittest.py
deleted file mode 100644
index 5d5aa83..0000000
--- a/tests/pcluster/pcluster-unittest.py
+++ /dev/null
@@ -1,311 +0,0 @@
-# Copyright 2013-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
-# with the License. A copy of the License is located at
-#
-# http://aws.amazon.com/apache2.0/
-#
-# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
-# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
-# limitations under the License.
-
-# noqa: D101
-
-import json
-import logging
-import os
-import re
-import stat
-import unittest
-
-import boto3
-import configparser
-
-from moto import mock_autoscaling, mock_cloudformation, mock_ec2, mock_s3
-from pcluster import pcluster
-
-try:
-    from StringIO import StringIO
-except ImportError:
-    from io import StringIO
-
-
-test_log_stream = StringIO()
-config_file = "cli/tests/config"
-with open("cloudformation/aws-parallelcluster.cfn.json") as f:
-    cfncluster_json_data = json.load(f)
-    version_on_file = cfncluster_json_data["Mappings"]["PackagesVersions"]["default"]["cfncluster"]
-    version_on_file = re.match(r".*(\d+\.\d+\.\d+.*)", version_on_file).group(1)
-    json_dump = json.dumps(cfncluster_json_data)
-
-
-def config_logger_test():
-    logging.basicConfig(stream=test_log_stream, level=logging.INFO)
-
-
-def setup_configurations():
-    s3 = boto3.client("s3")
-    s3_conn = boto3.resource("s3")
-    s3.create_bucket(Bucket="us-east-1-aws-parallelcluster")
-    s3_conn.Object("us-east-1-aws-parallelcluster", "aws-parallelcluster").put(Body=json_dump)
-    template_url = s3.generate_presigned_url(
-        ClientMethod="get_object", Params={"Bucket": "us-east-1-aws-parallelcluster", "Key": "aws-parallelcluster"}
-    )
-
-    client = boto3.client("ec2", region_name="us-east-1")
-    instance = client.run_instances(ImageId="ami-1234abcd", MinCount=1, MaxCount=1)["Instances"][0]
-
-    vpc = client.create_vpc(CidrBlock="10.0.0.0/16", AmazonProvidedIpv6CidrBlock=True, DryRun=False)
-    subnet = client.create_subnet(
-        AvailabilityZone=instance["Placement"]["AvailabilityZone"],
-        CidrBlock="10.0.0.0/16",
-        Ipv6CidrBlock=vpc["Vpc"]["Ipv6CidrBlockAssociationSet"][0]["Ipv6CidrBlock"],
-        VpcId=vpc["Vpc"]["VpcId"],
-    )
-    config = configparser.ConfigParser()
-    config.read(config_file)
-    config.set("vpc public", "vpc_id", subnet["Subnet"]["VpcId"])
-    config.set("vpc public", "master_subnet_id", subnet["Subnet"]["SubnetId"])
-
-    open(config_file, "a").close()
-    os.chmod(config_file, stat.S_IRUSR | stat.S_IWUSR)
-    with open(config_file, "w") as cf:
-        config.write(cf)
-
-    return template_url
-
-
-class BaseArgs:
-    def __init__(self):
-        self.version = "0.0"
-        self.func = lambda x: x
-        self.config_file = "cli/tests/config"
-        self.region = "us-east-1"
-
-
-class CreateClusterArgs(BaseArgs):
-    def __init__(self, template_url, nowait):
-        BaseArgs.__init__(self)
-        self.cluster_name = "test_cluster"
-        self.template_url = template_url
-        self.norollback = True
-        self.nowait = nowait
-
-
-class UpdateClusterArgs(CreateClusterArgs):
-    def __init__(self, template_url, nowait, reset_desired):
-        CreateClusterArgs.__init__(self, template_url=template_url, nowait=nowait)
-        self.reset_desired = reset_desired
-
-
-class TestPCluster(unittest.TestCase):
-    def setUp(self):
-        config_logger_test()
-
-    def test_cfn_cluster_version(self):
-        args = BaseArgs()
-        pcluster.version(args)
-        log = test_log_stream.getvalue()
-        version_returned = re.match(r"^INFO:\w+\.\w+:(\d+\.\d+\.\d+.*)$", log).group(1)
-        self.assertEqual(version_returned, version_on_file)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    def test_cfn_cluster_create_nowait(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        pcluster.create(args)
-        log = test_log_stream.getvalue()
-        success_message = "INFO:parallelcluster.parallelcluster:Status: CREATE_COMPLETE"
-        error_prefix = "CRITICAL:"
-        self.assertTrue(success_message in log)
-        self.assertFalse(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    def test_cfn_cluster_create_wait(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, False)
-        pcluster.create(args)
-        log = test_log_stream.getvalue()
-        success_message = "INFO:parallelcluster.parallelcluster:MasterPublicIP:"
-        error_prefix = "CRITICAL:"
-        self.assertTrue(success_message in log)
-        self.assertFalse(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    def test_cfn_cluster_create_fail(self):
-        setup_configurations()
-        args = CreateClusterArgs("", True)
-        with self.assertRaises(SystemExit) as sys_ex:
-            pcluster.create(args)
-
-        self.assertEqual(sys_ex.exception.code, 1)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        self.assertTrue(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    def test_cfn_cluster_list_empty(self):
-        args = BaseArgs()
-        pcluster.list(args)
-        self.assertEqual(test_log_stream.tell(), 0)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    def test_cfn_cluster_list_nonempty(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, False)
-        pcluster.create(args)
-        # reset the logger
-        self.tearDown()
-        pcluster.list(args)
-        log = test_log_stream.getvalue()
-        cluster_name = re.match(r"INFO:parallelcluster.parallelcluster:(\w+)", log).group(1)
-        self.assertEqual(cluster_name, args.cluster_name)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_autoscaling
-    @mock_s3
-    def test_cfn_cluster_update_no_reset(self):
-        template_url = setup_configurations()
-        args = UpdateClusterArgs(template_url, True, False)
-        pcluster.create(args)
-        pcluster.update(args)
-        success_message = "INFO:parallelcluster.parallelcluster:Status: UPDATE_COMPLETE"
-        log = test_log_stream.getvalue()
-        self.assertTrue(success_message in log)
-        error_prefix = "CRITICAL:"
-        self.assertFalse(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_autoscaling
-    @mock_s3
-    def test_cfn_cluster_update_with_reset(self):
-        template_url = setup_configurations()
-        args = UpdateClusterArgs(template_url, True, True)
-        pcluster.create(args)
-        pcluster.update(args)
-        success_message = "INFO:parallelcluster.parallelcluster:Status: UPDATE_COMPLETE"
-        log = test_log_stream.getvalue()
-        self.assertTrue(success_message in log)
-        error_prefix = "CRITICAL:"
-        self.assertFalse(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_autoscaling
-    @mock_s3
-    def test_cfn_cluster_update_fail(self):
-        template_url = setup_configurations()
-        args = UpdateClusterArgs(template_url, True, False)
-        with self.assertRaises(SystemExit) as sys_ex:
-            pcluster.update(args)
-        self.assertEqual(sys_ex.exception.code, 1)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        self.assertTrue(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    @mock_autoscaling
-    def test_cfn_cluster_delete(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        pcluster.create(args)
-        with self.assertRaises(SystemExit) as sys_ex:
-            pcluster.delete(args)
-            self.assertEqual(sys_ex.exception.code, 0)
-        success_message = "Cluster deleted successfully"
-        log = test_log_stream.getvalue()
-        self.assertTrue(success_message in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    @mock_autoscaling
-    def test_cfn_cluster_delete_fail(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        with self.assertRaises(SystemExit) as sys_ex:
-            pcluster.delete(args)
-            self.assertEqual(sys_ex.exception.code, 1)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        self.assertTrue(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    @mock_autoscaling
-    def test_cfn_cluster_start(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        pcluster.create(args)
-        pcluster.start(args)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        success_message = "Starting compute fleet"
-        self.assertFalse(error_prefix in log)
-        self.assertTrue(success_message in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_s3
-    @mock_autoscaling
-    def test_cfn_cluster_start_fail(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        with self.assertRaises(SystemExit) as sys_ex:
-            pcluster.start(args)
-        self.assertEqual(sys_ex.exception.code, 1)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        self.assertTrue(error_prefix in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_autoscaling
-    @mock_s3
-    def test_cfn_cluster_stop(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        pcluster.create(args)
-        pcluster.start(args)
-        pcluster.stop(args)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        success_message = "Stopping compute fleet"
-        self.assertFalse(error_prefix in log)
-        self.assertTrue(success_message in log)
-
-    @mock_ec2
-    @mock_cloudformation
-    @mock_autoscaling
-    @mock_s3
-    def test_cfn_cluster_stop_fail(self):
-        template_url = setup_configurations()
-        args = CreateClusterArgs(template_url, True)
-        with self.assertRaises(SystemExit):
-            pcluster.stop(args)
-        log = test_log_stream.getvalue()
-        error_prefix = "CRITICAL:"
-        self.assertTrue(error_prefix in log)
-
-    def tearDown(self):
-        test_log_stream.truncate(0)
-        test_log_stream.seek(0)
-
-
-if __name__ == "__main__":
-    unittest.main()
-- 
2.20.1

