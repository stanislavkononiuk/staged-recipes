{% set name = "Judy" %}
{% set version = "1.0.5" %}
{% set sha256 = "d2704089f85fdb6f2cd7e77be21170ced4b4375c03ef1ad4cf1075bd414a63eb" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://downloads.sourceforge.net/project/judy/judy/{{name}}-{{version}}/{{name}}-{{version}}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [win]

requirements:
  build:
    - toolchain

test:
  commands:
    - test -f $PREFIX/lib/libJudy.so  # [linux]
    - test -f $PREFIX/lib/libJudy.a  # [linux]
    - test -f $PREFIX/lib/libJudy.dylib  # [osx]
    - test -f $PREFIX/lib/libJudy.la  # [osx]
    - test -f $PREFIX/include/Judy.h

about:
  home: http://judy.sourceforge.net/index.html
  license: LGPL-2.1
  license_file: COPYING
  summary: 'C library for creating and accessing sparse dynamic arrays'

  # The remaining entries in this section are optional, but recommended
  description: |
      Judy is a C library that implements a dynamic array.  Empty Judy arrays are
      declared with null pointers.  A Judy array consumes memory only when
      populated yet can grow to take advantage of all available memory.  Judy's key
      benefits are:  scalability, performance, memory efficiency, and ease of use.
      Judy arrays are designed to grow without tuning into the peta-element range,
      scaling near O(log-base-256).

      Judy arrays are accessed with insert, retrieve, and delete calls for number
      or string indexes.  Configuration and tuning are not required -- in fact not
      possible.  Judy offers sorting, counting, and neighbor/empty searching.
      Indexes can be sequential, clustered, periodic, or random -- it doesn't
      matter to the algorithm.  Judy arrays can be arranged hierarchically to
      handle any bit patterns -- large indexes, sets of keys, etc.

      Judy is often an improvement over common data structures such as:  arrays,
      sparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,
      other sort and search algorithms, and counting functions.
  doc_url: http://judy.sourceforge.net/doc/index.html
  dev_url: http://sourceforge.net/projects/judy

extra:
  recipe-maintainers:
    - kalebo
