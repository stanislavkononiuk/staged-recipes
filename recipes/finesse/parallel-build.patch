diff --git a/setup.py b/setup.py
index 75b3448f..65027da7 100644
--- a/setup.py
+++ b/setup.py
@@ -7,6 +7,7 @@ from Cython.Build import build_ext, cythonize
 from Cython.Distutils import Extension
 
 SYS_NAME = platform.system()
+NUM_JOBS = int(os.getenv('CPU_COUNT', '0') or os.cpu_count())
 
 
 def get_conda_paths():
@@ -186,11 +187,6 @@ def ext_modules():
     for ext_rel_path, args in ext_args:
         exts.append(make_extension(os.path.normpath(ext_rel_path), **args))
 
-    if (SYS_NAME == "Windows") or (SYS_NAME == "Darwin"):
-        num_jobs = 0
-    else:
-        num_jobs = os.cpu_count()
-
     # See https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives
     # for in-depth details on the options for compiler directives
     compiler_directives = {
@@ -219,7 +215,7 @@ def ext_modules():
         # per-line of each Cython extension (.pyx) file
         annotate=True,
         language_level=3,
-        nthreads=num_jobs,
+        nthreads=NUM_JOBS,
         compiler_directives=compiler_directives,
         gdb_debug=True,
     )
@@ -290,43 +286,10 @@ def read(fname):
     return open(os.path.join(os.path.dirname(__file__), fname)).read()
 
 
-def parallelise_build():
-    import warnings
-    from concurrent.futures import ProcessPoolExecutor
-    from concurrent.futures.process import BrokenProcessPool
-
-    def build_extensions(self):
-        """Function to monkey-patch Cython.Build.build_ext.build_extensions to build
-        extensions in parallel."""
-        self.check_extensions_list(self.extensions)
-        num_jobs = os.cpu_count()
-        try:
-            with ProcessPoolExecutor(max_workers=num_jobs) as pool:
-                # results = pool.map(self.build_extension, self.extensions)
-                pool.map(self.build_extension, self.extensions)
-        # TODO [adf] check which exception could be used to start sequential build
-        except BrokenProcessPool:
-            for ex in self.extensions:
-                self.build_extension(ex)
-        # TODO [adf] this does not raise an error when the build fails, so
-        # it still looks like everything works with pip install
-        # else:
-        #    try:
-        #        print(list(results))
-        #    except (Exception, BrokenProcessPool):
-        #        raise RuntimeError("Could not compile extension, maybe missing a dependency")
-
-    warnings.warn(
-        "Cython is monkey-patched to parallelise the build. If you encounter any issues, this "
-        "behaviour can be disabled in setup.py."
-    )
-    build_ext.build_extensions = build_extensions
-
-
-# Parallel build behaves strangely on Windows and Mac OSX so enable it only for Linux.
-# See #272.
-if __name__ == "__main__" and SYS_NAME == "Linux":
-    parallelise_build()
+class finesse_build_ext(build_ext):
+    def initialize_options(self):
+        super().initialize_options()
+        self.parallel = NUM_JOBS
 
 
 setup(
@@ -348,7 +311,7 @@ setup(
     packages=find_packages("src"),
     package_dir={"": "src"},
     ext_modules=ext_modules(),
-    cmdclass={"build_ext": build_ext},
+    cmdclass={"build_ext": finesse_build_ext},
     zip_safe=False,
     package_data={
         "finesse": [
