From 57dfca8ab917492a86efdfed35cd4d09a3312b69 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Wed, 20 Jul 2022 21:29:46 +0200
Subject: [PATCH 6/6] add some more 'display' tags to tests & modules

---
 test/base_test.py        |  11 +++-
 test/cursors_test.py     |   8 +++
 test/display_tags.py     |   1 +
 test/draw_test.py        |  85 +++++++++++++++++++-------
 test/event_tags.py       |   1 +
 test/fastevent_tags.py   |   2 +-
 test/font_test.py        |  12 +++-
 test/gfxdraw_tags.py     |   1 +
 test/image_test.py       |   6 +-
 test/key_tags.py         |   1 +
 test/mixer_music_test.py |   4 ++
 test/mouse_tags.py       |   1 +
 test/pixelcopy_tags.py   |   1 +
 test/surface_test.py     | 125 +++++++++++++++++++++++++++++++++------
 test/transform_test.py   |  10 +++-
 test/video_tags.py       |   1 +
 16 files changed, 221 insertions(+), 49 deletions(-)
 create mode 100644 test/display_tags.py
 create mode 100644 test/event_tags.py
 create mode 100644 test/gfxdraw_tags.py
 create mode 100644 test/key_tags.py
 create mode 100644 test/mouse_tags.py
 create mode 100644 test/pixelcopy_tags.py
 create mode 100644 test/video_tags.py

diff --git a/test/base_test.py b/test/base_test.py
index 5c967076..eb01a66f 100644
--- a/test/base_test.py
+++ b/test/base_test.py
@@ -526,6 +526,10 @@ class BaseModuleTest(unittest.TestCase):
             self.assertTrue(pygame.font.get_init())
 
     def test_quit__and_init(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.base.quit:
 
         # pygame.quit(): return None
@@ -595,7 +599,12 @@ class BaseModuleTest(unittest.TestCase):
             self.assertEqual(encstr, pygame.get_error())
 
     def test_init(self):
-        """Ensures init() works properly."""
+        """
+        |Tags:display|
+
+        """
+        # Ensures init() works properly.
+
         # Make sure nothing initialized.
         self.not_init_assertions()
 
diff --git a/test/cursors_test.py b/test/cursors_test.py
index 328f0a7e..b1fc0318 100644
--- a/test/cursors_test.py
+++ b/test/cursors_test.py
@@ -5,6 +5,10 @@ import pygame
 
 class CursorsModuleTest(unittest.TestCase):
     def test_compile(self):
+        """
+        |Tags:display|
+
+        """
 
         # __doc__ (as of 2008-06-25) for pygame.cursors.compile:
 
@@ -86,6 +90,10 @@ class CursorsModuleTest(unittest.TestCase):
 ################################################################################
 
     def test_load_xbm(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.cursors.load_xbm:
 
         # pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
diff --git a/test/display_tags.py b/test/display_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/display_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/draw_test.py b/test/draw_test.py
index 3b56b9da..68a1cd78 100644
--- a/test/draw_test.py
+++ b/test/draw_test.py
@@ -1509,7 +1509,11 @@ class LineMixin(BaseLineMixin):
                 bounds_rect = self.draw_line(**kwargs)
 
     def test_line__color(self):
-        """Tests if the line drawn is the correct color."""
+        """
+        |Tags:display|
+
+        """
+        # """Tests if the line drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
@@ -1520,7 +1524,11 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__color_with_thickness(self):
-        """Ensures a thick line is drawn using the correct color."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensures a thick line is drawn using the correct color."""
         from_x = 5
         to_x = 10
         y = 5
@@ -1536,7 +1544,11 @@ class LineMixin(BaseLineMixin):
                     )
 
     def test_line__gaps(self):
-        """Tests if the line drawn contains any gaps."""
+        """
+        |Tags:display|
+
+        """
+        # """Tests if the line drawn contains any gaps."""
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             width = surface.get_width()
@@ -1549,7 +1561,11 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__gaps_with_thickness(self):
-        """Ensures a thick line is drawn without any gaps."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensures a thick line is drawn without any gaps."""
         expected_color = (255, 255, 255)
         thickness = 5
         for surface in self._create_surfaces():
@@ -2219,11 +2235,14 @@ class LinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_lines(**kwargs)
 
     def test_lines__color(self):
-        """Tests if the lines drawn are the correct color.
+        """
+        |Tags:display|
 
-        Draws lines around the border of the given surface and checks if all
-        borders of the surface only contain the given color.
         """
+        # """Tests if the lines drawn are the correct color.
+        # Draws lines around the border of the given surface and checks if all
+        # borders of the surface only contain the given color.
+        # """
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
                 self.draw_lines(surface, expected_color, True, corners(surface))
@@ -2232,7 +2251,11 @@ class LinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__color_with_thickness(self):
-        """Ensures thick lines are drawn using the correct color."""
+        """
+        |Tags:display|
+
+        """
+        #"""Ensures thick lines are drawn using the correct color."""
         x_left = y_top = 5
         for surface in self._create_surfaces():
             x_right = surface.get_width() - 5
@@ -2259,11 +2282,14 @@ class LinesMixin(BaseLineMixin):
                             )
 
     def test_lines__gaps(self):
-        """Tests if the lines drawn contain any gaps.
+        """
+        |Tags:display|
 
-        Draws lines around the border of the given surface and checks if
-        all borders of the surface contain any gaps.
         """
+        # """Tests if the lines drawn contain any gaps.
+        # Draws lines around the border of the given surface and checks if
+        # all borders of the surface contain any gaps.
+        # """
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             self.draw_lines(surface, expected_color, True, corners(surface))
@@ -2272,7 +2298,11 @@ class LinesMixin(BaseLineMixin):
                 self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__gaps_with_thickness(self):
-        """Ensures thick lines are drawn without any gaps."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensures thick lines are drawn without any gaps."""
         expected_color = (255, 255, 255)
         x_left = y_top = 5
         for surface in self._create_surfaces():
@@ -2848,7 +2878,11 @@ class AALineMixin(BaseLineMixin):
                 bounds_rect = self.draw_aaline(**kwargs)
 
     def test_aaline__color(self):
-        """Tests if the aaline drawn is the correct color."""
+        """
+        |Tags:display|
+
+        """
+        # """Tests if the aaline drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
@@ -2859,10 +2893,11 @@ class AALineMixin(BaseLineMixin):
                 )
 
     def test_aaline__gaps(self):
-        """Tests if the aaline drawn contains any gaps.
+        """
+        |Tags:display|
 
-        See: #512
         """
+        # """Tests if the aaline drawn contains any gaps. See: #512"""
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             width = surface.get_width()
@@ -3659,11 +3694,14 @@ class AALinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_aalines(**kwargs)
 
     def test_aalines__color(self):
-        """Tests if the aalines drawn are the correct color.
+        """
+        |Tags:display|
 
-        Draws aalines around the border of the given surface and checks if all
-        borders of the surface only contain the given color.
         """
+        # """Tests if the aalines drawn are the correct color.
+        # Draws aalines around the border of the given surface and checks if all
+        # borders of the surface only contain the given color.
+        # """
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
                 self.draw_aalines(surface, expected_color, True, corners(surface))
@@ -3672,13 +3710,14 @@ class AALinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_aalines__gaps(self):
-        """Tests if the aalines drawn contain any gaps.
-
-        Draws aalines around the border of the given surface and checks if
-        all borders of the surface contain any gaps.
+        """
+        |Tags:display|
 
-        See: #512
         """
+        # """Tests if the aalines drawn contain any gaps.
+        # Draws aalines around the border of the given surface and checks if
+        # all borders of the surface contain any gaps. See: #512
+        # """
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             self.draw_aalines(surface, expected_color, True, corners(surface))
diff --git a/test/event_tags.py b/test/event_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/event_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/fastevent_tags.py b/test/fastevent_tags.py
index c660bef5..93a1c469 100644
--- a/test/fastevent_tags.py
+++ b/test/fastevent_tags.py
@@ -1 +1 @@
-__tags__ = []
+__tags__ = ["display"]
diff --git a/test/font_test.py b/test/font_test.py
index 47492a82..885a9877 100644
--- a/test/font_test.py
+++ b/test/font_test.py
@@ -189,8 +189,12 @@ class FontModuleTest(unittest.TestCase):
         surf.blit(image, (0,0))
 
     def test_issue_font_alphablit(self):
-        """ Check that blitting anti-aliased text doesn't
-            change the background blue"""
+        """
+        |Tags:display|
+
+        """
+        # """ Check that blitting anti-aliased text doesn't
+        #     change the background blue"""
         pygame.display.set_mode((600, 400))
 
         font = pygame_font.Font(None, 24)
@@ -229,6 +233,10 @@ class FontTest(unittest.TestCase):
         pygame_font.quit()
 
     def test_render_args(self):
+        """
+        |Tags:display|
+
+        """
         screen = pygame.display.set_mode((600, 400))
         rect = screen.get_rect()
         f = pygame_font.Font(None, 20)
diff --git a/test/gfxdraw_tags.py b/test/gfxdraw_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/gfxdraw_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/image_test.py b/test/image_test.py
index 04165f03..4e4a9975 100644
--- a/test/image_test.py
+++ b/test/image_test.py
@@ -609,7 +609,11 @@ class ImageModuleTest(unittest.TestCase):
         )
 
     def test_frombuffer_8bit(self):
-        """ test reading pixel data from a bytes buffer"""
+        """
+        |Tags:display|
+
+        """
+        # """ test reading pixel data from a bytes buffer"""
         pygame.display.init()
         eight_bit_palette_buffer = bytearray([0, 0, 0, 0,
                                               1, 1, 1, 1,
diff --git a/test/key_tags.py b/test/key_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/key_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/mixer_music_test.py b/test/mixer_music_test.py
index 859e7d64..a642c450 100644
--- a/test/mixer_music_test.py
+++ b/test/mixer_music_test.py
@@ -223,6 +223,10 @@ class MixerMusicModuleTest(unittest.TestCase):
         'disk audio driver "playback" writing to disk is slow',
     )
     def test_play__start_time(self):
+        """
+        |Tags:display|
+
+        """
 
         pygame.display.init()
 
diff --git a/test/mouse_tags.py b/test/mouse_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/mouse_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/pixelcopy_tags.py b/test/pixelcopy_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/pixelcopy_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/surface_test.py b/test/surface_test.py
index 3a225a3b..2f07e31c 100644
--- a/test/surface_test.py
+++ b/test/surface_test.py
@@ -141,8 +141,11 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
             self.assertEqual(surf2.get_flags() & SRCALPHA, SRCALPHA)
 
     def test_flags_default0_nodisplay(self):
-        """ is set to zero, and SRCALPH is not set by default with no display initialized.
         """
+        |Tags:display|
+
+        """
+        # """ is set to zero, and SRCALPH is not set by default with no display initialized."""
         pygame.display.quit()
         surf = pygame.Surface((70, 70))
         self.assertEqual(surf.get_flags() & SRCALPHA, 0)
@@ -331,9 +334,13 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertTrue(not s2.get_flags() & pygame.RLEACCELOK)
 
     def test_solarwolf_rle_usage(self):
-        """ Test for error/crash when calling set_colorkey() followed
-            by convert twice in succession. Code originally taken
-            from solarwolf. """
+        """
+        |Tags:display|
+
+        """
+        # """ Test for error/crash when calling set_colorkey() followed
+        #     by convert twice in succession. Code originally taken
+        #     from solarwolf. """
         def optimize(img):
             clear = img.get_colorkey()
             img.set_colorkey(clear, RLEACCEL)
@@ -359,7 +366,11 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_solarwolf_rle_usage_2(self):
-        """ Test for RLE status after setting alpha """
+        """
+        |Tags:display|
+
+        """
+        # """ Test for RLE status after setting alpha """
 
         pygame.display.init()
         try:
@@ -429,6 +440,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_set_alpha__set_colorkey_rle(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             pygame.display.set_mode((640, 480))
@@ -557,6 +572,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
         'requires a non-"dummy" SDL_VIDEODRIVER',
     )
     def test_get_flags__display_surf(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             # FULLSCREEN
@@ -1112,6 +1131,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         'requires a non-"dummy" SDL_VIDEODRIVER',
     )
     def test_image_convert_bug_131(self):
+        """
+        |Tags:display|
+
+        """
         # Bitbucket bug #131: Unable to Surface.convert(32) some 1-bit images.
         # https://bitbucket.org/pygame/pygame/issue/131/unable-to-surfaceconvert-32-some-1-bit
 
@@ -1137,8 +1160,12 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_init(self):
-        """Ensure initialization exceptions are raised
-        for surf.convert()."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensure initialization exceptions are raised
+        # for surf.convert()."""
         pygame.display.quit()
         surf = pygame.Surface((1, 1))
 
@@ -1164,8 +1191,12 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha_init(self):
-        """Ensure initialization exceptions are raised
-        for surf.convert_alpha()."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensure initialization exceptions are raised
+        # for surf.convert_alpha()."""
         pygame.display.quit()
         surf = pygame.Surface((1, 1))
 
@@ -1184,8 +1215,12 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha_SRCALPHA(self):
-        """Ensure that the surface returned by surf.convert_alpha()
-        has alpha blending enabled"""
+        """
+        |Tags:display|
+
+        """
+        # """Ensure that the surface returned by surf.convert_alpha()
+        # has alpha blending enabled"""
         pygame.display.init()
         try:
             pygame.display.set_mode((640, 480))
@@ -1774,8 +1809,12 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha(self):
-        """Ensure the surface returned by surf.convert_alpha
-        has alpha values added"""
+        """
+        |Tags:display|
+
+        """
+        # """Ensure the surface returned by surf.convert_alpha
+        # has alpha values added"""
         pygame.display.init()
         try:
             pygame.display.set_mode((640, 480))
@@ -1826,7 +1865,11 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha__pixel_format_as_surface_subclass(self):
-        """Ensure convert_alpha accepts a Surface subclass argument."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensure convert_alpha accepts a Surface subclass argument."""
         expected_size = (23, 17)
         convert_surface = SurfaceSubclass(expected_size, SRCALPHA, 32)
         depth_surface = SurfaceSubclass((31, 57), SRCALPHA, 32)
@@ -1995,6 +2038,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(rectangle, (0, 0, 800, 600))
 
     def test_get_colorkey(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             # if set_colorkey is not used
@@ -2143,7 +2190,11 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(surface.get_locks(), ())
 
     def test_get_losses(self):
-        """Ensure a surface's losses can be retrieved"""
+        """
+        |Tags:display|
+
+        """
+        # """Ensure a surface's losses can be retrieved"""
         pygame.display.init()
         try:
             # Masks for different color component configurations
@@ -2254,6 +2305,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_get_palette(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             palette = [Color(i, i, i) for i in range(256)]
@@ -2272,6 +2327,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_get_palette_at(self):
+        """
+        |Tags:display|
+
+        """
         # See also test_get_palette
         pygame.display.init()
         try:
@@ -2488,6 +2547,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(surf.get_at((0, 0)), key)
 
     def test_set_palette(self):
+        """
+        |Tags:display|
+
+        """
         palette = [pygame.Color(i, i, i) for i in range(256)]
         palette[10] = tuple(palette[10])  # 4 element tuple
         palette[11] = tuple(palette[11])[0:3]  # 3 element tuple
@@ -2523,6 +2586,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         pygame.quit()
 
     def test_set_palette_at(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             pygame.display.set_mode((100, 50))
@@ -2618,6 +2685,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertFalse(surf.get_locked())
 
     def test_unmap_rgb(self):
+        """
+        |Tags:display|
+
+        """
         # Special case, 8 bit-per-pixel surface (has a palette).
         surf = pygame.Surface((2, 2), 0, 8)
         c = (1, 1, 1)  # Unlikely to be in a default palette.
@@ -2767,12 +2838,16 @@ class SurfaceSubtypeTest(unittest.TestCase):
         self.assertEqual(ms2.get_size(), expected_size)
 
     def test_convert_alpha(self):
-        """Ensure method convert_alpha() preserves the surface's class
+        """
+        |Tags:display|
 
-        When Surface is subclassed, the inherited convert_alpha() method will
-        return instances of the subclass. Non Surface fields are omitted,
-        however. This includes instance attributes.
         """
+        #"""Ensure method convert_alpha() preserves the surface's class
+
+        #When Surface is subclassed, the inherited convert_alpha() method will
+        #return instances of the subclass. Non Surface fields are omitted,
+        #however. This includes instance attributes.
+        #"""
         pygame.display.set_mode((40, 40))
         expected_size = (32, 32)
         s = pygame.Surface(expected_size, SRCALPHA, 16)
@@ -4009,6 +4084,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
     # https://github.com/pygame/pygame/issues/370#issuecomment-364625291
     @unittest.skipIf("ppc64le" in platform.uname(), "known ppc64le issue")
     def test_colorkey(self):
+        """
+        |Tags:display|
+
+        """
         # Check a workaround for an SDL 1.2.13 surface self-blit problem
         # (MotherHamster Bugzilla bug 19).
         pygame.display.set_mode((100, 50))  # Needed for 8bit surface
@@ -4032,6 +4111,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
     # https://github.com/pygame/pygame/issues/370#issuecomment-364625291
     @unittest.skipIf("ppc64le" in platform.uname(), "known ppc64le issue")
     def test_blanket_alpha(self):
+        """
+        |Tags:display|
+
+        """
         # Check a workaround for an SDL 1.2.13 surface self-blit problem
         # (MotherHamster Bugzilla bug 19).
         pygame.display.set_mode((100, 50))  # Needed for 8bit surface
@@ -4126,6 +4209,10 @@ class SurfaceFillTest(unittest.TestCase):
         pygame.display.quit()
 
     def test_fill(self):
+        """
+        |Tags:display|
+
+        """
         screen = pygame.display.set_mode((640, 480))
 
         # Green and blue test pattern
diff --git a/test/transform_test.py b/test/transform_test.py
index 65cfbc6c..2e3f3593 100644
--- a/test/transform_test.py
+++ b/test/transform_test.py
@@ -1251,8 +1251,11 @@ class TransformDisplayModuleTest(unittest.TestCase):
         pygame.display.quit()
 
     def test_flip(self):
-        """ honors the set_color key on the returned surface from flip.
         """
+        |Tags:display|
+
+        """
+        # """ honors the set_color key on the returned surface from flip."""
         image_loaded = pygame.image.load(example_path("data/chimp.png"))
 
         image = pygame.Surface(image_loaded.get_size(), 0, 32)
@@ -1296,8 +1299,11 @@ class TransformDisplayModuleTest(unittest.TestCase):
         self.assertEqual(surf.get_at((0, 0)), surf2.get_at((0, 0)))
 
     def test_flip_alpha(self):
-        """ returns a surface with the same properties as the input.
         """
+        |Tags:display|
+
+        """
+        # """ returns a surface with the same properties as the input."""
         image_loaded = pygame.image.load(example_path("data/chimp.png"))
 
         image_alpha = pygame.Surface(image_loaded.get_size(), pygame.SRCALPHA, 32)
diff --git a/test/video_tags.py b/test/video_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/video_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
-- 
2.37.0.windows.1

