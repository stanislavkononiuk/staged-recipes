From c187b6294a3574234165e90fa80d614194b91acd Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Wed, 20 Jul 2022 21:29:46 +0200
Subject: [PATCH 6/6] add some more 'display' tags to tests & modules

---
 test/base_test.py        |  12 +++
 test/cursors_test.py     |   7 ++
 test/display_tags.py     |   1 +
 test/draw_test.py        |  52 ++++++++++-
 test/event_tags.py       |   1 +
 test/fastevent_tags.py   |   2 +-
 test/font_test.py        |   8 ++
 test/gfxdraw_tags.py     |   1 +
 test/image_test.py       |   4 +
 test/key_tags.py         |   1 +
 test/mixer_music_test.py |   3 +
 test/mouse_tags.py       |   1 +
 test/pixelcopy_tags.py   |   1 +
 test/surface_test.py     | 188 +++++++++++++++++++++++++++++++++++++++
 test/surfarray_test.py   |  36 ++++++++
 test/time_test.py        |   4 +
 test/touch_tags.py       |   2 +-
 test/transform_test.py   |  17 +++-
 test/video_tags.py       |   1 +
 19 files changed, 335 insertions(+), 7 deletions(-)
 create mode 100644 test/display_tags.py
 create mode 100644 test/event_tags.py
 create mode 100644 test/gfxdraw_tags.py
 create mode 100644 test/key_tags.py
 create mode 100644 test/mouse_tags.py
 create mode 100644 test/pixelcopy_tags.py
 create mode 100644 test/video_tags.py

diff --git a/test/base_test.py b/test/base_test.py
index 5c967076..852f89d2 100644
--- a/test/base_test.py
+++ b/test/base_test.py
@@ -526,6 +526,10 @@ class BaseModuleTest(unittest.TestCase):
             self.assertTrue(pygame.font.get_init())
 
     def test_quit__and_init(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.base.quit:
 
         # pygame.quit(): return None
@@ -595,6 +599,10 @@ class BaseModuleTest(unittest.TestCase):
             self.assertEqual(encstr, pygame.get_error())
 
     def test_init(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures init() works properly."""
         # Make sure nothing initialized.
         self.not_init_assertions()
@@ -616,6 +624,10 @@ class BaseModuleTest(unittest.TestCase):
         self.assertFalse(pygame.get_init())
 
     def test_get_init__after_init(self):
+        """
+        |Tags:display|
+
+        """
         # Test if get_init() gets the init state after pygame.init() called.
         pygame.init()
 
diff --git a/test/cursors_test.py b/test/cursors_test.py
index 328f0a7e..f824fe9c 100644
--- a/test/cursors_test.py
+++ b/test/cursors_test.py
@@ -5,7 +5,10 @@ import pygame
 
 class CursorsModuleTest(unittest.TestCase):
     def test_compile(self):
+        """
+        |Tags:display|
 
+        """
         # __doc__ (as of 2008-06-25) for pygame.cursors.compile:
 
         # pygame.cursors.compile(strings, black, white,xor) -> data, mask
@@ -86,6 +89,10 @@ class CursorsModuleTest(unittest.TestCase):
 ################################################################################
 
     def test_load_xbm(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.cursors.load_xbm:
 
         # pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
diff --git a/test/display_tags.py b/test/display_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/display_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/draw_test.py b/test/draw_test.py
index 3b56b9da..b498f87e 100644
--- a/test/draw_test.py
+++ b/test/draw_test.py
@@ -1509,6 +1509,10 @@ class LineMixin(BaseLineMixin):
                 bounds_rect = self.draw_line(**kwargs)
 
     def test_line__color(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the line drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
@@ -1520,6 +1524,10 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__color_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures a thick line is drawn using the correct color."""
         from_x = 5
         to_x = 10
@@ -1536,6 +1544,10 @@ class LineMixin(BaseLineMixin):
                     )
 
     def test_line__gaps(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the line drawn contains any gaps."""
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
@@ -1549,6 +1561,10 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__gaps_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures a thick line is drawn without any gaps."""
         expected_color = (255, 255, 255)
         thickness = 5
@@ -2219,8 +2235,11 @@ class LinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_lines(**kwargs)
 
     def test_lines__color(self):
-        """Tests if the lines drawn are the correct color.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the lines drawn are the correct color.
         Draws lines around the border of the given surface and checks if all
         borders of the surface only contain the given color.
         """
@@ -2232,6 +2251,10 @@ class LinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__color_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures thick lines are drawn using the correct color."""
         x_left = y_top = 5
         for surface in self._create_surfaces():
@@ -2259,8 +2282,11 @@ class LinesMixin(BaseLineMixin):
                             )
 
     def test_lines__gaps(self):
-        """Tests if the lines drawn contain any gaps.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the lines drawn contain any gaps.
         Draws lines around the border of the given surface and checks if
         all borders of the surface contain any gaps.
         """
@@ -2272,6 +2298,10 @@ class LinesMixin(BaseLineMixin):
                 self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__gaps_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures thick lines are drawn without any gaps."""
         expected_color = (255, 255, 255)
         x_left = y_top = 5
@@ -2848,6 +2878,10 @@ class AALineMixin(BaseLineMixin):
                 bounds_rect = self.draw_aaline(**kwargs)
 
     def test_aaline__color(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the aaline drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
@@ -2859,6 +2893,10 @@ class AALineMixin(BaseLineMixin):
                 )
 
     def test_aaline__gaps(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the aaline drawn contains any gaps.
 
         See: #512
@@ -3659,8 +3697,11 @@ class AALinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_aalines(**kwargs)
 
     def test_aalines__color(self):
-        """Tests if the aalines drawn are the correct color.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the aalines drawn are the correct color.
         Draws aalines around the border of the given surface and checks if all
         borders of the surface only contain the given color.
         """
@@ -3672,8 +3713,11 @@ class AALinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_aalines__gaps(self):
-        """Tests if the aalines drawn contain any gaps.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the aalines drawn contain any gaps.
         Draws aalines around the border of the given surface and checks if
         all borders of the surface contain any gaps.
 
diff --git a/test/event_tags.py b/test/event_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/event_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/fastevent_tags.py b/test/fastevent_tags.py
index c660bef5..93a1c469 100644
--- a/test/fastevent_tags.py
+++ b/test/fastevent_tags.py
@@ -1 +1 @@
-__tags__ = []
+__tags__ = ["display"]
diff --git a/test/font_test.py b/test/font_test.py
index 47492a82..af96f6ae 100644
--- a/test/font_test.py
+++ b/test/font_test.py
@@ -189,6 +189,10 @@ class FontModuleTest(unittest.TestCase):
         surf.blit(image, (0,0))
 
     def test_issue_font_alphablit(self):
+        """
+        |Tags:display|
+
+        """
         """ Check that blitting anti-aliased text doesn't
             change the background blue"""
         pygame.display.set_mode((600, 400))
@@ -229,6 +233,10 @@ class FontTest(unittest.TestCase):
         pygame_font.quit()
 
     def test_render_args(self):
+        """
+        |Tags:display|
+
+        """
         screen = pygame.display.set_mode((600, 400))
         rect = screen.get_rect()
         f = pygame_font.Font(None, 20)
diff --git a/test/gfxdraw_tags.py b/test/gfxdraw_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/gfxdraw_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/image_test.py b/test/image_test.py
index 04165f03..daf7afcc 100644
--- a/test/image_test.py
+++ b/test/image_test.py
@@ -609,6 +609,10 @@ class ImageModuleTest(unittest.TestCase):
         )
 
     def test_frombuffer_8bit(self):
+        """
+        |Tags:display|
+
+        """
         """ test reading pixel data from a bytes buffer"""
         pygame.display.init()
         eight_bit_palette_buffer = bytearray([0, 0, 0, 0,
diff --git a/test/key_tags.py b/test/key_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/key_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/mixer_music_test.py b/test/mixer_music_test.py
index 859e7d64..aad1070c 100644
--- a/test/mixer_music_test.py
+++ b/test/mixer_music_test.py
@@ -223,7 +223,10 @@ class MixerMusicModuleTest(unittest.TestCase):
         'disk audio driver "playback" writing to disk is slow',
     )
     def test_play__start_time(self):
+        """
+        |Tags:display|
 
+        """
         pygame.display.init()
 
         # music file is 7 seconds long
diff --git a/test/mouse_tags.py b/test/mouse_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/mouse_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/pixelcopy_tags.py b/test/pixelcopy_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/pixelcopy_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/surface_test.py b/test/surface_test.py
index 3a225a3b..b29a7f8d 100644
--- a/test/surface_test.py
+++ b/test/surface_test.py
@@ -105,6 +105,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(r, (0, 0, 255, 255))
 
     def test_set_at__big_endian(self):
+        """
+        |Tags:display|
+
+        """
         """ png files are loaded in big endian format (BGR rather than RGB)"""
         pygame.display.init()
         try:
@@ -141,6 +145,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
             self.assertEqual(surf2.get_flags() & SRCALPHA, SRCALPHA)
 
     def test_flags_default0_nodisplay(self):
+        """
+        |Tags:display|
+
+        """
         """ is set to zero, and SRCALPH is not set by default with no display initialized.
         """
         pygame.display.quit()
@@ -173,6 +181,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertRaises(ValueError, make_surf, 32, 0, masks)
 
     def test_get_bounding_rect(self):
+        """
+        |Tags:display|
+
+        """
         surf = pygame.Surface((70, 70), SRCALPHA, 32)
         surf.fill((0, 0, 0, 0))
         bound_rect = surf.get_bounding_rect()
@@ -331,6 +343,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertTrue(not s2.get_flags() & pygame.RLEACCELOK)
 
     def test_solarwolf_rle_usage(self):
+        """
+        |Tags:display|
+
+        """
         """ Test for error/crash when calling set_colorkey() followed
             by convert twice in succession. Code originally taken
             from solarwolf. """
@@ -359,6 +375,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_solarwolf_rle_usage_2(self):
+        """
+        |Tags:display|
+
+        """
         """ Test for RLE status after setting alpha """
 
         pygame.display.init()
@@ -429,6 +449,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_set_alpha__set_colorkey_rle(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             pygame.display.set_mode((640, 480))
@@ -513,6 +537,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
     ########################################################################
 
     def test_get_bytesize(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure a surface's bit and byte sizes can be retrieved."""
         pygame.display.init()
         try:
@@ -557,6 +585,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
         'requires a non-"dummy" SDL_VIDEODRIVER',
     )
     def test_get_flags__display_surf(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             # FULLSCREEN
@@ -602,6 +634,10 @@ class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):
     ########################################################################
 
     def test_get_parent(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure a surface's parent can be retrieved."""
         pygame.display.init()
         try:
@@ -1112,6 +1148,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         'requires a non-"dummy" SDL_VIDEODRIVER',
     )
     def test_image_convert_bug_131(self):
+        """
+        |Tags:display|
+
+        """
         # Bitbucket bug #131: Unable to Surface.convert(32) some 1-bit images.
         # https://bitbucket.org/pygame/pygame/issue/131/unable-to-surfaceconvert-32-some-1-bit
 
@@ -1137,6 +1177,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_init(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure initialization exceptions are raised
         for surf.convert()."""
         pygame.display.quit()
@@ -1164,6 +1208,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha_init(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure initialization exceptions are raised
         for surf.convert_alpha()."""
         pygame.display.quit()
@@ -1184,6 +1232,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha_SRCALPHA(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure that the surface returned by surf.convert_alpha()
         has alpha blending enabled"""
         pygame.display.init()
@@ -1756,6 +1808,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.fail()
 
     def test_convert__pixel_format_as_surface_subclass(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure convert accepts a Surface subclass argument."""
         expected_size = (23, 17)
         convert_surface = SurfaceSubclass(expected_size, 0, 32)
@@ -1774,6 +1830,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure the surface returned by surf.convert_alpha
         has alpha values added"""
         pygame.display.init()
@@ -1826,6 +1886,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_convert_alpha__pixel_format_as_surface_subclass(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure convert_alpha accepts a Surface subclass argument."""
         expected_size = (23, 17)
         convert_surface = SurfaceSubclass(expected_size, SRCALPHA, 32)
@@ -1848,6 +1912,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_get_abs_offset(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             parent = pygame.Surface((64, 64), SRCALPHA, 32)
@@ -1880,6 +1948,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_get_abs_parent(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             parent = pygame.Surface((32, 32), SRCALPHA, 32)
@@ -1949,6 +2021,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             )
 
     def test_get_bitsize(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             expected_size = (11, 21)
@@ -1995,6 +2071,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(rectangle, (0, 0, 800, 600))
 
     def test_get_colorkey(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             # if set_colorkey is not used
@@ -2143,6 +2223,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(surface.get_locks(), ())
 
     def test_get_losses(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure a surface's losses can be retrieved"""
         pygame.display.init()
         try:
@@ -2234,6 +2318,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             surface.get_masks()
 
     def test_get_offset(self):
+        """
+        |Tags:display|
+
+        """
         """get_offset returns the (0,0) if surface is not a child
         returns the position of child subsurface inside of parent
         """
@@ -2254,6 +2342,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_get_palette(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             palette = [Color(i, i, i) for i in range(256)]
@@ -2272,6 +2364,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
             pygame.display.quit()
 
     def test_get_palette_at(self):
+        """
+        |Tags:display|
+
+        """
         # See also test_get_palette
         pygame.display.init()
         try:
@@ -2488,6 +2584,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertEqual(surf.get_at((0, 0)), key)
 
     def test_set_palette(self):
+        """
+        |Tags:display|
+
+        """
         palette = [pygame.Color(i, i, i) for i in range(256)]
         palette[10] = tuple(palette[10])  # 4 element tuple
         palette[11] = tuple(palette[11])[0:3]  # 3 element tuple
@@ -2523,6 +2623,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         pygame.quit()
 
     def test_set_palette_at(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             pygame.display.set_mode((100, 50))
@@ -2618,6 +2722,10 @@ class GeneralSurfaceTests(AssertRaisesRegexMixin, unittest.TestCase):
         self.assertFalse(surf.get_locked())
 
     def test_unmap_rgb(self):
+        """
+        |Tags:display|
+
+        """
         # Special case, 8 bit-per-pixel surface (has a palette).
         surf = pygame.Surface((2, 2), 0, 8)
         c = (1, 1, 1)  # Unlikely to be in a default palette.
@@ -2727,6 +2835,10 @@ class SurfaceSubtypeTest(unittest.TestCase):
         pygame.display.quit()
 
     def test_copy(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure method copy() preserves the surface's class
 
         When Surface is subclassed, the inherited copy() method will return
@@ -2747,6 +2859,10 @@ class SurfaceSubtypeTest(unittest.TestCase):
         self.assertEqual(ms2.get_size(), expected_size)
 
     def test_convert(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure method convert() preserves the surface's class
 
         When Surface is subclassed, the inherited convert() method will return
@@ -2767,6 +2883,10 @@ class SurfaceSubtypeTest(unittest.TestCase):
         self.assertEqual(ms2.get_size(), expected_size)
 
     def test_convert_alpha(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure method convert_alpha() preserves the surface's class
 
         When Surface is subclassed, the inherited convert_alpha() method will
@@ -2789,6 +2909,10 @@ class SurfaceSubtypeTest(unittest.TestCase):
         self.assertEqual(ms2.get_size(), expected_size)
 
     def test_subsurface(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure method subsurface() preserves the surface's class
 
         When Surface is subclassed, the inherited subsurface() method will
@@ -3363,6 +3487,10 @@ class SurfaceBlendTest(unittest.TestCase):
             )
 
     def test_blit_blend(self):
+        """
+        |Tags:display|
+
+        """
         sources = [
             self._make_src_surface(8),
             self._make_src_surface(16),
@@ -3452,6 +3580,10 @@ class SurfaceBlendTest(unittest.TestCase):
             self._assert_surface(dst, p, ", %s" % blend_name)
 
     def test_blit_blend_rgba(self):
+        """
+        |Tags:display|
+
+        """
         sources = [
             self._make_src_surface(8),
             self._make_src_surface(16),
@@ -3539,6 +3671,10 @@ class SurfaceBlendTest(unittest.TestCase):
                 )
 
     def test_blit_blend_premultiplied(self):
+        """
+        |Tags:display|
+
+        """
         def test_premul_surf(
             src_col,
             dst_col,
@@ -3819,6 +3955,10 @@ class SurfaceBlendTest(unittest.TestCase):
         )
 
     def test_blit_blend_big_rect(self):
+        """
+        |Tags:display|
+
+        """
         """test that an oversized rect works ok."""
         color = (1, 2, 3, 255)
         area = (1, 1, 30, 30)
@@ -3848,6 +3988,10 @@ class SurfaceBlendTest(unittest.TestCase):
         self.assertEqual(surf.get_at((0, 9)), black)
 
     def test_GET_PIXELVALS(self):
+        """
+        |Tags:display|
+
+        """
         # surface.h GET_PIXELVALS bug regarding whether of not
         # a surface has per-pixel alpha. Looking at the Amask
         # is not enough. The surface's SRCALPHA flag must also
@@ -3860,6 +4004,10 @@ class SurfaceBlendTest(unittest.TestCase):
         self.assertEqual(dst.get_at((0, 0)), (0, 0, 0, 255))
 
     def test_fill_blend(self):
+        """
+        |Tags:display|
+
+        """
         destinations = [
             self._make_surface(8),
             self._make_surface(16),
@@ -3894,6 +4042,10 @@ class SurfaceBlendTest(unittest.TestCase):
                 self._assert_surface(dst, p, ", %s" % blend_name)
 
     def test_fill_blend_rgba(self):
+        """
+        |Tags:display|
+
+        """
         destinations = [
             self._make_surface(8),
             self._make_surface(16),
@@ -3974,6 +4126,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
                 )
 
     def test_overlap_check(self):
+        """
+        |Tags:display|
+
+        """
         # Ensure overlapping blits are properly detected. There are two
         # places where this is done, within SoftBlitPyGame() in alphablit.c
         # and PySurface_Blit() in surface.c. SoftBlitPyGame should catch the
@@ -4009,6 +4165,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
     # https://github.com/pygame/pygame/issues/370#issuecomment-364625291
     @unittest.skipIf("ppc64le" in platform.uname(), "known ppc64le issue")
     def test_colorkey(self):
+        """
+        |Tags:display|
+
+        """
         # Check a workaround for an SDL 1.2.13 surface self-blit problem
         # (MotherHamster Bugzilla bug 19).
         pygame.display.set_mode((100, 50))  # Needed for 8bit surface
@@ -4032,6 +4192,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
     # https://github.com/pygame/pygame/issues/370#issuecomment-364625291
     @unittest.skipIf("ppc64le" in platform.uname(), "known ppc64le issue")
     def test_blanket_alpha(self):
+        """
+        |Tags:display|
+
+        """
         # Check a workaround for an SDL 1.2.13 surface self-blit problem
         # (MotherHamster Bugzilla bug 19).
         pygame.display.set_mode((100, 50))  # Needed for 8bit surface
@@ -4052,6 +4216,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
             self._assert_same(surf, comp)
 
     def test_pixel_alpha(self):
+        """
+        |Tags:display|
+
+        """
         bitsizes = [16, 32]
         for bitsize in bitsizes:
             surf = self._make_surface(bitsize, srcalpha=True)
@@ -4061,6 +4229,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
             self._assert_same(surf, comp)
 
     def test_blend(self):
+        """
+        |Tags:display|
+
+        """
         bitsizes = [8, 16, 24, 32]
         blends = ["BLEND_ADD", "BLEND_SUB", "BLEND_MULT", "BLEND_MIN", "BLEND_MAX"]
         for bitsize in bitsizes:
@@ -4074,6 +4246,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
                 self._assert_same(surf, comp)
 
     def test_blend_rgba(self):
+        """
+        |Tags:display|
+
+        """
         bitsizes = [16, 32]
         blends = [
             "BLEND_RGBA_ADD",
@@ -4093,6 +4269,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
                 self._assert_same(surf, comp)
 
     def test_subsurface(self):
+        """
+        |Tags:display|
+
+        """
         # Blitting a surface to its subsurface is allowed.
         surf = self._make_surface(32, srcalpha=True)
         comp = surf.copy()
@@ -4111,6 +4291,10 @@ class SurfaceSelfBlitTest(unittest.TestCase):
         self.assertRaises(pygame.error, do_blit, surf, sub)
 
     def test_copy_alpha(self):
+        """
+        |Tags:display|
+
+        """
         """issue 581: alpha of surface copy with SRCALPHA is set to 0."""
         surf = pygame.Surface((16, 16), pygame.SRCALPHA, 32)
         self.assertEqual(surf.get_alpha(), 255)
@@ -4126,6 +4310,10 @@ class SurfaceFillTest(unittest.TestCase):
         pygame.display.quit()
 
     def test_fill(self):
+        """
+        |Tags:display|
+
+        """
         screen = pygame.display.set_mode((640, 480))
 
         # Green and blue test pattern
diff --git a/test/surfarray_test.py b/test/surfarray_test.py
index fd671baa..df2645f0 100644
--- a/test/surfarray_test.py
+++ b/test/surfarray_test.py
@@ -134,7 +134,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         return zeros(self.surf_size, dtype)
 
     def test_array2d(self):
+        """
+        |Tags:display|
 
+        """
         sources = [
             self._make_src_surface(8),
             self._make_src_surface(16),
@@ -204,7 +207,10 @@ class SurfarrayModuleTest(unittest.TestCase):
                 )
 
     def test_array_alpha(self):
+        """
+        |Tags:display|
 
+        """
         palette = [
             (0, 0, 0, 0),
             (10, 50, 100, 255),
@@ -271,7 +277,10 @@ class SurfarrayModuleTest(unittest.TestCase):
             surf.set_alpha(blanket_alpha)
 
     def test_array_colorkey(self):
+        """
+        |Tags:display|
 
+        """
         palette = [
             (0, 0, 0, 0),
             (10, 50, 100, 255),
@@ -352,7 +361,10 @@ class SurfarrayModuleTest(unittest.TestCase):
                 del arr
 
     def test_blit_array(self):
+        """
+        |Tags:display|
 
+        """
         s = pygame.Surface((10, 10), 0, 24)
         a = pygame.surfarray.array3d(s)
         pygame.surfarray.blit_array(s, a)
@@ -553,7 +565,10 @@ class SurfarrayModuleTest(unittest.TestCase):
                         )
 
     def test_map_array(self):
+        """
+        |Tags:display|
 
+        """
         arr3d = self._make_src_array3d(uint8)
         targets = [
             self._make_surface(8),
@@ -589,7 +604,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         )
 
     def test_pixels2d(self):
+        """
+        |Tags:display|
 
+        """
         sources = [
             self._make_surface(8),
             self._make_surface(16, srcalpha=True),
@@ -612,7 +630,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         self.assertRaises(ValueError, pygame.surfarray.pixels2d, self._make_surface(24))
 
     def test_pixels3d(self):
+        """
+        |Tags:display|
 
+        """
         sources = [self._make_surface(24), self._make_surface(32)]
 
         for surf in sources:
@@ -642,7 +663,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         self.assertRaises(ValueError, do_pixels3d, self._make_surface(16))
 
     def test_pixels_alpha(self):
+        """
+        |Tags:display|
 
+        """
         palette = [
             (0, 0, 0, 0),
             (127, 127, 127, 0),
@@ -685,12 +709,24 @@ class SurfarrayModuleTest(unittest.TestCase):
             )
 
     def test_pixels_red(self):
+        """
+        |Tags:display|
+
+        """
         self._test_pixels_rgb("red", 0)
 
     def test_pixels_green(self):
+        """
+        |Tags:display|
+
+        """
         self._test_pixels_rgb("green", 1)
 
     def test_pixels_blue(self):
+        """
+        |Tags:display|
+
+        """
         self._test_pixels_rgb("blue", 2)
 
     def _test_pixels_rgb(self, operation, mask_posn):
diff --git a/test/time_test.py b/test/time_test.py
index 86554b9d..c2fc6763 100644
--- a/test/time_test.py
+++ b/test/time_test.py
@@ -240,6 +240,10 @@ class TimeModuleTest(unittest.TestCase):
             self.assertAlmostEqual(ticks_diff, time_diff, delta=delta)
 
     def test_set_timer(self):
+        """
+        |Tags:display|
+
+        """
         """Tests time.set_timer()"""
         """
         Tests if a timer will post the correct amount of eventid events in
diff --git a/test/touch_tags.py b/test/touch_tags.py
index 0135fc49..5ab1645d 100644
--- a/test/touch_tags.py
+++ b/test/touch_tags.py
@@ -1 +1 @@
-__tags__ = ["SDL1_ignore"]
+__tags__ = ["display", "SDL1_ignore"]
diff --git a/test/transform_test.py b/test/transform_test.py
index 65cfbc6c..a9ad0f72 100644
--- a/test/transform_test.py
+++ b/test/transform_test.py
@@ -761,8 +761,9 @@ class TransformModuleTest(unittest.TestCase):
 
     def test_laplacian(self):
         """
-        """
+        |Tags:display|
 
+        """
         SIZE = 32
         s1 = pygame.Surface((SIZE, SIZE))
         s2 = pygame.Surface((SIZE, SIZE))
@@ -792,6 +793,8 @@ class TransformModuleTest(unittest.TestCase):
 
     def test_laplacian__24_big_endian(self):
         """
+        |Tags:display|
+
         """
         pygame.display.init()
         try:
@@ -883,6 +886,10 @@ class TransformModuleTest(unittest.TestCase):
         self.assertEqual(sr.get_at((0, 0)), (10, 53, 50, 255))
 
     def test_average_surfaces__24_big_endian(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             surf_1 = pygame.image.load(
@@ -1251,6 +1258,10 @@ class TransformDisplayModuleTest(unittest.TestCase):
         pygame.display.quit()
 
     def test_flip(self):
+        """
+        |Tags:display|
+
+        """
         """ honors the set_color key on the returned surface from flip.
         """
         image_loaded = pygame.image.load(example_path("data/chimp.png"))
@@ -1296,6 +1307,10 @@ class TransformDisplayModuleTest(unittest.TestCase):
         self.assertEqual(surf.get_at((0, 0)), surf2.get_at((0, 0)))
 
     def test_flip_alpha(self):
+        """
+        |Tags:display|
+
+        """
         """ returns a surface with the same properties as the input.
         """
         image_loaded = pygame.image.load(example_path("data/chimp.png"))
diff --git a/test/video_tags.py b/test/video_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/video_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
-- 
2.37.0.windows.1

