From 71703a3abb018b4a8abd5109dfdd88670aacd428 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Wed, 20 Jul 2022 21:29:46 +0200
Subject: [PATCH 6/6] add some more 'display' tags to tests & modules

---
 test/base_test.py        | 11 +++++-
 test/cursors_test.py     |  8 ++++
 test/display_tags.py     |  1 +
 test/draw_test.py        | 85 +++++++++++++++++++++++++++++-----------
 test/event_tags.py       |  1 +
 test/fastevent_tags.py   |  2 +-
 test/font_test.py        | 12 +++++-
 test/gfxdraw_tags.py     |  1 +
 test/image_test.py       |  6 ++-
 test/key_tags.py         |  1 +
 test/mixer_music_test.py |  4 ++
 test/mouse_tags.py       |  1 +
 12 files changed, 105 insertions(+), 28 deletions(-)
 create mode 100644 test/display_tags.py
 create mode 100644 test/event_tags.py
 create mode 100644 test/gfxdraw_tags.py
 create mode 100644 test/key_tags.py
 create mode 100644 test/mouse_tags.py

diff --git a/test/base_test.py b/test/base_test.py
index 5c967076..eb01a66f 100644
--- a/test/base_test.py
+++ b/test/base_test.py
@@ -526,6 +526,10 @@ class BaseModuleTest(unittest.TestCase):
             self.assertTrue(pygame.font.get_init())
 
     def test_quit__and_init(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.base.quit:
 
         # pygame.quit(): return None
@@ -595,7 +599,12 @@ class BaseModuleTest(unittest.TestCase):
             self.assertEqual(encstr, pygame.get_error())
 
     def test_init(self):
-        """Ensures init() works properly."""
+        """
+        |Tags:display|
+
+        """
+        # Ensures init() works properly.
+
         # Make sure nothing initialized.
         self.not_init_assertions()
 
diff --git a/test/cursors_test.py b/test/cursors_test.py
index 328f0a7e..b1fc0318 100644
--- a/test/cursors_test.py
+++ b/test/cursors_test.py
@@ -5,6 +5,10 @@ import pygame
 
 class CursorsModuleTest(unittest.TestCase):
     def test_compile(self):
+        """
+        |Tags:display|
+
+        """
 
         # __doc__ (as of 2008-06-25) for pygame.cursors.compile:
 
@@ -86,6 +90,10 @@ class CursorsModuleTest(unittest.TestCase):
 ################################################################################
 
     def test_load_xbm(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.cursors.load_xbm:
 
         # pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
diff --git a/test/display_tags.py b/test/display_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/display_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/draw_test.py b/test/draw_test.py
index 3b56b9da..68a1cd78 100644
--- a/test/draw_test.py
+++ b/test/draw_test.py
@@ -1509,7 +1509,11 @@ class LineMixin(BaseLineMixin):
                 bounds_rect = self.draw_line(**kwargs)
 
     def test_line__color(self):
-        """Tests if the line drawn is the correct color."""
+        """
+        |Tags:display|
+
+        """
+        # """Tests if the line drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
@@ -1520,7 +1524,11 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__color_with_thickness(self):
-        """Ensures a thick line is drawn using the correct color."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensures a thick line is drawn using the correct color."""
         from_x = 5
         to_x = 10
         y = 5
@@ -1536,7 +1544,11 @@ class LineMixin(BaseLineMixin):
                     )
 
     def test_line__gaps(self):
-        """Tests if the line drawn contains any gaps."""
+        """
+        |Tags:display|
+
+        """
+        # """Tests if the line drawn contains any gaps."""
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             width = surface.get_width()
@@ -1549,7 +1561,11 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__gaps_with_thickness(self):
-        """Ensures a thick line is drawn without any gaps."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensures a thick line is drawn without any gaps."""
         expected_color = (255, 255, 255)
         thickness = 5
         for surface in self._create_surfaces():
@@ -2219,11 +2235,14 @@ class LinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_lines(**kwargs)
 
     def test_lines__color(self):
-        """Tests if the lines drawn are the correct color.
+        """
+        |Tags:display|
 
-        Draws lines around the border of the given surface and checks if all
-        borders of the surface only contain the given color.
         """
+        # """Tests if the lines drawn are the correct color.
+        # Draws lines around the border of the given surface and checks if all
+        # borders of the surface only contain the given color.
+        # """
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
                 self.draw_lines(surface, expected_color, True, corners(surface))
@@ -2232,7 +2251,11 @@ class LinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__color_with_thickness(self):
-        """Ensures thick lines are drawn using the correct color."""
+        """
+        |Tags:display|
+
+        """
+        #"""Ensures thick lines are drawn using the correct color."""
         x_left = y_top = 5
         for surface in self._create_surfaces():
             x_right = surface.get_width() - 5
@@ -2259,11 +2282,14 @@ class LinesMixin(BaseLineMixin):
                             )
 
     def test_lines__gaps(self):
-        """Tests if the lines drawn contain any gaps.
+        """
+        |Tags:display|
 
-        Draws lines around the border of the given surface and checks if
-        all borders of the surface contain any gaps.
         """
+        # """Tests if the lines drawn contain any gaps.
+        # Draws lines around the border of the given surface and checks if
+        # all borders of the surface contain any gaps.
+        # """
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             self.draw_lines(surface, expected_color, True, corners(surface))
@@ -2272,7 +2298,11 @@ class LinesMixin(BaseLineMixin):
                 self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__gaps_with_thickness(self):
-        """Ensures thick lines are drawn without any gaps."""
+        """
+        |Tags:display|
+
+        """
+        # """Ensures thick lines are drawn without any gaps."""
         expected_color = (255, 255, 255)
         x_left = y_top = 5
         for surface in self._create_surfaces():
@@ -2848,7 +2878,11 @@ class AALineMixin(BaseLineMixin):
                 bounds_rect = self.draw_aaline(**kwargs)
 
     def test_aaline__color(self):
-        """Tests if the aaline drawn is the correct color."""
+        """
+        |Tags:display|
+
+        """
+        # """Tests if the aaline drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
@@ -2859,10 +2893,11 @@ class AALineMixin(BaseLineMixin):
                 )
 
     def test_aaline__gaps(self):
-        """Tests if the aaline drawn contains any gaps.
+        """
+        |Tags:display|
 
-        See: #512
         """
+        # """Tests if the aaline drawn contains any gaps. See: #512"""
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             width = surface.get_width()
@@ -3659,11 +3694,14 @@ class AALinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_aalines(**kwargs)
 
     def test_aalines__color(self):
-        """Tests if the aalines drawn are the correct color.
+        """
+        |Tags:display|
 
-        Draws aalines around the border of the given surface and checks if all
-        borders of the surface only contain the given color.
         """
+        # """Tests if the aalines drawn are the correct color.
+        # Draws aalines around the border of the given surface and checks if all
+        # borders of the surface only contain the given color.
+        # """
         for surface in self._create_surfaces():
             for expected_color in self.COLORS:
                 self.draw_aalines(surface, expected_color, True, corners(surface))
@@ -3672,13 +3710,14 @@ class AALinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_aalines__gaps(self):
-        """Tests if the aalines drawn contain any gaps.
-
-        Draws aalines around the border of the given surface and checks if
-        all borders of the surface contain any gaps.
+        """
+        |Tags:display|
 
-        See: #512
         """
+        # """Tests if the aalines drawn contain any gaps.
+        # Draws aalines around the border of the given surface and checks if
+        # all borders of the surface contain any gaps. See: #512
+        # """
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
             self.draw_aalines(surface, expected_color, True, corners(surface))
diff --git a/test/event_tags.py b/test/event_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/event_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/fastevent_tags.py b/test/fastevent_tags.py
index c660bef5..93a1c469 100644
--- a/test/fastevent_tags.py
+++ b/test/fastevent_tags.py
@@ -1 +1 @@
-__tags__ = []
+__tags__ = ["display"]
diff --git a/test/font_test.py b/test/font_test.py
index 47492a82..885a9877 100644
--- a/test/font_test.py
+++ b/test/font_test.py
@@ -189,8 +189,12 @@ class FontModuleTest(unittest.TestCase):
         surf.blit(image, (0,0))
 
     def test_issue_font_alphablit(self):
-        """ Check that blitting anti-aliased text doesn't
-            change the background blue"""
+        """
+        |Tags:display|
+
+        """
+        # """ Check that blitting anti-aliased text doesn't
+        #     change the background blue"""
         pygame.display.set_mode((600, 400))
 
         font = pygame_font.Font(None, 24)
@@ -229,6 +233,10 @@ class FontTest(unittest.TestCase):
         pygame_font.quit()
 
     def test_render_args(self):
+        """
+        |Tags:display|
+
+        """
         screen = pygame.display.set_mode((600, 400))
         rect = screen.get_rect()
         f = pygame_font.Font(None, 20)
diff --git a/test/gfxdraw_tags.py b/test/gfxdraw_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/gfxdraw_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/image_test.py b/test/image_test.py
index 04165f03..4e4a9975 100644
--- a/test/image_test.py
+++ b/test/image_test.py
@@ -609,7 +609,11 @@ class ImageModuleTest(unittest.TestCase):
         )
 
     def test_frombuffer_8bit(self):
-        """ test reading pixel data from a bytes buffer"""
+        """
+        |Tags:display|
+
+        """
+        # """ test reading pixel data from a bytes buffer"""
         pygame.display.init()
         eight_bit_palette_buffer = bytearray([0, 0, 0, 0,
                                               1, 1, 1, 1,
diff --git a/test/key_tags.py b/test/key_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/key_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/mixer_music_test.py b/test/mixer_music_test.py
index 859e7d64..a642c450 100644
--- a/test/mixer_music_test.py
+++ b/test/mixer_music_test.py
@@ -223,6 +223,10 @@ class MixerMusicModuleTest(unittest.TestCase):
         'disk audio driver "playback" writing to disk is slow',
     )
     def test_play__start_time(self):
+        """
+        |Tags:display|
+
+        """
 
         pygame.display.init()
 
diff --git a/test/mouse_tags.py b/test/mouse_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/mouse_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
-- 
2.37.0.windows.1

