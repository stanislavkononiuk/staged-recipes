From 9f884175a0fda87978a0cd126ae54b272a17ded2 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Wed, 20 Jul 2022 21:29:46 +0200
Subject: [PATCH 06/10] add some more 'display' tags to tests & modules

---
 test/base_test.py        |  16 ++++
 test/cursors_test.py     |   7 ++
 test/display_tags.py     |   1 +
 test/draw_test.py        |  52 ++++++++++-
 test/event_tags.py       |   1 +
 test/fastevent_tags.py   |   2 +-
 test/font_test.py        |   8 ++
 test/gfxdraw_tags.py     |   1 +
 test/image_test.py       |   4 +
 test/key_tags.py         |   1 +
 test/mixer_music_test.py |   3 +
 test/mouse_tags.py       |   1 +
 test/pixelcopy_tags.py   |   1 +
 test/surface_test.py     | 192 +++++++++++++++++++++++++++++++++++++++
 test/surfarray_test.py   |  36 ++++++++
 test/time_test.py        |   4 +
 test/touch_tags.py       |   2 +-
 test/transform_test.py   |  17 +++-
 test/video_tags.py       |   1 +
 19 files changed, 343 insertions(+), 7 deletions(-)
 create mode 100644 test/display_tags.py
 create mode 100644 test/event_tags.py
 create mode 100644 test/gfxdraw_tags.py
 create mode 100644 test/key_tags.py
 create mode 100644 test/mouse_tags.py
 create mode 100644 test/pixelcopy_tags.py
 create mode 100644 test/video_tags.py

diff --git a/test/base_test.py b/test/base_test.py
index 5c967076..19cd9444 100644
--- a/test/base_test.py
+++ b/test/base_test.py
@@ -526,6 +526,10 @@ class BaseModuleTest(unittest.TestCase):
             self.assertTrue(pygame.font.get_init())
 
     def test_quit__and_init(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.base.quit:
 
         # pygame.quit(): return None
@@ -595,6 +599,10 @@ class BaseModuleTest(unittest.TestCase):
             self.assertEqual(encstr, pygame.get_error())
 
     def test_init(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures init() works properly."""
         # Make sure nothing initialized.
         self.not_init_assertions()
@@ -616,12 +624,20 @@ class BaseModuleTest(unittest.TestCase):
         self.assertFalse(pygame.get_init())
 
     def test_get_init__after_init(self):
+        """
+        |Tags:display|
+
+        """
         # Test if get_init() gets the init state after pygame.init() called.
         pygame.init()
 
         self.assertTrue(pygame.get_init())
 
     def test_get_init__after_quit(self):
+        """
+        |Tags:display|
+
+        """
         # Test if get_init() gets the init state after pygame.quit() called.
         pygame.init()
         pygame.quit()
diff --git a/test/cursors_test.py b/test/cursors_test.py
index 328f0a7e..f824fe9c 100644
--- a/test/cursors_test.py
+++ b/test/cursors_test.py
@@ -5,7 +5,10 @@ import pygame
 
 class CursorsModuleTest(unittest.TestCase):
     def test_compile(self):
+        """
+        |Tags:display|
 
+        """
         # __doc__ (as of 2008-06-25) for pygame.cursors.compile:
 
         # pygame.cursors.compile(strings, black, white,xor) -> data, mask
@@ -86,6 +89,10 @@ class CursorsModuleTest(unittest.TestCase):
 ################################################################################
 
     def test_load_xbm(self):
+        """
+        |Tags:display|
+
+        """
         # __doc__ (as of 2008-06-25) for pygame.cursors.load_xbm:
 
         # pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
diff --git a/test/display_tags.py b/test/display_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/display_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/draw_test.py b/test/draw_test.py
index 3b56b9da..b498f87e 100644
--- a/test/draw_test.py
+++ b/test/draw_test.py
@@ -1509,6 +1509,10 @@ class LineMixin(BaseLineMixin):
                 bounds_rect = self.draw_line(**kwargs)
 
     def test_line__color(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the line drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
@@ -1520,6 +1524,10 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__color_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures a thick line is drawn using the correct color."""
         from_x = 5
         to_x = 10
@@ -1536,6 +1544,10 @@ class LineMixin(BaseLineMixin):
                     )
 
     def test_line__gaps(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the line drawn contains any gaps."""
         expected_color = (255, 255, 255)
         for surface in self._create_surfaces():
@@ -1549,6 +1561,10 @@ class LineMixin(BaseLineMixin):
                 )
 
     def test_line__gaps_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures a thick line is drawn without any gaps."""
         expected_color = (255, 255, 255)
         thickness = 5
@@ -2219,8 +2235,11 @@ class LinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_lines(**kwargs)
 
     def test_lines__color(self):
-        """Tests if the lines drawn are the correct color.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the lines drawn are the correct color.
         Draws lines around the border of the given surface and checks if all
         borders of the surface only contain the given color.
         """
@@ -2232,6 +2251,10 @@ class LinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__color_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures thick lines are drawn using the correct color."""
         x_left = y_top = 5
         for surface in self._create_surfaces():
@@ -2259,8 +2282,11 @@ class LinesMixin(BaseLineMixin):
                             )
 
     def test_lines__gaps(self):
-        """Tests if the lines drawn contain any gaps.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the lines drawn contain any gaps.
         Draws lines around the border of the given surface and checks if
         all borders of the surface contain any gaps.
         """
@@ -2272,6 +2298,10 @@ class LinesMixin(BaseLineMixin):
                 self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_lines__gaps_with_thickness(self):
+        """
+        |Tags:display|
+
+        """
         """Ensures thick lines are drawn without any gaps."""
         expected_color = (255, 255, 255)
         x_left = y_top = 5
@@ -2848,6 +2878,10 @@ class AALineMixin(BaseLineMixin):
                 bounds_rect = self.draw_aaline(**kwargs)
 
     def test_aaline__color(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the aaline drawn is the correct color."""
         pos = (0, 0)
         for surface in self._create_surfaces():
@@ -2859,6 +2893,10 @@ class AALineMixin(BaseLineMixin):
                 )
 
     def test_aaline__gaps(self):
+        """
+        |Tags:display|
+
+        """
         """Tests if the aaline drawn contains any gaps.
 
         See: #512
@@ -3659,8 +3697,11 @@ class AALinesMixin(BaseLineMixin):
                 bounds_rect = self.draw_aalines(**kwargs)
 
     def test_aalines__color(self):
-        """Tests if the aalines drawn are the correct color.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the aalines drawn are the correct color.
         Draws aalines around the border of the given surface and checks if all
         borders of the surface only contain the given color.
         """
@@ -3672,8 +3713,11 @@ class AALinesMixin(BaseLineMixin):
                     self.assertEqual(color, expected_color, "pos={}".format(pos))
 
     def test_aalines__gaps(self):
-        """Tests if the aalines drawn contain any gaps.
+        """
+        |Tags:display|
 
+        """
+        """Tests if the aalines drawn contain any gaps.
         Draws aalines around the border of the given surface and checks if
         all borders of the surface contain any gaps.
 
diff --git a/test/event_tags.py b/test/event_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/event_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/gfxdraw_tags.py b/test/gfxdraw_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/gfxdraw_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/key_tags.py b/test/key_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/key_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/mixer_music_test.py b/test/mixer_music_test.py
index 859e7d64..aad1070c 100644
--- a/test/mixer_music_test.py
+++ b/test/mixer_music_test.py
@@ -223,7 +223,10 @@ class MixerMusicModuleTest(unittest.TestCase):
         'disk audio driver "playback" writing to disk is slow',
     )
     def test_play__start_time(self):
+        """
+        |Tags:display|
 
+        """
         pygame.display.init()
 
         # music file is 7 seconds long
diff --git a/test/mouse_tags.py b/test/mouse_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/mouse_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/pixelcopy_tags.py b/test/pixelcopy_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/pixelcopy_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
diff --git a/test/surfarray_test.py b/test/surfarray_test.py
index fd671baa..df2645f0 100644
--- a/test/surfarray_test.py
+++ b/test/surfarray_test.py
@@ -134,7 +134,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         return zeros(self.surf_size, dtype)
 
     def test_array2d(self):
+        """
+        |Tags:display|
 
+        """
         sources = [
             self._make_src_surface(8),
             self._make_src_surface(16),
@@ -204,7 +207,10 @@ class SurfarrayModuleTest(unittest.TestCase):
                 )
 
     def test_array_alpha(self):
+        """
+        |Tags:display|
 
+        """
         palette = [
             (0, 0, 0, 0),
             (10, 50, 100, 255),
@@ -271,7 +277,10 @@ class SurfarrayModuleTest(unittest.TestCase):
             surf.set_alpha(blanket_alpha)
 
     def test_array_colorkey(self):
+        """
+        |Tags:display|
 
+        """
         palette = [
             (0, 0, 0, 0),
             (10, 50, 100, 255),
@@ -352,7 +361,10 @@ class SurfarrayModuleTest(unittest.TestCase):
                 del arr
 
     def test_blit_array(self):
+        """
+        |Tags:display|
 
+        """
         s = pygame.Surface((10, 10), 0, 24)
         a = pygame.surfarray.array3d(s)
         pygame.surfarray.blit_array(s, a)
@@ -553,7 +565,10 @@ class SurfarrayModuleTest(unittest.TestCase):
                         )
 
     def test_map_array(self):
+        """
+        |Tags:display|
 
+        """
         arr3d = self._make_src_array3d(uint8)
         targets = [
             self._make_surface(8),
@@ -589,7 +604,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         )
 
     def test_pixels2d(self):
+        """
+        |Tags:display|
 
+        """
         sources = [
             self._make_surface(8),
             self._make_surface(16, srcalpha=True),
@@ -612,7 +630,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         self.assertRaises(ValueError, pygame.surfarray.pixels2d, self._make_surface(24))
 
     def test_pixels3d(self):
+        """
+        |Tags:display|
 
+        """
         sources = [self._make_surface(24), self._make_surface(32)]
 
         for surf in sources:
@@ -642,7 +663,10 @@ class SurfarrayModuleTest(unittest.TestCase):
         self.assertRaises(ValueError, do_pixels3d, self._make_surface(16))
 
     def test_pixels_alpha(self):
+        """
+        |Tags:display|
 
+        """
         palette = [
             (0, 0, 0, 0),
             (127, 127, 127, 0),
@@ -685,12 +709,24 @@ class SurfarrayModuleTest(unittest.TestCase):
             )
 
     def test_pixels_red(self):
+        """
+        |Tags:display|
+
+        """
         self._test_pixels_rgb("red", 0)
 
     def test_pixels_green(self):
+        """
+        |Tags:display|
+
+        """
         self._test_pixels_rgb("green", 1)
 
     def test_pixels_blue(self):
+        """
+        |Tags:display|
+
+        """
         self._test_pixels_rgb("blue", 2)
 
     def _test_pixels_rgb(self, operation, mask_posn):
diff --git a/test/time_test.py b/test/time_test.py
index 86554b9d..c2fc6763 100644
--- a/test/time_test.py
+++ b/test/time_test.py
@@ -240,6 +240,10 @@ class TimeModuleTest(unittest.TestCase):
             self.assertAlmostEqual(ticks_diff, time_diff, delta=delta)
 
     def test_set_timer(self):
+        """
+        |Tags:display|
+
+        """
         """Tests time.set_timer()"""
         """
         Tests if a timer will post the correct amount of eventid events in
diff --git a/test/video_tags.py b/test/video_tags.py
new file mode 100644
index 00000000..93a1c469
--- /dev/null
+++ b/test/video_tags.py
@@ -0,0 +1 @@
+__tags__ = ["display"]
-- 
2.37.0.windows.1

--- a/test/surface_test.py
+++ b/test/surface_test.py
@@ -98,6 +98,10 @@
         self.assertEqual(r, (0, 0, 255, 255))
 
     def test_set_at__big_endian(self):
+        """
+        |Tags:display|
+
+        """
         """png files are loaded in big endian format (BGR rather than RGB)"""
         pygame.display.init()
         try:
@@ -134,12 +138,20 @@
             self.assertEqual(surf2.get_flags() & SRCALPHA, SRCALPHA)
 
     def test_flags_default0_nodisplay(self):
+        """
+        |Tags:display|
+
+        """
         """is set to zero, and SRCALPHA is not set by default with no display initialized."""
         pygame.display.quit()
         surf = pygame.Surface((70, 70))
         self.assertEqual(surf.get_flags() & SRCALPHA, 0)
 
     def test_flags_default0_display(self):
+        """
+        |Tags:display|
+
+        """
         """is set to zero, and SRCALPH is not set by default even when the display is initialized."""
         pygame.display.set_mode((320, 200))
         try:
@@ -164,6 +176,10 @@
         self.assertRaises(ValueError, make_surf, 32, 0, masks)
 
     def test_get_bounding_rect(self):
+        """
+        |Tags:display|
+
+        """
         surf = pygame.Surface((70, 70), SRCALPHA, 32)
         surf.fill((0, 0, 0, 0))
         bound_rect = surf.get_bounding_rect()
@@ -321,6 +337,10 @@
         self.assertTrue(not s2.get_flags() & pygame.RLEACCELOK)
 
     def test_solarwolf_rle_usage(self):
+        """
+        |Tags:display|
+
+        """
         """Test for error/crash when calling set_colorkey() followed
         by convert twice in succession. Code originally taken
         from solarwolf."""
@@ -349,6 +369,10 @@
             pygame.display.quit()
 
     def test_solarwolf_rle_usage_2(self):
+        """
+        |Tags:display|
+
+        """
         """Test for RLE status after setting alpha"""
 
         pygame.display.init()
@@ -380,6 +404,10 @@
             pygame.display.quit()
 
     def test_set_alpha__set_colorkey_rle(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             pygame.display.set_mode((640, 480))
@@ -460,6 +488,10 @@
     ########################################################################
 
     def test_get_bytesize(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure a surface's bit and byte sizes can be retrieved."""
         pygame.display.init()
         try:
@@ -504,6 +536,10 @@
         'requires a non-"dummy" SDL_VIDEODRIVER',
     )
     def test_get_flags__display_surf(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             # FULLSCREEN
@@ -545,6 +581,10 @@
     ########################################################################
 
     def test_get_parent(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure a surface's parent can be retrieved."""
         pygame.display.init()
         try:
@@ -1071,6 +1111,10 @@
         'requires a non-"dummy" SDL_VIDEODRIVER',
     )
     def test_image_convert_bug_131(self):
+        """
+        |Tags:display|
+
+        """
         # bug #131: Unable to Surface.convert(32) some 1-bit images.
         # https://github.com/pygame/pygame/issues/131
 
@@ -1096,6 +1140,10 @@
             pygame.display.quit()
 
     def test_convert_init(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure initialization exceptions are raised
         for surf.convert()."""
         pygame.display.quit()
@@ -1123,6 +1171,10 @@
             pygame.display.quit()
 
     def test_convert_alpha_init(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure initialization exceptions are raised
         for surf.convert_alpha()."""
         pygame.display.quit()
@@ -1143,6 +1195,10 @@
             pygame.display.quit()
 
     def test_convert_alpha_SRCALPHA(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure that the surface returned by surf.convert_alpha()
         has alpha blending enabled"""
         pygame.display.init()
@@ -1642,6 +1698,10 @@
         self.fail()
 
     def test_convert__pixel_format_as_surface_subclass(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure convert accepts a Surface subclass argument."""
         expected_size = (23, 17)
         convert_surface = SurfaceSubclass(expected_size, 0, 32)
@@ -1660,6 +1720,10 @@
             pygame.display.quit()
 
     def test_convert_alpha(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure the surface returned by surf.convert_alpha
         has alpha values added"""
         pygame.display.init()
@@ -1712,6 +1776,10 @@
             pygame.display.quit()
 
     def test_convert_alpha__pixel_format_as_surface_subclass(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure convert_alpha accepts a Surface subclass argument."""
         expected_size = (23, 17)
         convert_surface = SurfaceSubclass(expected_size, SRCALPHA, 32)
@@ -1734,6 +1802,10 @@
             pygame.display.quit()
 
     def test_get_abs_offset(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             parent = pygame.Surface((64, 64), SRCALPHA, 32)
@@ -1766,6 +1838,10 @@
             pygame.display.quit()
 
     def test_get_abs_parent(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             parent = pygame.Surface((32, 32), SRCALPHA, 32)
@@ -1835,6 +1911,10 @@
             )
 
     def test_get_bitsize(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             expected_size = (11, 21)
@@ -1881,6 +1961,10 @@
         self.assertEqual(rectangle, (0, 0, 800, 600))
 
     def test_get_colorkey(self):
+        """
+        |Tags:display|
+
+        """
         pygame.display.init()
         try:
             # if set_colorkey is not used
@@ -2017,6 +2101,10 @@
         self.assertEqual(surface.get_locks(), ())
 
     def test_get_losses(self):
+        """
+        |Tags:display|
+
+        """
         """Ensure a surface's losses can be retrieved"""
         pygame.display.init()
         try:
@@ -2324,6 +2412,10 @@
         )
 
     def test_palette_colorkey(self):
+        """
+        |Tags:display|
+
+        """
         """test bug discovered by robertpfeiffer
         https://github.com/pygame/pygame/issues/721
         """
@@ -2332,12 +2424,20 @@
         self.assertEqual(surf.get_palette()[surf.map_rgb(key)], key)
 
     def test_palette_colorkey_set_px(self):
+        """
+        |Tags:display|
+
+        """
         surf = pygame.image.load(example_path(os.path.join("data", "alien2.png")))
         key = surf.get_colorkey()
         surf.set_at((0, 0), key)
         self.assertEqual(surf.get_at((0, 0)), key)
 
     def test_palette_colorkey_fill(self):
+        """
+        |Tags:display|
+
+        """
         surf = pygame.image.load(example_path(os.path.join("data", "alien2.png")))
         key = surf.get_colorkey()
         surf.fill(key)
--- a/test/image_test.py
+++ b/test/image_test.py
@@ -363,6 +363,10 @@
             os.remove(temp_filename)
 
     def test_save__to_fileobject_w_namehint_argument(self):
+        """
+        |Tags:broken|
+        
+        """
         s = pygame.Surface((10, 10))
         s.fill((23, 23, 23))
         magic_hex = {}
@@ -654,6 +658,10 @@
         )
 
     def test_frombuffer_8bit(self):
+        """
+        |Tags:broken|
+        
+        """
         """test reading pixel data from a bytes buffer"""
         pygame.display.init()
         eight_bit_palette_buffer = bytearray(
@@ -1161,6 +1154,9 @@
         f.close()
 
     def test_load_extended(self):
+        """
+        |Tags:broken|        
+        """
         """can load different format images.
 
         We test loading the following file types:
