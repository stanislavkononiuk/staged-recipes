From e26e81db8b789374ea26e499ce2af49392e5b615 Mon Sep 17 00:00:00 2001
From: Ankith <46915066+ankith26@users.noreply.github.com>
Date: Fri, 29 Apr 2022 20:38:18 +0530
Subject: [PATCH 09/10] get_fonts stop returning None, warn fc-list issues

---
 src_py/sysfont.py | 73 ++++++++++++++++++++++-------------------------
 1 file changed, 34 insertions(+), 39 deletions(-)

diff --git a/src_py/sysfont.py b/src_py/sysfont.py
index a141c59c..4e819e02 100644
--- a/src_py/sysfont.py
+++ b/src_py/sysfont.py
@@ -21,33 +21,20 @@
 """sysfont, used in the font module to find system fonts"""
 
 import os
+import subprocess
 import sys
+import warnings
 from os.path import basename, dirname, exists, join, splitext
 
 from pygame.font import Font
 from pygame.compat import xrange_, PY_MAJOR_VERSION, unicode_
 
-OpenType_extensions = frozenset(('.ttf', '.ttc', '.otf'))
+OpenType_extensions = frozenset((".ttf", ".ttc", ".otf"))
 Sysfonts = {}
 Sysalias = {}
 
-# Python 3 compatibility
-if PY_MAJOR_VERSION >= 3:
-    def toascii(raw):
-        """convert bytes to ASCII-only string"""
-        return raw.decode('ascii', 'ignore')
-    if os.name == 'nt':
-        import winreg as _winreg
-    else:
-        import subprocess
-else:
-    def toascii(raw):
-        """return ASCII characters of a given unicode or 8-bit string"""
-        return raw.decode('ascii', 'ignore')
-    if os.name == 'nt':
-        import _winreg
-    else:
-        import subprocess
+if os.name == "nt":
+    import winreg as _winreg
 
 
 def _simplename(name):
@@ -234,33 +221,39 @@ def initsysfonts_unix(path="fc-list"):
     fonts = {}
 
     try:
-        # pylint: disable=consider-using-with
-        # subprocess.Popen is not a context manager in all of
-        # pygame's supported python versions.
-
-        # note, we capture stderr so if fc-list isn't there to stop stderr
-        # printing.
-        flout, _ = subprocess.Popen('%s : file family style' % path,
-                                    shell=True,
-                                    stdout=subprocess.PIPE,
-                                    stderr=subprocess.PIPE,
-                                    close_fds=True).communicate()
-    except (OSError, ValueError):
-        return fonts
-
-    entries = toascii(flout)
-    try:
-        for entry in entries.split('\n'):
+        proc = subprocess.run(
+            [path, ":", "file", "family", "style"],
+            stdout=subprocess.PIPE,  # capture stdout
+            stderr=subprocess.PIPE,  # capture stderr
+            check=True,  # so that errors raise python exception which is handled below
+            timeout=1,  # so that we don't hang the program waiting
+        )
+
+    except FileNotFoundError:
+        warnings.warn(
+            f"'{path}' is missing, system fonts cannot be loaded on your platform"
+        )
+
+    except subprocess.TimeoutExpired:
+        warnings.warn(
+            f"Process running '{path}' timed-out! System fonts cannot be loaded on "
+            "your platform"
+        )
+
+    except subprocess.CalledProcessError as e:
+        warnings.warn(
+            f"'{path}' failed with error code {e.returncode}! System fonts cannot be "
+            f"loaded on your platform. Error log is:\n{e.stderr}"
+        )
 
+    else:
+        for entry in proc.stdout.decode("ascii", "ignore").splitlines():
             try:
                 _parse_font_entry_unix(entry, fonts)
             except ValueError:
                 # try the next one.
                 pass
 
-    except ValueError:
-        pass
-
     return fonts
 
 
@@ -447,7 +440,9 @@ def get_fonts():
     """
     if not Sysfonts:
         initsysfonts()
-    return list(Sysfonts)
+
+    # 'Sysfonts' can contain a sentinel 'None' key, don't forward that to users
+    return [i for i in Sysfonts if i is not None]
 
 
 def match_font(name, bold=0, italic=0):
-- 
2.37.0.windows.1

