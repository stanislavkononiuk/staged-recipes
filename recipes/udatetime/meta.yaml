{% set name = "udatetime" %}
{% set version = "0.0.14" %}
{% set sha256 = "2e5ebd5f00e05a4b3f2b52325cf66aed065af2ad639bdf73c5f1217667d62075" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record record.txt
  # udatetime only supports posix platforms so we'll skip building for windows
  skip: true  # [win]

requirements:
  build:
    - python
    - setuptools
    # udatetime requires gcc and python dev tools so we require the toolchaing to be present
    - toolchain
  run:
    - python

test:
  imports:
    - udatetime

about:
  home: https://github.com/freach/udatetime
  license: Apache-2.0
  license_family: Apache
  license_file: '{{ environ["RECIPE_DIR"] }}/LICENSE'
  summary: 'Fast RFC3339 compliant Python date-time library'
  description: |
    Handling date-times is a painful act because of the sheer endless amount of formats used by people. Luckily there are a couple of specified standards out there like ISO 8601. But even ISO 8601 leaves to many options on how to define date and time. That\'s why I encourage using the RFC3339 specified date-time format.
    udatetime offers on average 76% faster datetime object instantiation, serialization and deserialization of RFC3339 date-time strings. udatetime is using Python\'s datetime class under the hood and code already using datetime should be able to easily switch to udatetime. All datetime objects created by udatetime are timezone-aware. The timezones that udatetime uses are fixed-offset timezones, meaning that they don\'t observe daylight savings time (DST), and thus return a fixed offset from UTC all year round.
  doc_url: https://github.com/freach/udatetime
  dev_url: https://github.com/freach/udatetime

extra:
  recipe-maintainers:
    - daviskirk
