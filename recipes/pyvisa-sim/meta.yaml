{% set name = "PyVISA-sim" %}
{% set version = "0.5.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: bd6c56f78d7fd5ee7ca6a2ff473abe7a8649a70b2f2e986021ee3c4ae26da216

build:
  noarch: python
  skip: True  # [py<=36]
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  host:
    - python
    - pip
    - setuptools
    - setuptools_scm
  run:
    - python >3.6
    - pyvisa >=1.11.0
    - PyYAML
    - stringparser

test:
  imports:
    - pyvisa_sim
    - pyvisa_sim.testsuite
  requires:
    - pip
    - pyvisa
    - pytest
  commands:
    - pip check
    - python -c "import visa; rm = visa.ResourceManager('@sim'); rm.list_resources(); inst = rm.open_resource('ASRL1::INSTR', read_termination='\n'); print(inst.query("?IDN"))"
    - py.test --pyargs pyvisa-sim

about:
  home: https://github.com/pyvisa/pyvisa-sim
  summary: 'Simulated backend for PyVISA implementing TCPIP, GPIB, RS232, and USB resources'
  description: |
    PyVISA started as a wrapper for the NI-VISA library and therefore you need to install
    the National Instruments VISA library in your system. This works most of the time, 
    for most people. But sometimes you need to test PyVISA without the physical devices 
    or even without NI-VISA.
    
    Starting from version 1.6, PyVISA allows to use different backends. These backends can 
    be dynamically loaded. PyVISA-sim is one of such backends. It implements most of the 
    methods for Message Based communication (Serial/USB/GPIB/Ethernet) in a simulated 
    environment. The behaviour of simulated devices can be controlled by a simple plain 
    text configuration file.
  license: MIT
  license_family: MIT
  license_file: LICENSE.txt
  doc_url: https://pyvisa.readthedocs.io/projects/pyvisa-sim/
  dev_url: https://github.com/pyvisa/pyvisa-sim

extra:
  recipe-maintainers:
    - MatthieuDartiailh
    - mtsolmn
