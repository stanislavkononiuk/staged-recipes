commit 8495f8e5b1ed9fd14cd9e179f9ce355dfef7cfb3 (HEAD -> zenodo)
Author: Julian RÃ¼th <julian.rueth@fsfe.org>
Date:   Wed Aug 18 15:00:41 2021 +0200

    Fix compilation error on macOS

diff --git a/libexactreal/src/real_number.cc b/libexactreal/src/real_number.cc
index 3d0aa13..9d1ba49 100644
--- a/libexactreal/src/real_number.cc
+++ b/libexactreal/src/real_number.cc
@@ -88,7 +88,7 @@ std::optional<std::shared_ptr<const RealNumber>> RealNumber::operator/(const Rea

   auto rational = static_cast<std::optional<mpq_class>>(rhs);
   if (rational) {
-    if (rational.value() == 1)
+    if (*rational == 1)
       return this->shared_from_this();
     throw std::logic_error("not implemented: division of generic real number by rational");
   }
diff --git a/libexactreal/src/real_number_product.cc b/libexactreal/src/real_number_product.cc
index a9c7603..7c99551 100644
--- a/libexactreal/src/real_number_product.cc
+++ b/libexactreal/src/real_number_product.cc
@@ -88,7 +88,7 @@ class RealNumberProduct final : public RealNumberBase {
     {
       auto rational = static_cast<std::optional<mpq_class>>(rhs);
       if (rational) {
-        if (rational.value() == 1)
+        if (*rational == 1)
           return this->shared_from_this();
         throw std::logic_error("not implemented: division of product by rational");
       }
diff --git a/libexactreal/test/element.test.cc b/libexactreal/test/element.test.cc
index 21c63d5..31a7b83 100644
--- a/libexactreal/test/element.test.cc
+++ b/libexactreal/test/element.test.cc
@@ -261,10 +261,10 @@ TEST_CASE("Element over QQ", "[element][rational_field]") {

   SECTION("Division") {
     auto x = m->gen(1);
-    REQUIRE(x.truediv(m->gen(0)).value() == x);
-    REQUIRE(x.truediv(x).value() == 1);
-    REQUIRE((x * x).truediv(x).value() == x);
-    REQUIRE(((x + m->gen(0)) * (x - m->gen(0))).truediv(x - m->gen(0)).value() == x + m->gen(0));
+    REQUIRE(*x.truediv(m->gen(0)) == x);
+    REQUIRE(*x.truediv(x) == 1);
+    REQUIRE(*(x * x).truediv(x) == x);
+    REQUIRE(*((x + m->gen(0)) * (x - m->gen(0))).truediv(x - m->gen(0)) == x + m->gen(0));
   }
 }

@@ -347,10 +347,10 @@ TEST_CASE("Elements over Number Field", "[element][number_field]") {
   }

   SECTION("Division") {
-    REQUIRE(x.truediv(m->gen(0)).value() == x);
-    REQUIRE(x.truediv(x).value() == 1);
-    REQUIRE((x * x).truediv(x).value() == x);
-    REQUIRE(((x + m->gen(0)) * (x - m->gen(0))).truediv(x - m->gen(0)).value() == x + m->gen(0));
+    REQUIRE(*x.truediv(m->gen(0)) == x);
+    REQUIRE(*x.truediv(x) == 1);
+    REQUIRE(*(x * x).truediv(x) == x);
+    REQUIRE(*((x + m->gen(0)) * (x - m->gen(0))).truediv(x - m->gen(0)) == x + m->gen(0));
     REQUIRE(!m->gen(0).truediv(x).has_value());
   }



