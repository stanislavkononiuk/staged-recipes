diff --color -Naur xbitinfo-0.0.2.orig/setup.py xbitinfo-0.0.2/setup.py
--- xbitinfo-0.0.2.orig/setup.py	2022-07-11 17:37:19.000000000 -0300
+++ xbitinfo-0.0.2/setup.py	2022-08-29 10:08:18.745686078 -0300
@@ -5,26 +5,6 @@
 import os
 
 from setuptools import find_packages, setup
-from setuptools.command.develop import develop
-from setuptools.command.install import install
-
-julia_install_command = "julia install_julia_packages.jl"
-
-
-class PostDevelopCommand(develop):
-    """Post-installation for development mode."""
-
-    def run(self):
-        develop.run(self)
-        os.system(julia_install_command)
-
-
-class PostInstallCommand(install):
-    """Post-installation for installation mode."""
-
-    def run(self):
-        install.run(self)
-        os.system(julia_install_command)
 
 
 with open("README.md") as readme_file:
@@ -66,10 +46,6 @@
         "Programming Language :: Python :: 3.9",
         "Programming Language :: Python :: 3.10",
     ],
-    cmdclass={
-        "develop": PostDevelopCommand,
-        "install": PostInstallCommand,
-    },
     description="Retrieve information content and compress accordingly.",
     install_requires=requirements,
     license="MIT license",
diff --color -Naur xbitinfo-0.0.2.orig/xbitinfo/julia_helpers.py xbitinfo-0.0.2/xbitinfo/julia_helpers.py
--- xbitinfo-0.0.2.orig/xbitinfo/julia_helpers.py	1969-12-31 21:00:00.000000000 -0300
+++ xbitinfo-0.0.2/xbitinfo/julia_helpers.py	2022-08-29 14:38:19.841081043 -0300
@@ -0,0 +1,128 @@
+"""Functions for initializing the Julia environment and installing deps."""
+import warnings
+from pathlib import Path
+import os
+
+from ._version import __version__
+
+
+def install(julia_project=None, quiet=False):  # pragma: no cover
+    """
+    Install PyCall.jl and all required dependencies for SymbolicRegression.jl.
+
+    Also updates the local Julia registry.
+    """
+    import julia
+
+    julia.install(quiet=quiet)
+
+    julia_project, is_shared = _get_julia_project(julia_project)
+
+    Main = init_julia()
+    Main.eval("using Pkg")
+
+    io = "devnull" if quiet else "stderr"
+    io_arg = f"io={io}" if is_julia_version_greater_eq(Main, "1.6") else ""
+
+    # Can't pass IO to Julia call as it evaluates to PyObject, so just directly
+    # use Main.eval:
+    Main.eval(
+        f'Pkg.activate("{_escape_filename(julia_project)}", shared = Bool({int(is_shared)}), {io_arg})'
+    )
+    if is_shared:
+        # Install SymbolicRegression.jl:
+        _add_to_julia_project(Main, io_arg)
+
+    Main.eval(f"Pkg.instantiate({io_arg})")
+    Main.eval(f"Pkg.precompile({io_arg})")
+    if not quiet:
+        warnings.warn(
+            "It is recommended to restart Python so that the Julia environment is properly initialized."
+        )
+    already_ran = True
+    return already_ran
+
+
+def import_error_string(julia_project=None):
+    s = """
+    Required dependencies are not installed or built.  Run the following code in the Python REPL:
+
+        >>> import xbitinfo
+        >>> xbitinfo.install()
+    """
+
+    if julia_project is not None:
+        s += f"""
+        Tried to activate project {julia_project} but failed."""
+
+    return s
+
+
+def _get_julia_project(julia_project):
+    if julia_project is None:
+        is_shared = True
+        julia_project = f"xbitinfo-{__version__}"
+    else:
+        is_shared = False
+        julia_project = Path(julia_project)
+    return julia_project, is_shared
+
+
+def is_julia_version_greater_eq(Main, version="1.6"):
+    """Check if Julia version is greater than specified version."""
+    return Main.eval(f'VERSION >= v"{version}"')
+
+
+def init_julia():
+    """Initialize julia binary, turning off compiled modules if needed."""
+    from julia.core import JuliaInfo, UnsupportedPythonError
+
+    try:
+        info = JuliaInfo.load(julia="julia")
+    except FileNotFoundError:
+        env_path = os.environ["PATH"]
+        raise FileNotFoundError(
+            f"Julia is not installed in your PATH. Please install Julia and add it to your PATH.\n\nCurrent PATH: {env_path}",
+        )
+
+    if not info.is_pycall_built():
+        raise ImportError(import_error_string())
+
+    Main = None
+    try:
+        from julia import Main as _Main
+
+        Main = _Main
+    except UnsupportedPythonError:
+        # Static python binary, so we turn off pre-compiled modules.
+        from julia.core import Julia
+
+        jl = Julia(compiled_modules=False)
+        from julia import Main as _Main
+
+        Main = _Main
+
+    return Main
+
+
+def _add_to_julia_project(Main, io_arg):
+    Main.bitinformation_spec = Main.PackageSpec(
+        name="BitInformation",
+        url="https://github.com/milankl/BitInformation.jl",
+        rev="v0.6.0",
+    )
+    Main.eval(f"Pkg.add(bitinformation_spec, {io_arg})")
+
+    Main.statsbase_spec = Main.PackageSpec(
+        name="StatsBase",
+        url="https://github.com/JuliaStats/StatsBase.jl",
+        rev="v0.33.21",
+    )
+    Main.eval(f"Pkg.add(statsbase_spec, {io_arg})")
+
+
+def _escape_filename(filename):
+    """Turns a file into a string representation with correctly escaped backslashes"""
+    str_repr = str(filename)
+    str_repr = str_repr.replace("\\", "\\\\")
+    return str_repr
diff --color -Naur xbitinfo-0.0.2.orig/xbitinfo/xbitinfo.py xbitinfo-0.0.2/xbitinfo/xbitinfo.py
--- xbitinfo-0.0.2.orig/xbitinfo/xbitinfo.py	2022-07-11 17:37:19.000000000 -0300
+++ xbitinfo-0.0.2/xbitinfo/xbitinfo.py	2022-08-29 14:38:29.897368645 -0300
@@ -9,6 +9,11 @@
 
 from . import __version__
 
+from .julia_helpers import install
+already_ran = False
+if not already_ran:
+    already_ran = install(quiet=True)
+
 jl = Julia(compiled_modules=False, debug=False)
 from julia import Main  # noqa: E402
 
