# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "d3ploy" %}
{% set version = "0.8" %}
{% set sha256 = "d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  script: python setup.py install

requirements:
  build:
    - python
    - setuptools
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.


about:
  home: http://github.com/ergs/d3ploy
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: BSD-3-Clause
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: BSD
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.txt
  summary: 'Demand Driven Deployment for Cyclus'

  # The remaining entries in this section are optional, but recommended
  description: |
    d3ploy is a demand driven deployment archetype for the cyclus fuel
    cyclus simulator. It uses a variety of methods to predict future
    deployment needs. These include non-optimizing methods, sochastically
    optimizing methods, and deterministic methods. 

extra:
  recipe-maintainers:
    - Robert Flanagan
    - Anthony Scopatz
