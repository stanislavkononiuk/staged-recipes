{% set name = "ward" %}
{% set version = "0.59.0b0" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ward-{{ version }}.tar.gz
  sha256: 6ddecc4fafbda7eb8e95aa86fa22169c24f1843f81d8f753959e348c14d876e8

build:
  number: 0
  skip: true   # [py>=40 or py2k]
  entry_points:
    - ward = ward._run:run
  script: {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - poetry
    - python
  run:
    - click >=8.0.0,<9.0.0
    - click-completion >=0.5.2,<0.6.0
    - click-default-group >=1.2.2,<2.0.0
    - cucumber-tag-expressions >=2.0.0,<3.0.0
    - dataclasses >=0.7,<0.8  # [py==36]
    - pluggy >=0.13.1,<0.14.0
    - pprintpp >=0.4.0,<0.5.0
    - pygments >=2.4.2,<3.0.0
    - python
    - rich >=10.0.0,<11.0.0
    - toml >=0.10.1,<0.11.0

test:
  imports:
    - ward
  commands:
    - pip check
    - ward --help
  requires:
    - pip

about:
  home: https://wardpy.com
  doc_url: https://ward.readthedocs.io/en/latest/
  dev_url: https://github.com/darrenburns/ward
  summary: A modern Python testing framework
  license: MIT
  license_file: LICENSE
  description: |
    Ward is a Python testing framework with a focus on productivity and
    readability. It gives you the tools you need to write well-documented and
    scalable tests. With Ward, you can describe your tests using strings instead
    of function names, and also use plain assert statements, with no need to
    remember assert* method names. Ward provides beautiful output that focuses
    on readability. It also manages test dependencies using a simple but
    powerful fixture system, while parameterising testing, which allows you to
    run a single test on multiple inputs. Ward has support for testing async
    code, and is supported on MacOS, Linux, and Windows. Ward is configurable
    with pyproject.toml, but works out-of-the-box with sensible defaults. It is
    also extendable via a plugin system (coming soon). Above all, Ward is speedy
    – Ward’s suite of ~300 tests completes in ~0.4 seconds on my machine.

extra:
  recipe-maintainers:
    - thewchan
