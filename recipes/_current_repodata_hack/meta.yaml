package:
  name: _current_repodata_hack
  version: 0.0.1

build:
  number: 0
  noarch: generic

test:
  commands:
    - echo "hello"

outputs:
  - name: _current_repodata_hack_gcc_linux_64_75
    build:
      noarch: generic
    requirements:
      - gcc_linux-64 7.5.*

  - name: _current_repodata_hack_gcc_linux_64_84
    build:
      noarch: generic
    requirements:
      - gcc_linux-64 8.4.*
  
  - name: _current_repodata_hack_gcc_linux_aarch64_75
    build:
      noarch: generic
    requirements:
      - gcc_linux-aarch64 7.5.*
  
  - name: _current_repodata_hack_gcc_linux_aarch64_84
    build:
      noarch: generic
    requirements:
      - gcc_linux-aarch64 8.4.*
  
  - name: _current_repodata_hack_gcc_linux_ppc64le_75
    build:
      noarch: generic
    requirements:
      - gcc_linux-ppc64le 7.5.*
  
  - name: _current_repodata_hack_gcc_linux_ppc64le_84
    build:
      noarch: generic
    requirements:
      - gcc_linux-ppc64le 8.4.*

about:
  home: https://github.com/conda-forge/_current_repodata_hack-feedstock
  license: LicenseRef-OTHER
  summary: Meta-package to fix current_repodata
  description: |
    As of writing, conda-forge has versions of the linux compilers that are ahead of the 
    ones in the global pinnings. The current_repodata.json file only pulls in the latest 
    version of a package by default. Thus anytime one asks for the compilers in the pinnings,
    the solver will always fail on current_repodata.json and have to pull all of the repodata. 
    The packages here make sure the latest versions of the compilers we use are in 
    current_repodata.json by depending on those packages. Thus it solves the solver inefficiency. 
    It also helps in cases when the solver appears to pull older builds of the compilers when they are 
    not explicitly asked for in the environment.

extra:
  recipe-maintainers:
    - isuruf
