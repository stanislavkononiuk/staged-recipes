Handle semver-style version tags with prerelease and buildmetadata
information as used for the development releases, and gracefully deal
with repositories in a "detached HEAD" state.  The repository will
need a MICROED-TOOLS-VERSION-FILE file in the tvips directory,
otherwise the patched tree will be flagged as dirty.  The version file
cannot be named VERSION, because that will clash with a
system-provided header on case-insensitive macOS filesystems.
--- tvips/CMakeLists.txt.orig
+++ tvips/CMakeLists.txt
@@ -150,10 +150,10 @@ flex_target(ADOC adoc.l ${CMAKE_CURRENT_BINARY_DIR}/lex.adoc.c)
 flex_target(SLICE slice.l ${CMAKE_CURRENT_BINARY_DIR}/lex.slice.c)
 
 
-# Add rules to generate the LICENSE, README, and VERSION files in the
-# binary directory, which are required by the dist target.  The first
-# two files rely on pandoc (1.15.0.6 is OK, 1.12.3.1 is not), the
-# latter requires git.
+# Add rules to generate the LICENSE, README, and
+# MICROED-TOOLS-VERSION-FILE files in the binary directory, which are
+# required by the dist target.  The first two files rely on pandoc
+# (1.15.0.6 is OK, 1.12.3.1 is not), the latter requires git.
 #
 # XXX The "--reference-links" option does not create numbered links,
 # and the lack of paragraph indentation makes reading a tad difficult
@@ -188,10 +188,10 @@ add_custom_command(
 add_custom_command(
   COMMAND ${CMAKE_COMMAND}
     "-DGIT=${GIT}"
-    "-DPATH_VERSION=${PROJECT_BINARY_DIR}/VERSION"
+    "-DPATH_VERSION=${PROJECT_BINARY_DIR}/MICROED-TOOLS-VERSION-FILE"
     "-DPROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}"
     -P "${PROJECT_SOURCE_DIR}/cmake/Modules/WriteVERSION.cmake"
-  OUTPUT "${PROJECT_BINARY_DIR}/VERSION"
+  OUTPUT "${PROJECT_BINARY_DIR}/MICROED-TOOLS-VERSION-FILE"
   VERBATIM)
 
 
@@ -208,20 +208,20 @@ include_directories(
 
 # The _update_version_h target conditionally regenerates version.h: it
 # has no output file and version.h is always considered out of date.
-# If ${PROJECT_SOURCE_DIR}/VERSION exists, its contents determine the
-# definitions in config.h; otherwise, these they are taken from the
-# output of git.  Because the number of source files that depend on
-# version.h is much smaller than the number of dependencies on
-# config.h, this reduces the amount of rebuilding when version
-# information changes due to introducing changes in a clean tree or
-# committing.
+# If ${PROJECT_SOURCE_DIR}/MICROED-TOOLS-VERSION-FILE exists, its
+# contents determine the definitions in config.h; otherwise, these
+# they are taken from the output of git.  Because the number of source
+# files that depend on version.h is much smaller than the number of
+# dependencies on config.h, this reduces the amount of rebuilding when
+# version information changes due to introducing changes in a clean
+# tree or committing.
 add_custom_target(_update_version_h
   BYPRODUCTS "${PROJECT_BINARY_DIR}/version.h"
   COMMAND ${CMAKE_COMMAND}
     "-DGIT=${GIT}"
     "-DPATH_IN=${PROJECT_SOURCE_DIR}/version.h.in"
     "-DPATH_OUT=${PROJECT_BINARY_DIR}/version.h"
-    "-DPATH_VERSION=${PROJECT_SOURCE_DIR}/VERSION"
+    "-DPATH_VERSION=${PROJECT_SOURCE_DIR}/MICROED-TOOLS-VERSION-FILE"
     "-DPROJECT_NAME=${PROJECT_NAME}"
     "-DPROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}"
     -P "${PROJECT_SOURCE_DIR}/cmake/Modules/UpdateVersionH.cmake"
@@ -637,14 +637,14 @@ add_custom_command(
   COMMAND ${CMAKE_COMMAND} -E copy
     "${PROJECT_BINARY_DIR}/LICENSE"
     "${PROJECT_BINARY_DIR}/README"
-    "${PROJECT_BINARY_DIR}/VERSION"
+    "${PROJECT_BINARY_DIR}/MICROED-TOOLS-VERSION-FILE"
     "${PROJECT_BINARY_DIR}/tiff2smv.1"
     "${PROJECT_BINARY_DIR}/tiff2smv.pdf"
     "${PROJECT_BINARY_DIR}/tvips2smv.1"
     "${PROJECT_BINARY_DIR}/dist_extra"
   DEPENDS "${PROJECT_BINARY_DIR}/LICENSE"
   DEPENDS "${PROJECT_BINARY_DIR}/README"
-  DEPENDS "${PROJECT_BINARY_DIR}/VERSION"
+  DEPENDS "${PROJECT_BINARY_DIR}/MICROED-TOOLS-VERSION-FILE"
   DEPENDS "${PROJECT_BINARY_DIR}/tiff2smv.1"
   DEPENDS "${PROJECT_BINARY_DIR}/tiff2smv.pdf"
   DEPENDS "${PROJECT_BINARY_DIR}/tvips2smv.1"
--- tvips/cmake/Modules/MakeDist.cmake.orig
+++ tvips/cmake/Modules/MakeDist.cmake
@@ -11,13 +11,13 @@
 
 # Determine the version, patch level, and the source status.  This
 # information must be directly derived from git; this module will fail
-# if ${PROJECT_SOURCE_DIR}/VERSION exists or if
+# if ${PROJECT_SOURCE_DIR}/MICROED-TOOLS-VERSION-FILE exists or if
 # microed_tools_get_version() returns a bogus version.
 # PACKAGE_TARNAME is canonicalized from ${PROJECT_NAME}.
 include("${PROJECT_SOURCE_DIR}/cmake/Modules/MicroEDToolsFunctions.cmake")
 
-if (EXISTS "${PROJECT_SOURCE_DIR}/VERSION")
-  message(SEND_ERROR "${PROJECT_SOURCE_DIR}/VERSION exists")
+if (EXISTS "${PROJECT_SOURCE_DIR}/MICROED-TOOLS-VERSION-FILE")
+  message(SEND_ERROR "${PROJECT_SOURCE_DIR}/MICROED-TOOLS-VERSION-FILE exists")
 endif()
 
 microed_tools_string(CANONICALIZE PACKAGE_TARNAME "${PROJECT_NAME}")
--- tvips/cmake/Modules/MicroEDToolsFunctions.cmake.orig
+++ tvips/cmake/Modules/MicroEDToolsFunctions.cmake
@@ -18,7 +18,7 @@ function(microed_tools_get_version_git)
     ${ARGN})
 
   execute_process(
-    COMMAND "${_GIT}" describe --abbrev=7 --match "v[0-9]*" --dirty=-dirty
+    COMMAND "${_GIT}" describe --dirty --long --match "v[0-9]*" --tags
     ERROR_VARIABLE errors
     OUTPUT_VARIABLE descriptions
     OUTPUT_STRIP_TRAILING_WHITESPACE
@@ -71,7 +71,7 @@ function(microed_tools_get_version)
   cmake_parse_arguments(
     ""
     ""
-    "BRANCH;COMMIT;GIT;MAJOR;MINOR;PATCH;PATH_VERSION;STATUS;TWEAK"
+    "BRANCH;BUILDMETADATA;COMMIT;GIT;MAJOR;MINOR;PATCH;PATH_VERSION;PRERELEASE;STATUS;TWEAK"
     ""
     ${ARGN})
 
@@ -108,6 +108,18 @@ function(microed_tools_get_version)
     set("${_PATCH}" "${patch}" PARENT_SCOPE)
   endif()
 
+  if(DEFINED _PRERELEASE)
+    string(REGEX MATCH "^v[0-9]+\\.[0-9]+\\.[0-9]+-[^0-9][^+-]*" prerelease "${vi}")
+    string(REGEX REPLACE "^v[0-9]+\\.[0-9]+\\.[0-9]+-" "" prerelease "${prerelease}")
+    set("${_PRERELEASE}" "${prerelease}" PARENT_SCOPE)
+  endif()
+
+  if(DEFINED _BUILDMETADATA)
+    string(REGEX MATCH "^v[0-9]+\\.[0-9]+\\.[0-9]+-[^0-9][^+-]*\\+[^-]+" buildmetadata "${vi}")
+    string(REGEX REPLACE "^v[0-9]+\\.[0-9]+\\.[0-9]+-[^0-9][^+-]*\\+" "" buildmetadata "${buildmetadata}")
+    set("${_BUILDMETADATA}" "${buildmetadata}" PARENT_SCOPE)
+  endif()
+
   if(DEFINED _COMMIT)
     string(REGEX MATCH "^v[\\.0-9-]+-g[0-9a-f]+" commit "${vi}")
     string(REGEX REPLACE "^v[\\.0-9-]+-g" "" commit "${commit}")
@@ -116,7 +128,10 @@ function(microed_tools_get_version)
   endif()
 
   if(DEFINED _BRANCH)
-    string(REGEX MATCH "-[^-]+$" branch "${vi}")
+    string(REGEX MATCH "-\\(.+\\)$" branch "${vi}")
+    if("${branch}" STREQUAL "")
+      string(REGEX MATCH "-[^-]+$" branch "${vi}")
+    endif()
     string(REGEX REPLACE "^-" "" branch "${branch}")
     string(TOLOWER "${branch}" branch)
     set("${_BRANCH}" "${branch}" PARENT_SCOPE)
--- tvips/cmake/Modules/UpdateVersionH.cmake.orig
+++ tvips/cmake/Modules/UpdateVersionH.cmake
@@ -19,10 +19,12 @@ microed_tools_get_version(
   GIT          "${GIT}"
   PATH_VERSION "${PATH_VERSION}"
   BRANCH       PACKAGE_VERSION_BRANCH
+  BUILDMETADATA PACKAGE_VERSION_BUILDMETADATA
   COMMIT       PACKAGE_VERSION_COMMIT
   MAJOR        PACKAGE_VERSION_MAJOR
   MINOR        PACKAGE_VERSION_MINOR
   PATCH        PACKAGE_VERSION_PATCH
+  PRERELEASE   PACKAGE_VERSION_PRERELEASE
   STATUS       PACKAGE_VERSION_STATUS
   TWEAK        PACKAGE_VERSION_TWEAK)
 
--- tvips/util.c.orig
+++ tvips/util.c
@@ -372,25 +372,31 @@ version(FILE *stream)
 
     } else {
         tot += ret = fprintf(
-            stream, "%s (%s) %d.%d.%d\n",
+            stream, "%s (%s) %d.%d.%d%s%s\n",
             getprogname(),
             PACKAGE_NAME,
             PACKAGE_VERSION_MAJOR,
             PACKAGE_VERSION_MINOR,
-            PACKAGE_VERSION_PATCH);
+            PACKAGE_VERSION_PATCH,
+            strlen(PACKAGE_VERSION_PRERELEASE) > 0
+            ? "-"  PACKAGE_VERSION_PRERELEASE
+            : "",
+            strlen(PACKAGE_VERSION_BUILDMETADATA) > 0
+            ? "+"  PACKAGE_VERSION_BUILDMETADATA
+            : "");
     }
     if (ret < 0)
         return (ret);
 
     if (PACKAGE_VERSION_TWEAK > 0 ||
-        strcasecmp(PACKAGE_VERSION_BRANCH, "master") != 0 ||
         strcasecmp(PACKAGE_VERSION_STATUS, "") != 0) {
         tot += ret = fprintf(
             stream,
             "    Built from %s%s%s\n"
             "    by %s@%s (%s)\n",
             PACKAGE_VERSION_BRANCH,
-            strlen(PACKAGE_VERSION_COMMIT) > 0
+            strpbrk(PACKAGE_VERSION_BRANCH, " \t") == NULL
+            && strlen(PACKAGE_VERSION_COMMIT) > 0
             ? "." PACKAGE_VERSION_COMMIT
             : "",
             strcasecmp(PACKAGE_VERSION_STATUS, "dirty") == 0
--- tvips/version.h.in.orig
+++ tvips/version.h.in
@@ -52,6 +52,10 @@
  */
 #define PACKAGE_VERSION_BRANCH "@PACKAGE_VERSION_BRANCH@"
 
+/* Build metadata identifier, if any
+ */
+#define PACKAGE_VERSION_BUILDMETADATA "@PACKAGE_VERSION_BUILDMETADATA@"
+
 /* The integer major version of the package
  */
 #define PACKAGE_VERSION_MAJOR @PACKAGE_VERSION_MAJOR@
@@ -64,6 +68,10 @@
  */
 #define PACKAGE_VERSION_PATCH @PACKAGE_VERSION_PATCH@
 
+/* Pre-release identifier, if any
+ */
+#define PACKAGE_VERSION_PRERELEASE "@PACKAGE_VERSION_PRERELEASE@"
+
 /* The number of additional commits on top of the tagged object
  */
 #define PACKAGE_VERSION_TWEAK @PACKAGE_VERSION_TWEAK@
