{% set name = "pypmc" %}
{% set version = "1.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 17909307639f8fabbb1248031befdeb34e5e87ba0a06ed1ebe1dd262b303e799

build:
  number: 0
  # may need to later add "skip: True  # [win]" to disable Windows.
  skip: true  # [py<30 or python_impl == "pypy"]
  script: {{ PYTHON }} -m pip install .[plotting,parallelization,nose] -vv

requirements:
  build:
    # cython project, so need a compiler
    - {{ compiler('c') }}
    - cython>=0.21
  host:
    - python
    - pip
    - cython>=0.21
    - numpy>=1.6, <2.0
    - nose
    - mpi4py

  run:
    - python
    - mpi4py
    - numpy
    - matplotlib-base
    - pypmc
    - iminuit


test:
  imports:
    - pypmc
  source_files:
    - tests/*
  requires:
    - nosetests

about:
  home: https://johannesbuchner.github.io/snowline/
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: LICENSE
  summary: Fit and compare complex models reliably and rapidly. Advanced Nested Sampling.

  description: |
    pypmc is a python package focusing on adaptive importance sampling. It can be used for integration and sampling from a user-defined target density. A typical application is Bayesian inference, where one wants to sample from the posterior to marginalize over parameters and to compute the evidence. The key idea is to create a good proposal density by adapting a mixture of Gaussian or studentâ€™s t components to the target density. The package is able to efficiently integrate multimodal functions in up to about 30-40 dimensions at the level of 1% accuracy or less. For many problems, this is achieved without requiring any manual input from the user about details of the function. Importance sampling supports parallelization on multiple machines via mpi4py.
    
    Useful tools that can be used stand-alone include:
    
    * importance sampling (sampling & integration)
    * adaptive Markov chain Monte Carlo (sampling)
    * variational Bayes (clustering)
    * population Monte Carlo (clustering)

  doc_url: https://pypmc.github.io/
  dev_url: https://github.com/pypmc/pypmc/

extra:
  recipe-maintainers:
    - JohannesBuchner
