{% set name = "jupyter-project" %}
{% set version = "0.1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name|replace("-", "_") }}-{{ version }}.tar.gz
  sha256: 379bf82a815c5be5896b8b8103013cae8ba5bd83d738d2d8d3901aa36e49dcf2

build:
  noarch: python
  number: 0
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv"

requirements:
  host:
    - jupyter-packaging
    - jupyterlab ~=1.2
    - nodejs
    - python ~=3.5
    - pip
  run:
    - cookiecutter
    - jinja2 ~=2.9
    - jsonschema
    - jupyterlab ~=1.2
    - python ~=3.5

test:
  imports:
    - jupyter_project
  commands:
    - jupyter serverextension list
    - jupyter labextension list
    - jupyter lab build

about:
  home: https://github.com/fcollonval/jupyter-project
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: 'An JupyterLab extension to handle project and files templates; optionally coupled with an conda environment.'
  description: |
    An JupyterLab extension to handle (a unique) project and files templates. It adds the ability
    to generate projects from a cookiecutter <https://cookiecutter.readthedocs.io/en/latest/> 
    template as well as generate files from Jinja2 <https://jinja.palletsprojects.com/en/master/>
    templates. Those templates can be parametrized directly from the frontend by specifying JSON 
    schemas <https://json-schema.org/>.
    If you install jupyter-conda and its JupyterLab extension jupyterlab_conda <https://github.com/fcollonval/jupyter_conda>,
    you can synchronize a conda environment with the project.
  dev_url: https://github.com/fcollonval/jupyter-project

extra:
  recipe-maintainers:
    - fcollonval
