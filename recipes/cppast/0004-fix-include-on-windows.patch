From 83f3eca31b6ddf869cee4f165a0db09813c6a4e6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Sun, 18 Sep 2022 16:17:47 +0300
Subject: [PATCH] Use INCLUDE environment variable

this patch is only relevant on Windows and only for conda-forge.

On Windows, when installing cxx-compiler, we get a clang with the cl.exe
wrappers. The packages that cxx-compiler pulls in, set the environment
variables so that cl.exe uses conda-forge's include paths and libraries,
namely it sets the INCLUDE environment variable.

However, this does not configure the environment variables that clang++
uses. Therefore, the logic that this patch removes still uses the system
header files from MSVC which causes problems.

Here, we tell clang++ to also use the INCLUDE variable for cl.exe since
that provides the correct default include path.

Note that we do not need to do anything about library paths since cppast
does not perform any linking or compiling but only runs the
preprocessor.
---
 src/libclang/libclang_parser.cpp | 64 +++++++++-----------------------
 1 file changed, 18 insertions(+), 46 deletions(-)

diff --git a/src/libclang/libclang_parser.cpp b/src/libclang/libclang_parser.cpp
index cdacc8a..dc77fcf 100644
--- a/src/libclang/libclang_parser.cpp
+++ b/src/libclang/libclang_parser.cpp
@@ -260,53 +260,25 @@ bool is_valid_binary(const std::string& binary)
 
 void add_default_include_dirs(libclang_compile_config& config)
 {
-    std::string  verbose_output;
-    tpl::Process process(
-        detail::libclang_compile_config_access::clang_binary(config) + " -x c++ -v -", "",
-        [](const char*, std::size_t) {},
-        [&](const char* str, std::size_t n) { verbose_output.append(str, n); }, true);
-    process.write("", 1);
-    process.close_stdin();
-    process.get_exit_status();
-
-    auto pos = verbose_output.find("#include <...>");
-    DEBUG_ASSERT(pos != std::string::npos, detail::assert_handler{});
-    while (verbose_output[pos] != '\n')
-        ++pos;
-    ++pos;
-
-    // now every line is an include path, starting with a space
-    while (verbose_output[pos] == ' ')
-    {
-        auto start = pos + 1;
-        while (verbose_output[pos] != '\r' && verbose_output[pos] != '\n')
-            ++pos;
-        auto end = pos;
-        ++pos;
-
-        auto        line = verbose_output.substr(start, end - start);
-        std::string path;
-        for (auto c : line)
-        {
-            if (c == ' ')
-            { // escape spaces
-#if CPPAST_DETAIL_WINDOWS
-                path += "^ ";
-#else
-                path += "\\ ";
-#endif
-            }
-            // clang under MacOS adds comments to paths using '(' at the end, so they have to be
-            // ignored however, Windows uses '(' in paths, so they don't have to be ignored
-#if !CPPAST_DETAIL_WINDOWS
-            else if (c == '(')
-                break;
-#endif
-            else
-                path += c;
-        }
+    const char* include = std::getenv("INCLUDE");
+    if (include == nullptr)
+      return;
+
+    std::string paths = include;
+    while (true) {
+      std::string path = paths;
+
+      size_t end = paths.find(';');
+      if (end != std::string::npos)
+        path = path.substr(0, end);
+
+      if (!path.empty())
+        config.add_include_dir(path);
+
+      if (end == std::string::npos)
+        break;
 
-        config.add_include_dir(std::move(path));
+      paths = paths.substr(end + 1);
     }
 }
 } // namespace
-- 
2.37.3

