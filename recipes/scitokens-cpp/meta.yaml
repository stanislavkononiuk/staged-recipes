{% set name = "scitokens-cpp" %}
{% set version = "0.6.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/scitokens/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: 3a5252ff8327696b109cd9ee70eaeb028a56b86f44149aaac10580df55fb4d26
  patches:
    # don't vendor gtest, we have it
    # see https://github.com/scitokens/scitokens-cpp/pull/47
    - no-vendor-gtest.patch
    # use gnuinstalldirs
    # see https://github.com/scitokens/scitokens-cpp/pull/45
    - gnuinstalldirs.patch

build:
  number: 0
  run_exports:
    - {{ pin_subpackage("scitokens-cpp", max_pin="x") }}
  skip: true  # [win]

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake
    - make  # [unix]
    - ninja  # [not unix]
    - pkg-config
  host:
    - gtest
    - jwt-cpp 0.4.*
    - libcurl
    - libuuid
    - openssl
    - picojson
    - sqlite

test:
  commands:
    - test -f ${PREFIX}/include/scitokens/scitokens.h  # [unix]
    - test -f ${PREFIX}/lib/libSciTokens${SHLIB_EXT}  # [unix]

about:
  home: https://github.com/scitokens/scitokens-cpp
  dev_url: https://github.com/scitokens/scitokens-cpp
  summary: A C++ implementation of the SciTokens library with a C library interface
  license: Apache-2.0
  license_file: LICENSE
  description: |
    SciTokens provide a token format for distributed authorization.
    The tokens are self-describing, can be verified in a distributed
    fashion (no need to contact the issuer to determine if the token is
    valid). This is convenient for a federated environment where several
    otherwise-independent storage endpoints want to delegate trust for an
    issuer for managing a storage allocation.

extra:
  recipe-maintainers:
    - duncanmmacleod
